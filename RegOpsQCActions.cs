using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using CMCai.Models;
using System.Configuration;
using System.Data;
using Oracle.ManagedDataAccess.Client;
using Newtonsoft.Json;
using System.IO;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using System.Text;
using Ionic.Zip;
using Aspose.Words;
using Aspose.Words.Layout;
using Aspose.Words.Markup;
using Aspose.Words.Tables;
using Aspose.Words.Fields;
using System.Collections;
using Aspose.Words.Drawing;
using Aspose.Words.Replacing;
using Aspose.Words.Properties;
using System.Net;
using System.Data.Common;
using System.Text.RegularExpressions;
using System.Threading;
using Aspose.Words.Saving;
using inetsoftware.Pdfc;
using inetsoftware.Pdfc.Presenter;
using System.Globalization;
using Aspose.Cells.Drawing;
using Draftable.CompareAPI.Client;
using System.Net.Mail;

namespace CMCai.Actions
{
    public class RegOpsQCActions
    {

        public ErrorLogger erLog = new ErrorLogger();
        public string m_ConnectionString = ConfigurationManager.AppSettings["CmcConnection"].ToString();
        public string m_DummyConn = ConfigurationManager.AppSettings["DummySchema"].ToString();
        public string m_Conn = ConfigurationManager.AppSettings["CmcConnection"].ToString();
        public static string CompareKey1 = ConfigurationManager.AppSettings["DraftableCompareKey1"].ToString();
        public static string CompareKey2 = ConfigurationManager.AppSettings["DraftableCompareKey2"].ToString();



        public string m_DownloadFolderPathQC;
        public string m_SourceFolderPathQC;
        public string zipExactpath;
        public string WordPredictTemplate;
        public string m_SourceFolderPathExternal;
        public string m_SourceFolderPathTempFiles = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "REGaiTempFiles\\";

        OracleCommand cmd;
        OracleCommand cmd1;
        OracleDataAdapter da;
        OracleConnection conec;
        private readonly string EMAIL = ConfigurationManager.AppSettings["Administrator"].ToString();
        private readonly string URL = ConfigurationManager.AppSettings["URL"].ToString();
        public RegOpsQCActions()
        {
            m_DownloadFolderPathQC = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + HttpContext.Current.Session["OrgId"] + "\\RegOpsQCFiles\\";
            m_SourceFolderPathQC = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + HttpContext.Current.Session["OrgId"] + "\\RegOpsQCSource\\";
            zipExactpath = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + HttpContext.Current.Session["OrgId"] + "\\ZipExtracts\\";
            WordPredictTemplate = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + HttpContext.Current.Session["OrgId"] + "\\Template\\";
            m_SourceFolderPathExternal = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + HttpContext.Current.Session["OrgId"];
        }

        public RegOpsQCActions(string orgId)
        {
            m_DownloadFolderPathQC = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + orgId + "\\RegOpsQCFiles\\";
            m_SourceFolderPathQC = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + orgId + "\\RegOpsQCSource\\";
            zipExactpath = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + orgId + "\\ZipExtracts\\";
            WordPredictTemplate = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + orgId + "\\Template\\";
            m_SourceFolderPathExternal = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + orgId;
        }

        public string GetConnectionInfo(Int64 userID)
        {
            string m_Result = string.Empty;
            Connection conn = new Connection();
            conn.connectionstring = m_Conn;
            try
            {
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("SELECT org.ORGANIZATION_SCHEMA as ORGANIZATION_SCHEMA,org.ORGANIZATION_PASSWORD as ORGANIZATION_PASSWORD FROM USERS us LEFT JOIN ORGANIZATIONS org ON org.ORGANIZATION_ID=us.ORGANIZATION_ID WHERE USER_ID=" + userID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    m_Result = ds.Tables[0].Rows[0]["ORGANIZATION_SCHEMA"].ToString() + "|" + ds.Tables[0].Rows[0]["ORGANIZATION_PASSWORD"].ToString();
                }
                return m_Result;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return m_Result;
            }

        }

        /// <summary>
        /// to get check list data from library table
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetQCCheckListFromLibrary(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                long CreatedID = tpObj.Created_ID;
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn; string query = string.Empty;
                        DataSet ds = new DataSet();
                        if (tpObj.File_Format == "Word")
                            query = "select * from  Library where Library_Name ='QC_CHECKLIST_GROUPS' and status=1";
                        else
                            query = "select * from  Library where Library_Name ='QC_PDF_CHECKLIST_GROUPS' and status=1";
                        ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            tpLst = (from DataRow dr in ds.Tables[0].Rows
                                     select new RegOpsQC()
                                     {
                                         Library_ID = Convert.ToInt32(dr["Library_ID"].ToString()),
                                         Library_Value = dr["LIBRARY_VALUE"].ToString(),
                                         GroupIndex = dr.Table.Rows.IndexOf(dr),
                                         CheckList = GetcheckListData(CreatedID, Convert.ToInt32(dr["Library_ID"].ToString()), dr.Table.Rows.IndexOf(dr))
                                     }).ToList();
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }

        }

        public List<string> GetControlValuesListnew(int SubCheckId, string Library_Name, DataSet ds)
        {
            List<string> ControlValues = new List<string>();
            try
            {

                if (Library_Name.Contains("Dropdown") || Library_Name.Contains("Multiselect"))
                {
                    if (Library_Name.Contains("|"))
                    {
                        string[] controltp = Library_Name.Split('|');
                        DataTable dt = new DataTable();
                        DataView dv = new DataView(ds.Tables[0]);
                        dv.RowFilter = "SubCheckListID = " + SubCheckId;

                        dt = dv.ToTable(true, "subControlsValue");


                        ControlValues = (from DataRow dr in dt.Rows select dr["subControlsValue"].ToString()).ToList();
                    }
                }
                return ControlValues;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return ControlValues;
            }
            //finally
            //{
            //    conec.Close();
            //}
        }

        public List<string> GetCheckControlValuesList(int CheckId, string Library_Name, DataSet ds)
        {
            List<string> ControlValues = new List<string>();
            try
            {
                if (Library_Name.Contains("Dropdown") || Library_Name.Contains("Multiselect"))
                {
                    if (Library_Name.Contains("|"))
                    {
                        string[] controltp = Library_Name.Split('|');
                        DataTable dt = new DataTable();
                        DataView dv = new DataView(ds.Tables[0]);
                        dv.RowFilter = "CheckList_ID = " + CheckId;

                        dt = dv.ToTable(true, "parentControlsValue");
                        ControlValues = (from DataRow dr in dt.Rows select dr["parentControlsValue"].ToString()).ToList();
                    }
                }
                return ControlValues;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return ControlValues;
            }
            //finally
            //{
            //    conec.Close();
            //}
        }


        public List<string> GetControlValuesList(int Created_ID, string Library_Name)
        {
            List<string> ControlValues = new List<string>();
            try
            {
                DataSet ds = new DataSet();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(Created_ID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conec = new OracleConnection();
                conec.ConnectionString = m_DummyConn;
                conec.Open();
                if (Library_Name.Contains("Dropdown"))
                {
                    if (Library_Name.Contains("|"))
                    {
                        string[] controltp = Library_Name.Split('|');
                        cmd = new OracleCommand("Select * from  Library where LIBRARY_NAME =:Library_Name ", conec);
                        cmd.Parameters.Add("Library_Name", controltp[1].ToString());
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            ControlValues = (from DataRow dr in ds.Tables[0].Rows select dr["LIBRARY_VALUE"].ToString()).ToList();
                        }
                    }
                }
                return ControlValues;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return ControlValues;
            }
            finally
            {
                conec.Close();
            }
        }


        /// <summary>
        /// to get checklist names by passing group name parent key
        /// </summary>
        /// <param name="created_ID"></param>
        /// <param name="library_ID"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetcheckListDatanew(long created_ID, long library_ID, long index, DataSet ds, string docType)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataTable dt = new DataTable();
                    DataView dv = new DataView(ds.Tables[0]);
                    dv.RowFilter = "GroupCheckId = " + library_ID;

                    dt = dv.ToTable(true, "CheckName", "CheckList_ID", "HELP_TEXT", "CHECK_UNITS", "CheckType", "controltype", "PARENT_KEY", "Check_Order");

                    tpLst = (from DataRow dr in dt.Rows
                             select new RegOpsQC()
                             {
                                 Created_ID = created_ID,
                                 Library_ID = Convert.ToInt32(dr["CheckList_ID"].ToString()),
                                 Library_Value = dr["CheckName"].ToString(),
                                 Group_Check_ID = library_ID,
                                 CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                 HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                 PARENT_KEY = Convert.ToInt64(dr["PARENT_KEY"].ToString()),
                                 GroupIndex = dr.Table.Rows.IndexOf(dr),
                                 checkvalue = "0",
                                 DocType = docType,
                                 Check_Order_ID = dr["Check_Order"].ToString() != "" ? Convert.ToInt32(dr["Check_Order"].ToString()) : 0,
                                 Type = dr["CheckType"].ToString() != "" ? Convert.ToInt64(dr["CheckType"].ToString()) : 0, //Convert.ToInt64(dr["CheckType"].ToString()),
                                 Control_Type = dr["controltype"].ToString() != "" ? dr["controltype"].ToString().Contains("Dropdown") || dr["controltype"].ToString().Contains("Multiselect") ? dr["controltype"].ToString().Split('|')[0].ToString() : dr["controltype"].ToString() : "",
                                 Library_Name = dr["controltype"].ToString() != "" ? dr["controltype"].ToString().Contains("Dropdown") || dr["controltype"].ToString().Contains("Multiselect") ? dr["controltype"].ToString().Split('|')[1].ToString() : "" : "",
                                 Control_Values = GetCheckControlValuesList(Convert.ToInt32(dr["CheckList_ID"].ToString()), dr["controltype"].ToString(), ds),
                                 SubCheckList = GetSubCheckListDatanew(Convert.ToInt32(created_ID), Convert.ToInt32(dr["CheckList_ID"].ToString()), library_ID, ds, docType)
                             }).ToList();
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            //finally
            //{
            //    conec.Close();
            //}
        }

        public List<RegOpsQC> GetPlanByJobID(RegOpsQC regObj)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            try
            {
                DataSet ds = new DataSet();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(regObj.Created_ID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conec = new OracleConnection();
                conec.ConnectionString = m_DummyConn;
                conec.Open();
                cmd = new OracleCommand("SELECT distinct  pr.PREFERENCE_NAME,pr.ID as Plan_ID FROM REGOPS_QC_VALIDATION_DETAILS REG left join REGOPS_QC_PREFERENCES pr on pr.ID = REG.PREFERENCE_ID WHERE REG.JOB_ID =:Job_ID", conec);
                cmd.Parameters.Add("Job_ID", regObj.Job_ID);
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    tpLst = (from DataRow dr in ds.Tables[0].Rows
                             select new RegOpsQC()
                             {
                                 Job_ID = dr["Plan_ID"].ToString(),
                                 Preference_Name = dr["PREFERENCE_NAME"].ToString(),
                             }).ToList();
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        public List<RegOpsQC> GetcheckListData(long created_ID, long library_ID, long index)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            try
            {
                DataSet ds = new DataSet();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(created_ID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conec = new OracleConnection();
                conec.ConnectionString = m_DummyConn;
                conec.Open();
                cmd = new OracleCommand("Select * from  Library where Parent_key =:Library_ID and status=1 order by Check_order", conec);
                cmd.Parameters.Add("Library_ID", library_ID);
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    tpLst = (from DataRow dr in ds.Tables[0].Rows
                             select new RegOpsQC()
                             {
                                 Created_ID = created_ID,
                                 Library_ID = Convert.ToInt32(dr["Library_ID"].ToString()),
                                 Library_Value = dr["LIBRARY_VALUE"].ToString(),
                                 Group_Check_ID = library_ID,
                                 CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                 HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                 PARENT_KEY = Convert.ToInt64(dr["PARENT_KEY"].ToString()),
                                 GroupIndex = dr.Table.Rows.IndexOf(dr),
                                 checkvalue = "0",
                                 Type = Convert.ToInt64(dr["TYPE"].ToString()),
                                 Control_Type = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[0].ToString() : dr["CONTROL_TYPE"].ToString(),
                                 Library_Name = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[1].ToString() : "",
                                 Control_Values = GetControlValuesList(Convert.ToInt32(created_ID), dr["CONTROL_TYPE"].ToString()),
                                 SubCheckList = GetSubCheckListData(Convert.ToInt32(created_ID), Convert.ToInt32(dr["Library_ID"].ToString()), library_ID)
                             }).ToList();
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        public List<RegOpsQC> GetSubCheckListDatanew(long created_ID, long library_ID, long MainGroupId, DataSet ds, string docType)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataTable dt = new DataTable();
                    DataView dv = new DataView(ds.Tables[0]);
                    dv.RowFilter = "ParentCheckId = " + library_ID;

                    dt = dv.ToTable(true, "SubCheckName", "SubCheckListID", "SubCheckUnits", "SubType", "subControls", "ParentCheckId");

                    if (dt.Rows.Count > 0)
                    {
                        tpLst = (from DataRow dr in dt.Rows
                                 select new RegOpsQC()
                                 {
                                     Created_ID = created_ID,
                                     Sub_Library_ID = Convert.ToInt32(dr["SubCheckListID"].ToString()),
                                     Library_Value = dr["SubCheckName"].ToString(),
                                     CHECK_UNITS = dr["SubCheckUnits"].ToString(),
                                     PARENT_KEY = Convert.ToInt64(dr["ParentCheckId"].ToString()),
                                     Group_Check_ID = MainGroupId,
                                     checkvalue = "0",
                                     DocType = docType,
                                     Type = dr["SubType"].ToString() != "" ? Convert.ToInt64(dr["SubType"].ToString()) : 0,
                                     Control_Type = dr["subControls"].ToString().Contains("Dropdown") || dr["subControls"].ToString().Contains("Multiselect") ? dr["subControls"].ToString().Split('|')[0].ToString() : dr["subControls"].ToString(),
                                     Library_Name = dr["subControls"].ToString().Contains("Dropdown") || dr["subControls"].ToString().Contains("Multiselect") ? dr["subControls"].ToString().Split('|')[1].ToString() : "",
                                     Control_Values = GetControlValuesListnew(Convert.ToInt32(dr["SubCheckListID"].ToString()), dr["subControls"].ToString(), ds)
                                 }).ToList();
                    }

                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            //finally
            //{
            //    conec.Close();
            //}

        }

        public List<RegOpsQC> GetSubCheckListData(long created_ID, long library_ID, long MainGroupId)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            try
            {
                DataSet ds = new DataSet();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(created_ID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conec = new OracleConnection();
                conec.ConnectionString = m_DummyConn;
                conec.Open();
                cmd = new OracleCommand("Select * from  Library where Parent_key =:Library_ID and status=1", conec);
                cmd.Parameters.Add("Library_ID", library_ID);
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    tpLst = (from DataRow dr in ds.Tables[0].Rows
                             select new RegOpsQC()
                             {
                                 Created_ID = created_ID,
                                 Sub_Library_ID = Convert.ToInt32(dr["Library_ID"].ToString()),
                                 Library_Value = dr["LIBRARY_VALUE"].ToString(),
                                 CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                 PARENT_KEY = Convert.ToInt64(dr["PARENT_KEY"].ToString()),
                                 Group_Check_ID = MainGroupId,
                                 checkvalue = "0",
                                 Type = dr["TYPE"].ToString() != "" ? Convert.ToInt64(dr["TYPE"].ToString()) : 0,
                                 Control_Type = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[0].ToString() : dr["CONTROL_TYPE"].ToString(),
                                 Library_Name = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[1].ToString() : "",
                                 Control_Values = GetControlValuesList(Convert.ToInt32(created_ID), dr["CONTROL_TYPE"].ToString())
                             }).ToList();

                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }

        }


        public string RunQCJobsNow(RegOpsQC rOBJ)
        {
            string m_Result = string.Empty;
            OracleConnection o_Con = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    o_Con.ConnectionString = m_DummyConn;
                    string m_query = string.Empty;
                    DataSet dsSeq = new DataSet();
                    DateTime UpdateDate = DateTime.Now;
                    rOBJ.Created_Date = UpdateDate;
                    String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");
                    string result = string.Empty;
                    dsSeq = conn.GetDataSet("SELECT REGOPS_QC_JOBS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(dsSeq))
                    {
                        rOBJ.ID = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                    }
                    string JobID = GetJobId(CreatedID);
                    rOBJ.Job_ID = JobID;
                    o_Con.Open();
                    m_query = "Insert into REGOPS_QC_JOBS (ID,JOB_ID,JOB_TITLE,JOB_DESCRIPTION,PROJECT_ID,INPUT_TYPE,JOB_STATUS,PREFERENCE_ID,CREATED_ID,OUTPUT_TYPE,PROJ_ID,COUNTRY_ID,JOB_TYPE,CATEGORY,ATTACH_WORD_TEMPLATE) values(:Id, :job_ID,:job_title,:job_desc,:proj_ID,:input_type,:job_status,:preferenceId,:createdID,:outputType,:projID,:countryID,:JobType,:Category,:ATTACH_WORD_TEMPLATE)";
                    OracleCommand cmd = new OracleCommand(m_query, o_Con);
                    cmd.Parameters.Add(new OracleParameter("Id", rOBJ.ID));
                    cmd.Parameters.Add(new OracleParameter("job_ID", JobID));
                    cmd.Parameters.Add(new OracleParameter("job_title", rOBJ.Job_Title));
                    cmd.Parameters.Add(new OracleParameter("job_desc", rOBJ.Job_Description));
                    cmd.Parameters.Add(new OracleParameter("proj_ID", rOBJ.Project_ID));
                    cmd.Parameters.Add(new OracleParameter("input_type", rOBJ.SourceDocuments));
                    cmd.Parameters.Add(new OracleParameter("job_status", "New"));
                    cmd.Parameters.Add(new OracleParameter("preferenceId", rOBJ.Preference_ID));
                    cmd.Parameters.Add(new OracleParameter("createdID", CreatedID));
                    cmd.Parameters.Add(new OracleParameter("outputType", rOBJ.Output_Type));
                    cmd.Parameters.Add(new OracleParameter("projID", rOBJ.proj_ID));
                    cmd.Parameters.Add(new OracleParameter("countryID", rOBJ.Country_ID));
                    cmd.Parameters.Add(new OracleParameter("JobType", rOBJ.Job_Type));
                    cmd.Parameters.Add(new OracleParameter("Category", rOBJ.Category));
                    if (rOBJ.ISAttachPREDICTTemplate == "Yes")
                    {
                        cmd.Parameters.Add(new OracleParameter("ATTACH_WORD_TEMPLATE", "1"));
                    }
                    else
                    {
                        cmd.Parameters.Add(new OracleParameter("ATTACH_WORD_TEMPLATE", "0"));
                    }
                    int m_Res = cmd.ExecuteNonQuery();
                    if (m_Res == 1)
                    {
                        string querySub = string.Empty;
                        querySub = "Insert into REGOPS_QC_JOBS_CHECKLIST (ID,Job_ID,CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID,DOC_TYPE,PARENT_CHECK_ID,CREATED_ID,CHECK_ORDER,QC_PREFERENCES_ID) SELECT REGOPS_QC_JOBS_CHECKLIST_SEQ.NEXTVAL," + rOBJ.ID + ", CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID,DOC_TYPE,PARENT_CHECK_ID,CREATED_ID,CHECK_ORDER,QC_PREFERENCES_ID FROM REGOPS_QC_PREFERENCE_DETAILS  where QC_PREFERENCES_ID in (" + rOBJ.PlanIdString + ")";
                        OracleCommand cmdSub = new OracleCommand(querySub, o_Con);
                        int m_Res1 = cmdSub.ExecuteNonQuery();
                        if (m_Res1 > 0)
                        {
                            rOBJ.JobPlanListData = JsonConvert.DeserializeObject<List<RegOpsQC>>(rOBJ.JobPlanData);
                            if (rOBJ.JobPlanListData != null)
                            {
                                foreach (var jobPlanData in rOBJ.JobPlanListData)
                                {
                                    jobPlanData.Created_ID = CreatedID;
                                    jobPlanData.ID = rOBJ.ID;
                                    SaveRegOpsJobsPlans(jobPlanData);
                                }
                            }
                            if (rOBJ.FileIdString != "")
                            {
                                string name = rOBJ.FileIdString;
                                string[] names = name.Split(',');
                                DataTable dtenty = new DataTable();
                                dtenty.Columns.Add("FileInfo", typeof(string));
                                for (int k = 0; k < names.Length; k++)
                                    dtenty.Rows.Add(new object[] { names[k] });
                                if (dtenty.Rows.Count > 0)
                                {
                                    for (int j = 0; j < dtenty.Rows.Count; j++)
                                    {
                                        Int64 fid = Convert.ToInt64(dtenty.Rows[j]["FileInfo"].ToString());
                                        rOBJ.file_ID = fid;
                                        if (rOBJ.file_ID != 0)
                                        {
                                            SaveRegOpsJobFiles(rOBJ);
                                        }
                                        DataSet dset = new DataSet();
                                        dset = conn.GetDataSet("SELECT FILE_NAME FROM DCM_FILES WHERE FILE_ID=" + rOBJ.file_ID, CommandType.Text, ConnectionState.Open);
                                        if (conn.Validate(dset))
                                        {
                                            rOBJ.File_Upload_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                            rOBJ.File_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                        }
                                        string deleteFilePath = string.Empty;
                                        var s = Regex.Replace(rOBJ.File_Upload_Name, @"""", "").Trim().ToString();
                                        string extension = Path.GetExtension(s);
                                        rOBJ.File_Name = s;
                                        if (extension != null && extension != "" && rOBJ.File_Upload_Name != "" && rOBJ.File_Upload_Name != null)
                                        {
                                            Connection conOrg = new Connection();
                                            conOrg.connectionstring = m_Conn;
                                            DataSet dsetLimits = new DataSet();
                                            dsetLimits = conOrg.GetDataSet("SELECT PREFIX_FILENAME FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + rOBJ.ORGANIZATION_ID, CommandType.Text, ConnectionState.Open);
                                            if (conn.Validate(dsetLimits))
                                            {
                                                if (dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString() != "")
                                                {
                                                    rOBJ.Prefix_FileName = Convert.ToInt32(dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString());
                                                }
                                            }
                                            if (extension != ".zip")
                                            {
                                                SaveFileinFolderForQC(rOBJ, JobID, extension);
                                            }
                                            else
                                            {
                                                SaveUnzippedFilesForQC(rOBJ, JobID, extension);
                                            }
                                        }
                                    }
                                }
                            }

                            rOBJ.Job_ID = JobID;
                            if (HttpContext.Current.Session["OrgId"].ToString() != null && HttpContext.Current.Session["OrgId"].ToString() != "")
                            {
                                rOBJ.Organization = HttpContext.Current.Session["OrgId"].ToString();
                                Thread thread = new Thread(() => DocumentQCChecksForQCValidation(rOBJ));
                                thread.IsBackground = true;
                                thread.Start();
                                m_Result = "Success";
                            }
                            else
                            {
                                m_Result = "Redirect Index";
                            }
                        }
                    }
                }
                else
                {
                    m_Result = "Login Page";
                }
                return m_Result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                if (ex.Message.Contains("already exists"))
                    return "Duplicate file";
                else
                    return "Failed";
            }
            finally
            {
                o_Con.Close();
            }
        }

        public string SaveRegOpsJobFiles(RegOpsQC rOBJ)
        {
            OracleConnection o_Con = new OracleConnection();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                o_Con.ConnectionString = m_DummyConn;
                string res = string.Empty;

                DataSet ds = new DataSet();
                ds = con.GetDataSet("SELECT REGOPS_JOB_FILES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                if (con.Validate(ds))
                {
                    rOBJ.Job_File_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                }

                rOBJ.Created_Date = DateTime.Now;
                o_Con.Open();
                string query = "INSERT INTO REGOPS_JOB_FILES(JOB_FILE_ID,JOB_ID,DCM_INPUT_FILE_ID,CREATED_ID) VALUES";
                query += "(:JOB_FILE_ID,:JOB_ID,:DCM_FILE_ID,:CREATED_ID)";
                OracleCommand cmd = new OracleCommand(query, o_Con);
                cmd = new OracleCommand(query, o_Con);
                cmd.Parameters.Add(new OracleParameter("JOB_FILE_ID", rOBJ.Job_File_ID));
                cmd.Parameters.Add(new OracleParameter("JOB_ID", rOBJ.ID));
                cmd.Parameters.Add(new OracleParameter("DCM_FILE_ID", rOBJ.file_ID));
                cmd.Parameters.Add(new OracleParameter("CREATED_ID", rOBJ.Created_ID));
                int m_res = cmd.ExecuteNonQuery();

                if (m_res > 0)
                {
                    res = "Success";
                    RegOpsQC regOpsObj = new RegOpsQC();
                    regOpsObj.UserID = rOBJ.Created_ID;
                    regOpsObj.ORGANIZATION_ID = rOBJ.ORGANIZATION_ID;
                    regOpsObj.ROLE_ID = rOBJ.ROLE_ID;
                    regOpsObj.file_ID = rOBJ.file_ID;
                    regOpsObj.proj_ID = rOBJ.proj_ID;
                    regOpsObj.Activity = "File used in " + rOBJ.Job_ID + " with job title: " + rOBJ.Job_Title;
                    res = new RegOpsQCActions().SaveFilesActivity(regOpsObj);
                }
                else
                    res = "Failed";
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }
            finally
            {
                o_Con.Close();
            }
        }

        /// <summary>
        /// to save plans selected for a job
        /// </summary>
        /// <param name="rOBJ"></param>
        /// <returns></returns>
        public string SaveRegOpsJobsPlans(RegOpsQC rOBJ)
        {
            OracleConnection o_Con = new OracleConnection();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                o_Con.ConnectionString = m_DummyConn;
                string res = string.Empty;

                DataSet ds = new DataSet();
                ds = con.GetDataSet("SELECT REGOPS_JOB_PLANS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                if (con.Validate(ds))
                {
                    rOBJ.Job_Plan_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                }

                rOBJ.Created_Date = DateTime.Now;
                o_Con.Open();
                string query = "INSERT INTO REGOPS_JOB_PLANS(JOB_PLAN_ID,JOB_ID,PREFERENCE_ID,PLAN_ORDER,CREATED_ID) VALUES";
                query += "(:JOB_PLAN_ID,:JOB_ID,:PREFERENCE_ID,:PLAN_ORDER,:CREATED_ID)";
                OracleCommand cmd = new OracleCommand(query, o_Con);
                cmd = new OracleCommand(query, o_Con);
                cmd.Parameters.Add(new OracleParameter("JOB_PLAN_ID", rOBJ.Job_Plan_ID));
                cmd.Parameters.Add(new OracleParameter("JOB_ID", rOBJ.ID));
                cmd.Parameters.Add(new OracleParameter("PREFERENCE_ID", rOBJ.Preference_ID));
                cmd.Parameters.Add(new OracleParameter("PLAN_ORDER", rOBJ.Plan_Order));
                cmd.Parameters.Add(new OracleParameter("CREATED_ID", rOBJ.Created_ID));
                int m_res = cmd.ExecuteNonQuery();
                if (m_res > 0)
                {
                    res = "Success";
                }
                else
                    res = "Failed";
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }
            finally
            {
                o_Con.Close();
            }
        }

        public static void ProcessDirectory(string targetDirectory, string SFolder, string Sfolder1)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string destFolder1 = System.IO.Path.Combine(Sfolder1, folderName);
            System.IO.Directory.CreateDirectory(destFolder1);


            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessFile(fileName, destFolder, destFolder1);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessDirectory(subdirectory, destFolder, destFolder1);
        }

        // Process Directory For Create Jobs
        public static void ProcessDirectoryForCreateJob(string targetDirectory, string SFolder, string Sfolder1)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string destFolder1 = System.IO.Path.Combine(Sfolder1, folderName);
            System.IO.Directory.CreateDirectory(destFolder1);


            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessFileForCreateJob(fileName, destFolder, destFolder1);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessDirectoryForCreateJob(subdirectory, destFolder, destFolder1);
        }

        // Process Directory For QC JobType For Create Jobs
        public static void ProcessDirectoryForQCCreateJob(string targetDirectory, string SFolder)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessFileForQCForCreateJob(fileName, destFolder);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessDirectoryForQCCreateJob(subdirectory, destFolder);
        }

        public static void ProcessDirectoryForQC(string targetDirectory, string SFolder)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessFileForQC(fileName, destFolder);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessDirectoryForQC(subdirectory, destFolder);
        }
        public static void ProcessDirectory1(string targetDirectory, string SFolder)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessFile1(fileName, destFolder);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessDirectory1(subdirectory, destFolder);
        }



        public static void ProcessSourceDirectory(string targetDirectory, string SFolder)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessSourceFile(fileName, destFolder);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessSourceDirectory(subdirectory, destFolder);
        }

        public static void ProcessOutputDirectory(string targetDirectory, string SFolder)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessOutputFile(fileName, destFolder);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessOutputDirectory(subdirectory, destFolder);
        }
        public static void DownloadOutputDirectory(string targetDirectory, string SFolder)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                DownloadOutputFile(fileName, destFolder);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                DownloadOutputDirectory(subdirectory, destFolder);
        }

        public static void ProcessTemplateDirectory(string targetDirectory, string SFolder, RegOpsQC roptemp)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessTemplateFile(fileName, destFolder, roptemp);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessTemplateDirectory(subdirectory, destFolder, roptemp);
        }

        public static void DownloadTemplateDirectory(string targetDirectory, string SFolder, RegOpsQC roptemp)
        {
            // Process the list of files found in the directory.
            string folderName = new DirectoryInfo(targetDirectory).Name;
            string destFolder = System.IO.Path.Combine(SFolder, folderName);
            System.IO.Directory.CreateDirectory(destFolder);

            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                DownloadTemplateFile(fileName, destFolder, roptemp);

            // Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                DownloadTemplateDirectory(subdirectory, destFolder, roptemp);
        }

        public static void ProcessFile(string file, string SourceFolder, string SourceFolder1)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            if (HttpContext.Current.Session["Prefix"].ToString() == "1")
            {
                fileName = "\\Source_" + fileobj;
                fileName1 = "\\Output_" + fileobj;
            }
            else
            {
                fileName = "\\" + fileobj;
                fileName1 = "\\" + fileobj;
            }
            string destFile = SourceFolder + fileName;
            System.IO.File.Copy(file, destFile, true);
            string destFile1 = SourceFolder1 + fileName1;
            System.IO.File.Copy(file, destFile1, true);
        }

        // ProcessFiles in create Job
        public static void ProcessFileForCreateJob(string file, string SourceFolder, string SourceFolder1)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = "\\" + fileobj;
            fileName1 = "\\" + fileobj;
            string destFile = SourceFolder + fileName;
            System.IO.File.Copy(file, destFile, true);
            string destFile1 = SourceFolder1 + fileName1;
            System.IO.File.Copy(file, destFile1, true);

        }

        // ProcessFiles For QC jobType in create Job
        public static void ProcessFileForQCForCreateJob(string file, string SourceFolder)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = "\\" + fileobj;
            string destFile = SourceFolder + fileName;
            System.IO.File.Copy(file, destFile, true);
        }

        public static void ProcessFileForQC(string file, string SourceFolder)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            if (HttpContext.Current.Session["Prefix"].ToString() == "1")
            {
                fileName = "\\Source_" + fileobj;
            }
            else
            {
                fileName = "\\" + fileobj;
            }
            string destFile = SourceFolder + fileName;
            System.IO.File.Copy(file, destFile, true);
        }
        public static void ProcessFile1(string file, string SourceFolder)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            if (HttpContext.Current.Session["Prefix"].ToString() == "1")
            {
                fileName1 = "\\Output_" + fileobj;
            }
            else
            {
                fileName1 = fileobj;
            }
            string destFile = SourceFolder + "\\" + fileName1;
            System.IO.File.Copy(file, destFile, true);
        }


        public static void ProcessSourceFile(string file, string SourceFolder)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            if (HttpContext.Current.Session["Prefix"].ToString() == "1")
            {
                fileName1 = "\\Source_" + fileobj;
            }
            else
            {
                fileName1 = fileobj;
            }
            string destFile = SourceFolder + "\\" + fileName1;
            System.IO.File.Copy(file, destFile, true);
        }

        public static void ProcessOutputFile(string file, string outputFolder)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            if (HttpContext.Current.Session["Prefix"].ToString() == "1")
            {
                fileName1 = "\\Output_" + fileobj;
            }
            else
            {
                fileName1 = fileobj;
            }
            string destFile = outputFolder + "\\" + fileName1;
            System.IO.File.Copy(file, destFile, true);
        }

        public static void DownloadOutputFile(string file, string outputFolder)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName1 = fileobj;
            string destFile = outputFolder + "\\" + fileName1;
            System.IO.File.Copy(file, destFile, true);
        }

        public static void ProcessTemplateFile(string file, string templateFolder, RegOpsQC robjtemp)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            if (HttpContext.Current.Session["Prefix"].ToString() == "1")
            {
                fileName1 = robjtemp.Template_Name + "_" + fileobj;
            }
            else
            {
                fileName1 = fileobj;
            }
            string destFile = templateFolder + "\\" + fileName1;
            System.IO.File.Copy(file, destFile, true);
        }

        public static void DownloadTemplateFile(string file, string templateFolder, RegOpsQC robjtemp)
        {
            string fileName1 = string.Empty;
            string fName = Path.GetFileName(file);
            string fileName = System.IO.Path.GetFileName(fName);
            string fileobj = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
            fileName1 = fileobj;
            string destFile = templateFolder + "\\" + fileName1;
            System.IO.File.Copy(file, destFile, true);
        }

        public void SaveUnzippedFiles(RegOpsQC rOBJ, string jobID)
        {
            string filePath;
            string SourceFolder = string.Empty;
            string SourceFolder1 = string.Empty;
            string path = rOBJ.File_Upload_Name; //AppDomain.CurrentDomain.BaseDirectory + "RegOpsQCSource\\" + rOBJ.File_Upload_Name;

            string folderPath = m_SourceFolderPathQC; //AppDomain.CurrentDomain.BaseDirectory + "RegOpsQCSource";
            //string folderPath = AppPath + "RegOpsQCSource";
            Directory.CreateDirectory(folderPath + "\\" + jobID);
            if (System.IO.Directory.Exists(folderPath))
            {
                SourceFolder = folderPath + "\\" + jobID + "\\Source";
                Directory.CreateDirectory(SourceFolder);
                SourceFolder1 = folderPath + "\\" + jobID + "\\Destination";
                Directory.CreateDirectory(SourceFolder1);
            }
            HttpContext.Current.Session["Prefix"] = rOBJ.Prefix_FileName;
            filePath = ReadXMLandPrepareCopy(path);
            string extractPath = filePath;
            string[] files = Directory.GetFiles(extractPath);
            for (int i = 0; i < files.Count(); i++)
            {
                if (File.Exists(files[i]))
                {
                    ProcessFile(files[i], SourceFolder, SourceFolder1);
                }
            }
            string[] folders = Directory.GetDirectories(extractPath);
            for (int i = 0; i < folders.Count(); i++)
            {
                if (Directory.Exists(extractPath))
                {
                    // This path is a directory
                    ProcessDirectory(folders[i], SourceFolder, SourceFolder1);
                }
            }
            FileInfo file = new FileInfo(path);
            if (file.Exists)//check file exsit or not
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(path);
            }
            if (Directory.Exists(filePath))
            {
                foreach (string file1 in Directory.GetFiles(filePath))
                {
                    File.Delete(file1);
                }
                //This condition is used to check all child Directories and delete files
                foreach (string subfolder in Directory.GetDirectories(filePath))
                {
                    RemoveDirectories(subfolder);
                }
                Directory.Delete(filePath);
            }
        }

        /// <summary>
        /// Compares files to unzip
        /// </summary>        
        public void UnzippedCompareDocument(RegOpsQC rOBJ, string folderOutPath, string folderSourcePath, Byte[] bytesIn, Byte[] bytesOut)
        {
            string filePath = string.Empty;
            string filePath1 = string.Empty;
            Connection conn = new Connection();
            int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
            string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            Guid gid;
            gid = Guid.NewGuid(); folderSourcePath = m_DownloadFolderPathQC + "\\" + gid;
            if (!Directory.Exists(folderSourcePath))
            {
                Directory.CreateDirectory(folderSourcePath);
            }
            using (FileStream fs = new FileStream(folderSourcePath + "\\" + rOBJ.File_Upload_Name, FileMode.OpenOrCreate))
            {
                fs.Write(bytesOut, 0, bytesOut.Length);
                fs.Dispose();
            }
            string folderPath1 = folderSourcePath + "\\" + rOBJ.File_Upload_Name;
            filePath = ReadXMLandPrepareCopy(folderPath1);
            //rOBJ.File_Name = filePath;

            Guid gid1;
            gid1 = Guid.NewGuid();
            folderOutPath = m_DownloadFolderPathQC + "\\" + gid1;
            if (!Directory.Exists(folderOutPath))
            {
                Directory.CreateDirectory(folderOutPath);
            }
            using (FileStream fs = new FileStream(folderOutPath + "\\" + rOBJ.File_Upload_Name, FileMode.OpenOrCreate))
            {
                fs.Write(bytesIn, 0, bytesIn.Length);
                fs.Dispose();
            }
            string folderPath2 = folderOutPath + "\\" + rOBJ.File_Upload_Name;
            filePath1 = ReadXMLandPrepareCopy(folderPath2);
            rOBJ.File_Upload_Name = filePath1 + "\\" + rOBJ.File_Name;

            int count = 0;
            string[] entries = Directory.GetFileSystemEntries(filePath1, "*", SearchOption.AllDirectories);
            foreach (var sobj in entries)
            {
                string[] s1 = Regex.Split(sobj, @"ZipExtracts\\");
                string[] s2 = Regex.Split(s1[1], @"\\");
                var iterator = s2.Take(0).Concat(s2.Skip(0 + 1));
                string formArry = string.Join("//", iterator);
                if (rOBJ.File_Name == formArry)
                {
                    count += 1;
                }
            }
            if (count != 0)
            {
                rOBJ.File_Source = filePath + "\\" + rOBJ.File_Name;
                rOBJ.DestFilePath = filePath1 + "\\" + rOBJ.File_Name;
            }
            FileInfo file = new FileInfo(folderPath1);
            if (file.Exists)//check file exsit or not
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(folderPath1);
            }
            Directory.Delete(folderSourcePath);
            FileInfo file1 = new FileInfo(folderPath2);
            if (file1.Exists)//check file exsit or not
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(folderPath2);
            }
            Directory.Delete(folderOutPath);
            rOBJ.DeleteZipPath = filePath1;
            rOBJ.Folder_Name = filePath;
        }

        /// <summary>
        /// Preview Folder files in Files Tab
        /// </summary>        
        public List<ZipFiles> UnzippedFoldersForTreeView(RegOpsQC rOBJ)
        {
            string filePath = string.Empty; string folderPath = string.Empty; string folderPath1 = string.Empty;
            ZipFiles obj1 = null;
            List<ZipFiles> zipfiles = new List<ZipFiles>();
            byte[] byteArray = null;
            Connection conn = new Connection();
            int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
            string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            DataSet dset = conn.GetDataSet("SELECT FILE_NAME,FILE_CONTENT FROM DCM_FILES WHERE FILE_ID=" + rOBJ.file_ID, CommandType.Text, ConnectionState.Open);
            if (conn.Validate(dset))
            {
                rOBJ.File_Upload_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                rOBJ.File_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                byteArray = (byte[])dset.Tables[0].Rows[0]["FILE_CONTENT"];
            }
            Guid gid;
            gid = Guid.NewGuid();
            folderPath = m_DownloadFolderPathQC + "\\" + gid;
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            using (FileStream fs = new FileStream(folderPath + "\\" + rOBJ.File_Upload_Name, FileMode.OpenOrCreate))
            {
                fs.Write(byteArray, 0, byteArray.Length);
            }
            folderPath1 = folderPath + "\\" + rOBJ.File_Upload_Name;
            filePath = ReadXMLandPrepareCopy(folderPath1);
            string extractPath = filePath;
            string[] entries = Directory.GetFileSystemEntries(extractPath, "*", SearchOption.AllDirectories);

            foreach (var sobj in entries)
            {
                string[] s1 = Regex.Split(sobj, @"ZipExtracts\\");
                string[] s2 = Regex.Split(s1[1], @"\\");
                var fromArr = s2.Skip(1).ToArray();
                List<string> listString = fromArr.Select(x => x).ToList();
                obj1 = new ZipFiles();
                obj1.Folderpath = listString;
                obj1.ZipPath = folderPath;
                zipfiles.Add(obj1);
            }
            if (Directory.Exists(extractPath))
            {
                foreach (string file1 in Directory.GetFiles(extractPath))
                {
                    File.Delete(file1);
                }
                foreach (string subfolder in Directory.GetDirectories(extractPath))
                {
                    RemoveDirectories(subfolder);
                }
                Directory.Delete(extractPath);
            }
            return zipfiles;
        }

        public void SaveUnzippedFilesForQC(RegOpsQC rOBJ, string jobID, string extension1)
        {
            byte[] byteArray = null;
            Connection conn = new Connection();
            int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
            string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            DataSet dset = conn.GetDataSet("SELECT FILE_NAME,FILE_CONTENT FROM DCM_FILES WHERE FILE_ID=" + rOBJ.file_ID, CommandType.Text, ConnectionState.Open);
            if (conn.Validate(dset))
            {
                rOBJ.File_Upload_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                rOBJ.File_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                byteArray = (byte[])dset.Tables[0].Rows[0]["FILE_CONTENT"];
            }

            string filePath;
            string SourceFolder = string.Empty;
            string outputFolder = string.Empty;
            string path = rOBJ.File_Upload_Name;
            string folderPath = m_SourceFolderPathQC;
            Directory.CreateDirectory(folderPath + jobID);
            if (System.IO.Directory.Exists(folderPath))
            {
                SourceFolder = folderPath + jobID + "\\Source";
                Directory.CreateDirectory(SourceFolder);
                if (rOBJ.Job_Type != "QC")
                {
                    outputFolder = folderPath + jobID + "\\Output";
                    Directory.CreateDirectory(outputFolder);
                }
            }
            Guid gid;
            gid = Guid.NewGuid();
            filePath = m_SourceFolderPathExternal + "\\RegOpsQCSource\\" + gid;
            if (!Directory.Exists(filePath))
            {
                Directory.CreateDirectory(filePath);
            }
            using (FileStream fs = new FileStream(filePath + "\\" + rOBJ.File_Upload_Name, FileMode.Create))
            {
                fs.Write(byteArray, 0, byteArray.Length);
            }

            string extractPath = ReadXMLandPrepareCopy1(filePath + "\\" + rOBJ.File_Upload_Name, rOBJ.File_Upload_Name);
            string[] files = Directory.GetFiles(extractPath);
            HttpContext.Current.Session["Prefix"] = rOBJ.Prefix_FileName;
            for (int i = 0; i < files.Count(); i++)
            {
                if (File.Exists(files[i]))
                {

                    if (rOBJ.Job_Type != "QC")
                    {
                        ProcessFileForCreateJob(files[i], SourceFolder, outputFolder);
                    }
                    else
                    {
                        ProcessFileForQCForCreateJob(files[i], SourceFolder);
                    }

                }
            }
            string[] folders = Directory.GetDirectories(extractPath);
            for (int i = 0; i < folders.Count(); i++)
            {
                if (Directory.Exists(extractPath))
                {

                    if (rOBJ.Job_Type != "QC")
                    {
                        ProcessDirectoryForCreateJob(folders[i], SourceFolder, outputFolder);
                    }
                    else
                    {
                        ProcessDirectoryForQCCreateJob(folders[i], SourceFolder);
                    }

                }
            }

            if (Directory.Exists(extractPath))
            {
                foreach (string file1 in Directory.GetFiles(extractPath))
                {
                    File.Delete(file1);
                }
                foreach (string subfolder in Directory.GetDirectories(extractPath))
                {
                    RemoveDirectories(subfolder);
                }
                Directory.Delete(extractPath);
            }

            if (Directory.Exists(filePath))
            {
                foreach (string file1 in Directory.GetFiles(filePath))
                {
                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    File.Delete(file1);
                }
                Directory.Delete(filePath);
            }

        }

        public void SaveUnzippedFilesForDownload(RegOpsQC rOBJ, byte[] sourceArray, byte[] outputArray, byte[] templateArray, string extension1)
        {
            string filePath;
            string SourceFolder = string.Empty;
            string outputFolder = string.Empty;
            string path = rOBJ.Source_File_Name;
            string folderPath = m_SourceFolderPathQC + rOBJ.guidPath + "\\";
            Directory.CreateDirectory(folderPath + rOBJ.Job_ID);
            if (System.IO.Directory.Exists(folderPath))
            {
                if (sourceArray != null)
                {
                    SourceFolder = folderPath + rOBJ.Job_ID + "\\Source\\";
                    if (!Directory.Exists(SourceFolder))
                    {
                        Directory.CreateDirectory(SourceFolder);
                    }
                }

                if (outputArray != null)
                {
                    outputFolder = folderPath + rOBJ.Job_ID + "\\Output\\";
                    if (!Directory.Exists(outputFolder))
                    {
                        Directory.CreateDirectory(outputFolder);
                    }
                }
            }
            Guid g;
            g = Guid.NewGuid();
            if (sourceArray != null)
            {
                filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rOBJ.Source_File_Name;
                using (FileStream fs = new FileStream(filePath, FileMode.Create))
                {
                    fs.Write(sourceArray, 0, sourceArray.Length);
                }

                filePath = ReadXMLandPrepareCopy(filePath);
                string extractPath = filePath;
                string[] files = Directory.GetFiles(extractPath);
                HttpContext.Current.Session["Prefix"] = rOBJ.Prefix_FileName;
                for (int i = 0; i < files.Count(); i++)
                {
                    if (File.Exists(files[i]))
                    {

                        ProcessSourceFile(files[i], SourceFolder);
                    }
                }
                string[] folders = Directory.GetDirectories(extractPath);
                for (int i = 0; i < folders.Count(); i++)
                {
                    if (Directory.Exists(extractPath))
                    {
                        ProcessSourceDirectory(folders[i], SourceFolder);
                    }
                }
                FileInfo fileSource = new FileInfo(path);
                if (fileSource.Exists)
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(path);
                }
                if (Directory.Exists(filePath))
                {
                    foreach (string file1 in Directory.GetFiles(filePath))
                    {
                        File.Delete(file1);
                    }
                    foreach (string subfolder in Directory.GetDirectories(filePath))
                    {
                        RemoveDirectories(subfolder);
                    }
                    Directory.Delete(filePath);
                }
            }
            if (outputArray != null)
            {
                filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rOBJ.Output_File_Name;
                using (FileStream fs = new FileStream(filePath, FileMode.Create))
                {
                    fs.Write(outputArray, 0, outputArray.Length);
                }
                filePath = ReadXMLandPrepareCopy(filePath);
                string extractPath = filePath;
                string[] files = Directory.GetFiles(extractPath);
                HttpContext.Current.Session["Prefix"] = rOBJ.Prefix_FileName;
                for (int i = 0; i < files.Count(); i++)
                {
                    if (File.Exists(files[i]))
                    {

                        ProcessOutputFile(files[i], outputFolder);
                    }
                }
                string[] folders = Directory.GetDirectories(extractPath);
                for (int i = 0; i < folders.Count(); i++)
                {
                    if (Directory.Exists(extractPath))
                    {
                        ProcessOutputDirectory(folders[i], outputFolder);
                    }
                }
                FileInfo fileSource = new FileInfo(path);
                if (fileSource.Exists)
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(path);
                }
                if (Directory.Exists(filePath))
                {
                    foreach (string file1 in Directory.GetFiles(filePath))
                    {
                        File.Delete(file1);
                    }
                    foreach (string subfolder in Directory.GetDirectories(filePath))
                    {
                        RemoveDirectories(subfolder);
                    }
                    Directory.Delete(filePath);
                }
            }
            if (rOBJ.ISAttachPREDICTTemplate == "1" && templateArray != null)
            {
                string templateFolder = folderPath + rOBJ.Job_ID + "\\Documents with Template\\";
                if (!Directory.Exists(templateFolder))
                {
                    Directory.CreateDirectory(templateFolder);
                }
                if (templateArray.ToString() != null && templateArray.ToString() != "")
                {
                    filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rOBJ.Template_File_Name;
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        fs.Write(templateArray, 0, templateArray.Length);
                    }
                    filePath = ReadXMLandPrepareCopy(filePath);
                    string extractPath = filePath;
                    string[] files = Directory.GetFiles(extractPath);
                    HttpContext.Current.Session["Prefix"] = rOBJ.Prefix_FileName;
                    for (int i = 0; i < files.Count(); i++)
                    {
                        if (File.Exists(files[i]))
                        {

                            ProcessTemplateFile(files[i], templateFolder, rOBJ);
                        }
                    }
                    string[] folders = Directory.GetDirectories(extractPath);
                    for (int i = 0; i < folders.Count(); i++)
                    {
                        if (Directory.Exists(extractPath))
                        {
                            ProcessTemplateDirectory(folders[i], templateFolder, rOBJ);
                        }
                    }
                    FileInfo fileSource = new FileInfo(path);
                    if (fileSource.Exists)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(path);
                    }
                    if (Directory.Exists(filePath))
                    {
                        foreach (string file1 in Directory.GetFiles(filePath))
                        {
                            File.Delete(file1);
                        }
                        foreach (string subfolder in Directory.GetDirectories(filePath))
                        {
                            RemoveDirectories(subfolder);
                        }
                        Directory.Delete(filePath);
                    }
                }
            }

            string[] folders1 = Directory.GetFileSystemEntries(SourceFolder, "*", SearchOption.AllDirectories);
            string[] folders4 = Directory.GetDirectories(SourceFolder, "*", SearchOption.AllDirectories);
            if (folders4.Count() > 0)
            {
                foreach (string directory in folders4)
                {
                    string[] files1 = Directory.GetFiles(directory);
                    foreach (string file in files1)
                    {
                        string ext = Path.GetExtension(file);
                        string sourcefileExtension = Path.GetExtension(file);
                        if (sourcefileExtension != ".pdf")
                        {
                            string outputfileName = string.Empty;
                            string outputfileExtension = string.Empty;
                            string outputfileName1 = string.Empty;
                            string compareFolder = folderPath + rOBJ.Job_ID + "\\Compare\\";
                            if (!Directory.Exists(compareFolder))
                            {
                                Directory.CreateDirectory(compareFolder);
                            }
                            string sourcefileName = Path.GetFileNameWithoutExtension(file);
                            string[] folders2 = Directory.GetDirectories(outputFolder, "*", SearchOption.AllDirectories);
                            if (folders2.Count() > 0)
                            {
                                foreach (string directory1 in folders2)
                                {
                                    string[] files2 = Directory.GetFiles(directory1);

                                    foreach (string outputfile in files2)
                                    {
                                        outputfileName = Path.GetFileNameWithoutExtension(outputfile);
                                        if (sourcefileName == outputfileName)
                                        {
                                            outputfileExtension = Path.GetExtension(outputfile);
                                            outputfileName1 = Path.GetFileNameWithoutExtension(outputfile);
                                        }
                                    }
                                    if(outputfileName1 != "" )
                                    {
                                        string document1 = directory + "\\" + sourcefileName + sourcefileExtension;
                                        string document2 = directory1 + "\\" + outputfileName1 + outputfileExtension;
                                        Aspose.Words.Document doc1 = new Aspose.Words.Document(document1);
                                        Aspose.Words.Document doc2 = new Aspose.Words.Document(document2);
                                        if (doc1.Revisions.Count == 0 && doc2.Revisions.Count == 0)
                                            doc1.Compare(doc2, "a", DateTime.Now);
                                        doc1.Save(compareFolder + "Compare_" + sourcefileName + sourcefileExtension);
                                        outputfileName1 = "";
                                    }
                                    
                                }
                            }
                        }
                        
                    }
                }

            }
            else
            {
                string[] files1 = Directory.GetFiles(SourceFolder);
                foreach (string file in files1)
                {
                    string sourcefileExtension = Path.GetExtension(file);

                    if (sourcefileExtension != ".pdf")
                    {
                        string outputfileName = string.Empty;
                        string outputfileExtension = string.Empty;
                        string outputfileName1 = string.Empty;
                        string compareFolder = folderPath + rOBJ.Job_ID + "\\Compare\\";
                        if (!Directory.Exists(compareFolder))
                        {
                            Directory.CreateDirectory(compareFolder);
                        }
                        string sourcefileName = Path.GetFileNameWithoutExtension(file);
                        string[] files2 = Directory.GetFiles(outputFolder);
                        foreach (string outputfile in files2)
                        {
                            outputfileName = Path.GetFileNameWithoutExtension(outputfile);
                            if (sourcefileName == outputfileName)
                            {
                                outputfileExtension = Path.GetExtension(outputfile);
                                outputfileName1 = Path.GetFileNameWithoutExtension(outputfile);
                            }
                        }
                        string document1 = SourceFolder + "\\" + sourcefileName + sourcefileExtension;
                        string document2 = outputFolder + "\\" + outputfileName1 + outputfileExtension;
                        Aspose.Words.Document doc1 = new Aspose.Words.Document(document1);
                        Aspose.Words.Document doc2 = new Aspose.Words.Document(document2);
                        if (doc1.Revisions.Count == 0 && doc2.Revisions.Count == 0)
                            doc1.Compare(doc2, "a", DateTime.Now);
                        doc1.Save(compareFolder + "Compare_" + sourcefileName + sourcefileExtension);

                    }
                }
            }
        }

        public void SaveUnzippedFilesForDownloadNoTemplate(RegOpsQC rOBJ, byte[] sourceArray, byte[] outputArray, string extension1)
        {
            string filePath;
            string SourceFolder = string.Empty;
            string outputFolder = string.Empty;
            string path = rOBJ.Source_File_Name;
            string folderPath = m_SourceFolderPathQC + rOBJ.guidPath + "\\";
            Directory.CreateDirectory(folderPath + rOBJ.Job_ID);
            if (System.IO.Directory.Exists(folderPath))
            {
                if (sourceArray != null)
                {
                    SourceFolder = folderPath + rOBJ.Job_ID + "\\Source\\";
                    if (!Directory.Exists(SourceFolder))
                    {
                        Directory.CreateDirectory(SourceFolder);
                    }
                }
                if (outputArray != null)
                {
                    outputFolder = folderPath + rOBJ.Job_ID + "\\Output\\";
                    if (!Directory.Exists(outputFolder))
                    {
                        Directory.CreateDirectory(outputFolder);
                    }
                }
            }
            Guid g;
            g = Guid.NewGuid();
            if (sourceArray != null)
            {
                filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rOBJ.Source_File_Name;
                using (FileStream fs = new FileStream(filePath, FileMode.Create))
                {
                    fs.Write(sourceArray, 0, sourceArray.Length);
                }
                filePath = ReadXMLandPrepareCopy(filePath);
                string extractPath = filePath;
                string[] files = Directory.GetFiles(extractPath);
                HttpContext.Current.Session["Prefix"] = rOBJ.Prefix_FileName;
                for (int i = 0; i < files.Count(); i++)
                {
                    if (File.Exists(files[i]))
                    {

                        ProcessSourceFile(files[i], SourceFolder);
                    }
                }
                string[] folders = Directory.GetDirectories(extractPath);
                for (int i = 0; i < folders.Count(); i++)
                {
                    if (Directory.Exists(extractPath))
                    {
                        ProcessSourceDirectory(folders[i], SourceFolder);
                    }
                }
                FileInfo fileSource = new FileInfo(path);
                if (fileSource.Exists)
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(path);
                }
                if (Directory.Exists(filePath))
                {
                    foreach (string file1 in Directory.GetFiles(filePath))
                    {
                        File.Delete(file1);
                    }
                    foreach (string subfolder in Directory.GetDirectories(filePath))
                    {
                        RemoveDirectories(subfolder);
                    }
                    Directory.Delete(filePath);
                }
            }
            if (outputArray != null)
            {
                filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rOBJ.Output_File_Name;
                using (FileStream fs = new FileStream(filePath, FileMode.Create))
                {
                    fs.Write(outputArray, 0, outputArray.Length);
                }
                filePath = ReadXMLandPrepareCopy(filePath);
                string extractPath = filePath;
                string[] files = Directory.GetFiles(extractPath);
                HttpContext.Current.Session["Prefix"] = rOBJ.Prefix_FileName;
                for (int i = 0; i < files.Count(); i++)
                {
                    if (File.Exists(files[i]))
                    {

                        ProcessOutputFile(files[i], outputFolder);
                    }
                }
                string[] folders = Directory.GetDirectories(extractPath);
                for (int i = 0; i < folders.Count(); i++)
                {
                    if (Directory.Exists(extractPath))
                    {
                        ProcessOutputDirectory(folders[i], outputFolder);
                    }
                }
                FileInfo fileSource = new FileInfo(path);
                if (fileSource.Exists)
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(path);
                }
                if (Directory.Exists(filePath))
                {
                    foreach (string file1 in Directory.GetFiles(filePath))
                    {
                        File.Delete(file1);
                    }
                    foreach (string subfolder in Directory.GetDirectories(filePath))
                    {
                        RemoveDirectories(subfolder);
                    }
                    Directory.Delete(filePath);
                }
            }

        }
        public string ReadXMLandPrepareCopy1(string zippath, string Filename)
        {
            Guid g;
            g = Guid.NewGuid();
            string filePath = zipExactpath + g;
            ZipFile zipFile = new ZipFile(zippath);
            GiveAllPermissions(filePath);
            zipFile.ExtractAll(filePath);
            return filePath;
        }
        public string ReadXMLandPrepareCopy(string zippath)
        {
            Guid g;
            g = Guid.NewGuid();
            string filePath = zipExactpath + g;
            ZipFile zipFile = new ZipFile(zippath);
            GiveAllPermissions(filePath);
            zipFile.ExtractAll(filePath);
            return filePath;
        }
        internal void GiveAllPermissions(string path)
        {
            if (Directory.Exists(path))
            {
                string[] dirs = Directory.GetDirectories(path);

                if (dirs.Length == 0)
                {
                    string[] files = Directory.GetFiles(path);
                    foreach (string file in files)
                    {
                        File.SetAttributes(file, FileAttributes.Normal);
                    }
                }
                else
                    foreach (string dir in dirs)
                    {
                        GiveAllPermissions(dir);
                    }
            }
        }


        private void SaveFileinFolderForQC(RegOpsQC rOBJ, string jobID, string extension1)
        {
            byte[] byteArray = null;
            Connection conn = new Connection();
            int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
            string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            DataSet dset = conn.GetDataSet("SELECT FILE_NAME,FILE_CONTENT FROM DCM_FILES WHERE FILE_ID=" + rOBJ.file_ID, CommandType.Text, ConnectionState.Open);
            if (conn.Validate(dset))
            {
                rOBJ.File_Upload_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                rOBJ.File_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                byteArray = (byte[])dset.Tables[0].Rows[0]["FILE_CONTENT"];
            }
            string folderPath1 = m_SourceFolderPathQC;
            string SourceFolder = folderPath1 + jobID + "\\Source\\";
            Directory.CreateDirectory(SourceFolder);
            string targetPath = SourceFolder;

            using (FileStream fs = new FileStream(targetPath + rOBJ.File_Name, FileMode.Create))
            {
                fs.Write(byteArray, 0, byteArray.Length);
            }
            if (rOBJ.Job_Type != "QC")
            {
                string SourceFolder1 = folderPath1 + jobID + "\\Output\\";
                Directory.CreateDirectory(SourceFolder1);
                string targetPath1 = SourceFolder1;

                using (FileStream fs = new FileStream(targetPath1 + rOBJ.File_Name, FileMode.Create))
                {
                    fs.Write(byteArray, 0, byteArray.Length);
                }
            }

        }

        private void SaveFileinFolderForDownload(RegOpsQC rOBJ, byte[] sourceArray, byte[] outputArray, byte[] templateArray, string extension1)
        {
            string sourceFile = string.Empty;
            string outputFile = string.Empty;
            string CompareFile = string.Empty;
            string templateFile = string.Empty;
            string outputFolder = string.Empty;
            string SourceFolder = string.Empty;
            string compareFolder = string.Empty;

            string folderPath1 = m_SourceFolderPathQC + rOBJ.guidPath + "\\" + rOBJ.Job_ID;
            if (!Directory.Exists(folderPath1))
            {
                Directory.CreateDirectory(folderPath1);
            }

            if (sourceArray != null)
            {
                 SourceFolder = folderPath1 + "\\Source\\";
                if (!Directory.Exists(SourceFolder))
                {
                    Directory.CreateDirectory(SourceFolder);
                }

                if (rOBJ.Prefix_FileName == 1)
                {
                    sourceFile = "Source_" + rOBJ.Source_File_Name;
                    using (FileStream fs = new FileStream(SourceFolder + "\\" + sourceFile, FileMode.Create))
                    {
                        fs.Write(sourceArray, 0, sourceArray.Length);
                    }
                }
                else
                {
                    using (FileStream fs = new FileStream(SourceFolder + "\\" + rOBJ.Source_File_Name, FileMode.Create))
                    {
                        fs.Write(sourceArray, 0, sourceArray.Length);
                    }
                }

            }
            if (outputArray != null)
            {
                outputFolder = folderPath1 + "\\Output\\";
                if (!Directory.Exists(outputFolder))
                {
                    Directory.CreateDirectory(outputFolder);
                }

                if (rOBJ.Prefix_FileName == 1)
                {
                    outputFile = "Output_" + rOBJ.Output_File_Name;
                    using (FileStream fs = new FileStream(outputFolder + outputFile, FileMode.Create))
                    {
                        fs.Write(outputArray, 0, outputArray.Length);
                    }
                }
                else
                {
                    using (FileStream fs = new FileStream(outputFolder + rOBJ.Output_File_Name, FileMode.Create))
                    {
                        fs.Write(outputArray, 0, outputArray.Length);
                    }
                }
            }
            if (rOBJ.ISAttachPREDICTTemplate == "1" && templateArray != null)
            {
                string templateFolder = folderPath1 + "\\Documents with Template\\";
                if (!Directory.Exists(templateFolder))
                {
                    Directory.CreateDirectory(templateFolder);
                }
                if (rOBJ.Prefix_FileName == 1)
                {
                    templateFile = rOBJ.Template_Name + "_" + rOBJ.Template_File_Name;
                    using (FileStream fs = new FileStream(templateFolder + templateFile, FileMode.Create))
                    {
                        fs.Write(templateArray, 0, templateArray.Length);
                    }
                }
                else
                {
                    using (FileStream fs = new FileStream(templateFolder + rOBJ.Template_File_Name, FileMode.Create))
                    {
                        fs.Write(templateArray, 0, templateArray.Length);
                    }
                }
            }
            if(rOBJ.Source_File_Name != ".pdf")
            {

                compareFolder = folderPath1 + "\\Compare\\";
                if (!Directory.Exists(compareFolder))
                {
                    Directory.CreateDirectory(compareFolder);
                }

                string document1 = SourceFolder + "\\" + rOBJ.Source_File_Name;
                string document2 = outputFolder + "\\" + rOBJ.Output_File_Name;
                Aspose.Words.Document doc1 = new Aspose.Words.Document(document1);
                Aspose.Words.Document doc2 = new Aspose.Words.Document(document2);
                if (doc1.Revisions.Count == 0 && doc2.Revisions.Count == 0)
                    doc1.Compare(doc2, "a", DateTime.Now);
                doc1.Save(compareFolder+"Compare_"+rOBJ.Source_File_Name);
            }
        }

        private void SaveFileinFolderForDownloadNoTemplate(RegOpsQC rOBJ, byte[] sourceArray, byte[] outputArray, string extension1)
        {
            string sourceFile = string.Empty;
            string outputFile = string.Empty;
            string templateFile = string.Empty;
            string folderPath1 = m_SourceFolderPathQC + rOBJ.guidPath + "\\" + rOBJ.Job_ID;
            if (!Directory.Exists(folderPath1))
            {
                Directory.CreateDirectory(folderPath1);
            }

            if (sourceArray != null)
            {
                string SourceFolder = folderPath1 + "\\Source\\";
                if (!Directory.Exists(SourceFolder))
                {
                    Directory.CreateDirectory(SourceFolder);
                }

                if (rOBJ.Prefix_FileName == 1)
                {
                    sourceFile = "Source_" + rOBJ.Source_File_Name;
                    using (FileStream fs = new FileStream(SourceFolder + "\\" + sourceFile, FileMode.Create))
                    {
                        fs.Write(sourceArray, 0, sourceArray.Length);
                    }
                }
                else
                {
                    using (FileStream fs = new FileStream(SourceFolder + "\\" + rOBJ.Source_File_Name, FileMode.Create))
                    {
                        fs.Write(sourceArray, 0, sourceArray.Length);
                    }
                }

            }
            if (outputArray != null)
            {
                string outputFolder = folderPath1 + "\\Output\\";
                if (!Directory.Exists(outputFolder))
                {
                    Directory.CreateDirectory(outputFolder);
                }

                if (rOBJ.Prefix_FileName == 1)
                {
                    outputFile = "Output_" + rOBJ.Output_File_Name;
                    using (FileStream fs = new FileStream(outputFolder + outputFile, FileMode.Create))
                    {
                        fs.Write(outputArray, 0, outputArray.Length);
                    }
                }
                else
                {
                    using (FileStream fs = new FileStream(outputFolder + rOBJ.Output_File_Name, FileMode.Create))
                    {
                        fs.Write(outputArray, 0, outputArray.Length);
                    }
                }
            }
        }

        public string DeleteQCFiles(RegOpsQC obj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(obj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;

                string folderPath = m_SourceFolderPathQC + obj.Job_ID;
                string qcDestPath = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + obj.ORGANIZATION_ID + "\\RegOpsQCDestination" +
                    "\\" + obj.Job_ID;
                if (Directory.Exists(folderPath))
                {
                    RemoveDirectories(folderPath);
                }
                if (Directory.Exists(qcDestPath))
                {
                    RemoveDirectories(qcDestPath);
                }
                int m_res1 = conn.ExecuteNonQuery("UPDATE REGOPS_QC_JOBS SET IS_DELETED=1 ,UPDATED_ID='" + obj.Created_ID + "',UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE ID='" + obj.ID + "'", CommandType.Text, ConnectionState.Open);
                if (m_res1 == 1)
                    return "Success";
                else
                    return "Fail";

            }
            catch
            {
                return "Fail";
            }
        }
        //public string DeleteJobFiles(RegOpsQC obj)
        //{
        //    string result = string.Empty;
        //    OracleConnection o_Con = new OracleConnection();
        //    try
        //    {
        //        if (HttpContext.Current.Session["UserId"] != null)
        //        {
        //            int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
        //            Connection conn = new Connection();
        //            string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
        //            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
        //            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
        //            conn.connectionstring = m_DummyConn;                   
        //            o_Con.ConnectionString = m_DummyConn;
        //            o_Con.Open();
        //            string folderPath = m_SourceFolderPathQC + obj.Job_ID; int countDel = 0; int m_res1 = 0;
        //            string qcDestPath = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + obj.ORGANIZATION_ID + "\\RegOpsQCDestination\\" + obj.Job_ID;
        //            if (Directory.Exists(folderPath))
        //            {
        //                RemoveDirectories(folderPath);
        //                countDel++;
        //            }
        //            if (Directory.Exists(qcDestPath))
        //            {
        //                RemoveDirectories(qcDestPath);
        //                countDel++;
        //            }
        //            if (countDel > 0)
        //            {
        //                string m_query = string.Empty;
        //                m_query += "UPDATE REGOPS_QC_JOBS SET IS_DELETED=1 ,UPDATED_ID=:UPDATED_ID,UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE ID=:ID";
        //                cmd = new OracleCommand(m_query, o_Con);
        //                cmd.Parameters.Add("UPDATED_ID", obj.Created_ID);
        //                cmd.Parameters.Add("ID", obj.ID);
        //                m_res1 = cmd.ExecuteNonQuery();
        //            }
        //            if (m_res1 == 1)
        //                result = "Success";
        //            else
        //                result = "Fail";                
        //        }
        //        else
        //        {
        //            result = "Login Page";
        //        }
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogger.Error(ex);
        //        return "Fail";
        //    }
        //    finally
        //    {
        //        o_Con.Close();
        //    }
        //}

        public string DeleteJobFiles(RegOpsQC obj)
        {
            string result = string.Empty;
            OracleConnection o_Con = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    Connection conn = new Connection();
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    o_Con.ConnectionString = m_DummyConn;
                    o_Con.Open();
                    int m_Res = 0; int m_Res1 = 0; int m_Res2 = 0; int m_Res3 = 0;
                    string m_query = string.Empty; string m_query1 = string.Empty; string m_query2 = string.Empty; string m_query3 = string.Empty;

                    DataSet ds = new DataSet();
                    ds = conn.GetDataSet("select count(job_id) as JOB_ID from REGOPS_JOB_FILES where DCM_INPUT_FILE_ID in (select DCM_INPUT_FILE_ID from REGOPS_JOB_FILES where JOB_ID=" + obj.ID + ") and JOB_ID !=" + obj.ID + "", CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds))
                    {
                        Int64 Temp_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["JOB_ID"].ToString());
                        if (Temp_ID >= 1)
                        {
                            return "Source File contains Multiple Jobs";
                        }
                        else
                        {
                            DataSet dset = conn.GetDataSet("select DCM_INPUT_FILE_ID,DCM_OUTPUT_FILE_ID,DCM_TEMPLATE_FILE_ID from regops_job_files where JOB_ID=" + obj.ID, CommandType.Text, ConnectionState.Open);
                            if (conn.Validate(dset))
                            {
                                for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                                {
                                    Int64 templateFileID = 0; Int64 inputFileID = 0; Int64 outputFileID = 0;
                                    if (dset.Tables[0].Rows[i]["DCM_INPUT_FILE_ID"].ToString() != null && dset.Tables[0].Rows[i]["DCM_INPUT_FILE_ID"].ToString() != "")
                                    {
                                        inputFileID = Convert.ToInt64(dset.Tables[0].Rows[i]["DCM_INPUT_FILE_ID"].ToString());
                                    }
                                    if (dset.Tables[0].Rows[i]["DCM_OUTPUT_FILE_ID"].ToString() != null && dset.Tables[0].Rows[i]["DCM_OUTPUT_FILE_ID"].ToString() != "")
                                    {
                                        outputFileID = Convert.ToInt64(dset.Tables[0].Rows[i]["DCM_OUTPUT_FILE_ID"].ToString());
                                    }

                                    if (dset.Tables[0].Rows[i]["DCM_TEMPLATE_FILE_ID"].ToString() != null && dset.Tables[0].Rows[i]["DCM_TEMPLATE_FILE_ID"].ToString() != "")
                                    {
                                        templateFileID = Convert.ToInt64(dset.Tables[0].Rows[i]["DCM_TEMPLATE_FILE_ID"].ToString());
                                    }
                                    if (templateFileID == 0)
                                    {
                                        if (inputFileID != 0)
                                        {
                                            m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID =:InputFileID and JOB_ID =:ID";
                                            cmd = new OracleCommand(m_query, o_Con);
                                            cmd.Parameters.Add("InputFileID", inputFileID);
                                            cmd.Parameters.Add("ID", obj.ID);
                                            m_Res = cmd.ExecuteNonQuery();
                                        }
                                        else
                                        {
                                            m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID is null and JOB_ID =:ID";
                                            cmd = new OracleCommand(m_query, o_Con);
                                            cmd.Parameters.Add("ID", obj.ID);
                                            m_Res = cmd.ExecuteNonQuery();
                                        }

                                        if (m_Res > 0)
                                        {
                                            m_query1 = "DELETE FROM DCM_FILE_RELATIONS WHERE DCM_FILE_ID IN (:InputFileID,:OutputFileID)";
                                            cmd = new OracleCommand(m_query1, o_Con);
                                            cmd.Parameters.Add("InputFileID", inputFileID);
                                            cmd.Parameters.Add("OutputFileID", outputFileID);
                                            m_Res1 = cmd.ExecuteNonQuery();
                                            if (m_Res1 > 0)
                                            {
                                                m_query2 = "DELETE FROM REGOPS_PROJ_FILE_ACTIVITY WHERE FILE_ID IN (:InputFileID,:OutputFileID)";
                                                cmd = new OracleCommand(m_query2, o_Con);
                                                cmd.Parameters.Add("InputFileID", inputFileID);
                                                cmd.Parameters.Add("OutputFileID", outputFileID);
                                                m_Res2 = cmd.ExecuteNonQuery();
                                                if (m_Res2 > 0)
                                                {
                                                    m_query3 = "DELETE FROM DCM_FILES WHERE FILE_ID IN (:InputFileID,:OutputFileID)";
                                                    cmd = new OracleCommand(m_query3, o_Con);
                                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                                    cmd.Parameters.Add("OutputFileID", outputFileID);
                                                    m_Res3 = cmd.ExecuteNonQuery();
                                                    if (m_Res3 > 0)
                                                    {
                                                        result = "Success";
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    else
                                    {
                                        if (inputFileID != 0)
                                        {
                                            m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID =:InputFileID and JOB_ID =:ID";
                                            cmd = new OracleCommand(m_query, o_Con);
                                            cmd.Parameters.Add("InputFileID", inputFileID);
                                            cmd.Parameters.Add("ID", obj.ID);
                                            m_Res = cmd.ExecuteNonQuery();
                                        }
                                        else
                                        {
                                            m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID is null and JOB_ID =:ID";
                                            cmd = new OracleCommand(m_query, o_Con);
                                            cmd.Parameters.Add("ID", obj.ID);
                                            m_Res = cmd.ExecuteNonQuery();
                                        }

                                        if (m_Res > 0)
                                        {
                                            m_query1 = "DELETE FROM DCM_FILE_RELATIONS WHERE DCM_FILE_ID IN (:InputFileID,:OutputFileID,:TemplateFileID)";
                                            cmd = new OracleCommand(m_query1, o_Con);
                                            cmd.Parameters.Add("InputFileID", inputFileID);
                                            cmd.Parameters.Add("OutputFileID", outputFileID);
                                            cmd.Parameters.Add("TemplateFileID", templateFileID);
                                            m_Res1 = cmd.ExecuteNonQuery();
                                            if (m_Res1 > 0)
                                            {
                                                m_query2 = "DELETE FROM REGOPS_PROJ_FILE_ACTIVITY WHERE FILE_ID IN (:InputFileID,:OutputFileID,:TemplateFileID)";
                                                cmd = new OracleCommand(m_query2, o_Con);
                                                cmd.Parameters.Add("InputFileID", inputFileID);
                                                cmd.Parameters.Add("OutputFileID", outputFileID);
                                                cmd.Parameters.Add("TemplateFileID", templateFileID);
                                                m_Res2 = cmd.ExecuteNonQuery();
                                                if (m_Res2 > 0)
                                                {
                                                    m_query3 = "DELETE FROM DCM_FILES WHERE FILE_ID IN (:InputFileID,:OutputFileID,:TemplateFileID)";
                                                    cmd = new OracleCommand(m_query3, o_Con);
                                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                                    cmd.Parameters.Add("OutputFileID", outputFileID);
                                                    cmd.Parameters.Add("TemplateFileID", templateFileID);
                                                    m_Res3 = cmd.ExecuteNonQuery();
                                                    if (m_Res3 > 0)
                                                    {
                                                        result = "Success";
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }

                            }
                        }

                        int m_res1 = 0;
                        string m_query4 = string.Empty;
                        m_query4 += "UPDATE REGOPS_QC_JOBS SET IS_DELETED=1 ,UPDATED_ID=:UPDATED_ID,UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE ID=:ID";
                        cmd = new OracleCommand(m_query4, o_Con);
                        cmd.Parameters.Add("UPDATED_ID", obj.Created_ID);
                        cmd.Parameters.Add("ID", obj.ID);
                        m_res1 = cmd.ExecuteNonQuery();

                        if (m_res1 == 1)
                            result = "Success";
                        else
                            result = "Fail";
                    }
                    else
                    {
                        result = "Login Page";
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Fail";
            }
            finally
            {
                o_Con.Close();
            }
        }

        // Delete Source file contains Multiple Jobs
        public string DeleteMultipleJobFiles(RegOpsQC obj)
        {
            string result = string.Empty;
            OracleConnection o_Con = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    Connection conn = new Connection();
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    o_Con.ConnectionString = m_DummyConn;
                    o_Con.Open();
                    int m_Res = 0; int m_Res1 = 0; int m_Res2 = 0; int m_Res3 = 0; int m_Res6 = 0;
                    string m_query = string.Empty; string m_query1 = string.Empty; string m_query2 = string.Empty; string m_query3 = string.Empty; string m_query4 = string.Empty;

                    DataSet ds = new DataSet();
                    DataSet dset = conn.GetDataSet("select DCM_INPUT_FILE_ID,DCM_OUTPUT_FILE_ID,DCM_TEMPLATE_FILE_ID from regops_job_files where JOB_ID=" + obj.ID, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(dset))
                    {
                        for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                        {
                            Int64 templateFileID = 0; Int64 inputFileID = 0; Int64 outputFileID = 0;
                            if (dset.Tables[0].Rows[i]["DCM_INPUT_FILE_ID"].ToString() != null && dset.Tables[0].Rows[i]["DCM_INPUT_FILE_ID"].ToString() != "")
                            {
                                inputFileID = Convert.ToInt64(dset.Tables[0].Rows[i]["DCM_INPUT_FILE_ID"].ToString());
                            }
                            if (dset.Tables[0].Rows[i]["DCM_OUTPUT_FILE_ID"].ToString() != null && dset.Tables[0].Rows[i]["DCM_OUTPUT_FILE_ID"].ToString() != "")
                            {
                                outputFileID = Convert.ToInt64(dset.Tables[0].Rows[i]["DCM_OUTPUT_FILE_ID"].ToString());
                            }

                            if (dset.Tables[0].Rows[i]["DCM_TEMPLATE_FILE_ID"].ToString() != null && dset.Tables[0].Rows[i]["DCM_TEMPLATE_FILE_ID"].ToString() != "")
                            {
                                templateFileID = Convert.ToInt64(dset.Tables[0].Rows[i]["DCM_TEMPLATE_FILE_ID"].ToString());
                            }
                            if (templateFileID == 0)
                            {
                                if (inputFileID != 0)
                                {
                                    m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID =:InputFileID and JOB_ID =:ID";
                                    cmd = new OracleCommand(m_query, o_Con);
                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                    cmd.Parameters.Add("ID", obj.ID);
                                    m_Res = cmd.ExecuteNonQuery();

                                    m_query4 = "UPDATE  REGOPS_JOB_FILES SET DCM_INPUT_FILE_ID=null  WHERE DCM_INPUT_FILE_ID=:InputFileID";
                                    cmd = new OracleCommand(m_query4, o_Con);
                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                    m_Res6 = cmd.ExecuteNonQuery();
                                    if (m_Res6 > 0)
                                    {
                                        result = "Success";
                                    }
                                }
                                else
                                {
                                    m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID is null and JOB_ID =:ID";
                                    cmd = new OracleCommand(m_query, o_Con);
                                    cmd.Parameters.Add("ID", obj.ID);
                                    m_Res = cmd.ExecuteNonQuery();
                                }
                                if (m_Res > 0)
                                {
                                    m_query1 = "DELETE FROM DCM_FILE_RELATIONS WHERE DCM_FILE_ID IN (:InputFileID,:OutputFileID)";
                                    cmd = new OracleCommand(m_query1, o_Con);
                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                    cmd.Parameters.Add("OutputFileID", outputFileID);
                                    m_Res1 = cmd.ExecuteNonQuery();
                                    if (m_Res1 > 0)
                                    {
                                        m_query2 = "DELETE FROM REGOPS_PROJ_FILE_ACTIVITY WHERE FILE_ID IN (:InputFileID,:OutputFileID)";
                                        cmd = new OracleCommand(m_query2, o_Con);
                                        cmd.Parameters.Add("InputFileID", inputFileID);
                                        cmd.Parameters.Add("OutputFileID", outputFileID);
                                        m_Res2 = cmd.ExecuteNonQuery();
                                        if (m_Res2 > 0)
                                        {
                                            m_query3 = "DELETE FROM DCM_FILES WHERE FILE_ID IN (:InputFileID,:OutputFileID)";
                                            cmd = new OracleCommand(m_query3, o_Con);
                                            cmd.Parameters.Add("InputFileID", inputFileID);
                                            cmd.Parameters.Add("OutputFileID", outputFileID);
                                            m_Res3 = cmd.ExecuteNonQuery();
                                            if (m_Res3 > 0)
                                            {
                                                result = "Success";
                                            }
                                        }
                                    }
                                }

                            }
                            else
                            {
                                if (inputFileID != 0)
                                {
                                    m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID =:InputFileID and JOB_ID =:ID";
                                    cmd = new OracleCommand(m_query, o_Con);
                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                    cmd.Parameters.Add("ID", obj.ID);
                                    m_Res = cmd.ExecuteNonQuery();

                                    m_query4 = "UPDATE  REGOPS_JOB_FILES SET DCM_INPUT_FILE_ID=null  WHERE DCM_INPUT_FILE_ID=:InputFileID";
                                    cmd = new OracleCommand(m_query4, o_Con);
                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                    m_Res6 = cmd.ExecuteNonQuery();
                                    if (m_Res6 > 0)
                                    {
                                        result = "Success";
                                    }
                                }
                                else
                                {
                                    m_query = "DELETE FROM regops_job_files WHERE  DCM_INPUT_FILE_ID is null and JOB_ID =:ID";
                                    cmd = new OracleCommand(m_query, o_Con);
                                    cmd.Parameters.Add("ID", obj.ID);
                                    m_Res = cmd.ExecuteNonQuery();
                                }

                                if (m_Res > 0)
                                {
                                    m_query1 = "DELETE FROM DCM_FILE_RELATIONS WHERE DCM_FILE_ID IN (:InputFileID,:OutputFileID,:TemplateFileID)";
                                    cmd = new OracleCommand(m_query1, o_Con);
                                    cmd.Parameters.Add("InputFileID", inputFileID);
                                    cmd.Parameters.Add("OutputFileID", outputFileID);
                                    cmd.Parameters.Add("TemplateFileID", templateFileID);
                                    m_Res1 = cmd.ExecuteNonQuery();
                                    if (m_Res1 > 0)
                                    {
                                        m_query2 = "DELETE FROM REGOPS_PROJ_FILE_ACTIVITY WHERE FILE_ID IN (:InputFileID,:OutputFileID,:TemplateFileID)";
                                        cmd = new OracleCommand(m_query2, o_Con);
                                        cmd.Parameters.Add("InputFileID", inputFileID);
                                        cmd.Parameters.Add("OutputFileID", outputFileID);
                                        cmd.Parameters.Add("TemplateFileID", templateFileID);
                                        m_Res2 = cmd.ExecuteNonQuery();
                                        if (m_Res2 > 0)
                                        {
                                            m_query3 = "DELETE FROM DCM_FILES WHERE FILE_ID IN (:InputFileID,:OutputFileID,:TemplateFileID)";
                                            cmd = new OracleCommand(m_query3, o_Con);
                                            cmd.Parameters.Add("InputFileID", inputFileID);
                                            cmd.Parameters.Add("OutputFileID", outputFileID);
                                            cmd.Parameters.Add("TemplateFileID", templateFileID);
                                            m_Res3 = cmd.ExecuteNonQuery();
                                            if (m_Res3 > 0)
                                            {
                                                result = "Success";
                                            }
                                        }
                                    }

                                }
                            }
                        }

                        int m_res1 = 0;
                        string m_query5 = string.Empty;
                        m_query5 += "UPDATE REGOPS_QC_JOBS SET IS_DELETED=1 ,UPDATED_ID=:UPDATED_ID,UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE ID=:ID";
                        cmd = new OracleCommand(m_query5, o_Con);
                        cmd.Parameters.Add("UPDATED_ID", obj.Created_ID);
                        cmd.Parameters.Add("ID", obj.ID);
                        m_res1 = cmd.ExecuteNonQuery();

                        if (m_res1 == 1)
                            result = "Success";
                        else
                            result = "Fail";
                    }
                    else
                    {
                        result = "Login Page";
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Fail";
            }
            finally
            {
                o_Con.Close();
            }
        }
        private void RemoveDirectories(string strpath)
        {
            //This condition is used to delete all files from the Directory
            foreach (string file in Directory.GetFiles(strpath))
            {
                File.Delete(file);
            }
            //This condition is used to check all child Directories and delete files
            foreach (string subfolder in Directory.GetDirectories(strpath))
            {
                RemoveDirectories(subfolder);
            }
            Directory.Delete(strpath);
        }
        /// <summary>
        /// To save check list data in Db
        /// </summary>
        /// <param name="rOBJ"></param>
        /// <param name="jobid"></param>
        /// <returns></returns>
        public string SaveCheckListData(RegOpsQC rOBJ, Int64 jobid)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;

                string result = string.Empty;
                rOBJ.QCJobCheckListInfo = JsonConvert.DeserializeObject<List<RegOpsQC>>(rOBJ.QCJobCheckListDetails);
                if (rOBJ.QCJobCheckListInfo.Count > 0)
                {
                    foreach (RegOpsQC obj in rOBJ.QCJobCheckListInfo)
                    {
                        DataSet dsSeq = new DataSet();
                        dsSeq = conn.GetDataSet("SELECT REGOPS_QC_JOBS_CHECKLIST_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsSeq))
                        {
                            obj.ID = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                        }
                        string m_Query = "INSERT INTO REGOPS_QC_JOBS_CHECKLIST(ID,JOB_ID,CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID) VALUES(";
                        m_Query = m_Query + obj.ID + ", '" + jobid + "'," + obj.CheckList_ID + "," + obj.QC_Type + ",'" + obj.Check_Parameter + "'," + obj.Group_Check_ID + ")";
                        int m_Res = conn.ExecuteNonQuery(m_Query, CommandType.Text, ConnectionState.Open);
                        if (m_Res > 0)
                        {
                            result = "Success";
                        }
                        else
                        {
                            result = "Fail";
                        }
                    }
                }
                if (rOBJ.QCJobCheckListInfo[0].Preference_Name != null && rOBJ.QCJobCheckListInfo[0].Preference_Name != "")
                {
                    SavePreferencesDetails(rOBJ);
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Error";
            }
        }

        public string SavePreferencesDetails(RegOpsQC rOBJ)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;

                string result = string.Empty;
                rOBJ.QCJobCheckListInfo = JsonConvert.DeserializeObject<List<RegOpsQC>>(rOBJ.QCJobCheckListDetails);

                if (rOBJ.QCJobCheckListInfo.Count > 0)
                {
                    Int64 regOPS_QC_Pref_ID = 0;
                    DataSet dsPref = new DataSet();
                    dsPref = conn.GetDataSet("SELECT PREFERENCE_NAME FROM REGOPS_QC_PREFERENCES where upper(PREFERENCE_NAME)='" + rOBJ.QCJobCheckListInfo[0].Preference_Name.ToUpper() + "'", CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(dsPref))
                    {
                        return "PreferenceExists";
                    }
                    else
                    {

                        DataSet dsSeq1 = new DataSet();
                        dsSeq1 = conn.GetDataSet("SELECT REGOPS_QC_PREFERENCES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsSeq1))
                        {
                            regOPS_QC_Pref_ID = Convert.ToInt64(dsSeq1.Tables[0].Rows[0]["NEXTVAL"].ToString());
                        }
                        string m_Query = "INSERT INTO REGOPS_QC_PREFERENCES(ID,PREFERENCE_NAME,IS_DEFAULT_PREFERENCE,CREATED_ID,CREATED_DATE,FILE_FORMAT) VALUES(";
                        m_Query = m_Query + regOPS_QC_Pref_ID + ", '" + rOBJ.QCJobCheckListInfo[0].Preference_Name + "'," + rOBJ.QCJobCheckListInfo[0].Is_Default_Preference + "," + rOBJ.Created_ID + ",(SELECT SYSDATE FROM DUAL),'" + rOBJ.File_Format + "')";
                        int m_Res = conn.ExecuteNonQuery(m_Query, CommandType.Text, ConnectionState.Open);
                        if (m_Res > 0)
                        {
                            result = "Success";
                        }
                        else
                        {
                            result = "Fail";
                        }

                    }

                    foreach (RegOpsQC obj in rOBJ.QCJobCheckListInfo)
                    {
                        DataSet dsSeq = new DataSet();
                        dsSeq = conn.GetDataSet("SELECT REGOPS_QC_PREFER_DETAILS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsSeq))
                        {
                            obj.ID = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                        }
                        string m_Query = "INSERT INTO REGOPS_QC_PREFERENCE_DETAILS(ID,QC_PREFERENCES_ID,CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID,CREATED_ID) VALUES(";
                        m_Query = m_Query + obj.ID + ", '" + regOPS_QC_Pref_ID + "'," + obj.CheckList_ID + "," + obj.QC_Type + ",'" + obj.Check_Parameter + "'," + obj.Group_Check_ID + "," + obj.Created_ID + ")";
                        int m_Res = conn.ExecuteNonQuery(m_Query, CommandType.Text, ConnectionState.Open);
                        if (m_Res > 0)
                        {
                            result = "Success";
                        }
                        else
                        {
                            result = "Fail";
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Error";
            }
        }
        /// <summary>
        /// get the Job iD sequecnce to create a unique jobID
        /// </summary>
        /// <param name="createdID"></param>
        /// <returns></returns>
        public string GetJobId(Int64 createdID)
        {
            OracleConnection con = new OracleConnection();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(createdID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;

                DataSet verify = new DataSet();
                verify = conn.GetDataSet("SELECT count(1) as Max_Length  FROM REGOPS_QC_JOBS", CommandType.Text, ConnectionState.Open);
                string jobid;
                jobid = verify.Tables[0].Rows[0]["Max_Length"].ToString();
                if (jobid != "0")
                {
                    string val1 = (Convert.ToDecimal(jobid) + 1).ToString();
                    return jobid = "QC" + val1.PadLeft(4, '0');
                }
                else
                {
                    return jobid = "QC" + "0001";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Error";
            }
            finally
            {
                con.Close();
            }

        }
        public int[] GetNosecurity(RegOpsQC rObj, string libraryvalue, string FileFormate)
        {
            int[] Ids = new int[3];
            Connection conn = new Connection();
            string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;

            DataSet ds = conn.GetDataSet("select LIBRARY_ID,PARENT_KEY,COMPOSITE_CHECK from CHECKS_LIBRARY where library_value='" + libraryvalue + "' And LIBRARY_NAME='" + FileFormate + "'", CommandType.Text, ConnectionState.Open);
            if (ds.Tables[0].Rows.Count > 0)
            {
                Ids[0] = Convert.ToInt32(ds.Tables[0].Rows[0]["LIBRARY_ID"]);
                Ids[1] = Convert.ToInt32(ds.Tables[0].Rows[0]["PARENT_KEY"]);
                Ids[2] = Convert.ToInt32(ds.Tables[0].Rows[0]["COMPOSITE_CHECK"]);
            }
            return Ids;
        }
        private List<String> DirSearch(string sDir)
        {
            List<String> files = new List<String>();
            try
            {
                foreach (string f in Directory.GetFiles(sDir))
                {
                    files.Add(f);
                }
                foreach (string d in Directory.GetDirectories(sDir))
                {
                    files.AddRange(DirSearch(d));
                }
            }
            catch
            {

            }

            return files;
        }
        private List<String> AllFolderNames(string sDir)
        {
            List<String> folders = new List<String>();
            try
            {
                foreach (string d in Directory.GetDirectories(sDir))
                {
                    folders.Add(d);
                    folders.AddRange(AllFolderNames(d));

                }
            }
            catch
            {

            }
            return folders;
        }

        private List<String> AllRootFolderNames(string sDir)
        {
            List<String> folders = new List<String>();
            try
            {
                foreach (string d in Directory.GetDirectories(sDir))
                {
                    folders.Add(d);
                    // folders.AddRange(AllFolderNames(d));

                }
            }
            catch
            {

            }
            return folders;
        }

        public string DocumentQCChecksForQCValidation(RegOpsQC rObj)
        {
            string res = string.Empty;
            string srcPath = string.Empty;
            string destPath = string.Empty;
            string destPath1 = string.Empty;
            string wordPredictPath = string.Empty;
            string predictTempName = string.Empty;
            int planFlag = 0;
            bool wordFile = false;
            Int64 pageCount = 0;
            bool docxFixed = false;
            try
            {
                rObj.JID = rObj.ID;
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                var myList = new List<string>();
                string[] files1 = new string[0];
                string[] files2 = new string[0];
                string sourceFolderPath = m_SourceFolderPathQC;
                if (rObj.Job_Type != "QC")
                {
                    destPath1 = sourceFolderPath + rObj.Job_ID + "/Output/";
                }
                else
                {
                    destPath1 = sourceFolderPath + rObj.Job_ID + "/Source/";
                }

                string sourcePath = sourceFolderPath + rObj.Job_ID + "/Source/";
                double sizeFiles = 0;
                List<String> Allfiles = new List<String>();
                List<String> Allfolders = new List<String>();
                List<String> AllfilesProcessed = new List<String>();
                Allfiles = DirSearch(destPath1); AllfilesProcessed = DirSearch(sourcePath);
                Allfolders = AllFolderNames(destPath1);
                Int64 noOfFiles = 0;
                Int64 pages;

                foreach (string file in Allfiles)
                {
                    string extention = Path.GetExtension(file);
                    if (extention.Equals(".docx", StringComparison.OrdinalIgnoreCase) || extention.Equals(".doc", StringComparison.OrdinalIgnoreCase) || extention.Equals(".pdf", StringComparison.OrdinalIgnoreCase))
                    {
                        noOfFiles += 1;
                    }
                    if (extention.Equals(".docx", StringComparison.OrdinalIgnoreCase) || extention.Equals(".doc", StringComparison.OrdinalIgnoreCase))
                    {
                        wordFile = true;
                    }
                }
                foreach (string file1 in AllfilesProcessed)
                {
                    sizeFiles = 0;
                    double desfileSize = new FileInfo(file1).Length;
                    sizeFiles += desfileSize;
                }
                int m_res = conn.ExecuteNonQuery("UPDATE REGOPS_QC_JOBS SET NO_OF_FILES=" + noOfFiles + " ,FILES_SIZE=" + sizeFiles + ",JOB_STATUS='In Progress', JOB_START_TIME=(SELECT CURRENT_TIMESTAMP FROM DUAL),UPDATED_ID='" + rObj.Created_ID + "',UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE ID='" + rObj.ID + "'", CommandType.Text, ConnectionState.Open);
                rObj.Job_Status = "Completed";
                string m_Query = string.Empty;
                if (rObj.proj_ID != 0)
                {
                    m_Query = "SELECT STATUS FROM REGOPS_PROJECTS WHERE PROJ_ID=" + rObj.proj_ID + " AND STATUS='New'";
                    DataSet ds = new DataSet();
                    ds = conn.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds))
                    {
                        int m_res11 = conn.ExecuteNonQuery("UPDATE REGOPS_PROJECTS SET STATUS='In Progress', UPDATED_ID='" + rObj.Created_ID + "',UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE PROJ_ID='" + rObj.proj_ID + "'", CommandType.Text, ConnectionState.Open);
                    }
                }

                Document doc = null;
                Aspose.Pdf.Document PdfDoc = null;

                if (rObj.JobPlanListData.Count > 0)
                {
                    for (int j = 0; j < rObj.JobPlanListData.Count; j++)
                    {
                        rObj.Preference_ID = Convert.ToInt64(rObj.JobPlanListData[j].Preference_ID);
                        rObj.Qc_Preferences_Id = Convert.ToInt64(rObj.JobPlanListData[j].Preference_ID);
                        rObj.WordTemplate_ID = rObj.JobPlanListData[j].WordTemplate_ID;
                        string templatePath = string.Empty;
                        bool templatecontentexists = false;
                        bool templateexists = false;
                        if (rObj.ISAttachPREDICTTemplate == "Yes" && wordFile == true && rObj.Job_Type != "QC")
                        {
                            if (rObj.WordTemplate_ID > 0)
                            {
                                DataSet ds = new DataSet(); string predictFileName = string.Empty;
                                byte[] TemplateData = null;
                                string query = "SELECT TEMPLATE_NAME,FILE_NAME,TEMPLATE_CONTENT FROM REGOPS_WORD_STYLES_METADATA where TEMPLATE_ID= " + rObj.WordTemplate_ID;
                                ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(ds))
                                {
                                    templateexists = true;
                                    predictTempName = ds.Tables[0].Rows[0]["TEMPLATE_NAME"].ToString();
                                    predictFileName = ds.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                    if (ds.Tables[0].Rows[0]["TEMPLATE_CONTENT"].ToString() != null && ds.Tables[0].Rows[0]["TEMPLATE_CONTENT"].ToString() != "")
                                    {
                                        TemplateData = (byte[])ds.Tables[0].Rows[0]["TEMPLATE_CONTENT"];
                                    }
                                    if (TemplateData != null)
                                    {
                                        Guid g;
                                        g = Guid.NewGuid();
                                        templatePath = m_SourceFolderPathQC + "\\" + g;
                                        if (!Directory.Exists(templatePath))
                                        {
                                            Directory.CreateDirectory(templatePath);
                                        }

                                        using (FileStream fs = new FileStream(templatePath + "\\" + predictFileName, FileMode.Create))
                                        {
                                            fs.Write(TemplateData, 0, TemplateData.Length);
                                            templatecontentexists = true;
                                        }
                                    }
                                }
                            }
                        }

                        // added for folder checks 


                        if (rObj.Category == "Dossier")
                        {
                            string ext = Path.GetExtension(rObj.File_Name);
                            if (ext == ".zip")
                            {
                                bool IsFolderNameUpdate = false;
                                DirectoryInfo dir = new DirectoryInfo(destPath1);
                                var MainRootfolders = dir.GetDirectories().OrderBy(x => x.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.fff tt")).ToArray();
                                // var MainRootfolders = dir.GetDirectories().OrderBy(x => x.CreationTime).ToArray();
                                // string[] MainRootfolders = Directory.GetDirectories(destPath1);
                                int i = 0;
                                foreach (var folder in MainRootfolders)
                                {
                                    List<RegOpsQC> folderchkLst = new List<RegOpsQC>();
                                    List<RegOpsQC> filechkLst = new List<RegOpsQC>();
                                    folderchkLst = GetFolderCheckListByJobId(rObj);
                                    rObj.CheckList = folderchkLst;
                                    List<RegOpsQC> mainFolderChkLst = new List<RegOpsQC>();
                                    mainFolderChkLst = folderchkLst.Where(x => x.Parent_Check_ID == 0).ToList();
                                    FolderActions folderObj = new FolderActions();

                                    //string FolderName = new DirectoryInfo(folder).Name;
                                    string FolderName = folder.Name;
                                    foreach (RegOpsQC chk in mainFolderChkLst)
                                    {
                                        chk.Job_ID = rObj.Job_ID;
                                        //  chk.FolderPath = folder;
                                        chk.FolderPath = folder.FullName;
                                        chk.Folder_Name = FolderName;
                                        chk.JID = rObj.ID;
                                        chk.Created_ID = rObj.Created_ID;
                                        chk.Prefix_FileName = rObj.Prefix_FileName;
                                        // only check
                                        if (chk.Check_Name.Equals("No Sub Folder", StringComparison.OrdinalIgnoreCase))
                                            folderObj.NoSubFolderCheck(chk);
                                        else if (chk.Check_Name.Equals("Special character for Folder/File Name", StringComparison.OrdinalIgnoreCase))
                                        {
                                            IsFolderNameUpdate = true;
                                            folderObj.FolderNamingConventionCheck(chk, folderchkLst);
                                        }
                                        else if (chk.Check_Name.Equals("Folder Name Prefix", StringComparison.OrdinalIgnoreCase))
                                        {
                                            i++;
                                            chk.folderNum = i;
                                            folderObj.FolderNamePrefixCheck(chk, folderchkLst);
                                        }

                                        else if (chk.Check_Name.Equals("Sequential Files Naming", StringComparison.OrdinalIgnoreCase))
                                            folderObj.FolderSequenceNameCheck(chk);
                                        if (chk.Job_Status == "Error")
                                            rObj.Job_Status = chk.Job_Status;
                                    }
                                    string UpdateFolderPath = string.Empty;
                                    bool IsFolderPathUpdate = false;
                                    bool IsSequentialFileName = false;
                                    foreach (RegOpsQC chk in mainFolderChkLst)
                                    {
                                        chk.Job_ID = rObj.Job_ID;
                                        chk.Folder_Name = FolderName;

                                        chk.JID = rObj.ID;
                                        chk.Created_ID = rObj.Created_ID;
                                        chk.Prefix_FileName = rObj.Prefix_FileName;

                                        if ((chk.QC_Result == "Failed" && chk.Check_Type == 1))
                                        {
                                            if (chk.Check_Name.Equals("Special character for Folder/File Name", StringComparison.OrdinalIgnoreCase))
                                            {
                                                if (IsFolderPathUpdate == true)
                                                {
                                                    chk.FolderPath = UpdateFolderPath;
                                                }
                                                folderObj.FolderNamingConventionFix(chk, folderchkLst);
                                                UpdateFolderPath = chk.FolderPath;
                                                IsFolderPathUpdate = true;
                                                IsFolderNameUpdate = true;
                                            }
                                            else if (chk.Check_Name.Equals("Folder Name Prefix", StringComparison.OrdinalIgnoreCase))
                                            {
                                                folderObj.FolderNamePrefixFix(chk, folderchkLst);
                                                UpdateFolderPath = chk.FolderPath;
                                                IsFolderPathUpdate = true;
                                            }
                                            else if (chk.Check_Name.Equals("Sequential Files Naming", StringComparison.OrdinalIgnoreCase))
                                            {
                                                if (IsFolderPathUpdate == true)
                                                {
                                                    chk.FolderPath = UpdateFolderPath;
                                                }
                                                folderObj.FolderSequenceNameFix(chk, folderchkLst);
                                                UpdateFolderPath = chk.FolderPath;
                                                IsFolderPathUpdate = true;
                                                IsSequentialFileName = true;
                                                rObj.IsSequentialFileName = IsSequentialFileName;
                                            }

                                        }

                                        if (chk.Check_Name.Equals("Maximum Folder Length", StringComparison.OrdinalIgnoreCase))
                                        {
                                            if (IsFolderPathUpdate == true)
                                            {
                                                chk.FolderPath = UpdateFolderPath;
                                            }
                                            folderObj.MaximumFolderLenghtCheck(chk);
                                        }

                                    }

                                    if (folderchkLst != null && folderchkLst.Count > 0)
                                        SaveValidateResults(folderchkLst);

                                    // rename file names with given special characters

                                    if (IsFolderNameUpdate == true)
                                    {
                                        filechkLst = GetFolderCheckListByJobId(rObj);
                                        rObj.CheckList = filechkLst;
                                        rObj.FolderPath = UpdateFolderPath;
                                        List<RegOpsQC> mainFolderChkLst1 = new List<RegOpsQC>();
                                        filechkLst = filechkLst.Where(x => x.Check_Name == "Special character for Folder/File Name" || x.Check_Name == "Accepted Special Characters" || x.Check_Name == "Replace Special Characters").ToList();
                                        mainFolderChkLst1 = filechkLst.Where(x => x.Parent_Check_ID == 0).ToList();
                                        DirectoryInfo folderNew = new DirectoryInfo(rObj.FolderPath);
                                        FileInfo[] newFile = folderNew.GetFiles();
                                        foreach (var s in newFile)
                                        {
                                            foreach (RegOpsQC chk in mainFolderChkLst1)
                                            {
                                                chk.Job_ID = rObj.Job_ID;
                                                chk.File_Name = s.Name;
                                                chk.JID = rObj.ID;
                                                chk.Created_ID = rObj.Created_ID;
                                                chk.Folder_Name = folderNew.Name;
                                                chk.FolderPath = rObj.FolderPath;
                                                if (chk.Check_Name.Equals("Special character for Folder/File Name", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    folderObj.FileNamingConvention(chk, filechkLst);
                                                    rObj.CheckParamVal = chk.CheckParamVal;
                                                    rObj.CheckAcceptedParamVal = chk.CheckAcceptedParamVal;

                                                }


                                            }
                                            if (filechkLst != null && filechkLst.Count > 0)
                                                SaveValidateResults(filechkLst);
                                        }

                                    }

                                }

                                if (rObj.Category == "Dossier")
                                {
                                    Allfiles = DirSearch(destPath1);
                                }
                            }
                        }
                        foreach (string s in Allfiles)
                        {
                            rObj.File_Format = null;
                            string PDFSecCheck = string.Empty;
                            string WordSecCheck = string.Empty;
                            string WordTrackChangesCheck = string.Empty;

                            string ext = Path.GetExtension(s);
                            string filename = Path.GetFileName(s);
                            string foldername = Path.GetDirectoryName(s);
                            string[] folderPathArr;
                            if (rObj.Job_Type != "QC")
                            {
                                folderPathArr = foldername.Split(new string[] { "Output\\" }, StringSplitOptions.None);
                            }
                            else
                            {
                                folderPathArr = foldername.Split(new string[] { "\\Source\\" }, StringSplitOptions.None);
                            }

                            rObj.File_Name = filename;
                            if (folderPathArr.Length > 1)
                                rObj.Folder_Name = folderPathArr[1];
                            else
                                rObj.Folder_Name = "";
                            destPath = foldername + "\\" + rObj.File_Name;
                            rObj.DestFilePath = destPath;

                            List<RegOpsQC> securitychkLst = null;
                            List<RegOpsQC> TrackChngLst = null;
                            #region filedirectoryInfo
                            if (ext.Equals(".docx", StringComparison.OrdinalIgnoreCase) || ext.Equals(".doc", StringComparison.OrdinalIgnoreCase))
                            {
                                rObj.File_Format = "Word";
                                try
                                {
                                    doc = new Document(rObj.DestFilePath);
                                    pages = Convert.ToInt64(doc.PageCount);

                                    if (planFlag == 0)
                                        pageCount += pages;
                                    if (rObj.ISAttachPREDICTTemplate == "Yes")
                                    {
                                        if (rObj.WordTemplate_ID > 0 && templateexists == true && templatecontentexists == true)
                                        {
                                            try
                                            {
                                                string preditTemplatePath = m_SourceFolderPathQC + rObj.Job_ID + " \\Documents with Template\\";
                                                string[] templateFolderPathArr = foldername.Split(new string[] { rObj.Job_ID + "\\Output\\" }, StringSplitOptions.None);
                                                if (templateFolderPathArr.Length > 1)
                                                    rObj.Folder_Name = templateFolderPathArr[1];
                                                else
                                                    rObj.Folder_Name = "";
                                                destPath = foldername + "\\" + rObj.File_Name;

                                                if (!Directory.Exists(preditTemplatePath))
                                                {
                                                    Directory.CreateDirectory(preditTemplatePath);
                                                }
                                                wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + rObj.File_Name;
                                                //if (rObj.Prefix_FileName == 1)
                                                //{
                                                //    string[] objS = Regex.Split(rObj.File_Name, @"Output_");
                                                //    if (objS.Count() > 2)
                                                //    {
                                                //        for (int i = 0; i < objS.Count(); i++)
                                                //        {
                                                //            if (objS[i] != "" && objS[i] != null)
                                                //            {
                                                //                string text = string.Empty;
                                                //                for (int k = 0; k < i - 1; k++)
                                                //                {
                                                //                    text += "Output_";
                                                //                }
                                                //                if (rObj.Prefix_FileName == 1)
                                                //                {
                                                //                    wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + predictTempName + "_" + text + objS[i];
                                                //                }
                                                //                else
                                                //                {
                                                //                    wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + objS[i];
                                                //                }

                                                //            }
                                                //        }
                                                //    }
                                                //    else if (objS.Count() > 1)
                                                //    {
                                                //        for (int i = 0; i < objS.Count(); i++)
                                                //        {
                                                //            if (objS[i] != "" && objS[i] != null)
                                                //            {                                                               

                                                //                if (rObj.Prefix_FileName == 1)
                                                //                {
                                                //                    wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + predictTempName + "_" + objS[i];
                                                //                }
                                                //                else
                                                //                {
                                                //                    wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + objS[i];
                                                //                }

                                                //            }
                                                //        }
                                                //    }
                                                //    else
                                                //    {
                                                //        if (rObj.Prefix_FileName == 1)
                                                //        {
                                                //            wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + predictTempName + "_" + objS[0];
                                                //        }
                                                //        else
                                                //        {
                                                //            wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + objS[0];
                                                //        }

                                                //    }
                                                //}
                                                //else
                                                //{
                                                //  wordPredictPath = preditTemplatePath + rObj.Folder_Name + "\\" + rObj.File_Name;
                                                //}


                                                #region styles copy from Template and save source with template file
                                                DirectoryInfo dir = new DirectoryInfo(templatePath);
                                                FileInfo[] files = dir.GetFiles();
                                                if (files.Length > 0)
                                                {
                                                    foreach (var file in files)
                                                    {
                                                        try
                                                        {
                                                            Document doc1 = new Document(file.FullName);
                                                            //H1
                                                            string formatH1 = string.Empty;
                                                            int startatH1 = 0;
                                                            NumberStyle NumberStylH1 = NumberStyle.Arabic;
                                                            Style H1s = doc.Styles[StyleIdentifier.Heading1];
                                                            if (H1s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH1 = H1s.ListFormat.ListLevel.NumberStyle;
                                                                formatH1 = H1s.ListFormat.ListLevel.NumberFormat;
                                                                startatH1 = H1s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H2
                                                            string formatH2 = string.Empty;
                                                            int startatH2 = 0;
                                                            NumberStyle NumberStylH2 = NumberStyle.Arabic;
                                                            Style H2s = doc.Styles[StyleIdentifier.Heading2];
                                                            if (H2s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH2 = H2s.ListFormat.ListLevel.NumberStyle;
                                                                formatH2 = H2s.ListFormat.ListLevel.NumberFormat;
                                                                startatH2 = H2s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H3
                                                            string formatH3 = string.Empty;
                                                            int startatH3 = 0;
                                                            NumberStyle NumberStylH3 = NumberStyle.Arabic;
                                                            Style H3s = doc.Styles[StyleIdentifier.Heading3];
                                                            if (H3s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH3 = H3s.ListFormat.ListLevel.NumberStyle;
                                                                formatH3 = H3s.ListFormat.ListLevel.NumberFormat;
                                                                startatH3 = H3s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H4
                                                            string formatH4 = string.Empty;
                                                            int startatH4 = 0;
                                                            NumberStyle NumberStylH4 = NumberStyle.Arabic;
                                                            Style H4s = doc.Styles[StyleIdentifier.Heading4];
                                                            if (H4s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH4 = H4s.ListFormat.ListLevel.NumberStyle;
                                                                formatH4 = H4s.ListFormat.ListLevel.NumberFormat;
                                                                startatH4 = H4s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H5
                                                            string formatH5 = string.Empty;
                                                            int startatH5 = 0;
                                                            NumberStyle NumberStylH5 = NumberStyle.Arabic;
                                                            Style H5s = doc.Styles[StyleIdentifier.Heading5];
                                                            if (H5s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH5 = H5s.ListFormat.ListLevel.NumberStyle;
                                                                formatH5 = H5s.ListFormat.ListLevel.NumberFormat;
                                                                startatH5 = H5s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H6
                                                            string formatH6 = string.Empty;
                                                            int startatH6 = 0;
                                                            NumberStyle NumberStylH6 = NumberStyle.Arabic;
                                                            Style H6s = doc.Styles[StyleIdentifier.Heading6];
                                                            if (H6s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH6 = H6s.ListFormat.ListLevel.NumberStyle;
                                                                formatH6 = H6s.ListFormat.ListLevel.NumberFormat;
                                                                startatH6 = H6s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H7
                                                            string formatH7 = string.Empty;
                                                            int startatH7 = 0;
                                                            NumberStyle NumberStylH7 = NumberStyle.Arabic;
                                                            Style H7s = doc.Styles[StyleIdentifier.Heading7];
                                                            if (H7s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH7 = H7s.ListFormat.ListLevel.NumberStyle;
                                                                formatH7 = H7s.ListFormat.ListLevel.NumberFormat;
                                                                startatH7 = H7s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H8
                                                            string formatH8 = string.Empty;
                                                            int startatH8 = 0;
                                                            NumberStyle NumberStylH8 = NumberStyle.Arabic;
                                                            Style H8s = doc.Styles[StyleIdentifier.Heading8];
                                                            if (H8s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH8 = H8s.ListFormat.ListLevel.NumberStyle;
                                                                formatH8 = H8s.ListFormat.ListLevel.NumberFormat;
                                                                startatH8 = H8s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //H9
                                                            string formatH9 = string.Empty;
                                                            int startatH9 = 0;
                                                            NumberStyle NumberStylH9 = NumberStyle.Arabic;
                                                            Style H9s = doc.Styles[StyleIdentifier.Heading9];
                                                            if (H9s.ListFormat.ListLevel != null)
                                                            {
                                                                NumberStylH9 = H9s.ListFormat.ListLevel.NumberStyle;
                                                                formatH9 = H9s.ListFormat.ListLevel.NumberFormat;
                                                                startatH9 = H9s.ListFormat.ListLevel.StartAt;
                                                            }
                                                            //Template add open
                                                            doc.CopyStylesFromTemplate(doc1);
                                                            if (doc.AttachedTemplate == "")
                                                                doc.AttachedTemplate = file.FullName;
                                                            doc.Save(rObj.DestFilePath);
                                                            //Template add close
                                                            doc = new Document(rObj.DestFilePath);
                                                            //H1
                                                            if (doc.Styles[StyleIdentifier.Heading1].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading1].ListFormat.ListLevel.NumberStyle = NumberStylH1;
                                                                if (formatH1 != "")
                                                                    doc.Styles[StyleIdentifier.Heading1].ListFormat.ListLevel.NumberFormat = formatH1;
                                                                if (startatH1 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading1].ListFormat.ListLevel.StartAt = startatH1;
                                                            }
                                                            //H2
                                                            if (doc.Styles[StyleIdentifier.Heading2].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading2].ListFormat.ListLevel.NumberStyle = NumberStylH2;
                                                                if (formatH2 != "")
                                                                    doc.Styles[StyleIdentifier.Heading2].ListFormat.ListLevel.NumberFormat = formatH2;
                                                                if (startatH2 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading2].ListFormat.ListLevel.StartAt = startatH2;
                                                            }
                                                            //H3
                                                            if (doc.Styles[StyleIdentifier.Heading3].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading3].ListFormat.ListLevel.NumberStyle = NumberStylH3;
                                                                if (formatH3 != "")
                                                                    doc.Styles[StyleIdentifier.Heading3].ListFormat.ListLevel.NumberFormat = formatH3;
                                                                if (startatH3 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading3].ListFormat.ListLevel.StartAt = startatH3;
                                                            }
                                                            //H4
                                                            if (doc.Styles[StyleIdentifier.Heading4].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading4].ListFormat.ListLevel.NumberStyle = NumberStylH4;
                                                                if (formatH4 != "")
                                                                    doc.Styles[StyleIdentifier.Heading4].ListFormat.ListLevel.NumberFormat = formatH4;
                                                                if (startatH4 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading4].ListFormat.ListLevel.StartAt = startatH4;
                                                            }
                                                            //H5
                                                            if (doc.Styles[StyleIdentifier.Heading5].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading5].ListFormat.ListLevel.NumberStyle = NumberStylH5;
                                                                if (formatH5 != "")
                                                                    doc.Styles[StyleIdentifier.Heading5].ListFormat.ListLevel.NumberFormat = formatH5;
                                                                if (startatH5 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading5].ListFormat.ListLevel.StartAt = startatH5;
                                                            }
                                                            //H6
                                                            if (doc.Styles[StyleIdentifier.Heading6].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading6].ListFormat.ListLevel.NumberStyle = NumberStylH6;
                                                                if (formatH6 != "")
                                                                    doc.Styles[StyleIdentifier.Heading6].ListFormat.ListLevel.NumberFormat = formatH6;
                                                                if (startatH6 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading6].ListFormat.ListLevel.StartAt = startatH6;
                                                            }
                                                            //H7
                                                            if (doc.Styles[StyleIdentifier.Heading7].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading7].ListFormat.ListLevel.NumberStyle = NumberStylH7;
                                                                if (formatH7 != "")
                                                                    doc.Styles[StyleIdentifier.Heading7].ListFormat.ListLevel.NumberFormat = formatH7;
                                                                if (startatH7 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading7].ListFormat.ListLevel.StartAt = startatH7;
                                                            }
                                                            //H8
                                                            if (doc.Styles[StyleIdentifier.Heading8].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading8].ListFormat.ListLevel.NumberStyle = NumberStylH8;
                                                                if (formatH8 != "")
                                                                    doc.Styles[StyleIdentifier.Heading8].ListFormat.ListLevel.NumberFormat = formatH8;
                                                                if (startatH8 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading8].ListFormat.ListLevel.StartAt = startatH8;
                                                            }
                                                            //H9
                                                            if (doc.Styles[StyleIdentifier.Heading9].ListFormat.ListLevel != null)
                                                            {
                                                                doc.Styles[StyleIdentifier.Heading9].ListFormat.ListLevel.NumberStyle = NumberStylH9;
                                                                if (formatH9 != "")
                                                                    doc.Styles[StyleIdentifier.Heading9].ListFormat.ListLevel.NumberFormat = formatH9;
                                                                if (startatH9 != 0)
                                                                    doc.Styles[StyleIdentifier.Heading9].ListFormat.ListLevel.StartAt = startatH9;
                                                            }
                                                            doc.Save(rObj.DestFilePath);
                                                            //saving the predict styles copy
                                                            doc.Save(wordPredictPath);
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            ErrorLogger.Error(ex);
                                                            return "Failed";
                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                ErrorLogger.Error(ex);
                                                return "Failed";
                                            }
                                        }
                                    }
                                    List<int> lst = new List<int>();
                                    string Pagenumber = string.Empty;
                                    string Sectionnumber = string.Empty;
                                    List<int> lstsec = new List<int>();
                                    LayoutCollector layout = new LayoutCollector(doc);
                                    bool TrackRevisionsData = false;
                                    for (int i = 0; i < doc.Sections.Count; i++)
                                    {
                                        foreach (HeaderFooter hf in doc.Sections[i].GetChildNodes(NodeType.HeaderFooter, true))
                                        {
                                            ArrayList secRevisions = new ArrayList();
                                            RevisionCollection rev1 = doc.Revisions;
                                            if (doc.HasRevisions == true)
                                                TrackRevisionsData = true;
                                            foreach (Revision rev in rev1)
                                            {
                                                if (rev.RevisionType != RevisionType.StyleDefinitionChange)
                                                {
                                                    if (rev.ParentNode.GetAncestor(typeof(HeaderFooter)) != null)
                                                    {
                                                        secRevisions.Add(rev);
                                                        lstsec.Add(i + 1);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    foreach (Paragraph paragraph in doc.GetChildNodes(NodeType.Paragraph, true))
                                    {
                                        ArrayList secRevisions = new ArrayList();
                                        RevisionCollection rev1 = doc.Revisions;
                                        foreach (Revision rev in rev1)
                                        {
                                            if (rev.RevisionType != RevisionType.StyleDefinitionChange)
                                            {
                                                if (rev.ParentNode.GetAncestor(NodeType.Paragraph) != null &&
                                                rev.ParentNode.GetAncestor(NodeType.Paragraph) == paragraph)
                                                {
                                                    secRevisions.Add(rev);
                                                    if (layout.GetStartPageIndex(paragraph) != 0)
                                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                                }
                                            }
                                        }
                                    }
                                    foreach (Table table in doc.GetChildNodes(NodeType.Table, true))
                                    {
                                        ArrayList secRevisions = new ArrayList();
                                        RevisionCollection rev1 = doc.Revisions;
                                        foreach (Revision rev in rev1)
                                        {
                                            if (rev.RevisionType != RevisionType.StyleDefinitionChange)
                                            {
                                                if (rev.ParentNode.GetAncestor(NodeType.Table) != null &&
                                                rev.ParentNode.GetAncestor(NodeType.Table) == table)
                                                {
                                                    secRevisions.Add(rev);
                                                    if (layout.GetStartPageIndex(table) != 0)
                                                        lst.Add(layout.GetStartPageIndex(table));
                                                }
                                            }
                                        }
                                    }
                                    if (Path.GetExtension(rObj.File_Name) == ".doc")
                                    {
                                        foreach (Section sct in doc.Sections)
                                        {
                                            foreach (Paragraph pr in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                                            {
                                                foreach (Field field in pr.Range.Fields)
                                                {
                                                    if (field.Type == FieldType.FieldRef)
                                                    {
                                                        if (((Aspose.Words.Fields.FieldRef)field).GetFieldCode() != null)
                                                        {
                                                            RegOpsQC rObj2 = new RegOpsQC();
                                                            rObj2.Bookmarkname = ((Aspose.Words.Fields.FieldRef)field).GetFieldCode();
                                                            if (rObj2.Bookmarkname.Contains("\\h") && !rObj2.Bookmarkname.Contains("MERGEFORMAT"))
                                                            {
                                                                string Fieldcode = rObj2.Bookmarkname;
                                                                Fieldcode = Fieldcode.Replace("\\h ", "\\h  \\* MERGEFORMAT ");
                                                                pr.Range.Replace(rObj2.Bookmarkname, Fieldcode);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        doc.Save(rObj.DestFilePath);
                                    }
                                    List<int> lst1 = lst.Distinct().ToList();
                                    List<int> lstsec1 = lstsec.Distinct().ToList();
                                    TrackChngLst = new List<RegOpsQC>();
                                    if (lst1.Count > 0 || lstsec1.Count > 0 || TrackRevisionsData == true)
                                    {
                                        if (lst1.Count > 0 && lstsec1.Count > 0)
                                        {
                                            lst1.Sort();
                                            Pagenumber = string.Join(", ", lst1.ToArray());
                                            lstsec1.Sort();
                                            Sectionnumber = string.Join(", ", lstsec1.ToArray());
                                            rObj.Comments = "Track changes,Format changes and comments exist in Page Numbers: " + Pagenumber + " and in Section(s): " + Sectionnumber + " of Header/Footer .So, QC Work is Stopped.";
                                        }
                                        else if (lst1.Count > 0)
                                        {
                                            lst1.Sort();
                                            Pagenumber = string.Join(", ", lst1.ToArray());
                                            rObj.Comments = "Track changes,Format changes and comments exist in Page Numbers: " + Pagenumber + " .So, QC Work is Stopped.";
                                        }
                                        else if (lstsec1.Count > 0)
                                        {
                                            lstsec1.Sort();
                                            Sectionnumber = string.Join(", ", lstsec1.ToArray());
                                            rObj.Comments = "Track changes,Format changes and comments exist in Section(s): " + Sectionnumber + " of Header/Footer .So, QC Work is Stopped.";
                                        }
                                        else
                                        {
                                            rObj.Comments = "Track changes,Format changes and comments exist .So, QC Work is Stopped.";
                                        }
                                        int[] Ids = GetNosecurity(rObj, "No Track Changes", "QC_CHECKLIST");
                                        rObj.CheckList_ID = Ids[0];
                                        rObj.Group_Check_ID = Ids[1];
                                        rObj.Composite_Check = Ids[2];
                                        rObj.QC_Result = "Failed";
                                        TrackChngLst.Add(rObj);
                                        res = SaveValidateResults(TrackChngLst);
                                        WordTrackChangesCheck = "Track Changes Exist";
                                    }
                                    else
                                    {
                                        rObj.QC_Result = "Passed";
                                        rObj.Comments = "Track changes does not exist";
                                    }
                                }
                                catch (Aspose.Words.IncorrectPasswordException e)
                                {
                                    securitychkLst = new List<RegOpsQC>();
                                    rObj.QC_Result = "Failed";
                                    rObj.Comments = "File cannot be opened.File may be password protected or file is corrupted.Any other checks planned for this file are not executed.";
                                    int[] Ids = GetNosecurity(rObj, "No Security (Password)", "QC_CHECKLIST");
                                    rObj.CheckList_ID = Ids[0];
                                    rObj.Group_Check_ID = Ids[1];
                                    rObj.Composite_Check = Ids[2];
                                    securitychkLst.Add(rObj);
                                    res = SaveValidateResults(securitychkLst);
                                    WordSecCheck = "File contains password";
                                }
                                catch (Exception ex)
                                {
                                    securitychkLst = new List<RegOpsQC>();
                                    rObj.QC_Result = "Failed";
                                    rObj.Comments = "File cannot be opened.File may be password protected or file is corrupted.Any other checks planned for this file are not executed.";
                                    int[] Ids = GetNosecurity(rObj, "No Security (Password)", "QC_CHECKLIST");
                                    rObj.CheckList_ID = Ids[0];
                                    rObj.Group_Check_ID = Ids[1];
                                    rObj.Composite_Check = Ids[2];
                                    securitychkLst.Add(rObj);
                                    res = SaveValidateResults(securitychkLst);
                                    WordSecCheck = "File contains password";
                                    ErrorLogger.Error(ex);
                                }
                            }
                            //    int pdfaflag = 0;
                            if (ext.ToLower() == ".pdf")
                            {
                                rObj.File_Format = "PDF";
                                try
                                {
                                    Aspose.Pdf.Facades.PdfFileInfo fileInfo = new Aspose.Pdf.Facades.PdfFileInfo(s);
                                    string openprivilege = fileInfo.HasOpenPassword.ToString();
                                    if (openprivilege.ToLower() == "true")
                                    {
                                        securitychkLst = new List<RegOpsQC>();
                                        rObj.QC_Result = "Failed";
                                        rObj.Comments = "File is password protected.Any other checks planned for this file are not executed.";
                                        int[] Ids = GetNosecurity(rObj, "No Security (password)", "QC_PDF_CHECKLIST");
                                        rObj.CheckList_ID = Ids[0];
                                        rObj.Group_Check_ID = Ids[1];
                                        rObj.Composite_Check = Ids[2];
                                        securitychkLst.Add(rObj);
                                        res = SaveValidateResults(securitychkLst);
                                        PDFSecCheck = "File contains password";
                                    }
                                    else
                                    {
                                        PdfDoc = new Aspose.Pdf.Document(s);
                                        if (planFlag == 0)
                                        {
                                            Int64 numpages = PdfDoc.Pages.Count();
                                            pageCount += numpages;
                                        }

                                        string pdfFormat = PdfDoc.PdfFormat.ToString();
                                        if (pdfFormat.ToUpper().StartsWith("PDF_X"))
                                        {
                                            securitychkLst = new List<RegOpsQC>();
                                            rObj.QC_Result = "Failed";
                                            rObj.Comments = "The Document is in PDF/X format.Any other checks planned for this file are not executed.";
                                            int[] Ids = GetNosecurity(rObj, "Is not in PDF/X format", "QC_PDF_CHECKLIST");
                                            rObj.CheckList_ID = Ids[0];
                                            rObj.Group_Check_ID = Ids[1];
                                            rObj.Composite_Check = Ids[2];
                                            if (rObj.CheckList_ID != 0)
                                            {
                                                securitychkLst.Add(rObj);
                                                res = SaveValidateResults(securitychkLst);
                                                PDFSecCheck = "The Document is in PDF/X format";
                                            }
                                        }
                                        else if (pdfFormat.ToUpper().StartsWith("PDF_A"))
                                        {
                                            securitychkLst = new List<RegOpsQC>();
                                            rObj.QC_Result = "Failed";
                                            rObj.Comments = "The Document is in PDF/A format.Any other checks planned for this file are not executed.";
                                            int[] Ids = GetNosecurity(rObj, "Is not in PDF/A format", "QC_PDF_CHECKLIST");
                                            rObj.CheckList_ID = Ids[0];
                                            rObj.Group_Check_ID = Ids[1];
                                            rObj.Composite_Check = Ids[2];
                                            if (rObj.CheckList_ID != 0)
                                            {
                                                securitychkLst.Add(rObj);
                                                res = SaveValidateResults(securitychkLst);
                                                PDFSecCheck = "The Document is in PDF/A format";
                                            }
                                        }
                                    }
                                    PdfDoc = null;
                                }
                                catch (Exception ex)
                                {
                                    securitychkLst = new List<RegOpsQC>();
                                    rObj.QC_Result = "Failed";
                                    rObj.Comments = "File cannot be opened.File may be password protected or file is corrupted.Any other checks planned for this file are not executed.";
                                    int[] Ids = GetNosecurity(rObj, "No Security (password)", "QC_PDF_CHECKLIST");
                                    rObj.CheckList_ID = Ids[0];
                                    rObj.Group_Check_ID = Ids[1];
                                    rObj.Composite_Check = Ids[2];
                                    securitychkLst.Add(rObj);
                                    res = SaveValidateResults(securitychkLst);
                                    PDFSecCheck = "File contains password";
                                    ErrorLogger.Error(ex);
                                }
                            }
                            List<RegOpsQC> chkLst = new List<RegOpsQC>();
                            chkLst = GetQCCheckListByJobId(rObj);
                            rObj.CheckList = chkLst;

                            List<RegOpsQC> mainChkLst = new List<RegOpsQC>();
                            mainChkLst = chkLst.Where(x => x.Parent_Check_ID == 0).ToList();
                            //  ValidateDocAsposeActions vObj = new ValidateDocAsposeActions();
                            //  ValidatePdfAsposeActions vaPdf = new ValidatePdfAsposeActions();
                            WordLayoutActions wLayObj = new WordLayoutActions();
                            WordDocumentActions wDocObj = new WordDocumentActions();
                            WordParagraphActions wParObj = new WordParagraphActions();
                            WordHeaderFooterActions wHdFtObj = new WordHeaderFooterActions();
                            WordTableActions wTabObj = new WordTableActions();
                            WordPunctuationActions wPunObj = new WordPunctuationActions();
                            PDFDocumentActions pdfDocObj = new PDFDocumentActions();
                            PDFLayoutFormatActions pdfLayoutObj = new PDFLayoutFormatActions();
                            PDFInitialViewActions pdfInitialObj = new PDFInitialViewActions();
                            PDFNavigationActions pdfNavObj = new PDFNavigationActions();
                            PDFExternalReferenceActions pdfExtObj = new PDFExternalReferenceActions();
                            PDFBookmarkActions pdfBookmarkObj = new PDFBookmarkActions();
                            PDFHyperlinksActions pdfHyperlinkObj = new PDFHyperlinksActions();
                            PDFHeaderFooterActions pdfHeaderFooterObj = new PDFHeaderFooterActions();


                            #endregion
                            #region pdf
                            if (rObj.File_Format == "PDF")
                            {
                                //  int pdfafixflag = 0;
                                if (rObj.Organization != "")
                                {
                                    if (PDFSecCheck != "File contains password" && PDFSecCheck != "The Document is in PDF/X format" && PDFSecCheck != "The Document is in PDF/A format")
                                    {
                                        string sourcePathFolder = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + rObj.Organization + "\\RegOpsQCDestination\\";
                                        string SourceFolder = sourcePathFolder + rObj.Job_ID;
                                        Directory.CreateDirectory(SourceFolder);
                                        string destFile = System.IO.Path.Combine(SourceFolder, rObj.File_Name);
                                        System.IO.File.Copy(destPath, destFile, true);
                                        Aspose.Pdf.Document document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                        foreach (RegOpsQC chk in mainChkLst)
                                        {

                                            chk.Job_ID = rObj.Job_ID;
                                            chk.Folder_Name = rObj.Folder_Name;
                                            chk.File_Name = rObj.File_Name;
                                            chk.JID = rObj.ID;
                                            chk.Created_ID = rObj.Created_ID;
                                            chk.Prefix_FileName = rObj.Prefix_FileName;
                                            chk.IsSequentialFileName = rObj.IsSequentialFileName;
                                            chk.CheckParamVal = rObj.CheckParamVal;
                                            chk.CheckAcceptedParamVal = rObj.CheckAcceptedParamVal;
                                            // only check
                                            if (chk.Check_Name.Equals("File name length", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.FileNameLength(chk);

                                            // only check
                                            else if (chk.Check_Name.Equals("No Security (password)", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.Check_PDFFile_OpenPasswordProtection(chk, SourceFolder);

                                            else if (chk.Check_Name.Equals("No Edit Security", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.Check_PDFFile_PasswordProtection(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("File should not be embedded within a file", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.EmbeddedFilecheck(chk, SourceFolder, document);
                                            // only check
                                            else if (chk.Check_Name.Equals("PDF Digital signature verification", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.VerifyPdfSignature(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Is not in PDF/A format", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfHyperlinkObj.PdfaFormatCheck(chk, SourceFolder, document);
                                            }

                                            else if (chk.Check_Name.Equals("Do OCR", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfDocObj.EnableBytesCoutOCRFix(chk, SourceFolder, document);
                                                document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                            }

                                            // only check
                                            else if (chk.Check_Name.Equals("PDF version 1.4 to 1.7", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.Check_PDFVersion(chk, SourceFolder, document);

                                            // only check
                                            else if (chk.Check_Name.Equals("PDF version", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfDocObj.PDFVersionCheck(chk, chkLst, document);
                                                chk.Check_Type = 1;
                                            }

                                            else if (chk.Check_Name.Equals("Page Size", StringComparison.OrdinalIgnoreCase))
                                                pdfLayoutObj.standardPagesize(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Page layout", StringComparison.OrdinalIgnoreCase))
                                                pdfInitialObj.PDFPageLayout(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Magnification set to default", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Magnification", StringComparison.OrdinalIgnoreCase))
                                                pdfInitialObj.MagnificationSet(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("No blank pages", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Remove Blank pages", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.RemoveBlankPages(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Properties fields should be blank", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.PDFFile_Properties(chk, SourceFolder, chk.Check_Name, chk.Check_Type, document);

                                            else if (chk.Check_Name.Equals("Check Fast web view option", StringComparison.OrdinalIgnoreCase))
                                                pdfNavObj.fastrwebview(chk, SourceFolder, rObj.Check_Type, document);

                                            else if (chk.Check_Name.Equals("Navigation tab", StringComparison.OrdinalIgnoreCase))
                                                pdfInitialObj.PDFNavigationTabSetToPageOnly(chk, SourceFolder, document);

                                            // only check
                                            else if (chk.Check_Name.Equals("Page scaled properly", StringComparison.OrdinalIgnoreCase))
                                                pdfLayoutObj.CheckDoublePedigree(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Remove original Pedigree", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfDocObj.RemoveOriginalPedigree(chk, SourceFolder, document);
                                                if (chk.QC_Result == "Failed" && chk.Check_Type == 1)
                                                    pdfDocObj.RemoveOriginalPedigreeFix(chk, SourceFolder, document);
                                            }


                                            else if (chk.Check_Name.Equals("Links and bookmarks are set to inherit Zoom", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.LinkAuditorManificationGoToViewInternal(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Link attributor (CBER/CDER)", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Check link text color or link border color", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfDocObj.LinkAttributor(chk, SourceFolder, chkLst, document);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Equals("No track changes and annotations", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.checkForannotations(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Remove redundant bookmarks", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.RemoveRedundantBookmarks(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Documents of 5 pages or more should be bookmarked", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.VerifyBookmarks(chk, document);

                                            else if (chk.Check_Name.Equals("Delete external hyperlinks", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Remove any active external links", StringComparison.OrdinalIgnoreCase))
                                                pdfNavObj.DeleteExternalHyperlinks(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Remove internal hyperlinks", StringComparison.OrdinalIgnoreCase))
                                                pdfNavObj.DeleteInternalHyperlinks(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Create bookmarks", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Bookmarks for all section headings", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfNavObj.CreateBookmarks(chk, SourceFolder, document);
                                                chk.Check_Type = 1;
                                            }

                                            else if (chk.Check_Name.Equals("Verify the Bookmark Levels", StringComparison.OrdinalIgnoreCase))
                                                pdfNavObj.VerifyBookmarkLevels(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Bookmark case is in appropriate case", StringComparison.OrdinalIgnoreCase))
                                                pdfNavObj.VerifyLevel1BookmarkTitileAndAllCapsCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Check external links color", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.CheckLinksColor(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Check Links color", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.CheckInternalLinksColor(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Create TOC must for above 5 page and more", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfDocObj.CreateTOCFromBookmarks(chk, SourceFolder, chkLst, document);
                                                //chk.Check_Type = 1;
                                            }

                                            else if (chk.Check_Name.Equals("Correct the Bookmark Levels", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.CorrectTheBookmarkLevels(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Use proper special characters in Bookmarks and TOC", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.CheckIncorrectlyConvertedSpecialCharacters(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Consistency of external link references(M2-M5)", StringComparison.OrdinalIgnoreCase))
                                                pdfExtObj.M2M5ExternalColorCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Page Orientation", StringComparison.OrdinalIgnoreCase))
                                                pdfLayoutObj.PageOrientationCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("No highlighted text", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.NoHighlight(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Bookmarks go to the correct location", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.BookmarkGoTOCurrectLocation(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("No blank bookmarks", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.NoBlankBookmarks(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("No bookmarks without a destination", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.BookmarksWOD(chk, SourceFolder, document);

                                            //else if (chk.Check_Name.Equals("Headers appear on each page (except title page) and are consistent across pages", StringComparison.OrdinalIgnoreCase))
                                            //    pdfBookmarkObj.HeadersInPDF(chk, SourceFolder, destPath);

                                            else if (chk.Check_Name.Equals("TOC entries are hyperlinked and go to the correct locations", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.TocHyperlinkCrctLocCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Hyperlinks intact and function properly", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.HyperlinkResolveornotCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Hyperlinks go to the correct location", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.HyperlinkLocCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("External hyperlink(web or email address)", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.WebReferenceHyperLinkAnalysis(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Multiple action hyperlink", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.MultipleActionHyperLinkAnalysis(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Broken hyperlink", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.BrokenHyperLinkAnalysis(chk, m_SourceFolderPathExternal, document);

                                            else if (chk.Check_Name.Equals("Corrupt hyperlink", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.CorruptLink(chk, m_SourceFolderPathExternal, document);

                                            else if (chk.Check_Name.Equals("Non-relative hyperlink", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.NonRelativeHyperLink(chk, m_SourceFolderPathExternal, document);

                                            else if (chk.Check_Name.Equals("Link has non-existent named destination or page", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.LinkhasNoDestorPage(chk, m_SourceFolderPathExternal, document);

                                            else if (chk.Check_Name.Equals("Blue text without links", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.BlueTextHyperlinksAnalysis(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Inactive hyperlink", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.InactiveHyperLinkAnalysis(chk, SourceFolder, document);

                                            //else if (chk.Check_Name.Equals("Proper hyperlinking for all the necessary", StringComparison.OrdinalIgnoreCase))
                                            //    pdfHyperlinkObj.CrossrefLinkornotCheck(chk, SourceFolder, destPath);
                                            else if (chk.Check_Name.Equals("Hyperlinking master check", StringComparison.OrdinalIgnoreCase))
                                                pdfExtObj.CheckCrossReferencesForTablesFigures(chk, SourceFolder, document);


                                            else if (chk.Check_Name.Equals("Linked text is blue (or blue box)", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.LinkColorBlueCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("File size is under the maximum allowed (100 MB)", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.FileSizeCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Maximum file size allowed", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.MaxFileSizeCheck(chk, SourceFolder, document);


                                            else if (chk.Check_Name.Equals("Is not in portfolio format", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.PortfolioFormatCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Is not in PDF/X format", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.PdfxFormatCheck(chk, SourceFolder, document);

                                            //else if (chk.Check_Name.Equals("Header consistency", StringComparison.OrdinalIgnoreCase))
                                            //    pdfHeaderFooterObj.CheckHeaderInPdfFile(chk, SourceFolder, chkLst);

                                            else if (chk.Check_Name.Equals("Report footer that contains these keywords", StringComparison.OrdinalIgnoreCase))
                                                pdfHeaderFooterObj.CheckSpcWordInFooter(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Bookmarks alignment with TOC", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.CheckTOCWithBookmarks(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("No annotation and black boxes", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.CheckAnnotations(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("PDF title attribute matches the file name of the PDF", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.CheckPdfTitleMatchWithFileName(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Footer consistency", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.CheckFooterInPDF(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Bookmarks collapsed to given level of headings", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.CheckBookmarksCollapsed(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Bookmarks collapsed to given level", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.CheckBookmarksCollapsed(chk, SourceFolder, document);

                                            //else if (chk.Check_Name.Equals("Bookmarks are set to Inherit Zoom", StringComparison.OrdinalIgnoreCase))
                                            //    pdfHyperlinkObj.CheckBookmarksMagnification(chk, SourceFolder, destPath);

                                            else if (chk.Check_Name.Equals("No symbols in bookmarks", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.CheckSymbolsInBookmarks(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("PDF corrupted, when rendered", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.CheckPDFCorruptError(chk, SourceFolder, document);
                                            else if (chk.Check_Name.Equals("Verify bookmarks for headings when TOC not found", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.CheckMissingBookmarksForExistingHeadings(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("TOC matching with headings and titles", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.TocEntriesCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Level 1 bookmark reflects file name", StringComparison.OrdinalIgnoreCase))
                                                pdfNavObj.VerifyLevel1BookmarkTitileCheck(chk, SourceFolder, document);


                                            else if (chk.Check_Name.Equals("Properties fields should be blank except title", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.PDFFile_PropertiesExceptTitleCheck(chk, SourceFolder, chk.Check_Name, chk.Check_Type, document);

                                            else if (chk.Check_Name.Equals("Remove bookmarks", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.RemoveBookmarksCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Create bookmarks by text patterns", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.BookmarksTextPattrenCreationCheck(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Add custom Prefix/Suffix to bookmarks", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfBookmarkObj.AddPrefixAndsuffixToBookmarksCheck(chk, SourceFolder, chkLst, document);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Equals("Convert multi-level bookmarks into a single level", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.ConvertingMultiLevelBookmarksIntoSingleLevelCheck(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Check links exist for TOC", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.AddingLinksToPageNumbersandTableofContentsCheck(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Check link properties", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfHyperlinkObj.linkPropertiesCheck(chk, SourceFolder, chkLst, document);
                                                chk.Check_Type = 1;
                                            }

                                            else if (chk.Check_Name.Equals("PDF title attribute contatins the file name of the PDF", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.PDFTitleContainsFileName(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Maximum bookmark levels", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.BookmarksAboveMaxLevel(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Footer creation", StringComparison.OrdinalIgnoreCase))
                                                pdfHeaderFooterObj.FooterText_Check(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Header creation", StringComparison.OrdinalIgnoreCase))
                                                pdfHeaderFooterObj.HeaderText_Check(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Hyperlink includes all blue text", StringComparison.OrdinalIgnoreCase))
                                                pdfDocObj.HyperlinkIncludesAllBlueText(chk, document);

                                            else if (chk.Check_Name.Equals("External links should point to file", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.WhetherExternalLinkispointingtoADocument(chk, document);

                                            else if (chk.Check_Name.Equals("External link is pointing to the first page of the document", StringComparison.OrdinalIgnoreCase))
                                                pdfHyperlinkObj.ExternalHyperlinkLocCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Hyperlinks within document", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfHyperlinkObj.Autohyperlinkscheck(chk, SourceFolder, chkLst, document);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Equals("Hyperlinks across documents", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfHyperlinkObj.Hyperlinksacrossdocuments(chk, SourceFolder, chkLst, document, destPath1);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Equals("All individual bookmarks of tables, figures, appendices and attachments to be under corresponding bookmarks", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.individualbookmraks(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Each line in TOC, LOT, LOF, and LOA is hyperlinked entirely", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfHyperlinkObj.LinkExpand(chk, chkLst, document);
                                            }
                                            else if (chk.Check_Name.Equals("Redacts following text matching with given text", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfDocObj.RedactReplaceNextCheck(chk, chkLst, document);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Equals("Redacts text matching with given pattern", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfDocObj.RedactGivenTextCheck(chk, chkLst, document);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Equals("Create bookmarks from highlighted text", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.HighlateTextCreateBookmarkCheck(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Create bookmarks from named destinations", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.NamedDestinationToBookmarkCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Converting bookmarks to named destinations", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.BookmarkToNamedDestinationCheck(chk, SourceFolder, document);

                                            else if (chk.Check_Name.Equals("Maximum bookmark length", StringComparison.OrdinalIgnoreCase))
                                                pdfBookmarkObj.BookmarkTextLength(chk, SourceFolder, chkLst, document);

                                            else if (chk.Check_Name.Equals("Bookmark case", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfBookmarkObj.BookmarkCasessCheck(chk, SourceFolder, chkLst, document);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Equals("Page numbers should be sequential - Arabic numeral", StringComparison.OrdinalIgnoreCase))
                                            {
                                                pdfHeaderFooterObj.ArabicNumeralSequentialOnEachPage(chk, chkLst, document);
                                                chk.Check_Type = 1;
                                            }


                                            if (chk.Job_Status == "Error")
                                                rObj.Job_Status = chk.Job_Status;
                                        }


                                        /*---------------------------------------------To fix the checks-----------------------------*/
                                        //  if (pdfafixflag == 0)
                                        //   {
                                        if (rObj.Job_Type != "QC")
                                        {
                                            foreach (RegOpsQC chk in mainChkLst)
                                            {
                                                chk.Job_ID = rObj.Job_ID;
                                                chk.Folder_Name = rObj.Folder_Name;
                                                chk.File_Name = rObj.File_Name;
                                                chk.JID = rObj.ID;
                                                chk.Created_ID = rObj.Created_ID;
                                                chk.Prefix_FileName = rObj.Prefix_FileName;
                                                chk.IsSequentialFileName = rObj.IsSequentialFileName;
                                                chk.CheckParamVal = rObj.CheckParamVal;
                                                chk.CheckAcceptedParamVal = rObj.CheckAcceptedParamVal;

                                                if ((chk.QC_Result == "Failed" && chk.Check_Type == 1) || (chk.Check_Name.Equals("Create TOC must for above 5 page and more", StringComparison.OrdinalIgnoreCase) && chk.QC_Result == "Failed") || chk.Check_Name.Equals("Save as Optimized PDF", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Header creation", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Footer creation", StringComparison.OrdinalIgnoreCase) ||
                                                    chk.Check_Name.Equals("Footer Replacement", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Header Replacement", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Redacts defined area", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Header consistency", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    if (chk.Check_Name.Equals("Properties fields should be blank", StringComparison.OrdinalIgnoreCase)) {
                                                        pdfDocObj.PDFFile_PropertiesFix(chk, SourceFolder, chk.Check_Name, chk.Check_Type, document);
                                                        document.Save(SourceFolder + "//" + rObj.File_Name);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }
                                                    else if (chk.Check_Name.Equals("PDF version", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.Check_PDFVersionFix(chk, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Hyperlink includes all blue text", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.HyperlinkIncludesAllBlueTextFix(chk, document);

                                                    //else if (chk.Check_Name.Equals("Use proper special characters in Bookmarks and TOC", StringComparison.OrdinalIgnoreCase))
                                                    //    vaPdf.CheckSpecialcharectersinBookmarksFix(chk, SourceFolder, destPath);

                                                    else if (chk.Check_Name.Equals("File should not be embedded within a file", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.FixEmbeddedFilecheck(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("No blank pages", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Remove Blank pages", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.RemoveBlankPagesFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("No blank bookmarks", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Remove Blank pages", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfBookmarkObj.NoBlankBookmarksFix(chk, SourceFolder, document);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }
                                                        

                                                    else if (chk.Check_Name.Equals("No bookmarks without a destination", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.BookmarksWODFix(chk, SourceFolder);

                                                    else if (chk.Check_Name.Equals("No track changes and annotations", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.checkForannotationsFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("All individual bookmarks of tables, figures, appendices and attachments to be under corresponding bookmarks", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfBookmarkObj.IndividualbookmarksFix(chk, SourceFolder, document);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }

                                                    else if (chk.Check_Name.Equals("Page Size", StringComparison.OrdinalIgnoreCase) && !(chk.QC_Response == "Not fixed"))
                                                    {
                                                        pdfLayoutObj.standardPagesizeFix(chk, SourceFolder, document);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);

                                                    }
                                                    else if (chk.Check_Name.Equals("Is not in PDF/A format", StringComparison.OrdinalIgnoreCase))
                                                        pdfHyperlinkObj.PdfaFormatFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Check Fast web view option", StringComparison.OrdinalIgnoreCase))
                                                        pdfNavObj.fastrwebviewFix(chk, SourceFolder, rObj.Check_Type, document);

                                                    else if (chk.Check_Name.Equals("Link attributor (CBER/CDER)", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Check link text color or link border color", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.LinkAttributorFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Check Links color", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.CheckInternalLinksColorFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Links and bookmarks are set to inherit Zoom", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfDocObj.LinkAuditorManificationGoToViewInternalFix(chk, SourceFolder, document);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }


                                                    else if (chk.Check_Name.Equals("Remove redundant bookmarks", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.RemoveRedundantBookmarksFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Create bookmarks", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Bookmarks for all section headings", StringComparison.OrdinalIgnoreCase))
                                                        pdfNavObj.CreateBookmarksFix(chk, SourceFolder, chkLst, document);

                                                    //else if (chk.Check_Name.Equals("Remove original Pedigree", StringComparison.OrdinalIgnoreCase))
                                                    //    pdfDocObj.RemoveOriginalPedigreeFix(chk, SourceFolder);

                                                    else if (chk.Check_Name.Equals("Page Layout set to defalut", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Page layout", StringComparison.OrdinalIgnoreCase))
                                                        pdfInitialObj.PDFPageLayoutFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Delete external hyperlinks", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Remove any active external links", StringComparison.OrdinalIgnoreCase))
                                                        pdfNavObj.DeleteExternalHyperlinksFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Remove internal hyperlinks", StringComparison.OrdinalIgnoreCase))
                                                        pdfNavObj.DeleteInternalHyperlinksFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Navigation tab", StringComparison.OrdinalIgnoreCase))
                                                        pdfInitialObj.PDFNavigationTabSetToPageOnlyFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Create TOC must for above 5 page and more", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfDocObj.CreateTOCFromBookmarksFix(chk, SourceFolder, chkLst, document);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }

                                                    else if (chk.Check_Name.Equals("Magnification set to default", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Magnification", StringComparison.OrdinalIgnoreCase))
                                                        pdfInitialObj.MagnificationSetFix(chk, SourceFolder, document);
                                                    //Only Fix
                                                    else if (chk.Check_Name.Equals("Save as Optimized PDF", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfDocObj.SaveAsOptimized(chk, SourceFolder, document);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }
                                                        

                                                    else if (chk.Check_Name.Equals("Bookmark case is in appropriate case", StringComparison.OrdinalIgnoreCase))
                                                        pdfNavObj.VerifyLevel1BookmarkTitileAndAllCapsFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Page orientation", StringComparison.OrdinalIgnoreCase))
                                                        pdfLayoutObj.PageOrientationFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Footer creation", StringComparison.OrdinalIgnoreCase))
                                                        pdfHeaderFooterObj.FooterText(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Header creation", StringComparison.OrdinalIgnoreCase))
                                                        pdfHeaderFooterObj.HeaderText(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Footer Replacement", StringComparison.OrdinalIgnoreCase))
                                                        pdfHeaderFooterObj.ReplaceFooterText(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Header Replacement", StringComparison.OrdinalIgnoreCase))
                                                        pdfHeaderFooterObj.ReplaceHeaderTextStyle(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Redacts defined area", StringComparison.OrdinalIgnoreCase))
                                                        pdfHeaderFooterObj.RedactByArea(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Bookmarks are set to Inherit Zoom", StringComparison.OrdinalIgnoreCase))
                                                        pdfHyperlinkObj.FixBookmarksMagnification(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Hyperlinks within document", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfHyperlinkObj.AutohyperlinkFix(chk, SourceFolder, chkLst, document);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }
                                                    else if (chk.Check_Name.Equals("Hyperlinks across documents", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfHyperlinkObj.HyperlinksacrossdocumentsFix(chk, SourceFolder, chkLst, document, destPath1);
                                                        document = new Aspose.Pdf.Document(SourceFolder + "//" + rObj.File_Name);
                                                    }


                                                    else if (chk.Check_Name.Equals("Header consistency", StringComparison.OrdinalIgnoreCase))
                                                        pdfHeaderFooterObj.CheckHeaderInPdfFile(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Properties fields should be blank except title", StringComparison.OrdinalIgnoreCase))
                                                        pdfDocObj.PDFFile_PropertiesExceptTitleFix(chk, SourceFolder, chk.Check_Name, chk.Check_Type, document);

                                                    else if (chk.Check_Name.Equals("Remove bookmarks", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.RemoveBookmarksFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Create bookmarks by text patterns", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.BookmarksTextPattrenCreationFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Add custom Prefix/Suffix to bookmarks", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.AddPrefixAndsuffixToBookmarksFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Convert multi-level bookmarks into a single level", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.ConvertingMultiLevelBookmarksIntoSingleLevelFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Check links exist for TOC", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.AddingLinksToPageNumbersandTableofContentsFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Check link properties", StringComparison.OrdinalIgnoreCase))
                                                        pdfHyperlinkObj.linkPropertiesFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("PDF title attribute contatins the file name of the PDF", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.PdfTitleContainsFileNameFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Bookmarks collapsed to given level of headings", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.CheckBookmarksCollapsedFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Bookmarks collapsed to given level", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.CheckBookmarksCollapsedFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Each line in TOC, LOT, LOF, and LOA is hyperlinked entirely", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfHyperlinkObj.LinkExpandfix(chk, chkLst, document);
                                                    }
                                                    else if (chk.Check_Name.Equals("Redacts following text matching with given text", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfDocObj.RedactReplaceNextFix(chk, chkLst, document);
                                                    }
                                                    else if (chk.Check_Name.Equals("Redacts text matching with given pattern", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        pdfDocObj.RedactGivenTextFix(chk, chkLst, document);
                                                    }

                                                    else if (chk.Check_Name.Equals("Create bookmarks from highlighted text", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.HighlateTextCreateBookmarkFix(chk, SourceFolder, chkLst, document);

                                                    else if (chk.Check_Name.Equals("Create bookmarks from named destinations", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.NamedDestinationToBookmarkFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Converting bookmarks to named destinations", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.BookmarkToNamedDestinationFix(chk, SourceFolder, document);

                                                    else if (chk.Check_Name.Equals("Bookmark case", StringComparison.OrdinalIgnoreCase))
                                                        pdfBookmarkObj.BookmarkCasessFix(chk, SourceFolder, chkLst, document);
                                                    else if (chk.Check_Name.Equals("Page numbers should be sequential - Arabic numeral", StringComparison.OrdinalIgnoreCase))
                                                        pdfHeaderFooterObj.FixArabicNumeralSequentialOnEachPage(chk, chkLst, document);

                                                }
                                                if (chk.Job_Status == "Error")
                                                    rObj.Job_Status = chk.Job_Status;
                                            }
                                        }

                                        document.Save(SourceFolder + "//" + rObj.File_Name);
                                        System.IO.File.Copy(SourceFolder + "//" + rObj.File_Name, destPath, true);
                                        //Open page to first page.
                                        pdfDocObj.SetOpenToPage1(rObj, SourceFolder, destPath);

                                        if (chkLst != null && chkLst.Count > 0)
                                            SaveValidateResults(chkLst);
                                    }
                                }
                                else
                                {
                                    return "Redirect Index";
                                }
                            }
                            #endregion
                            #region Word
                            if (rObj.File_Format == "Word")
                            {
                                int wordtopdf = 0;
                                if (rObj.Organization != "")
                                {
                                    if (WordSecCheck != "File contains password" && WordTrackChangesCheck != "Track Changes Exist")
                                    {
                                        foreach (RegOpsQC chk in mainChkLst)
                                        {
                                            chk.Job_ID = rObj.Job_ID;
                                            chk.Folder_Name = rObj.Folder_Name;
                                            chk.File_Name = rObj.File_Name;
                                            chk.DestFilePath = rObj.DestFilePath;
                                            chk.JID = rObj.ID;
                                            chk.Created_ID = rObj.Created_ID;
                                            chk.Job_Type = rObj.Job_Type;
                                            chk.Prefix_FileName = rObj.Prefix_FileName;
                                            // only check
                                            if (chk.Check_Name.Trim().Equals("Verify document format", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.DocumentFormat(chk, doc);
                                            if (chk.Check_Name.Trim().Equals("Convert word to PDF document", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.Convertwordtopdf(chk, doc);
                                            // only check
                                            else if (chk.Check_Name.Trim().Equals("No Security (Password)", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.VerifyPasswordprotection(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Word properties should be blank", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.WordPropertiesBlank(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Maximum file size allowed", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.MaxFileSizeCheck(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Documents are in docx format", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.DocxFormatCheck(chk, doc);
                                                if (chk.Is_Fixed == 1)
                                                {
                                                    doc = new Document(chk.DestFilePath);
                                                    rObj.DestFilePath = chk.DestFilePath;
                                                    docxFixed = true;
                                                }
                                            }


                                            else if (chk.Check_Name.Trim().Equals("Appendices are lettered instead of numbered", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.Appendicesarelettered(chk, doc);


                                            else if (chk.Check_Name.Trim().Equals("Regular expression check", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.Regularexpressioncheck(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Numbered list style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wDocObj.NumberedListStyle(chk, doc, chkLst);
                                            }


                                            else if (chk.Check_Name.Trim().Equals("Section headings/structure consistent with template", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.SectionHeadingsconsistentwithTemplate(chk, doc, conn, rObj.Preference_ID);

                                            else if (chk.Check_Name.Trim().Equals("Multiple footnote designators are separated by commas, with no spaces", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.multiplefootnoteseparatebycomma(chk, doc);
                                            
                                            else if (chk.Check_Name.Trim().Equals("Carriage return between paragraphs and before and after tables and graphs", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CheckInsertBlankRowBeforeAndAfterTableandFigure(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Level 1 heading starting at new page", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.Level1Heading(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Do not include a space before the colon", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.SingleSpacebeforeColon(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("File should not be embedded within a file", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.FileshouldnotEmbeddedwithinFile(chk, doc);

                                            //else if (chk.Check_Name.Trim().Equals("No space between number and degrees", StringComparison.OrdinalIgnoreCase))
                                            //    wDocObj.Nospacebetweennumberanddegrees(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Page Size", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.StandardPageSize(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Page size consistency across all sections", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.StandardPageSizeNew(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove page numbers in Header", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.RemovePageFieldFromHeader(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("No cell in the table should be empty", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.NoCellEmpty(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Add one extra carriage return at the end of header", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.HeaderCarriagereturn(chk, doc);

                                            // contains sub check
                                            else if (chk.Check_Name.Trim().Equals("Header text style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wHdFtObj.UpdateHeaderTextFontStyle(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Consistent use of 1 space following a period", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.Spaceafterperiod(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Text should not be underlined", StringComparison.OrdinalIgnoreCase))
                                                wParObj.RemoveUnderLines(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Confidentiality statement in title page", StringComparison.OrdinalIgnoreCase))
                                                wParObj.ConfidentialStatementInFirstpage(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Title page content consistent with template", StringComparison.OrdinalIgnoreCase))
                                                wParObj.TitlepageContentconsistentwithtemplate(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove background Color", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.RemovePageColors(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove Page Borders", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.RemovePageborders(chk, doc);

                                            // only check
                                            else if (chk.Check_Name.Trim().Equals("Text font style not Italic", StringComparison.OrdinalIgnoreCase))
                                                wParObj.ItalicFontRemoving(chk, doc);

                                            // only check
                                            else if (chk.Check_Name.Equals("Verify any hidden text", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.HiddenText(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Ensure that there is a bottom border line and a paragraph return in Header", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.InsertHeaderBorderLine(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove field codes from Header text", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.RemoveFieldCodeFromHeader(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Header settings(Shire)", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wHdFtObj.Headersettings(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Footer text", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wHdFtObj.Footertext(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Uncheck Different First Page", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.DifferentFirstPage(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Uncheck Different Odd and Even Page", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.DifferentOddandEvenPage(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Header Style Name", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.HeaderStyleName(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Header Font size", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.HeaderFontSize(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Consistent use of 1 space following a colon", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.SingleSpaceafterColon(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Footer Font size", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.FooterFontSize(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Vertical alignment in tables for headers", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.AlignTableHeading(chk, doc);


                                            else if (chk.Check_Name.Trim().Equals("Figure footnotes alignment", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.FigureFootnotesAlignment(chk, doc);


                                            else if (chk.Check_Name.Trim().Equals("Tables content alignment", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wTabObj.AlignTableContent(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Page margins", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wLayObj.SetMargins(chk, doc, chkLst);
                                            }


                                            else if (chk.Check_Name.Trim().Equals("Paragraph spacing", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wLayObj.ParagraphSpacing(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Missing Table sequence number", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.MissingSequenceNumber(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Missing Table caption Style", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TableCaptionstyle(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Missing Figure caption style", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Figurecaptionstyle(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Missing Figure sequence number", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.FigureMissingSequenceNumber(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Move caption to caption row", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.ThakedaCheckmovetablecaptionintocaptionrow(chk, doc);

                                            // only check 
                                            else if (chk.Check_Name.Trim().Equals("Check entire page captions", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wTabObj.Checkentirepagecaptions(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Table captions", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wTabObj.ChecktableCaption(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Figure captions", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wTabObj.CheckfigureCaption(chk, doc, chkLst);
                                            }


                                            else if (chk.Check_Name.Trim().Equals("Heading rows repeat", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.CheckTableHeadingRowsRepeat(chk, doc);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Table and Figure titles format", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.TableandFigureformat(chk, doc);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Check whether TOC,LOT,LOF and LOA are present for 5 or above 5 pages", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wDocObj.CheckTOCExists(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Delete temporary TOCs, footnotes, and headers and footers", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.RemoveTemporaryLOTandLOFcheck(chk, doc);
                                            }
                                            // only check
                                            else if (chk.Check_Name.Trim().Equals("Report external hyperlinks", StringComparison.OrdinalIgnoreCase))
                                                wParObj.VerifyExternalHyperLinks(chk, doc);

                                            // only check
                                            else if (chk.Check_Name.Trim().Equals("Report internal hyperlinks", StringComparison.OrdinalIgnoreCase))
                                                wParObj.VerifyInternalHyperLinks(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Use \"Link to Previous\" in multi section document", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.Linktoprevious(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Hyperlinks color", StringComparison.OrdinalIgnoreCase))
                                                wParObj.HyperLinksColor(chk, doc);

                                            // only check
                                            else if (chk.Check_Name.Trim().Equals("Heading 1 and 2nd line match", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.CheckHeadingTextForTwolineHeader(chk, doc);

                                            // only check
                                            else if (chk.Check_Name.Trim().Equals("Heading 1 and 3rd line match", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.CheckHeadingTextForThreelineHeader(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("No Widow and Orphaned headings", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CheckAndFixOrphans(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("A blank paragraph after list with given style", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.ListItememptyparagraph(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove double space after periods", StringComparison.OrdinalIgnoreCase))
                                                wParObj.SingleSpaceafterPeriod(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Embedded fonts fix", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.FontfixedEmbeddedFonts(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Text color black except links", StringComparison.OrdinalIgnoreCase))
                                                wParObj.BlackFontRecomended(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Paragraph indent", StringComparison.OrdinalIgnoreCase))
                                                wParObj.IndentParagraph(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("First line of paragraph indent or hanging indent", StringComparison.OrdinalIgnoreCase))
                                                wParObj.FirstLineParagraphIndentation(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Paragraph alignment", StringComparison.OrdinalIgnoreCase))
                                                wParObj.AllParagraphsAlignment(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Paragraph alignment(Excluding first page)", StringComparison.OrdinalIgnoreCase))
                                                wParObj.AllParagraphsAlignmentExcludeFirstPage(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove text background and shadowing", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.RemovingBackgroundShadingandShadowingForText(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Tables Font", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wLayObj.TablefigureFonts(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Figures exceeding Page margins", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Figuresexceedingpagemargins(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Content exceeding page margins", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.ContentNotExceedingPageMargin(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Content exceeding page size", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.ContentNotExceedingPageSize(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("No Track Changes", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wParObj.CheckTrackChanges(chk, doc);
                                                if (chk.QC_Result == "Fixed")
                                                    doc = new Document(rObj.DestFilePath);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Report if a table contains more than one sequence number", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckMultipleSequence(chk, doc);
                                            else if (chk.Check_Name.Trim().Equals("No Comments", StringComparison.OrdinalIgnoreCase))
                                                wParObj.CheckComments(chk, doc);
                                            else if (chk.Check_Name.Trim().Equals("Use Hard hyphen (ctrl + shift + -)", StringComparison.OrdinalIgnoreCase))
                                                wParObj.ReplacewithHardHypen(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Use hard space (ctrl + shift + space)", StringComparison.OrdinalIgnoreCase))
                                                wParObj.ReplacewithHardSpace(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Report section links referring to wrong destination", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckReferencesAreAtRightDestination(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Report cross references referring to wrong destination", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckCrossReferencenulldestination(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Management of special text", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Trim().Equals("Management of special text (Additional)", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wParObj.NoInstructionStylesPresent(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Delete blank row before table and keep row in after table", StringComparison.OrdinalIgnoreCase))
                                                wParObj.Deleteblankrowbeforetable(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Delete blank row before figure and keep row in after figure", StringComparison.OrdinalIgnoreCase))
                                                wParObj.Deleteblankrowbeforefigure(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Check Page breaks after or before table or figure links", StringComparison.OrdinalIgnoreCase))
                                                wParObj.CheckPageBreakbeforeORafterTableAndFigure(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Report non-working cross-references and links", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckTablecrossreference(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Table autofit to window", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TableAutoFitToWindow(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Ensure that lettered footnotes appear in alphabetical order", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.EnsureLetteredFootnote(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Footnotes entered below the image are in given style", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.FigureFootnotesgivenstyle(chk, doc);




                                            else if (chk.Check_Name.Trim().Equals("Tables and figures within appendices are manually numbered", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Tableandfiguresmanuallynumbered(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Blank rows in footer", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.Removeblankrowinfooter(chk, doc);

                                            //else if (chk.Check_Name.Trim().Equals("Non-compliant styles to \"Paragraph\" format style", StringComparison.OrdinalIgnoreCase))
                                            //    wParObj.ChangeNormalToParagraphstyle(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Font - Paragraphs(Body text)", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wLayObj.ParagraphFontSize(chk, doc, destPath, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Turn off automatic hyphenation", StringComparison.OrdinalIgnoreCase))
                                                wParObj.RemoveAutomaticHyphenetionOption(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Line spacing", StringComparison.OrdinalIgnoreCase))
                                                wParObj.LineSpacingForEachLine(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("File name length", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.FileNameLength(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Use numericals for Tables and Figures", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.UsenumericalsforTableandFigures(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Table and figure cross references", StringComparison.OrdinalIgnoreCase))
                                                wParObj.CheckTableFigurecrossreferenceColor(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Verify internal and external cross reference, external link should blue text", StringComparison.OrdinalIgnoreCase))
                                                wParObj.CheckHyperlinksDestinationpage(chk, doc);
                                            else if (chk.Check_Name.Trim().Equals("Table captions style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wTabObj.TableCaptionFonts(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Footer text check and fix", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wHdFtObj.Footertextinstruction(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Page numbers should be in sequence", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wHdFtObj.FooterPageNumberSequence(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Page number format in header", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wHdFtObj.PageNumberFormat(chk, doc);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Footer Style Name", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.FooterStyleName(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Consistency in styles Headings/list", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.ParagraphConsistencystyleCheck(chk, doc);
                                            }

                                            else if (chk.Check_Name.Equals("Table and figure numbers should be followed by a tab and does not include a colon", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.TableFigureTitleTabkey(chk, doc);
                                            else if (chk.Check_Name.Trim().Equals("Page Rotation", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wLayObj.PageRotationCheck(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Table alignment", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.CheckTableAlignment(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("No small capital letters in section headings, table, figure, or appendix titles", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.CheckNoSmallCaps(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Figure alignment", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.CheckFigureAligment(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Remove all template highlighting", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.CheckIsAllTemplateHighlitRemove(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Keep with next for tables", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.KeepWithNextOnTables(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Report if a table contains more than one sequence number", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckMultipleSequence(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Single cell in Table Caption row", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckSingleCellCaptionrow(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Caption style name", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Verifycaptionstylename(chk, doc);

                                            else if (chk.Check_Name.Equals("Symbol font for special characters", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CheckReplacingMappingSymbols(chk, doc);

                                            else if (chk.Check_Name.Equals("Paragraph - List Bullets/List Numbers Font Family", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.CheckBulletFontFamilyOfParagraphs(chk, doc);

                                            else if (chk.Check_Name.Equals("Paragraph - List Bullets/List Numbers Font Size", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.CheckBulletFontSizeOfParagraphs(chk, doc);

                                            else if (chk.Check_Name.Equals("Table - List Bullets/List Numbers Font Family", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.CheckBulletFontFamilyOfTables(chk, doc);

                                            else if (chk.Check_Name.Equals("Table - List Bullets/List Numbers Font Size", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wLayObj.CheckBulletFontSizeOfTables(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Equals("Text wrapping for pictures", StringComparison.OrdinalIgnoreCase))
                                                wLayObj.Textwrappingforpictures(chk, doc);

                                            else if (chk.Check_Name.Equals("Text wrapping for Tables", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TextWrappingfortables(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Titles are placed above tables and figures", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TitlesaboveTablendFigure(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Hardspace before Registered, Copyrighted, Trademark, and Other Symbols", StringComparison.OrdinalIgnoreCase))
                                                wParObj.AddHardSpaceBeforeSymbols(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Use hard space for given keywords", StringComparison.OrdinalIgnoreCase))
                                                wParObj.ReplacewithHardSpaceforUnits(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Use hard hyphen for given keywords", StringComparison.OrdinalIgnoreCase))
                                                wParObj.ReplacewithHardhyphenforUnits(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Use hard space for units before number", StringComparison.OrdinalIgnoreCase))
                                                wParObj.ReplacewithHardSpacebeforenumber(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Change style of blank rows to \"Paragraph\" style", StringComparison.OrdinalIgnoreCase))
                                                wParObj.Replaceblankspacestyle(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("No space between number and units", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.Nospacebetweennumberandpercentage(chk, doc);

                                            else if (chk.Check_Name.Equals("Capitalize the first letter of each bulleted or numbered item", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CapitalizefirstwordCheck(chk, doc);

                                            else if (chk.Check_Name.Equals("End each bulleted or numbered item with a period", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.EndWithPeriodCheck(chk, doc);

                                            else if (chk.Check_Name.Equals("In-text references is present for all Tables", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.tableReference(chk, doc);

                                            else if (chk.Check_Name.Equals("In-text references is present for all Figures", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.figureReference(chk, doc);

                                            else if (chk.Check_Name.Equals("In-text references is present for all Appendices", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.appendixReference(chk, doc);

                                            else if (chk.Check_Name.Equals("Heading/Table title/Figure title should not end with a period", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.TitlesSholdNotEndWithPeriodCheck(chk, doc);

                                            else if (chk.Check_Name.Equals("Figure title should be in title case", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.FigureTitleShouldBeInTitleCaseCheck(chk, doc);

                                            else if (chk.Check_Name.Equals("Table column headings should be in title case", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TableColumnHeadingsShouldBeInTitleCaseCheck(chk, doc);

                                            else if (chk.Check_Name.Equals("Table title should be in title case", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TableTitleShouldBeInTitleCaseCheck(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("No footnotes should be placed in a table title", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Nofootnotesintabletitle(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("No footnotes should be placed in a figure title", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Nofootnotesinfiguretitle(chk, doc);


                                            else if (chk.Check_Name.Trim().Equals("No footnotes should be placed in a appendix title", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Nofootnotesinappendixtitle(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Consistent use of letters vs numbers as table footnote indicators", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Consistentuseoffootnote(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Figure numbers and titles alignment", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.FigurenumbersandTitleAlignment(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Table numbers and titles alignment", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TablenumbersandTitleAlignment(chk, doc, chkLst);

                                            else if (chk.Check_Name.Trim().Equals("Track changes is turned off", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.TrackChangesTurnOff(chk, doc);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Style of body text", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.Styleofbodytext(chk, doc);

                                            }
                                            else if (chk.Check_Name.Trim().Equals("Table cell margins", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.TableCellMargins(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }

                                            else if (chk.Check_Name.Trim().Equals("No hard returns in table title", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.NoHardreturn(chk, doc);

                                            else if (chk.Check_Name.Equals("Symbols should not be present in table and figure titles", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Symbolshouldnotpresent(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Table border width", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TWidth(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("TOC 1 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.TOC1_style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("TOC 2 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.TOC2_style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("TOC 3 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.TOC3_style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("TOC 4 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.TOC4_style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Heading 1 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.Heading_1_Style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Heading 2 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.Heading_2_Style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Heading 3 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.Heading_3_Style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Heading 4 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.Heading_4_Style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Heading 5 Style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wDocObj.Heading_5_Style(chk, doc, chkLst);
                                                chk.Check_Type = 1;
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Table row height", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TableRowHeight(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Do not allow row to break across pages", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TableRowToBreakAcrossPage(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove borders for figures", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.RemoveFigureBorders(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Tables should have outside borders", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.TableShouldhaveborders(chk, doc);


                                            else if (chk.Check_Name.Trim().Equals("Vertical alignment for header rows", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.VerticalAlignmentForHeaderRows(chk, doc, chkLst);


                                            else if (chk.Check_Name.Trim().Equals("No shading should be applied for table cells", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.NoShading(chk, doc);


                                            else if (chk.Check_Name.Equals("Repeat table title and header row", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.RepeatTableTitleAndHeaderRow(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Remove date field codes in Header", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.RemoveDateFieldCodeFromHeader(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Footnotes starts with superscript lowercase letters", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.Footnotesuperscriptlowercaseletters(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Header top margin", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.HeaderTopMargin(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Header format", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.HeaderFormat(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Header content and alignment(Shire)", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.HeaderContentalignmentcheck(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Headers are not included on title pages", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.DifferentFirstPagecheck(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Footers should be blank", StringComparison.OrdinalIgnoreCase))
                                                wHdFtObj.Footersshouldbeblank(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("A blank paragraph after table and figure with given style", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.EmptyParagraphAfterTableFigure(chk, doc);
                                            }

                                            else if (chk.Check_Name.Equals("Use an uppercase L for litres", StringComparison.OrdinalIgnoreCase))
                                                wPunObj.ReplaceLforliters(chk, doc);

                                            else if (chk.Check_Name.Equals("Remove space between number and arithmetic symbols", StringComparison.OrdinalIgnoreCase))
                                                wPunObj.Removespace(chk, doc);

                                            else if (chk.Check_Name.Equals("Report blank pages", StringComparison.OrdinalIgnoreCase) && rObj.Job_Type == "QC")
                                                wDocObj.WordBlankPage(chk, doc);

                                            else if (chk.Check_Name.Equals("Non-compliant styles", StringComparison.OrdinalIgnoreCase) && rObj.Job_Type == "QC")
                                                wParObj.ChangeNormalToParagraphstyle(chk, doc);

                                            else if (chk.Check_Name.Equals("Verify \"Symbol\" font", StringComparison.OrdinalIgnoreCase) && rObj.Job_Type == "QC")
                                                wDocObj.CheckSymbolFontInDocument(chk, doc);

                                            else if (chk.Check_Name.Equals("Figure style", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.FigureStyle(chk, doc);

                                            else if (chk.Check_Name.Equals("Use small caps for given keywords", StringComparison.OrdinalIgnoreCase))
                                                wPunObj.Smallcapsforgivenkeywordscheck(chk, doc);

                                            else if (chk.Check_Name.Equals("Space before superscript footnote designator", StringComparison.OrdinalIgnoreCase))
                                                wPunObj.SpaceBeforeSuperscript(chk, doc);

                                            else if (chk.Check_Name.Equals("Space after superscript footnote letters", StringComparison.OrdinalIgnoreCase))
                                                wPunObj.SpaceAfterSuperscript(chk, doc);

                                            else if (chk.Check_Name.Equals("Move text with given style to table footer row", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckMoveFootnoteInTable(chk, doc);

                                            else if (chk.Check_Name.Equals("List footnotes at the bottom of the table, figure, or appendix with each footnote on its own line", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.ListFootnotesTablesFigures(chk, doc);

                                            else if (chk.Check_Name.Equals("Use hardspace around mathematical symbols", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CheckArthamatixOperation(chk, doc);


                                            else if (chk.Check_Name.Equals("Report ampersand (&) symbol", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.AmpersandDetectionCheck(chk, doc);
                                            else if (chk.Check_Name.Equals("Cross-reference only the section, table, figure, appendix and for number", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CrossReferenceCheck(chk, doc);


                                            else if (chk.Check_Name.Equals("Left indentation of equations", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CheckEquationLeftIndent(chk, doc);

                                            else if (chk.Check_Name.Equals("Anonymization", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wDocObj.CheckWordRedact(chk, doc, chkLst);
                                            }
                                                

                                            else if (chk.Check_Name.Equals("Report date field codes", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CheckDateFields(chk, doc);

                                            else if (chk.Check_Name.Equals("Table header style", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckTableHeaderStyle(chk, doc);

                                            else if (chk.Check_Name.Equals("Table body style", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckTableBodyStyle(chk, doc);

                                            else if (chk.Check_Name.Equals("Report if a page contains more than 1 figures", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.ReportOnePageMultipleFigures(chk, doc);

                                            else if (chk.Check_Name.Equals("Table and figure cross references are referred atleast once", StringComparison.OrdinalIgnoreCase))
                                                wDocObj.CheckCrossReferenceDestinationOnce(chk, doc);

                                            else if (chk.Check_Name.Equals("Tables and Figures numbering:Nonclinical Technical Reports", StringComparison.OrdinalIgnoreCase))
                                                wTabObj.CheckTableAndSummaryTableAndFigureAndSummaryFigurenumbaring(chk, doc);

                                            else if (chk.Check_Name.Trim().Equals("Equation captions", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wDocObj.CheckEquationStyleAndFields(chk, doc, chkLst);
                                            }

                                            else if (chk.Check_Name.Trim().Equals("Appendix captions", StringComparison.OrdinalIgnoreCase))
                                            {
                                                chk.Check_Type = 1;
                                                wDocObj.CheckAppendixStyleAndFields(chk, doc, chkLst);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Table should not contain merged cells", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.tableFreeOfMergedCellsCheck(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("No spaces, hard return and tabs in Table cells", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.AvoidSpaceshardReturnAndTabsIinTableCellsCheck(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("No cross-reference required when the referenced table/figure appears on the same page", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wTabObj.RemoveReferencedTableOrFigureAppearsOnTheSamePageCheck(chk, doc);
                                            }
                                            //else if (chk.Check_Name.Trim().Equals("Header/Footer consistent with template", StringComparison.OrdinalIgnoreCase))
                                            //{
                                            //    wHdFtObj.HeaderOrFooterconsistentWithTemplate(chk, doc,conn,rObj.Preference_ID);
                                            //}
                                            //else if (chk.Check_Name.Trim().Equals("Consistent use of punctuations for List Bullets/List Numbers", StringComparison.OrdinalIgnoreCase))
                                            //{
                                            //    wPunObj.PunctuationConsistentAcrossBullentOrNumberListText(chk,chkLst,doc);
                                            //}
                                            else if (chk.Check_Name.Trim().Equals("Consistent spacing between wording and numbers", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wPunObj.consistentSpacingBetweenWordingAndNumbersCheck(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Use periods for given keywords", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wPunObj.UsePeriodForGivenKeywordsCheck(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Remove periods for given keywords", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wPunObj.RemovePeriodForGivenKeywordsCheck(chk, doc);
                                            }
                                            else if (chk.Check_Name.Trim().Equals("Carriage return between Heading 1 sections and paragraphs", StringComparison.OrdinalIgnoreCase))
                                            {
                                                wPunObj.SpacingBetweenParagraphsAndHeading1Check(chk, doc);
                                            }


                                            if (chk.Job_Status == "Error")
                                                rObj.Job_Status = chk.Job_Status;
                                        }
                                        
                                        // for fixing the failed checks
                                        if (rObj.Job_Type != "QC")
                                        {
                                            
                                            foreach (RegOpsQC chk in mainChkLst)
                                            {
                                                chk.Job_ID = rObj.Job_ID;
                                                chk.Folder_Name = rObj.Folder_Name;
                                                chk.File_Name = rObj.File_Name;
                                                chk.DestFilePath = rObj.DestFilePath;
                                                chk.JID = rObj.ID;
                                                chk.Created_ID = rObj.Created_ID;
                                                chk.Prefix_FileName = rObj.Prefix_FileName;

                                                if ((chk.Check_Type == 1 && chk.QC_Result == "Failed" && rObj.Comments != "Properties are not present for this style.") || chk.Check_Name.Equals("Verify \"Symbol\" font", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Equals("Report blank pages") || chk.Check_Name.Equals("Report blank lines") || chk.Check_Name.Trim().Equals("Non-compliant styles", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    if (chk.Check_Name.Trim().Equals("Footer text check and fix", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixFootertextinstruction(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Track changes is turned off", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixTrackChangesTurnOff(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Page numbers should be in sequence", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixFooterPageNumberSequence(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Numbered list style", StringComparison.OrdinalIgnoreCase))
                                                    {

                                                        wDocObj.FixNumberedListStyle(chk, doc, chkLst);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("A blank paragraph after list with given style", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.ListItememptyparagraphFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Missing Table sequence number", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixMissingSequenceNumber(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Missing Figure sequence number", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixFigureMissingSequenceNumber(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Footer Style Name", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixFooterStyleName(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Footers should be blank", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixFootersshouldbeblank(chk, doc);


                                                    else if (chk.Check_Name.Trim().Equals("TOC 1 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.FixTOC1_style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("TOC 2 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.FixTOC2_style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("TOC 3 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.FixTOC3_style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("TOC 4 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.FixTOC4_style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Heading 1 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.Fix_Heading_1_Style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Heading 2 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.Fix_Heading_2_Style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Heading 3 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.Fix_Heading_3_Style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Heading 4 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.Fix_Heading_4_Style(chk, doc, chkLst);

                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Heading 5 Style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.Fix_Heading_5_Style(chk, doc, chkLst);

                                                    }

                                                    else if (chk.Check_Name.Trim().Equals("Multiple footnote designators are separated by commas, with no spaces", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.Fixmultiplefootnoteseparatebycomma(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Figure footnotes alignment", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FigureFootnotesAlignmentFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Table border width", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTWidth(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Table row height", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableRowHeight(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Do not allow row to break across pages", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.TableRowToBreakAcrossPageFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Table and Figure titles format", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableandFigureformat(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Move caption to caption row", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.ThakedaFixmovetablecaptionintocaptionrow(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No shading should be applied for table cells", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixNoShading(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No footnotes should be placed in a appendix title", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixNofootnotesinappendixtitle(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Header top margin", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixHeaderTopMargin(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Add one extra carriage return at the end of header", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.HeaderCarriagereturnFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Remove date field codes in Header", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixRemoveDateFieldCodeFromHeader(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No hard returns in table title", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixNoHardreturn(chk, doc);

                                                    else if (chk.Check_Name.Equals("Table column headings should be in title case", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.TableColumnHeadingsShouldBeInTitleCaseFix(chk, doc);

                                                    else if (chk.Check_Name.Equals("Table title should be in title case", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.TableTitleShouldBeInTitleCaseFix(chk, doc);

                                                    else if (chk.Check_Name.Equals("Repeat table title and header row", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixRepeatTableTitleAndHeaderRow(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Table numbers and titles alignment", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FIxTablenumbersandTitleAlignment(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Equals("Figure title should be in title case", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FigureTitleShouldBeInTitleCaseFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No footnotes should be placed in a table title", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixNofootnotesintabletitle(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No footnotes should be placed in a figure title", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixNofootnotesinfiguretitle(chk, doc);

                                                    //else if (chk.Check_Name.Trim().Equals("No space between number and degrees", StringComparison.OrdinalIgnoreCase))
                                                    //    wDocObj.FIxNospacebetweennumberanddegrees(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No space between number and units", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FIxNospacebetweennumberandpercentage(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("File should not be embedded within a file", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixFileshouldnotEmbeddedwithinFile(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Figure numbers and titles alignment", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixFigurenumbersandTitleAlignment(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Style of body text", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FIXStyleofbodytext(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Header Font Size", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixHeaderFontSize(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Header settings(Shire)", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixHeadersettings(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Headers are not included on title pages", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.DifferentFirstPageFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Footer text", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixFootertext(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Do not include a space before the colon", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixSingleSpacebeforeColon(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Footer Font Size", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixFooterFontSize(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Report blank pages", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.WordBlankPage(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Report blank lines", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.ReportBlankLines(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No Comments", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixCheckComments(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Remove page numbers in Header", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixRemovePageFieldFromHeader(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Header text style", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixUpdateHeaderTextFontStyle(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Text should not be underlined", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixRemoveUnderLines(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Remove background Color", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixRemovePageColors(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Table - List Bullets/List Numbers Font Size", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixTableList(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Remove Page Borders", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixRemovePageborders(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Page Size", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixStandardPageSize(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Ensure that there is a bottom border line and a paragraph return in Header", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixInsertHeaderBorderLine(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Remove field codes from Header text", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixRemoveFieldCodeFromHeader(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Uncheck Different First Page", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixDifferentFirstPage(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Consistent use of 1 space following a period", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixSingleSpaceafterPeriod(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Uncheck Different Odd and Even Page", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixDiferentOddandEvenPages(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Header Style Name", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixHeaderStyleName(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Vertical alignment in tables for headers", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixAlignTableHeading(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Vertical alignment for header rows", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixVerticalAlignmentForHeaderRows(chk, doc, chkLst);


                                                    else if (chk.Check_Name.Trim().Equals("Tables content alignment", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixAlignTableContent(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Page margins", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixSetMargins(chk, doc, chkLst);


                                                    else if (chk.Check_Name.Trim().Equals("Paragraph spacing", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixParagraphspacing(chk, doc, chkLst);

                                                    //else if (chk.Check_Name.Trim().Equals("Move Table title and caption into caption row", StringComparison.OrdinalIgnoreCase))
                                                    //    wTabObj.FixAddSequenceFigureandTables(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Check whether TOC,LOT,LOF and LOA are present for 5 or above 5 pages", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixTOC(chk, doc, chkLst);
                                                    else if (chk.Check_Name.Trim().Equals("Delete temporary TOCs, footnotes, and headers and footers", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.RemoveTemporaryLOTandLOFFix(chk, doc);
                                                    }

                                                    else if (chk.Check_Name.Trim().Equals("Use \"Link to Previous\" in multi section document", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixLinktoprevious(chk, doc);


                                                    else if (chk.Check_Name.Trim().Equals("A blank paragraph after table and figure with given style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixEmptyParagraphAfterTableFigure(chk, doc);
                                                    }

                                                    else if (chk.Check_Name.Trim().Equals("Hyperlinks color", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixHyperLinksColor(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("No Widow and Orphaned headings", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixCheckAndFixOrphans(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Remove double space after periods", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixSingleSpaceafterPeriod(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Embedded fonts fix", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixFontfixedEmbeddedFonts(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Word properties should be blank", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixWordPropertiesBlank(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Carriage return between paragraphs and before and after tables and graphs", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixInsertBlankRowBeforeAndAfterTableandFigure(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Text color black except links", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixBlackFontRecomended(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Paragraph indent", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixIndentParagraph(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("First line of paragraph indent or hanging indent", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixFirstLineParagraphIndentation(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Paragraph alignment", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixAllParagraphsAlignment(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Paragraph alignment(Excluding first page)", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixAllParagraphsAlignmentExcludeFirstPage(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Remove text background and shadowing", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixRemovingBackgroundShadingandShadowingForText(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Tables Font", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixTablefigureFonts(chk, doc, chkLst);
                                                    else if (chk.Check_Name.Trim().Equals("Figures exceeding page margins", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FiguresexceedingpagemarginsFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Content exceeding page margins", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixContentNotExceedingPageMargin(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Content exceeding page size", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixContentNotExceedingPageSize(chk, doc);

                                                    //else if (chk.Check_Name.Trim().Equals("No Track Changes", StringComparison.OrdinalIgnoreCase))
                                                    //    vObj.FixCheckTrackChanges(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Use Hard hyphen (ctrl + shift + -)", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixReplacewithHardHypen(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Use hard space (ctrl + shift + space)", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixReplacewithHardSpace(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Use hard space for units before number", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixReplacewithHardSpacebeforenumber(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Check all references destination", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixCheckReferencesAreAtRightDestination(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Management of special text", StringComparison.OrdinalIgnoreCase) || chk.Check_Name.Trim().Equals("Management of special text (Additional)", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixNoInstructionStylesPresent(chk, doc, chkLst);

                                                    //else if (chk.Check_Name.Trim().Equals("Management of special instruction/example/hidden text", StringComparison.OrdinalIgnoreCase))
                                                    //    wParObj.FixManagementOfInstructionStyle(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Delete blank row before table and keep row in after table", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixDeleteblankrowbeforetable(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Delete blank row before figure and keep row in after figure", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixDeleteblankrowbeforefigure(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Check Page breaks after or before table or figure links", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixCheckPageBreakbeforeORafterTableAndFigure(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Check Table cross reference", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixcheckTablecrossreference(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Table autofit to window", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableAutoFitToWindow(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Ensure that lettered footnotes appear in alphabetical order", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixEnsureletteredFootnote(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Footnotes entered below the image are in given style", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixFigureFootnotesgivenstyle(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Missing Table caption Style", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableCaptionstyle(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Missing Figure caption Style", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixFigurecaptionstyle(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Blank rows in footer", StringComparison.OrdinalIgnoreCase))
                                                        wHdFtObj.FixRemoveblankrowinfooter(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Non-compliant styles", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.ChangeNormalToParagraphstyle(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Font - Paragraphs(Body text)", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixParagraphFontSize(chk, doc, destPath, chkLst);
                                                    else if (chk.Check_Name.Trim().Equals("Level 1 heading starting at new page", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixLevel1Heading(chk, doc);


                                                    else if (chk.Check_Name.Trim().Equals("Turn off automatic hyphenation", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixRemoveAutomaticHyphenetionOption(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Line spacing", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixLineSpacingForEachLine(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Consistent use of 1 space following a colon", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixSingleSpaceafterColon(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Table and figure cross references", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixTableFigurecrossreferenceColor(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Verify internal and external cross reference, external link should blue text", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixHyperlinksDestinationpage(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Figure alignment", StringComparison.OrdinalIgnoreCase))
                                                    {

                                                        wTabObj.FixFigureAligment(chk, doc, chkLst);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Remove all template highlighting", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wDocObj.FixIsAllTemplateHighlitRemove(chk, doc, chkLst);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Table captions style", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixTableCaptionFonts(chk, doc, chkLst);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Check entire page captions", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixCheckentirepagecaptions(chk, doc, chkLst);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Table captions", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixtableCaption(chk, doc, chkLst);
                                                    }

                                                    else if (chk.Check_Name.Trim().Equals("Figure captions", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixfigureCaption(chk, doc, chkLst);
                                                    }

                                                    else if (chk.Check_Name.Trim().Equals("Table cell margins", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixTableCellMargins(chk, doc, chkLst);
                                                    }

                                                    else if (chk.Check_Name.Trim().Equals("Heading rows repeat", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixTableHeadingRowsRepeat(chk, doc);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Table alignment", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixTableAlignment(chk, doc, chkLst);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("No small capital letters in section headings, table, figure, or appendix titles", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.FixNoSmallCaps(chk, doc, chkLst);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Page Rotation", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixPageRotation(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Verify \"Symbol\" font", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.CheckSymbolFontInDocument(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Keep with next for tables", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixKeepWithNextOnTables(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Single cell in Table Caption row", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixSingleCellCaptionrow(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Caption style name", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.Fixverifiedcaptionstylename(chk, doc);

                                                    else if (chk.Check_Name.Equals("Symbol font for special characters", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixReplacingMappingSymbols(chk, doc);

                                                    else if (chk.Check_Name.Equals("Text wrapping for pictures", StringComparison.OrdinalIgnoreCase))
                                                        wLayObj.FixTextwrappingforpictures(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Remove borders for figures", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.RemoveFigureBordersFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Tables should have outside borders", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableShouldhaveborders(chk, doc);

                                                    else if (chk.Check_Name.Equals("Text wrapping for Tables", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.Fixtextwrappingfortables(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Hardspace before Registered, Copyrighted, Trademark, and Other Symbols", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.AddHardSpaceBeforeSymbolsFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Use hard space for given keywords", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixReplacewithHardSpaceforUnits(chk, doc);

                                                    else if (chk.Check_Name.Equals("Table and figure numbers should be followed by a tab and does not include a colon", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixTableFigureTitleTabkey(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Use hard hyphen for given keywords", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.FixReplacewithHardhyphenforUnits(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Change style of blank rows to \"Paragraph\" style", StringComparison.OrdinalIgnoreCase))
                                                        wParObj.ReplaceblankspacestyleFix(chk, doc);

                                                    else if (chk.Check_Name.Equals("Heading/Table title/Figure title should not end with a period", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.TitlesSholdNotEndWithPeriodFix(chk, doc);

                                                    else if (chk.Check_Name.Equals("Capitalize the first letter of each bulleted or numbered item", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.CapitalizefirstwordFix(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Convert word to PDF document", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.ConvertwordtopdfFix(chk, doc, ref wordtopdf);

                                                    else if (chk.Check_Name.Equals("Use an uppercase L for litres", StringComparison.OrdinalIgnoreCase))
                                                        wPunObj.FixReplaceLforliters(chk, doc);

                                                    else if (chk.Check_Name.Equals("Remove space between number and arithmetic symbols", StringComparison.OrdinalIgnoreCase))
                                                        wPunObj.FixRemovespace(chk, doc);

                                                    else if (chk.Check_Name.Equals("Anonymization", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixWordRedact(chk, doc, chkLst);

                                                    else if (chk.Check_Name.Trim().Equals("Figure style", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FigureStyleFix(chk, doc);

                                                    else if (chk.Check_Name.Equals("Use hardspace around mathematical symbols", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixArthamatixOperation(chk, doc);

                                                    else if (chk.Check_Name.Equals("Use small caps for given keywords", StringComparison.OrdinalIgnoreCase))
                                                        wPunObj.SmallcapsforgivenkeywordsFix(chk, doc);

                                                    else if (chk.Check_Name.Equals("Space before superscript footnote designator", StringComparison.OrdinalIgnoreCase))
                                                        wPunObj.FixSpaceBeforeSuperscript(chk, doc);

                                                    else if (chk.Check_Name.Equals("Space after superscript footnote letters", StringComparison.OrdinalIgnoreCase))
                                                        wPunObj.FixSpaceAfterSuperscript(chk, doc);

                                                    else if (chk.Check_Name.Equals("Move text with given style to table footer row", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixMoveFootnoteInTable(chk, doc);

                                                    else if (chk.Check_Name.Equals("Left indentation of equations", StringComparison.OrdinalIgnoreCase))
                                                        wDocObj.FixEquationLeftIndent(chk, doc);

                                                    else if (chk.Check_Name.Equals("Table header style", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableHeaderStyle(chk, doc);

                                                    else if (chk.Check_Name.Equals("Table body style", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableBodyStyle(chk, doc);

                                                    else if (chk.Check_Name.Equals("Tables and Figures numbering:Nonclinical Technical Reports", StringComparison.OrdinalIgnoreCase))
                                                        wTabObj.FixTableAndSummaryTableAndFigureAndSummaryFigurenumbaring(chk, doc);

                                                    else if (chk.Check_Name.Trim().Equals("Equation captions", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        chk.Check_Type = 1;
                                                        wDocObj.FixEquationStyleAndFields(chk, doc, chkLst);
                                                    }

                                                    else if (chk.Check_Name.Trim().Equals("Appendix captions", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        chk.Check_Type = 1;
                                                        wDocObj.FixAppendixStyleAndFields(chk, doc, chkLst);
                                                    }
                                                    //else if (chk.Check_Name.Trim().Equals("Table should not contain merged cells", StringComparison.OrdinalIgnoreCase))
                                                    //{
                                                    //    wTabObj.tableFreeOfMergedCellsFix(chk, doc);
                                                    //}
                                                    else if (chk.Check_Name.Trim().Equals("No cross-reference required when the referenced table/figure appears on the same page", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wTabObj.RemoveReferencedTableOrFigureAppearsOnTheSamePageFix(chk, doc);
                                                    }
                                                    //else if (chk.Check_Name.Trim().Equals("Consistent use of punctuations for List Bullets/List Numbers", StringComparison.OrdinalIgnoreCase))
                                                    //{
                                                    //    wPunObj.FixPunctuationConsistentAcrossBullentOrNumberListText(chk, chkLst, doc);
                                                    //}
                                                    else if (chk.Check_Name.Trim().Equals("Consistent spacing between wording and numbers", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wPunObj.consistentSpacingBetweenWordingAndNumbersFix(chk, doc);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Use periods for given keywords", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wPunObj.UsePeriodForGivenKeywordsFix(chk, doc);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Remove periods for given keywords", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wPunObj.RemovePeriodForGivenKeywordsFix(chk, doc);
                                                    }
                                                    else if (chk.Check_Name.Trim().Equals("Carriage return between Heading 1 sections and paragraphs", StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        wPunObj.SpacingBetweenParagraphsAndHeading1Fix(chk, doc);
                                                    }

                                                }
                                                if (chk.Job_Status == "Error")
                                                    rObj.Job_Status = chk.Job_Status;
                                            }
                                        }


                                        //doc = new Document(rObj.DestFilePath);
                                        
                                        if(wordtopdf == 0)
                                        {
                                            doc.UpdateFields();
                                            doc.Save(rObj.DestFilePath);
                                        }
                                        else if (wordtopdf == 1)
                                        {
                                            string modifydestpath = rObj.DestFilePath.Replace(".doc", ".pdf");
                                            doc.Save(modifydestpath);

                                        }
                                        else if(wordtopdf == 2)
                                        {
                                            string modifydestpath = rObj.DestFilePath.Replace(".docx", ".pdf");
                                            doc.Save(modifydestpath);
                                        }
                                        
                                        if (chkLst != null && chkLst.Count > 0)
                                            SaveValidateResults(chkLst);
                                    }
                                }
                                else
                                {
                                    return "Redirect Index";
                                }
                                #endregion
                            }
                        }
                        planFlag = 1;

                        //delete word Template saved folder
                        if (Directory.Exists(templatePath))
                        {
                            foreach (string file1 in Directory.GetFiles(templatePath))
                            {
                                File.Delete(file1);
                            }
                            Directory.Delete(templatePath);
                        }
                    }
                    string name11 = rObj.FileIdString;
                    string[] names11 = name11.Split(',');

                    DataTable dtenty1 = new DataTable();
                    dtenty1.Columns.Add("FileInfo", typeof(string));
                    for (int k = 0; k < names11.Length; k++)
                        dtenty1.Rows.Add(new object[] { names11[k] });
                    if (dtenty1.Rows.Count > 0)
                    {
                        for (int j = 0; j < dtenty1.Rows.Count; j++)
                        {
                            Int64 fid = Convert.ToInt64(dtenty1.Rows[j]["FileInfo"].ToString());
                            rObj.file_ID = fid;
                            DataSet dset = new DataSet();
                            dset = conn.GetDataSet("SELECT FILE_NAME,CONTENT_TYPE FROM DCM_FILES WHERE FILE_ID=" + rObj.file_ID, CommandType.Text, ConnectionState.Open);
                            if (conn.Validate(dset))
                            {
                                rObj.File_Upload_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                rObj.File_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                rObj.Template_File_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                rObj.content_Type = dset.Tables[0].Rows[0]["CONTENT_TYPE"].ToString();
                            }
                            string deleteFilePath = string.Empty;
                            var s11 = Regex.Replace(rObj.File_Upload_Name, @"""", "").Trim().ToString();
                            string extension = Path.GetExtension(s11);
                            rObj.File_Upload_Name = Regex.Replace(s11, @"%%%%%%%", "").Trim().ToString();
                            string[] s1 = Regex.Split(s11, @"%%%%%%%");
                            rObj.File_Name = s1[0];
                            if (rObj.Job_Type != "QC")
                            {
                                //if (rObj.Category == "Dossier")
                                //{
                                //    //if (rObj.Regops_Output_Type == "PDF")
                                //    //{
                                //    //    string[] filesArray = new string[Allfiles.Count];
                                //    //    // Create PdfFileEditor object
                                //    //    Aspose.Pdf.Facades.PdfFileEditor pdfEditor = new Aspose.Pdf.Facades.PdfFileEditor();
                                //    //    filesArray = Allfiles.Where(x => x.EndsWith(".pdf")).ToArray();
                                //    //    rObj.DestFilePath = m_SourceFolderPathQC + rObj.Job_ID+ "\\Output\\" + rObj.Job_ID + "_Output_" + rObj.ProductName + "_" + DateTime.Now.ToString("MMddyyyy_hhmmssmmmtt") + ".pdf";
                                //    //    pdfEditor.Concatenate(filesArray, rObj.DestFilePath);
                                //    //    extension = Path.GetExtension(rObj.DestFilePath);
                                //    //    rObj.File_Upload_Name = Path.GetFileName(rObj.DestFilePath);
                                //    //    rObj.File_Name = Path.GetFileName(rObj.DestFilePath);
                                //    //}
                                //}
                                if (extension != null && extension != "" && rObj.File_Upload_Name != "" && rObj.File_Upload_Name != null)
                                {
                                    string outputFile = string.Empty;
                                    if (extension != ".zip")
                                    {
                                        string s01 = string.Empty;
                                        string s011 = string.Empty;
                                        string tempFile = rObj.File_Upload_Name;

                                        if (docxFixed == true && Path.GetExtension(rObj.File_Upload_Name).ToLower().Trim() == ".doc")
                                        {
                                            outputFile = Path.GetFileNameWithoutExtension(rObj.File_Upload_Name) + ".docx";
                                            rObj.File_Name = outputFile;
                                        }
                                        else
                                            outputFile = rObj.File_Upload_Name;
                                        destPath1 = m_SourceFolderPathQC + rObj.Job_ID + "/Output/";
                                        s01 = destPath1 + outputFile;

                                        string ext01 = Path.GetExtension(s01);
                                        rObj.DestFilePath = s01;
                                        Int64 fileID = UploadFileinProjectForDestination(rObj, rObj.DestFilePath, rObj.file_ID);
                                        string destPathh1 = m_SourceFolderPathQC + rObj.Job_ID + "/Documents with Template/";
                                        if (Directory.Exists(destPathh1))
                                        {
                                            s011 = destPathh1 + tempFile;

                                            string extt01 = Path.GetExtension(s011);
                                            rObj.DestFilePath = s011;
                                            Int64 fileID2 = TemplateFileinProjectForDestination1(rObj, rObj.DestFilePath, rObj.file_ID);
                                        }
                                    }
                                    else
                                    {
                                        string tempFile = rObj.File_Upload_Name;
                                        string s01 = destPath1 + rObj.File_Upload_Name;
                                        string ext01 = Path.GetExtension(s01);
                                        if (!File.Exists(destPath1 + rObj.File_Upload_Name))
                                        {
                                            using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                            {
                                                //add directory, give it a name
                                                zip.AddDirectory(destPath1);
                                                zip.Save(m_SourceFolderPathQC + rObj.File_Upload_Name);
                                            }
                                        }
                                        string filePathWithoutExt = Path.ChangeExtension(s01, null);
                                        destPath = filePathWithoutExt;
                                        rObj.DestFilePath = m_SourceFolderPathQC + rObj.File_Upload_Name;
                                        Int64 fileID = UploadFileinProjectForDestination(rObj, rObj.DestFilePath, rObj.file_ID);

                                        string destPathh1 = m_SourceFolderPathQC + rObj.Job_ID + "/Documents with Template/";
                                        if (Directory.Exists(destPathh1))
                                        {
                                            string s011 = destPathh1 + predictTempName + "_" + tempFile;
                                            string extt01 = Path.GetExtension(s011);
                                            if (!File.Exists(destPathh1 + predictTempName + "_" + tempFile))
                                            {
                                                using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                                {
                                                    //add directory, give it a name
                                                    zip.AddDirectory(destPathh1);
                                                    zip.Save(m_SourceFolderPathQC + predictTempName + "_" + tempFile);
                                                }
                                            }
                                            string filePathWithoutExt1 = Path.ChangeExtension(s011, null);
                                            destPath = filePathWithoutExt1;
                                            rObj.DestFilePath = m_SourceFolderPathQC + predictTempName + "_" + tempFile;
                                            //rObj.File_Name = predictTempName + "_" + tempFile;
                                            Int64 fileID1 = TemplateFileinProjectForDestination1(rObj, rObj.DestFilePath, rObj.file_ID);

                                        }


                                    }
                                }
                            }

                        }
                    }
                }
                Int64 totalpages = pageCount;
                Int64 attachTemp;
                if (rObj.WordTemplate_ID > 0 && rObj.ISAttachPREDICTTemplate == "Yes")
                {
                    attachTemp = 1;
                }
                else
                {
                    attachTemp = 0;

                }
                int m_res1 = conn.ExecuteNonQuery("UPDATE REGOPS_QC_JOBS SET NO_OF_PAGES=" + totalpages + ",ATTACH_WORD_TEMPLATE=" + attachTemp + ", JOB_END_TIME =(SELECT CURRENT_TIMESTAMP FROM DUAL),JOB_STATUS='" + rObj.Job_Status + "',UPDATED_ID='" + rObj.Created_ID + "',UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE ID='" + rObj.ID + "'", CommandType.Text, ConnectionState.Open);
                if (m_res1 == 1)
                {
                    // modified this as per new change - 3-Apr-2021---------
                    //   Int64 EmailAlert = GetSetingsDataForJobEmailAlert(rObj);

                    if (rObj.ISJobMailAlert == "Yes")
                    {
                        List<User> usr = new List<User>();
                        usr = new UserActions().GetMailUserDetailsByUserID(rObj.Created_ID);
                        string supportEmail = new UserActions().GetSupportEmail(rObj.Created_ID);
                        string m_Result = string.Empty;
                        TimeZone zone = TimeZone.CurrentTimeZone;
                        string standard = string.Concat(System.Text.RegularExpressions.Regex
                          .Matches(zone.StandardName, "[A-Z]")
                          .OfType<System.Text.RegularExpressions.Match>()
                          .Select(match => match.Value));
                        if (standard == "CUT")
                            standard = "UTC";
                        Mail mailObj = new Mail();
                        StringBuilder m_Body = new StringBuilder();
                        m_Body.AppendLine("Hello   " + usr[0].UserDetails[0].FirstName.ToString() + " " + usr[0].UserDetails[0].LastName.ToString() + ",<br/><br/>");
                        m_Body.AppendLine("Job ID: " + rObj.Job_ID + "<br/>");
                        m_Body.AppendLine("Job Title: " + rObj.Job_Title + "<br/>");
                        m_Body.AppendLine("Job Status: " + rObj.Job_Status + "<br/>");
                        m_Body.AppendLine("Date: " + rObj.Created_Date + " " + standard + " <br/><br/>");
                        m_Body.AppendLine("<br/>");
                        m_Body.AppendLine("Regards,<br/>");
                        m_Body.AppendLine("REGai Team<br/>");
                        m_Body.AppendLine("(This is auto generated email. Please do not reply to this email.) <br/><br/>");
                        m_Body.AppendLine("For any queries please reach out to " + supportEmail);
                        // m_Result = mailObj.SendMail(usr[0].Email, EMAIL, "REGai Job Status Alert - " + rObj.Job_ID + " Completed", m_Body.ToString());
                        m_Result = mailObj.SendMail(usr[0].Email, EMAIL, m_Body.ToString(), "REGai Job Status Alert - " + rObj.Job_ID + " Completed", "Success");
                        ErrorLogger.Info("CreateJob,Success");
                        return "Success";

                    }
                }

                try
                {
                    string deleteJobPath = m_SourceFolderPathQC + rObj.Job_ID;
                    if (Directory.Exists(deleteJobPath))
                    {
                        foreach (string subfolder in Directory.GetDirectories(deleteJobPath))
                        {
                            RemoveDirectories(subfolder);
                        }
                        foreach (string file1 in Directory.GetFiles(deleteJobPath))
                        {
                            File.Delete(file1);
                        }
                        Directory.Delete(deleteJobPath);
                    }
                    string QcDestinationPathFolder = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_" + rObj.Organization + "\\RegOpsQCDestination\\";
                    string deleteDestinationJobPath = QcDestinationPathFolder + rObj.Job_ID;
                    if (Directory.Exists(deleteDestinationJobPath))
                    {
                        foreach (string subfolder in Directory.GetDirectories(deleteDestinationJobPath))
                        {
                            RemoveDirectories(deleteDestinationJobPath);
                        }
                        foreach (string file1 in Directory.GetFiles(deleteDestinationJobPath))
                        {
                            File.Delete(file1);
                        }
                        Directory.Delete(deleteDestinationJobPath);
                    }
                }
                catch
                {

                }
                return res;
            }
            catch (Exception ex)
            {
                rObj.No_Of_Pages = pageCount.ToString();
                UpdateFailedJobStatus(rObj);
                ErrorLogger.Error(ex);
                return "Failed";
            }
            finally
            {
                //con.Close();
            }
        }
        public static void Copy(string sourceDirectory, string targetDirectory)
        {
            var diSource = new DirectoryInfo(sourceDirectory);
            var diTarget = new DirectoryInfo(targetDirectory);

            CopyAll(diSource, diTarget);
        }

        public static void CopyAll(DirectoryInfo source, DirectoryInfo target)
        {
            Directory.CreateDirectory(target.FullName);

            // Copy each file into the new directory.
            foreach (FileInfo fi in source.GetFiles())
            {
                //Console.WriteLine(@"Copying {0}\{1}", target.FullName, fi.Name);
                fi.CopyTo(Path.Combine(target.FullName, fi.Name), true);
            }

            // Copy each subdirectory using recursion.
            foreach (DirectoryInfo diSourceSubDir in source.GetDirectories())
            {
                DirectoryInfo nextTargetSubDir =
                    target.CreateSubdirectory(diSourceSubDir.Name);
                CopyAll(diSourceSubDir, nextTargetSubDir);
            }
        }

        /// <summary>
        /// save QC results to REGOPS_QC_VALIDATION_DETAILS
        /// </summary>
        /// <param name="rObjList"></param>
        /// <returns></returns>
        public string SaveValidateResults(List<RegOpsQC> rObjList)
        {
            string res = string.Empty;
            OracleConnection o_Con = new OracleConnection();
            long[] Job_ID;
            long[] CHECKLIST_ID;
            String[] Folder_Name;
            String[] File_Name;
            String[] QC_Result;
            //byte[][] Comments;
            String[] Comments;
            long[] Group_Check_ID;
            DateTime[] CHECK_START_TIME;
            DateTime[] CHECK_End_TIME;
            //   long[] Sub_CheckList_ID;
            long[] Parent_CheckList_ID;
            long[] QC_TYPE;
            String[] CHECK_PARAMETER;
            long[] QC_Preferences_Id;
            long[] Is_Fixed;
            //Added FIX_START_TIME AND FIX_END_TIME by srinu Gouda
            DateTime[] FIX_START_TIME;
            DateTime[] FIX_End_TIME;
            try
            {
                int i = 0;
                List<RegOpsQC> varSubCheckList = new List<RegOpsQC>();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObjList[0].Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                o_Con.ConnectionString = m_DummyConn;
                DateTime UpdateDate = DateTime.Now;
                String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");
                string result = string.Empty;
                //rObjList = rObjList.Where(x => x.Composite_Check != 0).OrderBy(x => x.ID).ToList();
                Job_ID = new long[rObjList.Count];
                CHECKLIST_ID = new long[rObjList.Count];
                Folder_Name = new string[rObjList.Count];
                File_Name = new string[rObjList.Count];
                QC_Result = new string[rObjList.Count];
                Comments = new string[rObjList.Count];
                Group_Check_ID = new long[rObjList.Count];
                CHECK_START_TIME = new DateTime[rObjList.Count];
                CHECK_End_TIME = new DateTime[rObjList.Count];
                QC_TYPE = new long[rObjList.Count];
                CHECK_PARAMETER = new string[rObjList.Count];
                Parent_CheckList_ID = new long[rObjList.Count];
                QC_Preferences_Id = new long[rObjList.Count];
                Is_Fixed = new long[rObjList.Count];
                //Added FIX_START_TIME AND FIX_END_TIME by srinu Gouda
                FIX_START_TIME = new DateTime[rObjList.Count];
                FIX_End_TIME = new DateTime[rObjList.Count];
                i = 0;

                // for getting Prefix_FileName for all selected checks
                //Int64 prefixNumber = 0;
                //foreach (RegOpsQC qww in rObjList)
                //{                   
                //    if (qww.Prefix_FileName == 1)
                //    {
                //        prefixNumber = qww.Prefix_FileName;
                //    }
                //    break;                    
                //}

                foreach (RegOpsQC rObj in rObjList)
                {
                    Job_ID[i] = rObj.JID;
                    CHECKLIST_ID[i] = rObj.CheckList_ID;
                    Folder_Name[i] = rObj.Folder_Name;
                    if (rObj.File_Name != null && rObj.File_Name != "")
                    {
                        File_Name[i] = rObj.File_Name;
                        //if (prefixNumber == 1)
                        //{
                        //    string[] sobj = Regex.Split(rObj.File_Name, @"Output_");
                        //    if (sobj.Count() > 2)
                        //    {
                        //        for (int j = 0; j < sobj.Count(); j++)
                        //        {
                        //            if (sobj[j] != "" && sobj[j] != null)
                        //            {
                        //                string text = string.Empty;
                        //                for (int k = 0; k < j - 1; k++)
                        //                {
                        //                    text += "Output_";
                        //                }
                        //                File_Name[i] = text + sobj[j];
                        //            }
                        //        }
                        //    }
                        //    else if (sobj.Count() > 1)
                        //    {
                        //        for (int j = 0; j < sobj.Count(); j++)
                        //        {
                        //            if (sobj[j] != "" && sobj[j] != null)
                        //            {

                        //                File_Name[i] =  sobj[j];
                        //            }
                        //        }
                        //    }
                        //    else
                        //    {
                        //        File_Name[i] = sobj[0];
                        //    }

                        //}
                        //else
                        //{
                        // File_Name[i] = rObj.File_Name;
                        //}

                    }
                    else
                        File_Name[i] = "";
                    QC_Result[i] = rObj.QC_Result;
                    Comments[i] = rObj.Comments;
                    Group_Check_ID[i] = rObj.Group_Check_ID;
                    CHECK_START_TIME[i] = rObj.CHECK_START_TIME;
                    CHECK_End_TIME[i] = rObj.CHECK_END_TIME;
                    QC_TYPE[i] = rObj.QC_Type;
                    CHECK_PARAMETER[i] = rObj.Check_Parameter;
                    Parent_CheckList_ID[i] = rObj.Parent_Checklist_ID;
                    QC_Preferences_Id[i] = rObj.Qc_Preferences_Id;
                    Is_Fixed[i] = rObj.Is_Fixed;
                    //Added FIX_START_TIME AND FIX_END_TIME by srinu Gouda
                    FIX_START_TIME[i] = rObj.FIX_START_TIME;
                    FIX_End_TIME[i] = rObj.FIX_END_TIME;
                    i++;
                }
                o_Con.Open();
                OracleCommand cmd = new OracleCommand();
                cmd.ArrayBindCount = rObjList.Count;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "sp_ins_REGOPS_QC_VLDTN_DTLS";
                cmd.Parameters.Add(new OracleParameter("ParJOB_ID", Job_ID));
                cmd.Parameters.Add(new OracleParameter("ParCHECKLIST_ID", CHECKLIST_ID));
                cmd.Parameters.Add(new OracleParameter("ParFOLDER_NAME", Folder_Name));
                cmd.Parameters.Add(new OracleParameter("ParFILE_NAME", File_Name));
                cmd.Parameters.Add(new OracleParameter("ParQC_RESULT", QC_Result));
                OracleParameter comments = new OracleParameter("ParCOMMENTS", OracleDbType.Clob);
                comments.Direction = ParameterDirection.Input;
                comments.Value = Comments;
                cmd.Parameters.Add(comments);
                cmd.Parameters.Add(new OracleParameter("ParGROUP_CHECK_ID", Group_Check_ID));
                cmd.Parameters.Add(new OracleParameter("ParCHECK_START_TIME", CHECK_START_TIME));
                cmd.Parameters.Add(new OracleParameter("ParCHECK_END_TIME", CHECK_End_TIME));
                cmd.Parameters.Add(new OracleParameter("ParParent_CHECK_ID", Parent_CheckList_ID));
                cmd.Parameters.Add(new OracleParameter("ParQC_TYPE", QC_TYPE));
                cmd.Parameters.Add(new OracleParameter("ParCHECK_PARAMETER", CHECK_PARAMETER));
                cmd.Parameters.Add(new OracleParameter("ParPreferences_Id", QC_Preferences_Id));
                cmd.Parameters.Add(new OracleParameter("ParIs_Fixed", Is_Fixed));
                //Added FIX_START_TIME AND FIX_END_TIME by srinu Gouda
                cmd.Parameters.Add(new OracleParameter("ParFIX_START_TIME", FIX_START_TIME));
                cmd.Parameters.Add(new OracleParameter("ParFIX_END_TIME", FIX_End_TIME));
                cmd.Connection = o_Con;
                int m_Res1 = cmd.ExecuteNonQuery();
                if (m_Res1 == -1)
                {
                    res = "Success";
                }
                SaveValidatePageNumbersResults(rObjList);
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                throw ex;
            }
            finally
            {
                o_Con.Close();
                Job_ID = null;
                CHECKLIST_ID = null;
                Folder_Name = null;
                File_Name = null;
                QC_Result = null;
                Comments = null;
                Group_Check_ID = null;
                CHECK_START_TIME = null;
                CHECK_End_TIME = null;
                Parent_CheckList_ID = null;
                QC_TYPE = null;
                CHECK_PARAMETER = null;
                QC_Preferences_Id = null;
                Is_Fixed = null;
            }
        }

        /// <summary>
        /// save QC results to REGOPS_QC_VALIDATION_DETAILS
        /// </summary>
        /// <param name="rObjList"></param>
        /// <returns></returns>
        public string SaveValidatePageNumbersResults(List<RegOpsQC> rObjList)
        {
            string res = string.Empty;
            OracleConnection o_Con = new OracleConnection();
            long[] Job_ID;
            long[] CHECKLIST_ID;
            String[] Folder_Name;
            String[] File_Name;
            String[] QC_Result;
            String[] Comments;
            long[] PageNumber;
            long[] Group_Check_ID;
            DateTime[] CHECK_START_TIME;
            DateTime[] CHECK_End_TIME;
            long[] Parent_CheckList_ID;
            long[] QC_TYPE;
            String[] CHECK_PARAMETER;
            long[] QC_Preferences_Id;
            long[] Is_Fixed;
            DateTime[] FIX_START_TIME;
            DateTime[] FIX_End_TIME;
            try
            {
                int i = 0;
                List<RegOpsQC> varSubCheckList = new List<RegOpsQC>();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObjList[0].Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                o_Con.ConnectionString = m_DummyConn;
                DateTime UpdateDate = DateTime.Now;
                String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");
                string result = string.Empty;
                List<RegOpsQC> mainListObj = new List<RegOpsQC>();
                foreach (RegOpsQC rObj in rObjList)
                {
                    if (rObj.CommentsPageNumLst != null && rObj.CommentsPageNumLst.Count > 0)
                    {
                        foreach (PageNumberReport sobj in rObj.CommentsPageNumLst)
                        {
                            RegOpsQC regopsObj = new RegOpsQC();
                            regopsObj.JID = rObj.JID;
                            regopsObj.CheckList_ID = rObj.CheckList_ID;
                            regopsObj.Folder_Name = rObj.Folder_Name;
                            regopsObj.File_Name = rObj.File_Name;
                            regopsObj.QC_Result = rObj.QC_Result;
                            regopsObj.Comments = sobj.Comments;
                            regopsObj.Pagenumber = sobj.PageNumber;
                            regopsObj.Group_Check_ID = rObj.Group_Check_ID;
                            regopsObj.CHECK_START_TIME = rObj.CHECK_START_TIME;
                            regopsObj.CHECK_END_TIME = rObj.CHECK_END_TIME;
                            regopsObj.QC_Type = rObj.QC_Type;
                            regopsObj.Check_Parameter = rObj.Check_Parameter;
                            regopsObj.Parent_Checklist_ID = rObj.Parent_Checklist_ID;
                            regopsObj.Qc_Preferences_Id = rObj.Qc_Preferences_Id;
                            regopsObj.Is_Fixed = rObj.Is_Fixed;
                            regopsObj.FIX_START_TIME = rObj.FIX_START_TIME;
                            regopsObj.FIX_END_TIME = rObj.FIX_END_TIME;
                            mainListObj.Add(regopsObj);
                        }
                    }
                    else if (rObj.PageNumbersLst != null && rObj.PageNumbersLst.Count > 0)
                    {
                        foreach (var sobj in rObj.PageNumbersLst)
                        {
                            RegOpsQC regopsObj = new RegOpsQC();
                            regopsObj.JID = rObj.JID;
                            regopsObj.CheckList_ID = rObj.CheckList_ID;
                            regopsObj.Folder_Name = rObj.Folder_Name;
                            regopsObj.File_Name = rObj.File_Name;
                            regopsObj.QC_Result = rObj.QC_Result;
                            regopsObj.Comments = rObj.CommentsWOPageNum;
                            regopsObj.Pagenumber = sobj;
                            regopsObj.Group_Check_ID = rObj.Group_Check_ID;
                            regopsObj.CHECK_START_TIME = rObj.CHECK_START_TIME;
                            regopsObj.CHECK_END_TIME = rObj.CHECK_END_TIME;
                            regopsObj.QC_Type = rObj.QC_Type;
                            regopsObj.Check_Parameter = rObj.Check_Parameter;
                            regopsObj.Parent_Checklist_ID = rObj.Parent_Checklist_ID;
                            regopsObj.Qc_Preferences_Id = rObj.Qc_Preferences_Id;
                            regopsObj.Is_Fixed = rObj.Is_Fixed;
                            regopsObj.FIX_START_TIME = rObj.FIX_START_TIME;
                            regopsObj.FIX_END_TIME = rObj.FIX_END_TIME;
                            mainListObj.Add(regopsObj);
                        }
                    }
                    else
                    {
                        RegOpsQC regopsObj = new RegOpsQC();
                        regopsObj.JID = rObj.JID;
                        regopsObj.CheckList_ID = rObj.CheckList_ID;
                        regopsObj.Folder_Name = rObj.Folder_Name;
                        regopsObj.File_Name = rObj.File_Name;
                        regopsObj.QC_Result = rObj.QC_Result;
                        regopsObj.Comments = rObj.Comments;
                        regopsObj.Pagenumber = rObj.Pagenumber;
                        regopsObj.Group_Check_ID = rObj.Group_Check_ID;
                        regopsObj.CHECK_START_TIME = rObj.CHECK_START_TIME;
                        regopsObj.CHECK_END_TIME = rObj.CHECK_END_TIME;
                        regopsObj.QC_Type = rObj.QC_Type;
                        regopsObj.Check_Parameter = rObj.Check_Parameter;
                        regopsObj.Parent_Checklist_ID = rObj.Parent_Checklist_ID;
                        regopsObj.Qc_Preferences_Id = rObj.Qc_Preferences_Id;
                        regopsObj.Is_Fixed = rObj.Is_Fixed;
                        regopsObj.FIX_START_TIME = rObj.FIX_START_TIME;
                        regopsObj.FIX_END_TIME = rObj.FIX_END_TIME;
                        mainListObj.Add(regopsObj);
                    }

                }
                Job_ID = new long[mainListObj.Count];
                CHECKLIST_ID = new long[mainListObj.Count];
                Folder_Name = new string[mainListObj.Count];
                File_Name = new string[mainListObj.Count];
                QC_Result = new string[mainListObj.Count];
                Comments = new string[mainListObj.Count];
                PageNumber = new long[mainListObj.Count];
                Group_Check_ID = new long[mainListObj.Count];
                CHECK_START_TIME = new DateTime[mainListObj.Count];
                CHECK_End_TIME = new DateTime[mainListObj.Count];
                QC_TYPE = new long[mainListObj.Count];
                CHECK_PARAMETER = new string[mainListObj.Count];
                Parent_CheckList_ID = new long[mainListObj.Count];
                QC_Preferences_Id = new long[mainListObj.Count];
                Is_Fixed = new long[mainListObj.Count];
                FIX_START_TIME = new DateTime[mainListObj.Count];
                FIX_End_TIME = new DateTime[mainListObj.Count];
                i = 0;
                foreach (RegOpsQC rObj in mainListObj)
                {
                    Job_ID[i] = rObj.JID;
                    CHECKLIST_ID[i] = rObj.CheckList_ID;
                    Folder_Name[i] = rObj.Folder_Name;
                    if (rObj.File_Name != null && rObj.File_Name != "")
                    {
                        string[] sobj = Regex.Split(rObj.File_Name, @"Output_");
                        if (rObj.File_Name != null && rObj.File_Name != "")
                        {
                            if (sobj.Count() > 1)
                            {
                                File_Name[i] = sobj[1];
                            }
                            else
                            {
                                File_Name[i] = sobj[0];
                            }
                        }
                        else
                            File_Name[i] = "";

                    }
                    else
                        File_Name[i] = "";
                    //string[] sobj = Regex.Split(rObj.File_Name, @"Output_");
                    //if (rObj.File_Name != null && rObj.File_Name != "")
                    //{
                    //    if (sobj.Count() > 1)
                    //    {
                    //        File_Name[i] = sobj[1];
                    //    }
                    //    else
                    //    {
                    //        File_Name[i] = sobj[0];
                    //    }
                    //}
                    //else
                    //    File_Name[i] = "";

                    QC_Result[i] = rObj.QC_Result;
                    Comments[i] = rObj.Comments;
                    PageNumber[i] = rObj.Pagenumber;
                    Group_Check_ID[i] = rObj.Group_Check_ID;
                    CHECK_START_TIME[i] = rObj.CHECK_START_TIME;
                    CHECK_End_TIME[i] = rObj.CHECK_END_TIME;
                    QC_TYPE[i] = rObj.QC_Type;
                    CHECK_PARAMETER[i] = rObj.Check_Parameter;
                    Parent_CheckList_ID[i] = rObj.Parent_Checklist_ID;
                    QC_Preferences_Id[i] = rObj.Qc_Preferences_Id;
                    Is_Fixed[i] = rObj.Is_Fixed;
                    FIX_START_TIME[i] = rObj.FIX_START_TIME;
                    FIX_End_TIME[i] = rObj.FIX_END_TIME;
                    i++;
                }
                o_Con.Open();
                OracleCommand cmd = new OracleCommand();
                cmd.ArrayBindCount = mainListObj.Count;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "sp_ins_REGOPS_QC_VLDTN_PGNO";
                cmd.Parameters.Add(new OracleParameter("ParJOB_ID", Job_ID));
                cmd.Parameters.Add(new OracleParameter("ParCHECKLIST_ID", CHECKLIST_ID));
                cmd.Parameters.Add(new OracleParameter("ParFOLDER_NAME", Folder_Name));
                cmd.Parameters.Add(new OracleParameter("ParFILE_NAME", File_Name));
                cmd.Parameters.Add(new OracleParameter("ParQC_RESULT", QC_Result));
                cmd.Parameters.Add(new OracleParameter("ParPAGE_NUMBER", PageNumber));
                OracleParameter comments = new OracleParameter("ParCOMMENTS", OracleDbType.Clob);
                comments.Direction = ParameterDirection.Input;
                comments.Value = Comments;
                cmd.Parameters.Add(comments);
                cmd.Parameters.Add(new OracleParameter("ParGROUP_CHECK_ID", Group_Check_ID));
                cmd.Parameters.Add(new OracleParameter("ParCHECK_START_TIME", CHECK_START_TIME));
                cmd.Parameters.Add(new OracleParameter("ParCHECK_END_TIME", CHECK_End_TIME));
                cmd.Parameters.Add(new OracleParameter("ParParent_CHECK_ID", Parent_CheckList_ID));
                cmd.Parameters.Add(new OracleParameter("ParQC_TYPE", QC_TYPE));
                cmd.Parameters.Add(new OracleParameter("ParCHECK_PARAMETER", CHECK_PARAMETER));
                cmd.Parameters.Add(new OracleParameter("ParPreferences_Id", QC_Preferences_Id));
                cmd.Parameters.Add(new OracleParameter("ParIs_Fixed", Is_Fixed));
                cmd.Parameters.Add(new OracleParameter("ParFIX_START_TIME", FIX_START_TIME));
                cmd.Parameters.Add(new OracleParameter("ParFIX_END_TIME", FIX_End_TIME));
                cmd.Connection = o_Con;
                int m_Res1 = cmd.ExecuteNonQuery();
                if (m_Res1 == -1)
                    res = "Success";
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                throw ex;
            }
            finally
            {
                o_Con.Close();
                Job_ID = null;
                CHECKLIST_ID = null;
                Folder_Name = null;
                File_Name = null;
                QC_Result = null;
                Comments = null;
                Group_Check_ID = null;
                CHECK_START_TIME = null;
                CHECK_End_TIME = null;
                Parent_CheckList_ID = null;
                QC_TYPE = null;
                CHECK_PARAMETER = null;
                QC_Preferences_Id = null;
                Is_Fixed = null;
            }
        }

        /// <summary>
        /// save job plan details to REGOPS_QC_JOBS_CHECKLIST table
        /// </summary>
        /// <param name="rObj"></param>
        /// <returns></returns>
        public string SaveJobPlanDetails(List<RegOpsQC> rObjList)
        {
            string res = string.Empty;
            string query = string.Empty;
            OracleConnection o_Con = new OracleConnection();
            long[] Job_ID;
            long[] CHECKLIST_ID;
            long[] Group_Check_ID;
            long[] Parent_CheckList_ID;
            long[] QC_TYPE;
            String[] CHECK_PARAMETER;
            try
            {
                int i = 0;
                List<RegOpsQC> varSubCheckList = new List<RegOpsQC>();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObjList[0].Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                o_Con.ConnectionString = m_DummyConn;
                DateTime UpdateDate = DateTime.Now;
                String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");
                string result = string.Empty;


                rObjList = rObjList.Where(x => x.Composite_Check != 0).OrderBy(x => x.ID).ToList();

                Job_ID = new long[rObjList.Count];
                CHECKLIST_ID = new long[rObjList.Count];
                Group_Check_ID = new long[rObjList.Count];
                QC_TYPE = new long[rObjList.Count];
                CHECK_PARAMETER = new string[rObjList.Count];
                Parent_CheckList_ID = new long[rObjList.Count];
                //   Created_ID = new long[rObjList.c]
                i = 0;
                foreach (RegOpsQC rObj in rObjList)
                {
                    Job_ID[i] = rObj.JID;
                    CHECKLIST_ID[i] = rObj.CheckList_ID;
                    Group_Check_ID[i] = rObj.Group_Check_ID;
                    QC_TYPE[i] = rObj.QC_Type;
                    CHECK_PARAMETER[i] = rObj.Check_Parameter;
                    Parent_CheckList_ID[i] = rObj.Parent_Checklist_ID;
                    i++;
                }
                o_Con.Open();
                OracleCommand cmd = new OracleCommand();
                cmd.ArrayBindCount = rObjList.Count;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "sp_ins_REGOPS_QC_VLDTN_DTLS";
                cmd.Parameters.Add(new OracleParameter("ParJOB_ID", Job_ID));
                cmd.Parameters.Add(new OracleParameter("ParCHECKLIST_ID", CHECKLIST_ID));
                cmd.Parameters.Add(new OracleParameter("ParGROUP_CHECK_ID", Group_Check_ID));
                cmd.Parameters.Add(new OracleParameter("ParParent_CHECK_ID", Parent_CheckList_ID));
                cmd.Parameters.Add(new OracleParameter("ParQC_TYPE", QC_TYPE));
                cmd.Parameters.Add(new OracleParameter("ParCHECK_PARAMETER", CHECK_PARAMETER));
                cmd.Connection = o_Con;
                int m_Res1 = cmd.ExecuteNonQuery();
                if (m_Res1 == -1)
                    res = "Success";
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                throw ex;
            }
            finally
            {
                o_Con.Close();
                Job_ID = null;
                CHECKLIST_ID = null;
                Group_Check_ID = null;
                Parent_CheckList_ID = null;
                QC_TYPE = null;
                CHECK_PARAMETER = null;
            }
        }

        public List<RegOpsQC> GetQCCheckListByJobId(RegOpsQC rObj)
        {
            Connection conn = new Connection();
            string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            List<RegOpsQC> chkLst = new List<RegOpsQC>();
            try
            {
                string fileNamestr = string.Empty;
                int index = 0;
                if (rObj.IsSequentialFileName == true)
                {
                    if (rObj.CheckParamVal == "_")
                        index = rObj.File_Name.IndexOf('_');
                    else if (rObj.CheckParamVal == "-")
                        index = rObj.File_Name.IndexOf('-');
                    else
                        index = rObj.File_Name.IndexOf('_');
                    fileNamestr = rObj.File_Name.Substring(index + 1);
                }
                else
                {
                    fileNamestr = rObj.File_Name;
                }
                DataSet ds = conn.GetDataSet("select rc.*,lib2.LIBRARY_VALUE as ParentCheckName, lib.LIBRARY_VALUE as CheckName,lib.CHECK_UNITS,lib.COMPOSITE_CHECK,lib.CHECk_ORDER from  REGOPS_QC_PREFERENCE_DETAILS rc inner join CHECKS_LIBRARY lib on lib.LIBRARY_ID=rc.CHECKLIST_ID left join CHECKS_LIBRARY lib2 on lib2.library_id=rc.PARENT_CHECK_ID left join CHECKS_LIBRARY lib1 on lib1.LIBRARY_ID=rc.GROUP_CHECK_ID  where QC_PREFERENCES_ID =" + rObj.Preference_ID + " and DOC_TYPE='" + rObj.File_Format + "' and lib1.LIBRARY_VALUE != 'Folder' and lib.status=1 Order by lib.CHECK_ORDER", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {

                        if (fileNamestr.Trim().ToLower().StartsWith("appendix"))
                        {
                            if (dr["CheckName"].ToString() != "Hyperlink includes all blue text" && dr["CheckName"].ToString() != "Hyperlinks across documents" && dr["ParentCheckName"].ToString() != "Hyperlinks across documents" && dr["CheckName"].ToString() != "Hyperlinks within document" && dr["ParentCheckName"].ToString() != "Hyperlinks within document")
                            {
                                RegOpsQC tObj = new RegOpsQC();
                                tObj.Created_ID = rObj.Created_ID;
                                tObj.CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString());
                                tObj.ID = Convert.ToInt32(dr["ID"].ToString());
                                tObj.Check_Name = dr["CheckName"].ToString();
                                tObj.Check_Type = Convert.ToInt64(dr["QC_TYPE"].ToString());
                                tObj.QC_Type = Convert.ToInt64(dr["QC_TYPE"].ToString());
                                tObj.Check_Parameter = dr["CHECK_PARAMETER"].ToString();
                                tObj.Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString());
                                tObj.Group_Check_ID = Convert.ToInt64(dr["Group_Check_ID"].ToString());
                                tObj.CHECK_UNITS = dr["CHECK_UNITS"].ToString();
                                if (dr["PARENT_CHECK_ID"].ToString() != "")
                                    tObj.Parent_Check_ID = Convert.ToInt64(dr["PARENT_CHECK_ID"].ToString());
                                if (dr["COMPOSITE_CHECK"].ToString() != "")
                                    tObj.Composite_Check = Convert.ToInt64(dr["COMPOSITE_CHECK"].ToString());
                                chkLst.Add(tObj);
                            }
                        }
                        else
                        {
                            RegOpsQC tObj = new RegOpsQC();
                            tObj.Created_ID = rObj.Created_ID;
                            tObj.CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString());
                            tObj.ID = Convert.ToInt32(dr["ID"].ToString());
                            tObj.Check_Name = dr["CheckName"].ToString();
                            tObj.Check_Type = Convert.ToInt64(dr["QC_TYPE"].ToString());
                            tObj.QC_Type = Convert.ToInt64(dr["QC_TYPE"].ToString());
                            tObj.Check_Parameter = dr["CHECK_PARAMETER"].ToString();
                            tObj.Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString());
                            tObj.Group_Check_ID = Convert.ToInt64(dr["Group_Check_ID"].ToString());
                            tObj.CHECK_UNITS = dr["CHECK_UNITS"].ToString();
                            if (dr["PARENT_CHECK_ID"].ToString() != "")
                                tObj.Parent_Check_ID = Convert.ToInt64(dr["PARENT_CHECK_ID"].ToString());
                            if (dr["COMPOSITE_CHECK"].ToString() != "")
                                tObj.Composite_Check = Convert.ToInt64(dr["COMPOSITE_CHECK"].ToString());
                            chkLst.Add(tObj);
                        }
                    }
                }
                return chkLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }            
        }

        // to get only folder checks 
        public List<RegOpsQC> GetFolderCheckListByJobId(RegOpsQC rObj)
        {
            Connection conn = new Connection();
            string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            List<RegOpsQC> chkLst = new List<RegOpsQC>();
            try
            {
                DataSet ds = conn.GetDataSet("select rc.*,lib.LIBRARY_VALUE as CheckName,lib.CHECK_UNITS,lib.COMPOSITE_CHECK,lib.CHECk_ORDER from  REGOPS_QC_PREFERENCE_DETAILS rc inner join CHECKS_LIBRARY lib on lib.LIBRARY_ID=rc.CHECKLIST_ID left join CHECKS_LIBRARY lib1 on lib1.LIBRARY_ID=rc.GROUP_CHECK_ID where QC_PREFERENCES_ID =" + rObj.Preference_ID + " and lib1.LIBRARY_VALUE = 'Folder' and lib.status=1 Order by lib.CHECK_ORDER", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        RegOpsQC tObj = new RegOpsQC();
                        tObj.Created_ID = rObj.Created_ID;
                        tObj.CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString());
                        tObj.ID = Convert.ToInt32(dr["ID"].ToString());
                        tObj.Check_Name = dr["CheckName"].ToString();
                        tObj.Check_Type = Convert.ToInt64(dr["QC_TYPE"].ToString());
                        tObj.QC_Type = Convert.ToInt64(dr["QC_TYPE"].ToString());
                        tObj.Check_Parameter = dr["CHECK_PARAMETER"].ToString();
                        tObj.Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString());
                        tObj.Group_Check_ID = Convert.ToInt64(dr["Group_Check_ID"].ToString());
                        tObj.CHECK_UNITS = dr["CHECK_UNITS"].ToString();
                        if (dr["PARENT_CHECK_ID"].ToString() != "")
                            tObj.Parent_Check_ID = Convert.ToInt64(dr["PARENT_CHECK_ID"].ToString());
                        if (dr["COMPOSITE_CHECK"].ToString() != "")
                            tObj.Composite_Check = Convert.ToInt64(dr["COMPOSITE_CHECK"].ToString());
                        chkLst.Add(tObj);
                    }
                }
                return chkLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }            
        }
        public List<regOpsDataList> GetQCJobData(RegOpsQCList tpObj)
        {
            try
            {
                List<regOpsDataList> tpLst = new List<regOpsDataList>();
                regOpsDataList objReg = new regOpsDataList();
                string queryTotal = string.Empty;
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        string query = string.Empty, condition = string.Empty;
                        if (tpObj.myJobs == "1" && tpObj.othersJob == "1")
                            condition = "";
                        else if (tpObj.myJobs == "1" && tpObj.othersJob == "0")
                            condition = " where qcjobs.CREATED_ID=" + tpObj.Created_ID;
                        else if (tpObj.myJobs == "0" && tpObj.othersJob == "1")
                            condition = " where qcjobs.CREATED_ID NOT IN(" + tpObj.Created_ID + ")";
                        else if (tpObj.myJobs == "0" && tpObj.othersJob == "0")
                            condition = " where qcjobs.CREATED_ID IS NULL";
                        query = "SELECT * FROM ( SELECT A.*, rownum r_  FROM (";
                        if (tpObj.RoleName == "QC Manager" || tpObj.RoleName == "System Administrator" || tpObj.RoleName == "Author")
                        {
                            if (tpObj.Job_ID == "" && tpObj.Job_Title == "" && tpObj.From_Date.ToString("dd-MM-yyyy") == "01-01-0001" && tpObj.To_Date.ToString("dd-MM-yyyy") == "01-01-0001" && tpObj.Job_Status == "")
                            {
                                query = "SELECT * FROM (SELECT A.*, rownum r_ FROM(select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE,CREATE_ID ,(FirstName||' '||LastName) as created_by, JOB_STATUS,IS_DELETED,Preference_ID,PREFERENCE_NAME,  sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount from("
                                        + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                        + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                        + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                        + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty,qcjobs.IS_DELETED,qcjobs.CREATED_ID AS CREATE_ID"
                                        + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                        + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                        + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                        + " left  join users u on u.USER_ID = qcjobs.CREATED_ID " + condition + ""
                                        + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT,qcjobs.IS_DELETED,qcjobs.CREATED_ID)t"
                                        + " group by ID, JOB_ID,PROJECT_ID,JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME,IS_DELETED,CREATE_ID order by Id desc";

                                queryTotal = "Select Count(*) as TotalRecords from ( select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, (FirstName||' '||LastName) as created_by, JOB_STATUS,Preference_ID,PREFERENCE_NAME,  sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount from("
                                        + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                        + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                        + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                        + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty"
                                        + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                        + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                        + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                        + " left  join users u on u.USER_ID = qcjobs.CREATED_ID" + condition + ""
                                        + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT)t"
                                        + " group by ID, JOB_ID,PROJECT_ID,JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME order by Id desc";
                                query += ") A WHERE rownum < ((" + tpObj.pageNumber + " * " + tpObj.pageSize + ") + 1 )) WHERE r_ >= (((" + tpObj.pageNumber + " - 1) * " + tpObj.pageSize + ") + 1)";
                                queryTotal += ")";
                                DataSet ds1 = new DataSet();
                                ds1 = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(ds1))
                                {
                                    objReg.TotalRecords = Convert.ToInt32(ds1.Tables[0].Rows[0]["TotalRecords"].ToString());
                                }
                            }
                            else
                            {
                                query = "SELECT * FROM (SELECT A.*, rownum r_ FROM(select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, CREATE_ID,(FirstName||' '||LastName) as created_by, JOB_STATUS,Preference_ID, PREFERENCE_NAME, sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount,IS_DELETED from("
                                        + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                        + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                        + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                        + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty,qcjobs.IS_DELETED,qcjobs.CREATED_ID AS CREATE_ID"
                                        + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                        + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                        + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                        + " left join users u on u.USER_ID = qcjobs.CREATED_ID" + condition + ""
                                        + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT,qcjobs.IS_DELETED,qcjobs.CREATED_ID)t Where";

                                queryTotal = "Select Count(*) as TotalRecords from ( select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, (FirstName||' '||LastName) as created_by, JOB_STATUS,Preference_ID, PREFERENCE_NAME, sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount from("
                                        + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                        + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                        + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                        + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty"
                                        + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                        + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                        + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                        + " left join users u on u.USER_ID = qcjobs.CREATED_ID" + condition + ""
                                        + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT)t Where";

                                if (tpObj.Job_ID != "")
                                {
                                    query += " lower(JOB_ID) like '%" + tpObj.Job_ID.ToLower() + "%' AND";
                                    queryTotal += " lower(JOB_ID) like '%" + tpObj.Job_ID.ToLower() + "%' AND";
                                }
                                if (tpObj.Job_Title != "")
                                {
                                    query += " lower(Job_Title) like '%" + tpObj.Job_Title.ToLower() + "%' AND";
                                    queryTotal += " lower(Job_Title) like '%" + tpObj.Job_Title.ToLower() + "%' AND";
                                }
                                if (tpObj.From_Date.ToString("MM/dd/yyyy") != "01/01/0001" && tpObj.To_Date.ToString("MM/dd/yyyy") != "01/01/0001")
                                {
                                    query += " SUBSTR(CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + tpObj.From_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + tpObj.To_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                                    queryTotal += " SUBSTR(CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + tpObj.From_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + tpObj.To_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                                }
                                if (tpObj.From_Date.ToString("MM/dd/yyyy") != "01/01/0001" && tpObj.To_Date.ToString("MM/dd/yyyy") == "01/01/0001")
                                {
                                    query += " CREATED_DATE >= to_date ('" + tpObj.From_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM')  AND";
                                    queryTotal += " CREATED_DATE >= to_date ('" + tpObj.From_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM')  AND";
                                }
                                if (tpObj.From_Date.ToString("MM/dd/yyyy") == "01/01/0001" && tpObj.To_Date.ToString("MM/dd/yyyy") != "01/01/0001")
                                {
                                    query += " CREATED_DATE <= to_date ('" + tpObj.To_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM')  AND";
                                    queryTotal += " CREATED_DATE <= to_date ('" + tpObj.To_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM')  AND";
                                }
                                if (tpObj.Job_Status != "")
                                {
                                    query += " lower(Job_Status) like '%" + tpObj.Job_Status.ToLower() + "%' AND ";
                                    queryTotal += " lower(Job_Status) like '%" + tpObj.Job_Status.ToLower() + "%' AND ";
                                }
                                query += " 1=1 group by ID, JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME,IS_DELETED,CREATE_ID order by Id desc";
                                query += ") A WHERE rownum < ((" + tpObj.pageNumber + " * " + tpObj.pageSize + ") + 1 )) WHERE r_ >= (((" + tpObj.pageNumber + " - 1) * " + tpObj.pageSize + ") + 1)";
                                queryTotal += " 1=1 group by ID, JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME order by Id desc)";
                                DataSet ds1 = new DataSet();
                                ds1 = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(ds1))
                                {
                                    objReg.TotalRecords = Convert.ToInt32(ds1.Tables[0].Rows[0]["TotalRecords"].ToString());
                                }
                            }
                        }
                        else
                        {
                            condition = " where qcjobs.CREATED_ID=" + tpObj.Created_ID;
                            query = "";
                            query = "SELECT * FROM ( SELECT A.*, rownum r_ FROM (";
                            if (tpObj.Job_ID == "" && tpObj.Job_Title == "" && tpObj.From_Date.ToString("dd-MM-yyyy") == "01-01-0001" && tpObj.To_Date.ToString("dd-MM-yyyy") == "01-01-0001" && tpObj.Job_Status == "")
                            {
                                query = query + "select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, (FirstName||' '||LastName) as created_by, JOB_STATUS,Preference_ID,PREFERENCE_NAME,  sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount,IS_DELETED,CREATE_ID from("
                                        + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                        + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                        + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                        + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty,qcjobs.IS_DELETED,qcjobs.CREATED_ID AS CREATE_ID"
                                        + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                        + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                        + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                        + " left  join users u on u.USER_ID = qcjobs.CREATED_ID " + condition + ""
                                        + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT,qcjobs.IS_DELETED,qcjobs.CREATED_ID)t"
                                        + " group by ID, JOB_ID,PROJECT_ID,JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME,IS_DELETED,CREATE_ID order by Id desc";

                                queryTotal = "Select Count(*) as TotalRecords from ( select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, (FirstName||' '||LastName) as created_by, JOB_STATUS,Preference_ID,PREFERENCE_NAME,  sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount from("
                                            + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                            + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                            + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                            + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty"
                                            + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                            + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                            + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                            + " left  join users u on u.USER_ID = qcjobs.CREATED_ID " + condition + ""
                                            + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT)t"
                                            + " group by ID, JOB_ID,PROJECT_ID,JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME order by Id desc";

                                query += ") A WHERE rownum < ((" + tpObj.pageNumber + " * " + tpObj.pageSize + ") + 1 )) WHERE r_ >= (((" + tpObj.pageNumber + " - 1) * " + tpObj.pageSize + ") + 1)";
                                queryTotal += ")";
                                DataSet ds1 = new DataSet();
                                ds1 = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(ds1))
                                {
                                    objReg.TotalRecords = Convert.ToInt32(ds1.Tables[0].Rows[0]["TotalRecords"].ToString());
                                }
                            }
                            else
                            {
                                query = query + "select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE,(FirstName||' '||LastName) as Created_By, JOB_STATUS,Preference_ID,PREFERENCE_NAME,  sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount,IS_DELETED,CREATE_ID from("
                                        + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                        + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                        + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                        + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty,qcjobs.IS_DELETED,qcjobs.CREATED_ID AS CREATE_ID"
                                        + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                        + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                        + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                        + " left join users u on u.USER_ID = qcjobs.CREATED_ID " + condition + ""
                                        + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT,qcjobs.IS_DELETED,qcjobs.CREATED_ID)t Where";

                                queryTotal = "Select Count(*) as TotalRecords from ( select ID,JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE,(FirstName||' '||LastName) as Created_By, JOB_STATUS,Preference_ID,PREFERENCE_NAME,  sum(pass) as ChecksPassCount, sum(fail) as ChecksFailedCount,sum(fixed) as TotalFixedChecksCount,sum(TotalCount) as TotalChecksCount from("
                                        + " select qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,"
                                        + " qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME as FirstName,u.LAST_NAME as LastName, qcjobs.JOB_STATUS,rc.ID as Preference_ID,rc.PREFERENCE_NAME,count(regval.CHECKLIST_ID) as TotalCount,"
                                        + " case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail,"
                                        + " case when regval.QC_RESULT = 'Fixed' then count(1) else 0 end fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty"
                                        + " from REGOPS_QC_VALIDATION_DETAILS regval"
                                        + " right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID"
                                        + " left join REGOPS_QC_PREFERENCES rc on rc.ID=qcjobs.PREFERENCE_ID"
                                        + " left join users u on u.USER_ID = qcjobs.CREATED_ID " + condition + ""
                                        + " group by qcjobs.ID, qcjobs.JOB_ID,qcjobs.PROJECT_ID,qcjobs.JOB_TITLE,qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.FIRST_NAME,u.lAST_NAME, qcjobs.JOB_STATUS,rc.ID,rc.PREFERENCE_NAME, regval.QC_RESULT)t Where";
                                if (tpObj.Job_ID != "")
                                {
                                    query += " lower(JOB_ID) like '%" + tpObj.Job_ID.ToLower() + "%' AND";
                                    queryTotal += " lower(JOB_ID) like '%" + tpObj.Job_ID.ToLower() + "%' AND";
                                }
                                if (tpObj.Job_Title != "")
                                {
                                    query += " lower(Job_Title) like '%" + tpObj.Job_Title.ToLower() + "%' AND";
                                    queryTotal += " lower(Job_Title) like '%" + tpObj.Job_Title.ToLower() + "%' AND";
                                }
                                if (tpObj.From_Date.ToString("MM/dd/yyyy") != "01/01/0001" || tpObj.To_Date.ToString("MM/dd/yyyy") != "01/01/0001")
                                {
                                    query += " SUBSTR(CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + tpObj.From_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + tpObj.To_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                                    queryTotal += " SUBSTR(CREATED_DATE, 0, 9) BETWEEN(SELECT TO_DATE('" + tpObj.From_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND(SELECT TO_DATE('" + tpObj.To_Date.ToString("MM/dd/yyyy") + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                                }
                                if (tpObj.Job_Status != "")
                                {
                                    query += " lower(Job_Status) like '%" + tpObj.Job_Status.ToLower() + "%' AND ";
                                    queryTotal += " lower(Job_Status) like '%" + tpObj.Job_Status.ToLower() + "%' AND ";
                                }
                                query += " 1=1 group by ID, JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME,IS_DELETED,CREATE_ID order by Id desc";
                                query += ") A WHERE rownum < ((" + tpObj.pageNumber + " * " + tpObj.pageSize + ") + 1 )) WHERE r_ >= (((" + tpObj.pageNumber + " - 1) * " + tpObj.pageSize + ") + 1)";
                                queryTotal += " 1=1 group by ID, JOB_ID,PROJECT_ID, JOB_TITLE,NO_OF_FILES, CREATED_DATE, FirstName,LastName, JOB_STATUS,Preference_ID,PREFERENCE_NAME order by Id desc)";
                                DataSet ds1 = new DataSet();
                                ds1 = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(ds1))
                                {
                                    objReg.TotalRecords = Convert.ToInt32(ds1.Tables[0].Rows[0]["TotalRecords"].ToString());
                                }
                            }
                        }
                        ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                objReg.regOpsData = new DataTable2List().DataTableToList<RegOpsQCList>(ds.Tables[0]);
                                tpLst.Add(objReg);
                            }
                        }
                        return tpLst;
                    }
                    objReg.sessionCheck = "Error Page";
                    tpLst.Add(objReg);
                    return tpLst;
                }
                objReg.sessionCheck = "Login Page";
                tpLst.Add(objReg);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }



        public List<RegOpsQC> GetQCJobDataByID(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        ds = conn.GetDataSet("select qcj.*,u.FIRST_NAME,u.LAST_NAME,qcprf.PREFERENCE_NAME as Preference_Name from  REGOPS_QC_JOBS qcj left join users u on u.USER_ID = qcj.CREATED_ID left join REGOPS_QC_PREFERENCES qcprf on qcj.PREFERENCE_ID=qcprf.ID where qcj.ID=" + tpObj.ID + "", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                RegOpsQC tObj1 = new RegOpsQC();
                                tObj1.ID = Convert.ToInt32(ds.Tables[0].Rows[i]["ID"].ToString());
                                tObj1.Job_ID = ds.Tables[0].Rows[i]["JOB_ID"].ToString();
                                tObj1.Job_Title = ds.Tables[0].Rows[i]["JOB_TITLE"].ToString();
                                tObj1.Job_Description = ds.Tables[0].Rows[i]["JOB_DESCRIPTION"].ToString();
                                tObj1.Created_Date = Convert.ToDateTime(ds.Tables[0].Rows[i]["CREATED_DATE"].ToString());
                                User u = new User();
                                tObj1.Created_By = ds.Tables[0].Rows[i]["FIRST_NAME"].ToString() + ' ' + ds.Tables[0].Rows[i]["LAST_NAME"].ToString();
                                tObj1.Job_Status = ds.Tables[0].Rows[i]["JOB_STATUS"].ToString();
                                tObj1.File_Format = ds.Tables[0].Rows[i]["FILE_FORMAT"].ToString();
                                tObj1.SourceDocuments = ds.Tables[0].Rows[i]["INPUT_TYPE"].ToString();
                                tObj1.Output_Type = ds.Tables[0].Rows[i]["OUTPUT_TYPE"].ToString();
                                tObj1.Preference_Name = ds.Tables[0].Rows[i]["Preference_Name"].ToString();
                                tObj1.Created_ID = tpObj.Created_ID;
                                if (ds.Tables[0].Rows[i]["JOB_START_TIME"].ToString() != "")
                                    tObj1.Job_Start_Time = Convert.ToDateTime(ds.Tables[0].Rows[i]["JOB_START_TIME"].ToString());
                                if (ds.Tables[0].Rows[i]["JOB_END_TIME"].ToString() != "")
                                    tObj1.Job_End_Time = Convert.ToDateTime(ds.Tables[0].Rows[i]["JOB_END_TIME"].ToString());
                                tObj1.Preference_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["PREFERENCE_ID"].ToString().Equals("") ? "0" : ds.Tables[0].Rows[i]["PREFERENCE_ID"].ToString());
                                tObj1.PreferenceDetailsList = new RegOpsQCReportActions().GetHtmlViewReport(tObj1);
                                tpLst.Add(tObj1);
                            }
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Error Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetQCSavedPreferences(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        string query = string.Empty;
                        DataSet ds = new DataSet();
                        if (string.IsNullOrEmpty(tpObj.SearchValue))
                        {
                            // query = "SELECT rp.*, u.FIRST_NAME||' '||u.LAST_NAME as created_by FROM REGOPS_PROJECTS rp join Users u on u.USER_ID=rp.CREATED_ID ORDER BY PROJ_ID";
                            query = "select ID as Preference_ID,PREFERENCE_NAME,File_Format,VALIDATION_PLAN_TYPE,case when STATUS=1 then 'Active' else 'Inactive' end as Status from  REGOPS_QC_PREFERENCES where category = '" + tpObj.Category + "' order by Id desc";

                        }
                        else
                        {
                            query = "select ID as Preference_ID,PREFERENCE_NAME,File_Format,VALIDATION_PLAN_TYPE,case when STATUS=1 then 'Active' else 'Inactive' end as Status from  REGOPS_QC_PREFERENCES where category = '" + tpObj.Category + "' and ";
                            if (!string.IsNullOrEmpty(tpObj.File_Format))
                            {
                                query += "lower(File_Format) like '%" + tpObj.File_Format.ToLower() + "%' AND ";
                            }
                            if (!string.IsNullOrEmpty(tpObj.Preference_Name))
                            {
                                query += "lower(PREFERENCE_NAME) like '%" + tpObj.Preference_Name.ToLower() + "%' AND ";
                            }
                            if (!string.IsNullOrEmpty(tpObj.Validation_Plan_Type))
                            {
                                query += "lower(VALIDATION_PLAN_TYPE) = '" + tpObj.Validation_Plan_Type.ToLower() + "' AND ";
                            }
                            if (tpObj.ValidationType == "Publishing")
                            {
                                query += "VALIDATION_PLAN_TYPE='Publishing' AND ";
                            }
                            if (tpObj.ValidationType == "QC" || tpObj.ValidationType == "QC+AutoFix")
                            {
                                query += "VALIDATION_PLAN_TYPE!='Publishing' AND ";
                            }
                            query += "1=1 order by Id desc";
                        }
                        ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            tpLst = new DataTable2List().DataTableToList<RegOpsQC>(ds.Tables[0]);
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetQCPreferencesDetails(Int64 preferenceID, Int64 createdId)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(createdId).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC resultLst = new RegOpsQC();
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("select distinct GROUP_CHECK_ID,b.LIBRARY_VALUE from REGOPS_QC_PREFERENCE_DETAILS rc inner join LIBRARY b on rc.GROUP_CHECK_ID=b.LIBRARY_ID where QC_PREFERENCES_ID=" + preferenceID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Created_ID = createdId;
                        tObj1.Qc_Preferences_Id = preferenceID;
                        tObj1.Group_Check_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.Group_Check_Name = ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString();
                        tObj1.PreferenceDetailsList = GetGroupCheckListDetails(tObj1);
                        tpLst.Add(tObj1);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> WordPieChartDeviationReport(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                conn.connectionstring = m_DummyConn;
                RegOpsQC resultLst = new RegOpsQC();
                DataSet ds = new DataSet();
                if (tpObj.RoleName == "QC Manager" || tpObj.RoleName == "System Administrator")
                {
                    ds = conn.GetDataSet("select  regval.GROUP_CHECK_ID,lib.LIBRARY_VALUE as GroupName, COUNT(regval.CHECKLIST_ID) as Count from REGOPS_QC_VALIDATION_DETAILS regval left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=regval.GROUP_CHECK_ID where (regval.FILE_NAME LIKE '%.doc' OR regval.FILE_NAME LIKE  '%.docx') and regval.QC_RESULT = 'Failed' group by regval.GROUP_CHECK_ID, lib.LIBRARY_VALUE", CommandType.Text, ConnectionState.Open);
                }
                else
                {
                    //cmd = new OracleCommand("select  regval.GROUP_CHECK_ID,lib.LIBRARY_VALUE as GroupName, COUNT(regval.CHECKLIST_ID) as Count from REGOPS_QC_VALIDATION_DETAILS regval inner join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=regval.GROUP_CHECK_ID where (regval.FILE_NAME LIKE '%.doc' OR regval.FILE_NAME LIKE  '%.docx') and regval.QC_RESULT = 'Failed' and qcjobs.CREATED_ID=" + tpObj.Created_ID + " group by regval.GROUP_CHECK_ID, lib.LIBRARY_VALUE", con);
                    ds = conn.GetDataSet("select  regval.GROUP_CHECK_ID,lib.LIBRARY_VALUE as GroupName, COUNT(regval.CHECKLIST_ID) as Count from REGOPS_QC_VALIDATION_DETAILS regval inner join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=regval.GROUP_CHECK_ID where (regval.FILE_NAME LIKE '%.doc' OR regval.FILE_NAME LIKE  '%.docx') and regval.QC_RESULT = 'Failed' and qcjobs.CREATED_ID=" + tpObj.Created_ID + " group by regval.GROUP_CHECK_ID, lib.LIBRARY_VALUE", CommandType.Text, ConnectionState.Open);
                }
                //da = new OracleDataAdapter(cmd);
                //DataTable dt = new DataTable();
                //da.Fill(dt);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Group_Check_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.name = ds.Tables[0].Rows[i]["GroupName"].ToString();
                        tObj1.value = Convert.ToInt64(ds.Tables[0].Rows[i]["Count"].ToString());
                        tObj1.LegendName = tObj1.name + ":" + tObj1.value;
                        tpLst.Add(tObj1);
                    }
                }

                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public List<RegOpsQC> PDFPieChartDeviationReport(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC resultLst = new RegOpsQC();
                DataSet ds = new DataSet();
                //ds = conn.GetDataSet("select  GROUP_CHECK_ID, COUNT(CHECKLIST_ID) as Count from REGOPS_QC_VALIDATION_DETAILS regval Left join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID where qcjobs.FILE_FORMAT = 'PDF'  group by GROUP_CHECK_ID", CommandType.Text, ConnectionState.Open);
                if (tpObj.RoleName == "QC Manager" || tpObj.RoleName == "System Administrator")
                {
                    ds = conn.GetDataSet("select  regval.GROUP_CHECK_ID,lib.LIBRARY_VALUE as GroupName, COUNT(regval.CHECKLIST_ID) as Count from REGOPS_QC_VALIDATION_DETAILS regval left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=regval.GROUP_CHECK_ID where regval.FILE_NAME LIKE '%.pdf'  and regval.QC_RESULT='Failed' group by regval.GROUP_CHECK_ID, lib.LIBRARY_VALUE", CommandType.Text, ConnectionState.Open);
                }
                else
                {
                    ds = conn.GetDataSet("select  regval.GROUP_CHECK_ID,lib.LIBRARY_VALUE as GroupName, COUNT(regval.CHECKLIST_ID) as Count from REGOPS_QC_VALIDATION_DETAILS regval inner join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=regval.GROUP_CHECK_ID  where regval.FILE_NAME LIKE '%.pdf' and regval.QC_RESULT='Failed' and qcjobs.CREATED_ID=" + tpObj.Created_ID + " group by regval.GROUP_CHECK_ID, lib.LIBRARY_VALUE", CommandType.Text, ConnectionState.Open);
                }

                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Group_Check_ID = Convert.ToInt64(ds.Tables[0].Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.name = ds.Tables[0].Rows[i]["GroupName"].ToString();
                        tObj1.value = Convert.ToInt64(ds.Tables[0].Rows[i]["Count"].ToString());
                        tpLst.Add(tObj1);
                    }
                }

                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string GetLibraryValue(long group_Check_ID, long created_ID)
        {
            string str = string.Empty;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                RegOpsQC resultLst = new RegOpsQC();
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("select Library_value from Checks_Library where library_id=" + group_Check_ID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    str = ds.Tables[0].Rows[0]["Library_value"].ToString();
                }
                return str;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return str;
            }
        }

        public List<RegOpsQC> GetGroupCheckListDetails(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("select a.*,b.LIBRARY_VALUE from REGOPS_QC_PREFERENCE_DETAILS a left join  LIBRARY b on a.CHECKLIST_ID=b.LIBRARY_ID where QC_PREFERENCES_ID=" + tpObj.Qc_Preferences_Id + " and GROUP_CHECK_ID=" + tpObj.Group_Check_ID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Qc_Preferences_Id = Convert.ToInt32(ds.Tables[0].Rows[i]["QC_PREFERENCES_ID"].ToString());
                        tObj1.CheckList_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["CHECKLIST_ID"].ToString());
                        tObj1.Check_Name = ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString();
                        tObj1.QC_Type = Convert.ToInt32(ds.Tables[0].Rows[i]["QC_TYPE"].ToString());
                        tObj1.Group_Check_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.Check_Parameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                        tObj1.Library_Value = ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString();
                        tpLst.Add(tObj1);
                    }
                }

                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string DownloadJobDetails(RegOpsQC tpObj)
        {
            string result = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (tpObj.SingleOrMultiple.Equals("Consolidate"))
                    {
                        result = GenerateConsolidatedJobDetails(tpObj);
                    }
                    else if (tpObj.SingleOrMultiple.Equals("Individual"))
                    {
                        result = GenerateIndividualJobDetails(tpObj);
                    }
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }

        public string DownloadProjectJobFullSet(RegOpsQC tpObj)
        {
            string result = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        if (tpObj.SingleOrMultiple.Equals("Consolidate"))
                        {
                            result = GenerateConsolidatedPJobDetails(tpObj);
                        }
                        else if (tpObj.SingleOrMultiple.Equals("Individual"))
                        {
                            result = GenerateIndividualPJobDetails(tpObj);
                        }
                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }
        public string SaveToZipFile(StringBuilder sb, RegOpsQC rObj)
        {
            string res = "";
            try
            {
                if (rObj.SingleOrMultiple == "Individual")
                {
                    string ConsolidateFilePath = m_SourceFolderPathQC + rObj.Job_ID + "/" + rObj.Job_ID + ".html";//System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/") + rObj.Job_ID + "/" + rObj.Job_ID + ".html";
                    if (File.Exists(ConsolidateFilePath))
                        File.Delete(ConsolidateFilePath);
                }
                string destPath = m_SourceFolderPathQC + rObj.Job_ID + "/" + rObj.File_Name;//System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/") + rObj.Job_ID + "/" + rObj.File_Name;
                //Creating directory if not existed already
                string dirPath = m_SourceFolderPathQC + rObj.Job_ID;//System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/") + rObj.Job_ID;                
                if (!Directory.Exists(dirPath))
                {
                    Directory.CreateDirectory(dirPath);
                }
                //End of directory creation
                FileInfo f1 = new FileInfo(destPath);
                destPath = destPath.Replace(f1.Extension, "");
                File.WriteAllText(destPath + ".html", sb.ToString(), Encoding.UTF8);
                return "Success";

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return res;
            }

        }
        public string SaveToZipFile1(StringBuilder sb, RegOpsQC rObj, byte[] sourceArray, byte[] outputArray, byte[] templateArray)
        {
            string res = "";
            string sourceFile = string.Empty;
            string outputFile = string.Empty;
            string templateFile = string.Empty;
            string destPath = string.Empty;
            string OutputFolder = string.Empty;
            string SourceFolder = string.Empty;
            string compareFolder = string.Empty;
            try
            {

                //Creating directory if not existed already
                string dirPath = m_SourceFolderPathQC + rObj.guidPath + "\\" + rObj.Job_ID;
                if (!Directory.Exists(dirPath))
                {
                    Directory.CreateDirectory(dirPath);
                }
                if (sourceArray != null)
                {
                    SourceFolder = dirPath + "\\Source\\";
                    if (!Directory.Exists(SourceFolder))
                    {
                        Directory.CreateDirectory(SourceFolder);
                    }
                    if (rObj.Prefix_FileName == 1)
                    {
                        sourceFile = "Source_" + rObj.Source_File_Name;
                        using (FileStream fs = new FileStream(SourceFolder + sourceFile, FileMode.Create))
                        {
                            fs.Write(sourceArray, 0, sourceArray.Length);
                        }
                    }
                    else
                    {
                        using (FileStream fs = new FileStream(SourceFolder + rObj.Source_File_Name, FileMode.Create))
                        {
                            fs.Write(sourceArray, 0, sourceArray.Length);
                        }
                    }
                }

                if (outputArray != null)
                {
                    OutputFolder = dirPath + "\\Output\\";
                    if (!Directory.Exists(OutputFolder))
                    {
                        Directory.CreateDirectory(OutputFolder);
                    }
                    if (rObj.Prefix_FileName == 1)
                    {
                        outputFile = "Output_" + rObj.Output_File_Name;
                        using (FileStream fs = new FileStream(OutputFolder + outputFile, FileMode.Create))
                        {
                            fs.Write(outputArray, 0, outputArray.Length);
                        }
                    }
                    else
                    {
                        using (FileStream fs = new FileStream(OutputFolder + rObj.Output_File_Name, FileMode.Create))
                        {
                            fs.Write(outputArray, 0, outputArray.Length);
                        }
                    }
                }

                if (rObj.ISAttachPREDICTTemplate == "1" && templateArray != null)
                {
                    string templateFolder = dirPath + "\\Documents with Template\\";
                    if (!Directory.Exists(templateFolder))
                    {
                        Directory.CreateDirectory(templateFolder);
                    }
                    if (rObj.Prefix_FileName == 1)
                    {
                        templateFile = rObj.Template_Name + "_" + rObj.Template_File_Name;
                        using (FileStream fs = new FileStream(templateFolder + templateFile, FileMode.Create))
                        {
                            fs.Write(templateArray, 0, templateArray.Length);
                        }
                    }
                    else
                    {
                        using (FileStream fs = new FileStream(templateFolder + rObj.Template_File_Name, FileMode.Create))
                        {
                            fs.Write(templateArray, 0, templateArray.Length);
                        }
                    }

                }

                if (rObj.Source_File_Name != ".pdf")
                {

                    compareFolder = dirPath + "\\Compare\\";
                    if (!Directory.Exists(compareFolder))
                    {
                        Directory.CreateDirectory(compareFolder);
                    }

                    string document1 = SourceFolder + "\\" + rObj.Source_File_Name;
                    string document2 = OutputFolder + "\\" + rObj.Output_File_Name;
                    Aspose.Words.Document doc1 = new Aspose.Words.Document(document1);
                    Aspose.Words.Document doc2 = new Aspose.Words.Document(document2);
                    if (doc1.Revisions.Count == 0 && doc2.Revisions.Count == 0)
                        doc1.Compare(doc2, "a", DateTime.Now);
                    doc1.Save(compareFolder + "Compare_" + rObj.Source_File_Name);
                }
                return "Success";

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return res;
            }

        }

        public string SaveToZipFileNoTemplate(StringBuilder sb, RegOpsQC rObj, byte[] sourceArray, byte[] outputArray)
        {
            string res = "";
            string sourceFile = string.Empty;
            string outputFile = string.Empty;
            string destPath = string.Empty;
            try
            {

                //Creating directory if not existed already
                string dirPath = m_SourceFolderPathQC + rObj.guidPath + "\\" + rObj.Job_ID;
                if (!Directory.Exists(dirPath))
                {
                    Directory.CreateDirectory(dirPath);
                }
                if (sourceArray != null)
                {
                    string SourceFolder = dirPath + "\\Source\\";
                    if (!Directory.Exists(SourceFolder))
                    {
                        Directory.CreateDirectory(SourceFolder);
                    }
                    if (rObj.Prefix_FileName == 1)
                    {
                        sourceFile = "Source_" + rObj.Source_File_Name;
                        using (FileStream fs = new FileStream(SourceFolder + sourceFile, FileMode.Create))
                        {
                            fs.Write(sourceArray, 0, sourceArray.Length);
                        }
                    }
                    else
                    {
                        using (FileStream fs = new FileStream(SourceFolder + rObj.Source_File_Name, FileMode.Create))
                        {
                            fs.Write(sourceArray, 0, sourceArray.Length);
                        }
                    }
                }

                if (outputArray != null)
                {
                    string OutputFolder = dirPath + "\\Output\\";
                    if (!Directory.Exists(OutputFolder))
                    {
                        Directory.CreateDirectory(OutputFolder);
                    }
                    if (rObj.Prefix_FileName == 1)
                    {
                        outputFile = "Output_" + rObj.Output_File_Name;
                        using (FileStream fs = new FileStream(OutputFolder + outputFile, FileMode.Create))
                        {
                            fs.Write(outputArray, 0, outputArray.Length);
                        }
                    }
                    else
                    {
                        using (FileStream fs = new FileStream(OutputFolder + rObj.Output_File_Name, FileMode.Create))
                        {
                            fs.Write(outputArray, 0, outputArray.Length);
                        }
                    }
                }

                //End of directory creation

                return "Success";

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return res;
            }

        }

        public string SavezippedFilesForIndividualDownload(StringBuilder sb, RegOpsQC rObj, byte[] sourceArray, byte[] outputArray, byte[] templateArray)
        {
            string res = "";
            try
            {

                string folderPath = m_SourceFolderPathQC;
                string SourceFolder = string.Empty;
                string outputFolder = string.Empty;
                string filePath;
                string destPath = string.Empty;
                string path = rObj.Source_File_Name;

                string dirPath = m_SourceFolderPathQC + rObj.guidPath + "\\" + rObj.Job_ID;
                if (!Directory.Exists(dirPath))
                {
                    Directory.CreateDirectory(dirPath);
                }

                if (System.IO.Directory.Exists(folderPath))
                {
                    if (sourceArray != null)
                    {
                        SourceFolder = folderPath + rObj.guidPath + "\\" + rObj.Job_ID + "\\Source\\";
                        if (!Directory.Exists(SourceFolder))
                        {
                            Directory.CreateDirectory(SourceFolder);
                        }
                    }
                    if (outputArray != null)
                    {
                        outputFolder = folderPath + rObj.guidPath + "\\" + rObj.Job_ID + "\\Output\\";
                        if (!Directory.Exists(outputFolder))
                        {
                            Directory.CreateDirectory(outputFolder);
                        }
                    }



                }
                Guid g;
                g = Guid.NewGuid();
                if (sourceArray != null)
                {
                    filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rObj.Source_File_Name;
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        fs.Write(sourceArray, 0, sourceArray.Length);
                    }
                    filePath = ReadXMLandPrepareCopy(filePath);
                    string extractPath = filePath;
                    string[] files = Directory.GetFiles(extractPath);
                    HttpContext.Current.Session["Prefix"] = rObj.Prefix_FileName;
                    for (int i = 0; i < files.Count(); i++)
                    {
                        if (File.Exists(files[i]))
                        {

                            ProcessSourceFile(files[i], SourceFolder);
                        }
                    }
                    string[] folders = Directory.GetDirectories(extractPath);
                    for (int i = 0; i < folders.Count(); i++)
                    {
                        if (Directory.Exists(extractPath))
                        {
                            ProcessSourceDirectory(folders[i], SourceFolder);
                        }
                    }
                    FileInfo fileSource = new FileInfo(path);
                    if (fileSource.Exists)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(path);
                    }
                    if (Directory.Exists(filePath))
                    {
                        foreach (string file1 in Directory.GetFiles(filePath))
                        {
                            File.Delete(file1);
                        }
                        foreach (string subfolder in Directory.GetDirectories(filePath))
                        {
                            RemoveDirectories(subfolder);
                        }
                        Directory.Delete(filePath);
                    }

                }
                if (outputArray != null)
                {
                    filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rObj.Output_File_Name;
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        fs.Write(outputArray, 0, outputArray.Length);
                    }
                    filePath = ReadXMLandPrepareCopy(filePath);
                    string extractPath = filePath;
                    string[] files = Directory.GetFiles(extractPath);
                    HttpContext.Current.Session["Prefix"] = rObj.Prefix_FileName;
                    for (int i = 0; i < files.Count(); i++)
                    {
                        if (File.Exists(files[i]))
                        {

                            ProcessOutputFile(files[i], outputFolder);
                        }
                    }
                    string[] folders = Directory.GetDirectories(extractPath);
                    for (int i = 0; i < folders.Count(); i++)
                    {
                        if (Directory.Exists(extractPath))
                        {
                            ProcessOutputDirectory(folders[i], outputFolder);
                        }
                    }
                    FileInfo fileSource = new FileInfo(path);
                    if (fileSource.Exists)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(path);
                    }
                    if (Directory.Exists(filePath))
                    {
                        foreach (string file1 in Directory.GetFiles(filePath))
                        {
                            File.Delete(file1);
                        }
                        foreach (string subfolder in Directory.GetDirectories(filePath))
                        {
                            RemoveDirectories(subfolder);
                        }
                        Directory.Delete(filePath);
                    }
                }
                if (rObj.ISAttachPREDICTTemplate == "1" && templateArray != null)
                {
                    string templateFolder = folderPath + rObj.guidPath + "\\" + rObj.Job_ID + "\\Documents with Template\\";
                    if (!Directory.Exists(templateFolder))
                    {
                        Directory.CreateDirectory(templateFolder);
                    }
                    if (templateArray.ToString() != null && templateArray.ToString() != "")
                    {
                        filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rObj.Template_File_Name;
                        using (FileStream fs = new FileStream(filePath, FileMode.Create))
                        {
                            fs.Write(templateArray, 0, templateArray.Length);
                        }
                        filePath = ReadXMLandPrepareCopy(filePath);
                        string extractPath = filePath;
                        string[] files = Directory.GetFiles(extractPath);
                        HttpContext.Current.Session["Prefix"] = rObj.Prefix_FileName;
                        for (int i = 0; i < files.Count(); i++)
                        {
                            if (File.Exists(files[i]))
                            {

                                ProcessTemplateFile(files[i], templateFolder, rObj);
                            }
                        }
                        string[] folders = Directory.GetDirectories(extractPath);
                        for (int i = 0; i < folders.Count(); i++)
                        {
                            if (Directory.Exists(extractPath))
                            {
                                ProcessTemplateDirectory(folders[i], templateFolder, rObj);
                            }
                        }
                        FileInfo fileSource = new FileInfo(path);
                        if (fileSource.Exists)
                        {
                            System.GC.Collect();
                            System.GC.WaitForPendingFinalizers();
                            File.Delete(path);
                        }
                        if (Directory.Exists(filePath))
                        {
                            foreach (string file1 in Directory.GetFiles(filePath))
                            {
                                File.Delete(file1);
                            }
                            foreach (string subfolder in Directory.GetDirectories(filePath))
                            {
                                RemoveDirectories(subfolder);
                            }
                            Directory.Delete(filePath);
                        }
                    }
                }
                string[] folders1 = Directory.GetDirectories(SourceFolder, "*", SearchOption.AllDirectories);
                if (folders1.Count() > 0)
                {
                    foreach (string directory in folders1)
                    {
                        string[] files1 = Directory.GetFiles(directory);
                        foreach (string file in files1)
                        {
                            string ext = Path.GetExtension(file);
                            string sourcefileExtension = Path.GetExtension(file);
                            if (sourcefileExtension != ".pdf")
                            {
                                string outputfileName = string.Empty;
                                string outputfileExtension = string.Empty;
                                string outputfileName1 = string.Empty;
                                string compareFolder = dirPath + "\\Compare\\";
                                if (!Directory.Exists(compareFolder))
                                {
                                    Directory.CreateDirectory(compareFolder);
                                }
                                string sourcefileName = Path.GetFileNameWithoutExtension(file);
                                string[] folders2 = Directory.GetDirectories(outputFolder, "*", SearchOption.AllDirectories);
                                if (folders2.Count() > 0)
                                {
                                    foreach (string directory1 in folders2)
                                    {
                                        string[] files2 = Directory.GetFiles(directory1);

                                        foreach (string outputfile in files2)
                                        {
                                            outputfileName = Path.GetFileNameWithoutExtension(outputfile);
                                            if (sourcefileName == outputfileName)
                                            {
                                                outputfileExtension = Path.GetExtension(outputfile);
                                                outputfileName1 = Path.GetFileNameWithoutExtension(outputfile);
                                            }
                                        }
                                        if(outputfileName1 != "")
                                        {
                                            string document1 = directory + "\\" + sourcefileName + sourcefileExtension;
                                            string document2 = directory1 + "\\" + outputfileName1 + outputfileExtension;
                                            Aspose.Words.Document doc1 = new Aspose.Words.Document(document1);
                                            Aspose.Words.Document doc2 = new Aspose.Words.Document(document2);
                                            if (doc1.Revisions.Count == 0 && doc2.Revisions.Count == 0)
                                                doc1.Compare(doc2, "a", DateTime.Now);
                                            doc1.Save(compareFolder + "Compare_" + sourcefileName + sourcefileExtension);
                                            outputfileName1 = "";
                                        }
                                        
                                    }
                                }
                            }

                        }
                    }

                }
                else
                {
                    string[] files1 = Directory.GetFiles(SourceFolder);
                    foreach (string file in files1)
                    {
                        string sourcefileExtension = Path.GetExtension(file);

                        if (sourcefileExtension != ".pdf")
                        {
                            string outputfileName = string.Empty;
                            string outputfileExtension = string.Empty;
                            string outputfileName1 = string.Empty;
                            string compareFolder = folderPath + rObj.Job_ID + "\\Compare\\";
                            if (!Directory.Exists(compareFolder))
                            {
                                Directory.CreateDirectory(compareFolder);
                            }
                            string sourcefileName = Path.GetFileNameWithoutExtension(file);
                            string[] files2 = Directory.GetFiles(outputFolder);
                            foreach (string outputfile in files2)
                            {
                                outputfileName = Path.GetFileNameWithoutExtension(outputfile);
                                if (sourcefileName == outputfileName)
                                {
                                    outputfileExtension = Path.GetExtension(outputfile);
                                    outputfileName1 = Path.GetFileNameWithoutExtension(outputfile);
                                }
                            }
                            string document1 = SourceFolder + "\\" + sourcefileName + sourcefileExtension;
                            string document2 = outputFolder + "\\" + outputfileName1 + outputfileExtension;
                            Aspose.Words.Document doc1 = new Aspose.Words.Document(document1);
                            Aspose.Words.Document doc2 = new Aspose.Words.Document(document2);
                            if (doc1.Revisions.Count == 0 && doc2.Revisions.Count == 0)
                                doc1.Compare(doc2, "a", DateTime.Now);
                            doc1.Save(compareFolder + "Compare_" + sourcefileName + sourcefileExtension);

                        }
                    }
                }
                return "Success";

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return res;
            }

        }

        public string SavezippedFilesForIndividualDownloadNoTemplate(StringBuilder sb, RegOpsQC rObj, byte[] sourceArray, byte[] outputArray)
        {
            string res = "";
            try
            {

                string folderPath = m_SourceFolderPathQC;
                string SourceFolder = string.Empty;
                string outputFolder = string.Empty;
                string filePath;
                string destPath = string.Empty;
                string path = rObj.File_Name;

                string dirPath = m_SourceFolderPathQC + rObj.guidPath + "\\" + rObj.Job_ID;
                if (!Directory.Exists(dirPath))
                {
                    Directory.CreateDirectory(dirPath);
                }

                if (System.IO.Directory.Exists(folderPath))
                {
                    if (sourceArray != null)
                    {
                        SourceFolder = folderPath + rObj.guidPath + "\\" + rObj.Job_ID + "\\Source\\";
                        if (!Directory.Exists(SourceFolder))
                        {
                            Directory.CreateDirectory(SourceFolder);
                        }
                    }
                    if (outputArray != null)
                    {
                        outputFolder = folderPath + rObj.guidPath + "\\" + rObj.Job_ID + "\\Output\\";
                        if (!Directory.Exists(outputFolder))
                        {
                            Directory.CreateDirectory(outputFolder);
                        }
                    }

                }
                Guid g;
                g = Guid.NewGuid();
                if (sourceArray != null)
                {
                    filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rObj.Source_File_Name;
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        fs.Write(sourceArray, 0, sourceArray.Length);
                    }
                    filePath = ReadXMLandPrepareCopy(filePath);
                    string extractPath = filePath;
                    string[] files = Directory.GetFiles(extractPath);
                    HttpContext.Current.Session["Prefix"] = rObj.Prefix_FileName;
                    for (int i = 0; i < files.Count(); i++)
                    {
                        if (File.Exists(files[i]))
                        {

                            ProcessSourceFile(files[i], SourceFolder);
                        }
                    }
                    string[] folders = Directory.GetDirectories(extractPath);
                    for (int i = 0; i < folders.Count(); i++)
                    {
                        if (Directory.Exists(extractPath))
                        {
                            ProcessSourceDirectory(folders[i], SourceFolder);
                        }
                    }
                    FileInfo fileSource = new FileInfo(path);
                    if (fileSource.Exists)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(path);
                    }
                    if (Directory.Exists(filePath))
                    {
                        foreach (string file1 in Directory.GetFiles(filePath))
                        {
                            File.Delete(file1);
                        }
                        foreach (string subfolder in Directory.GetDirectories(filePath))
                        {
                            RemoveDirectories(subfolder);
                        }
                        Directory.Delete(filePath);
                    }
                }
                if (outputArray != null)
                {
                    filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + g + rObj.Output_File_Name;
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        fs.Write(outputArray, 0, outputArray.Length);
                    }
                    filePath = ReadXMLandPrepareCopy(filePath);
                    string extractPath = filePath;
                    string[] files = Directory.GetFiles(extractPath);
                    HttpContext.Current.Session["Prefix"] = rObj.Prefix_FileName;
                    for (int i = 0; i < files.Count(); i++)
                    {
                        if (File.Exists(files[i]))
                        {

                            ProcessOutputFile(files[i], outputFolder);
                        }
                    }
                    string[] folders = Directory.GetDirectories(extractPath);
                    for (int i = 0; i < folders.Count(); i++)
                    {
                        if (Directory.Exists(extractPath))
                        {
                            ProcessOutputDirectory(folders[i], outputFolder);
                        }
                    }
                    FileInfo fileSource = new FileInfo(path);
                    if (fileSource.Exists)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(path);
                    }
                    if (Directory.Exists(filePath))
                    {
                        foreach (string file1 in Directory.GetFiles(filePath))
                        {
                            File.Delete(file1);
                        }
                        foreach (string subfolder in Directory.GetDirectories(filePath))
                        {
                            RemoveDirectories(subfolder);
                        }
                        Directory.Delete(filePath);
                    }
                }

                //End of directory creation

                return "Success";

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return res;
            }

        }

        private string GenerateIndividualJobDetails(RegOpsQC tpObj)
        {
            string result = string.Empty;
            StringBuilder sb = new StringBuilder();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet dsFiles = new DataSet();
                        dsFiles = conn.GetDataSet("select distinct(FILE_NAME) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsFiles))
                        {
                            string dirPath = m_SourceFolderPathQC + tpObj.Job_ID;//System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/") + tpObj.Job_ID;

                            for (int i = 0; i < dsFiles.Tables[0].Rows.Count; i++)
                            {
                                DataSet ds = new DataSet();
                                //ds = conn.GetDataSet("select b.JOB_ID,c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID + "And lower(FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "') as TOTALCHECKLIST," +
                                //    "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) = 'pass' And lower(FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "') as passChecklist ," +
                                //    "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) = 'failed' And lower(FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "') as failChecklist," +
                                //    " (select Count(*) from REGOPS_QC_VALIDATION_DETAILS val inner join REGOPS_QC_JOBS qc on qc.ID=val.JOB_ID inner join REGOPS_QC_JOBS_CHECKLIST chk on chk.JOB_ID = qc.ID and chk.CHECKLIST_ID = val.CHECKLIST_ID where val.JOB_ID =" + tpObj.ID + " and lower(val.QC_RESULT) = 'failed' and chk.qc_type = 1) as fixChecklist," +
                                //    " d.QC_TYPE,extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                                //    " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join REGOPS_QC_JOBS_CHECKLIST d on a.JOB_ID = d.JOB_ID and a.CHECKLIST_ID=d.CHECKLIST_ID where a.JOB_ID=" + tpObj.ID + " And lower(a.FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "'", CommandType.Text, ConnectionState.Open);
                                ds = conn.GetDataSet("select qcpref.PREFERENCE_NAME, b.JOB_ID,b.JOB_TITLE,b.PROJECT_ID,c.LIBRARY_VALUE as Validation,a.QC_RESULT,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID = " + tpObj.ID + ") as USERNAME,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.CREATED_DATE,b.NO_OF_FILES,b.NO_OF_PAGES,(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID + "And lower(FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "') as TOTALCHECKLIST," +
                                    "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%passed%' And lower(FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "') as passChecklist ," +
                                    "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%failed%' And lower(FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "') as failChecklist," +
                                    "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%fixed%' And lower(FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "') as fixchecklist," +
                                    " d.QC_TYPE,extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                                    " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join REGOPS_QC_PREFERENCES qcpref on qcpref.ID = b.PREFERENCE_ID left join REGOPS_QC_JOBS_CHECKLIST d on a.JOB_ID = d.JOB_ID and a.CHECKLIST_ID=d.CHECKLIST_ID left join Library lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID where a.JOB_ID=" + tpObj.ID + " And lower(a.FILE_NAME)='" + dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower() + "'", CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(ds))
                                {
                                    sb = new StringBuilder();
                                    sb.AppendLine("<html>");
                                    sb.AppendLine("<head>");
                                    sb.AppendLine("<title style='align='center'>");
                                    sb.AppendLine("Page-");
                                    sb.AppendLine(Guid.NewGuid().ToString());
                                    sb.AppendLine("</title>");
                                    sb.AppendLine("</head>");
                                    sb.AppendLine("<body>");
                                    sb.AppendLine("<div class='WordSection1'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Report</u></b></p>");
                                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("style='width:481.0pt;margin-left:30.2pt;border-collapse:collapse;mso-yfti-tbllook:");
                                    //sb.AppendLine("1184;mso-padding-alt:0in 0in 0in 0in'>");
                                    sb.AppendLine("<tbody><tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine(" border-left:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine("</tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");


                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>No. of Files</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>No. of Pages</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total No. of Checks</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");
                                    //Passed Checklists
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");
                                    //failed Checklists
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                    //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    //Process Time
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROCESSTIME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    //Created By
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    //Created Date
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    TimeZone zone = TimeZone.CurrentTimeZone;
                                    string standard = zone.StandardName;
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine("</tbody></table>");
                                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("style='width:581.4pt;margin-left:30.2pt;border-collapse:collapse;mso-yfti-tbllook:");
                                    //sb.AppendLine("1184;mso-padding-alt:0in 0in 0in 0in'>");
                                    sb.AppendLine("<thead>");
                                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Folder");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-left:none;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("none;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine("</tr>");

                                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                                    {
                                        string qcStatus = ds.Tables[0].Rows[j]["QC_RESULT"].ToString();
                                        string bg_color = "white";
                                        if (qcStatus.ToUpper() == "FIXED")
                                        {
                                            //bg_color = "#5DE988";
                                            bg_color = "#caebff";
                                        }
                                        else if (qcStatus == "Failed")
                                        {
                                            //bg_color = "#f1b2b2";
                                            bg_color = "#f77676c2";
                                        }
                                        else
                                        {
                                            bg_color = "White";
                                        }
                                        string color = "black";
                                        // bg_color = "white";
                                        string type = "0";
                                        type = ds.Tables[0].Rows[j]["QC_TYPE"].ToString();

                                        string validation = "";
                                        if (ds.Tables[0].Rows[j]["ParentCheck"].ToString() != "")
                                            validation = ds.Tables[0].Rows[j]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[j]["VALIDATION"].ToString();
                                        else
                                            validation = ds.Tables[0].Rows[j]["VALIDATION"].ToString();

                                        sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["FOLDER_NAME"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["FILE_NAME"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + validation + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                        //sb.AppendLine(" none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                        //sb.AppendLine(" padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                        //sb.AppendLine("htmlBuilder.Append('padding: 0in 5.4pt 0in 5.4pt; height: 15.0pt'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["COMMENTS"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                        sb.AppendLine("</tr>");
                                    }
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("</tr>");
                                    sb.AppendLine("</thead>");
                                    sb.AppendLine("</table>");
                                    sb.AppendLine("</div>");
                                    sb.AppendLine("</body>");
                                    sb.AppendLine("</html>");
                                    sb.AppendLine("</table>");
                                    tpObj.File_Name = ds.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                }
                                if (!sb.ToString().Equals(""))
                                    result = SaveToZipFile(sb, tpObj);
                            }
                            string guId = Guid.NewGuid().ToString();
                            string desPath = m_DownloadFolderPathQC;

                            string folderPath = m_SourceFolderPathQC + tpObj.Job_ID;
                            if (!File.Exists(folderPath + "_Individual.zip"))
                            {
                                using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                {
                                    //add directory, give it a name
                                    zip.AddDirectory(folderPath);
                                    zip.Save(folderPath + "_Individual" + ".zip");
                                }
                            }
                            result = tpObj.Job_ID + "_Individual" + ".zip";
                        }
                        if (result.Equals(""))
                            result = "No data available";
                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }
        private string GenerateIndividualPJobDetails(RegOpsQC tpObj)
        {
            string result = string.Empty;
            StringBuilder sb = new StringBuilder();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;

                        string validationPlan = string.Empty;
                        validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                        string WordTemplateName = string.Empty;
                        WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
                        var temp = tpObj.ISAttachPREDICTTemplate;

                        // save source and output files
                        #region
                        Connection conOrg = new Connection();
                        conOrg.connectionstring = m_Conn;
                        DataSet dsetLimits = new DataSet();
                        dsetLimits = conOrg.GetDataSet("SELECT PREFIX_FILENAME FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + tpObj.ORGANIZATION_ID, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsetLimits))
                        {
                            if (dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString() != "")
                            {
                                tpObj.Prefix_FileName = Convert.ToInt32(dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString());
                            }
                        }
                        Guid Guid;
                        Guid = Guid.NewGuid();
                        tpObj.guidPath = Guid.ToString();


                        DataSet templateDS = new DataSet();
                        // templateDS = conn.GetDataSet("SELECT TEMPLATE_NAME FROM REGOPS_WORD_STYLES_METADATA rwsm left join REGOPS_QC_PREFERENCES rqp on rqp.word_template_id=rwsm.template_id left join REGOPS_JOB_PLANS rjp on rjp.PREFERENCE_ID = rqp.id where rjp.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                        templateDS = conn.GetDataSet("SELECT rwsm.TEMPLATE_NAME FROM REGOPS_QC_JOBS a left join REGOPS_JOB_PLANS rjp on rjp.job_id =a.id left join REGOPS_QC_PREFERENCES rqp on rqp.id =rjp.PREFERENCE_ID left join REGOPS_WORD_STYLES_METADATA rwsm  on rwsm.template_id = rqp.word_template_id and a.attach_word_template = 1 where rjp.job_id = " + tpObj.ID, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(templateDS))
                        {
                            for (int k = 0; k < templateDS.Tables[0].Rows.Count; k++)
                            {
                                if (templateDS.Tables[0].Rows[k]["TEMPLATE_NAME"].ToString() != null && templateDS.Tables[0].Rows[k]["TEMPLATE_NAME"].ToString() != "")
                                {
                                    tpObj.Template_Name = templateDS.Tables[0].Rows[k]["TEMPLATE_NAME"].ToString();
                                }
                                DataSet dset = new DataSet();
                                byte[] TemplateData = null;

                                dset = conn.GetDataSet("SELECT d.FILE_NAME as SourceFileName,d.FILE_CONTENT as SourceContent,d1.FILE_NAME as OutputFileName,d1.FILE_CONTENT as OutputContent,d2.FILE_NAME as TemplateFileName,d2.FILE_CONTENT as TemplateContent FROM DCM_FILES d right join regops_job_files rj on rj.dcm_input_file_id=d.file_id left join DCM_FILES d1 on d1.file_id=rj.dcm_output_file_id left join DCM_FILES d2 on d2.file_id=rj.dcm_template_file_id WHERE rj.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(dset))
                                {


                                    for (int j = 0; j < dset.Tables[0].Rows.Count; j++)
                                    {
                                        byte[] SourceData = null;
                                        byte[] OutputData = null;
                                        TemplateData = null;
                                        tpObj.Source_File_Name = dset.Tables[0].Rows[j]["SOURCEFILENAME"].ToString();
                                        tpObj.Output_File_Name = dset.Tables[0].Rows[j]["OUTPUTFILENAME"].ToString();
                                        tpObj.Template_File_Name = dset.Tables[0].Rows[j]["TEMPLATEFILENAME"].ToString();

                                        if (dset.Tables[0].Rows[j]["SOURCECONTENT"].ToString() != null && dset.Tables[0].Rows[j]["SOURCECONTENT"].ToString() != "")
                                        {
                                            SourceData = (byte[])dset.Tables[0].Rows[j]["SOURCECONTENT"];
                                        }
                                        if (dset.Tables[0].Rows[j]["OUTPUTCONTENT"].ToString() != null && dset.Tables[0].Rows[j]["OUTPUTCONTENT"].ToString() != "")
                                        {
                                            OutputData = (byte[])dset.Tables[0].Rows[j]["OUTPUTCONTENT"];
                                        }
                                        if (dset.Tables[0].Rows[j]["TEMPLATECONTENT"].ToString() != null && dset.Tables[0].Rows[j]["TEMPLATECONTENT"].ToString() != "")
                                        {
                                            TemplateData = (byte[])dset.Tables[0].Rows[j]["TEMPLATECONTENT"];
                                        }
                                        string deleteFilePath = string.Empty;
                                        string extension = string.Empty;
                                        if (tpObj.Source_File_Name != null && tpObj.Source_File_Name != "")
                                        {
                                            var s = Regex.Replace(tpObj.Source_File_Name, @"""", "").Trim().ToString();
                                            extension = Path.GetExtension(s);
                                            tpObj.File_Name = s;
                                            tpObj.File_Upload_Name = s;
                                        }
                                        else
                                        {
                                            var s = Regex.Replace(tpObj.Output_File_Name, @"""", "").Trim().ToString();
                                            extension = Path.GetExtension(s);
                                            tpObj.File_Name = s;
                                            tpObj.File_Upload_Name = s;
                                        }

                                        if (extension != ".zip")
                                        {
                                            result = SaveToZipFile1(sb, tpObj, SourceData, OutputData, TemplateData);
                                        }
                                        else
                                        {
                                            result = SavezippedFilesForIndividualDownload(sb, tpObj, SourceData, OutputData, TemplateData);
                                        }

                                    }
                                }
                            }

                        }
                        else
                        {
                            DataSet dset = new DataSet();
                            dset = conn.GetDataSet("SELECT d.FILE_NAME as SourceFileName,d.FILE_CONTENT as SourceContent,d1.FILE_CONTENT as OutputContent,d1.FILE_NAME as outputFileName FROM DCM_FILES d right join regops_job_files rj on rj.dcm_input_file_id=d.file_id left join DCM_FILES d1 on d1.file_id=rj.dcm_output_file_id WHERE rj.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                            if (conn.Validate(dset))
                            {


                                for (int j = 0; j < dset.Tables[0].Rows.Count; j++)
                                {
                                    byte[] SourceData = null;
                                    byte[] OutputData = null;

                                    tpObj.Source_File_Name = dset.Tables[0].Rows[j]["SOURCEFILENAME"].ToString();
                                    tpObj.Output_File_Name = dset.Tables[0].Rows[j]["OUTPUTFILENAME"].ToString();
                                    if (dset.Tables[0].Rows[j]["SOURCECONTENT"].ToString() != null && dset.Tables[0].Rows[j]["SOURCECONTENT"].ToString() != "")
                                    {
                                        SourceData = (byte[])dset.Tables[0].Rows[j]["SOURCECONTENT"];
                                    }
                                    if (dset.Tables[0].Rows[j]["OUTPUTCONTENT"].ToString() != null && dset.Tables[0].Rows[j]["OUTPUTCONTENT"].ToString() != "")
                                    {
                                        OutputData = (byte[])dset.Tables[0].Rows[j]["OUTPUTCONTENT"];
                                    }
                                    string deleteFilePath = string.Empty;
                                    string extension = string.Empty;
                                    if (tpObj.Source_File_Name != null && tpObj.Source_File_Name != "")
                                    {
                                        var s = Regex.Replace(tpObj.Source_File_Name, @"""", "").Trim().ToString();
                                        extension = Path.GetExtension(s);
                                        tpObj.File_Name = s;
                                        tpObj.File_Upload_Name = s;
                                    }
                                    else
                                    {
                                        var s = Regex.Replace(tpObj.Output_File_Name, @"""", "").Trim().ToString();
                                        extension = Path.GetExtension(s);
                                        tpObj.File_Name = s;
                                        tpObj.File_Upload_Name = s;
                                    }
                                    if (extension != ".zip")
                                    {
                                        result = SaveToZipFileNoTemplate(sb, tpObj, SourceData, OutputData);
                                    }
                                    else
                                    {
                                        result = SavezippedFilesForIndividualDownloadNoTemplate(sb, tpObj, SourceData, OutputData);
                                    }
                                }
                            }
                        }
                        #endregion


                        DataSet dsFiles = new DataSet();
                        dsFiles = conn.GetDataSet("select distinct(FILE_NAME) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                        DataSet ds = new DataSet();
                        if (conn.Validate(dsFiles))
                        {
                            string dirPath = m_SourceFolderPathQC + tpObj.Job_ID;
                            string fileName = string.Empty;
                            string fileNameForSave = string.Empty;
                            for (int i = 0; i < dsFiles.Tables[0].Rows.Count; i++)
                            {
                                if (dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower().Contains("'"))
                                {
                                    fileName = dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower().Replace("'", "''");
                                    fileNameForSave = dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                }
                                else
                                {
                                    fileName = dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString().ToLower();
                                    fileNameForSave = dsFiles.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                }
                                OracleConnection con1 = new OracleConnection();
                                con1.ConnectionString = m_DummyConn;
                                OracleCommand cmd = new OracleCommand();
                                con1.Open();
                                OracleDataAdapter da;
                                string query = string.Empty;
                                if (tpObj.ByType == "By Check")
                                {
                                    query = "select mlib.Library_value as Country,sty.TEMPLATE_NAME,rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,case when c.CHECK_UNITS is not null then a.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else a.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed, b.JOB_ID,b.JOB_TITLE,b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_TYPE,b.JOB_DESCRIPTION,rp.PROJECT_ID,rp.PROJECT_TITLE,c.LIBRARY_VALUE as Validation,c.COMPOSITE_CHECK,a.PARENT_CHECK_ID,a.QC_RESULT,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM')as CREATED_DATE,b.NO_OF_FILES,b.NO_OF_PAGES,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID And lower(FILE_NAME)=:FILE_NAME) as TOTALCHECKLIST," +
                                        "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%' And lower(FILE_NAME)=:FILE_NAME) as passChecklist ," +
                                        "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%' And lower(FILE_NAME)=:FILE_NAME) as failChecklist," +
                                        "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID And lower(FILE_NAME)=:FILE_NAME) as fixchecklist," +
                                        " extract( hour from JOB_END_TIME-JOB_START_TIME ) || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                                        " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID And lower(a.FILE_NAME)=:FILE_NAME order by rjp.PLAN_ORDER,c.CHECK_ORDER";
                                }
                                else
                                {

                                    query = "select mlib.Library_value as Country,a.PAGE_NUMBER,sty.TEMPLATE_NAME, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,case when c.CHECK_UNITS is not null then a.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else a.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed, b.JOB_ID,b.JOB_TITLE,b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_TYPE,b.JOB_DESCRIPTION,rp.PROJECT_ID,rp.PROJECT_TITLE,c.LIBRARY_VALUE as Validation,c.COMPOSITE_CHECK,a.PARENT_CHECK_ID,a.QC_RESULT,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM')as CREATED_DATE,b.NO_OF_FILES,b.NO_OF_PAGES,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID And lower(FILE_NAME)=:FILE_NAME) as TOTALCHECKLIST," +
                                "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%' And lower(FILE_NAME)=:FILE_NAME) as passChecklist ," +
                                "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%' And lower(FILE_NAME)=:FILE_NAME) as failChecklist," +
                                "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID And lower(FILE_NAME)=:FILE_NAME) as fixchecklist," +
                                " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                                " from REGOPS_QC_PAGE_VALIDATION_DET a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID And lower(a.FILE_NAME)=:FILE_NAME order by rjp.PLAN_ORDER,a.PAGE_NUMBER,c.CHECK_ORDER";
                                }
                                cmd = new OracleCommand(query, con1);
                                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                                cmd.Parameters.Add(new OracleParameter("FILE_NAME", fileName));
                                da = new OracleDataAdapter(cmd);
                                ds.Clear();
                                da.Fill(ds);
                                tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                                tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                                TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                                tpObj.ProcessTime = elapsed.ToString();
                                con1.Close();

                                if (conn.Validate(ds))
                                {
                                    sb = new StringBuilder();
                                    sb.AppendLine("<html>");
                                    sb.AppendLine("<head>");
                                    sb.AppendLine("<title style='align='center'>");
                                    sb.AppendLine("Page-");
                                    sb.AppendLine(Guid.NewGuid().ToString());
                                    sb.AppendLine("</title>");
                                    sb.AppendLine("</head>");
                                    sb.AppendLine("<body>");
                                    sb.AppendLine("<div class='WordSection1'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Report</u></b></p>");
                                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<tbody><tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine("</tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Type</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TYPE"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");
                                    if (temp == "1")
                                    {
                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>World Template (styles)</span></p>");
                                        sb.AppendLine(" </td>");

                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + WordTemplateName + "</span></p>");
                                        sb.AppendLine(" </td>");

                                        sb.AppendLine(" </tr>");
                                    }
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project Title</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");
                                    if (tpObj.Job_Type != "Publishing")
                                    {
                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");
                                        //Passed Checklists
                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");
                                        //failed Checklists
                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");

                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");
                                    }
                                    else
                                    {
                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Rules Executed</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");
                                        //Passed Checklists
                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Rules</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");
                                        //failed Checklists
                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Rules</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");

                                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Rules</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                        sb.AppendLine(" </tr>");
                                    }
                                    //Process Time
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time(HH:MM:SS)</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + tpObj.ProcessTime + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    //Created By
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    //Created Date
                                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                    TimeZone zone = TimeZone.CurrentTimeZone;
                                    string standard = string.Concat(System.Text.RegularExpressions.Regex
                                      .Matches(zone.StandardName, "[A-Z]")
                                      .OfType<System.Text.RegularExpressions.Match>()
                                      .Select(match => match.Value));
                                    if (standard == "CUT")
                                        standard = "UTC";
                                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" </tr>");

                                    sb.AppendLine("</tbody></table>");
                                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<thead>");
                                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    if (tpObj.ByType == "By Page")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Page Number");
                                        sb.AppendLine("</span></b></p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (tpObj.Job_Type != "Publishing")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                                        sb.AppendLine("</span></b></p>");
                                        sb.AppendLine("</td>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                                        sb.AppendLine("</span></b></p>");
                                        sb.AppendLine("</td>");
                                    }
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");

                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                                    sb.AppendLine("</span></b></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine("</tr>");

                                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                                    {
                                        if (!(ds.Tables[0].Rows[j]["PARENT_CHECK_ID"].ToString() == "" && ds.Tables[0].Rows[j]["COMPOSITE_CHECK"].ToString() == "0"))
                                        {
                                            string checkParameter = string.Empty;
                                            if (ds.Tables[0].Rows[j]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[j]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[j]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[j]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                                                checkParameter = ds.Tables[0].Rows[j]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                                            else
                                                checkParameter = ds.Tables[0].Rows[j]["CHECK_PARAMETER"].ToString();
                                            string sev_level = "";
                                            string qcStatus = ds.Tables[0].Rows[j]["QC_RESULT"].ToString();
                                            string bg_color = "white";
                                            string fixedbg_color = "white";
                                            string color = "black";
                                            if (qcStatus.ToLower().Equals("failed"))
                                            {
                                                bg_color = "#f77676c2";
                                            }
                                            else if (qcStatus.ToLower().Equals("error"))
                                            {
                                                bg_color = "#cceeff";
                                            }
                                            if (ds.Tables[0].Rows[j]["FIXED"].ToString().ToLower().Equals("yes"))
                                            {
                                                fixedbg_color = "#66ff66";
                                            }
                                            if (ds.Tables[0].Rows[j]["severity_level"].ToString() == "1")
                                            {
                                                sev_level = "High";
                                            }
                                            else if (ds.Tables[0].Rows[j]["severity_level"].ToString() == "2")
                                            {
                                                sev_level = "Medium";
                                            }
                                            else if (ds.Tables[0].Rows[j]["severity_level"].ToString() == "3")
                                            {
                                                sev_level = "Low";
                                            }
                                            else if (ds.Tables[0].Rows[j]["severity_level"].ToString() == "4")
                                            {
                                                sev_level = "Warning";
                                            }
                                            else if (ds.Tables[0].Rows[j]["severity_level"].ToString() == "5")
                                            {
                                                sev_level = "NA";
                                            }
                                            string validation = "";
                                            if (ds.Tables[0].Rows[j]["ParentCheck"].ToString() != "")
                                                validation = ds.Tables[0].Rows[j]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[j]["VALIDATION"].ToString();
                                            else
                                                validation = ds.Tables[0].Rows[j]["VALIDATION"].ToString();

                                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            if (ds.Tables[0].Rows[j]["FOLDER_NAME"].ToString() != "")
                                            {
                                                if (ds.Tables[0].Rows[j]["FILE_NAME"].ToString() != "")
                                                {
                                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[j]["FILE_NAME"].ToString() + "</span></p>");
                                                }
                                                else
                                                {
                                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["FOLDER_NAME"].ToString() + "</span></p>");
                                                }

                                            }
                                            else
                                            {
                                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["FILE_NAME"].ToString() + "</span></p>");
                                            }
                                            sb.AppendLine(" </td>");
                                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                            sb.AppendLine(" </td>");
                                            if (tpObj.ByType == "By Page")
                                            {
                                                sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                                if (Convert.ToInt32(ds.Tables[0].Rows[j]["PAGE_NUMBER"].ToString()) != 0)
                                                {
                                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                                    sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[j]["PAGE_NUMBER"].ToString() + "</p>");
                                                }
                                                else
                                                {
                                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                                    sb.AppendLine(" line-height:normal'>" + "" + "</p>");
                                                }
                                                sb.AppendLine(" </td>");
                                            }
                                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + validation + "</span></p>");
                                            sb.AppendLine(" </td>");
                                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + " </span></p>");
                                            sb.AppendLine(" </td>");
                                            if (bg_color.Contains("#"))
                                            {
                                                if (ds.Tables[0].Rows[j]["FIXED"].ToString().ToLower() != "yes")
                                                {
                                                    var color12 = HexToColor(bg_color);
                                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                                }
                                                else
                                                {
                                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                                }
                                            }
                                            else
                                            {
                                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                            }
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["QC_RESULT"].ToString() + "</span></p>");
                                            sb.AppendLine(" </td>");
                                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                            System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[j]["COLOR"].ToString());
                                            if (sev_level != "")
                                            {
                                                sb.AppendLine("<div>");
                                                sb.AppendLine("<div>");
                                                sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:" + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + "'>");
                                                sb.AppendLine("</span>");
                                                sb.AppendLine("</div>");
                                                sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                                sb.AppendLine("</div>");
                                            }
                                            else
                                            {
                                                sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                            }
                                            sb.AppendLine(" </td>");
                                            if (fixedbg_color.Contains("#"))
                                            {
                                                var color12 = HexToColor(fixedbg_color);
                                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                            }
                                            else
                                            {
                                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                                            }
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["FIXED"].ToString() + "</span></p>");
                                            sb.AppendLine(" </td>");
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[j]["COMMENTS"].ToString() + "</span></p>");
                                            sb.AppendLine("</td>");
                                            sb.AppendLine("</tr>");
                                        }
                                    }
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("</tr>");
                                    sb.AppendLine("</thead>");
                                    sb.AppendLine("</table>");
                                    sb.AppendLine("</div>");
                                    sb.AppendLine("</body>");
                                    sb.AppendLine("</html>");
                                    sb.AppendLine("</table>");
                                    tpObj.File_Name = ds.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                }
                                if (sb != null)
                                {
                                    string destPath = string.Empty;
                                    if (tpObj.SingleOrMultiple == "Individual")
                                    {
                                        string ConsolidateFilePath = m_SourceFolderPathQC + tpObj.Job_ID + "/" + tpObj.Job_ID + ".html";
                                        if (File.Exists(ConsolidateFilePath))
                                            File.Delete(ConsolidateFilePath);
                                    }
                                    if (tpObj.Prefix_FileName == 1)
                                    {
                                        if (tpObj.Template_Name != null && tpObj.Template_Name != "")
                                        {
                                            destPath = m_SourceFolderPathQC + tpObj.guidPath + "\\" + tpObj.Job_ID + "/" + tpObj.Template_Name + "_" + fileNameForSave;
                                        }
                                        else
                                        {
                                            destPath = m_SourceFolderPathQC + tpObj.guidPath + "\\" + tpObj.Job_ID + "/" + fileNameForSave;

                                        }

                                    }
                                    else
                                    {
                                        destPath = m_SourceFolderPathQC + tpObj.guidPath + "\\" + tpObj.Job_ID + "/" + fileNameForSave;
                                    }

                                    //End of directory creation
                                    FileInfo f1 = new FileInfo(destPath);
                                    destPath = destPath.Replace(f1.Extension, "");
                                    File.WriteAllText(destPath + ".html", sb.ToString(), Encoding.UTF8);


                                }
                            }
                            string guId = Guid.NewGuid().ToString();
                            string desPath = m_DownloadFolderPathQC;
                            string zipFileName = string.Empty;
                            if (tpObj.ByType == "By Check")
                                zipFileName = "_Individual_By Check.zip";
                            else
                                zipFileName = "_Individual_By Page.zip";

                            string folderPath = m_SourceFolderPathQC + tpObj.Job_ID;
                            if (File.Exists(folderPath + zipFileName))
                            {
                                File.Delete(folderPath + zipFileName);
                            }
                            if (!File.Exists(folderPath + zipFileName))
                            {
                                using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                {
                                    string folderpPath = m_SourceFolderPathQC + "\\" + tpObj.guidPath + "//" + tpObj.Job_ID;

                                    //add directory, give it a name
                                    zip.AddDirectory(folderpPath);
                                    zip.Save(folderpPath + zipFileName);
                                }
                            }
                            result = tpObj.Job_ID + zipFileName;
                        }
                        if (result.Equals(""))
                            result = "No data available";
                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }
        private string GenerateConsolidatedPJobDetails(RegOpsQC tpObj)
        {
            string result = "";
            StringBuilder sb = null;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        var temp = tpObj.ISAttachPREDICTTemplate;
                        string attachPredict = string.Empty;
                        string validationPlan = string.Empty;
                        string WordTemplateName = string.Empty;
                        WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
                        validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();
                        OracleDataAdapter da;
                        string query = string.Empty;
                        if (tpObj.ByType == "By Check")
                        {
                            query = "select b.ATTACH_WORD_TEMPLATE, mlib.LIBRARY_VALUE as Country,sty.TEMPLATE_NAME, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed, b.JOB_ID,b.JOB_TITLE,b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_TYPE,b.JOB_DESCRIPTION,rp.PROJECT_ID,rp.PROJECT_TITLE,c.LIBRARY_VALUE as Validation,c.COMPOSITE_CHECK,a.PARENT_CHECK_ID,a.QC_RESULT,a.COMMENTS,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,a.FILE_NAME,a.FOLDER_NAME,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,b.NO_OF_FILES,b.NO_OF_PAGES,(select Count(distinct File_Name)  from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) AS FILE_COUNT,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
                               "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                               "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
                               "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
                                " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                               " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER";
                        }
                        else
                        {
                            query = "select b.ATTACH_WORD_TEMPLATE, mlib.LIBRARY_VALUE as Country,sty.TEMPLATE_NAME,a.PAGE_NUMBER, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed, b.JOB_ID,b.JOB_TITLE,b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_TYPE,b.JOB_DESCRIPTION,rp.PROJECT_ID,rp.PROJECT_TITLE,c.LIBRARY_VALUE as Validation,c.COMPOSITE_CHECK,a.PARENT_CHECK_ID,a.QC_RESULT,a.COMMENTS,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,a.FILE_NAME,a.FOLDER_NAME,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,b.NO_OF_FILES,b.NO_OF_PAGES,(select Count(distinct File_Name)  from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID) AS FILE_COUNT,(select Count(QC_RESULT) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
   "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
   "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
   "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID) as fixChecklist," +
    " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
   " from REGOPS_QC_PAGE_VALIDATION_DET a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,a.PAGE_NUMBER,c.CHECK_ORDER";

                        }
                        cmd = new OracleCommand(query, con1);
                        cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                        cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                        tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                        TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                        tpObj.ProcessTime = elapsed.ToString();
                        con1.Close();

                        if (conn.Validate(ds))
                        {
                            attachPredict = ds.Tables[0].Rows[0]["ATTACH_WORD_TEMPLATE"].ToString();
                            sb = new StringBuilder();
                            sb.AppendLine("<html>");
                            sb.AppendLine("<head>");
                            sb.AppendLine("<title style='align='center'>");
                            sb.AppendLine("Page-");
                            sb.AppendLine(Guid.NewGuid().ToString());
                            sb.AppendLine("</title>");
                            sb.AppendLine("</head>");
                            sb.AppendLine("<body>");
                            sb.AppendLine("<div class='WordSection1'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Report</u></b></p>");
                            sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                            sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<tbody><tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine("</tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Type</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TYPE"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                            if (temp == "1")
                            {
                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Word Template (styles)</span></p>");
                                sb.AppendLine(" </td>");

                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + WordTemplateName + "</span></p>");

                                sb.AppendLine(" </td>");

                                sb.AppendLine(" </tr>");
                            }
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project Title</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");


                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                            if (tpObj.Job_Type != "Publishing")
                            {
                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");
                                //Passed Checklists
                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");
                                //failed Checklists
                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");

                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");
                            }
                            else
                            {
                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Rules Executed</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");
                                //Passed Checklists
                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Rules</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");
                                //failed Checklists
                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Rules</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");

                                sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Rules</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                                sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" </tr>");
                            }
                            //Process time
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time(HH:MM:SS)</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + tpObj.ProcessTime + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            //created by
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            //created_date
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            TimeZone zone = TimeZone.CurrentTimeZone;
                            string standard = string.Concat(System.Text.RegularExpressions.Regex
                              .Matches(zone.StandardName, "[A-Z]")
                              .OfType<System.Text.RegularExpressions.Match>()
                              .Select(match => match.Value));
                            if (standard == "CUT")
                                standard = "UTC";

                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp; " + standard + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine("</tbody></table>");
                            sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                            sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                            sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<thead>");
                            sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            if (tpObj.ByType == "By Page")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Page Number");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (tpObj.Job_Type != "Publishing")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");

                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine("</tr>");

                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                if (!(ds.Tables[0].Rows[i]["PARENT_CHECK_ID"].ToString() == "" && ds.Tables[0].Rows[i]["COMPOSITE_CHECK"].ToString() == "0"))
                                {
                                    string checkParameter = string.Empty;
                                    if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                                        checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                                    else
                                        checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                                    string sev_level = "";
                                    string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                                    string color = "black";
                                    string bg_color = "white";
                                    string fixedbg_color = "white";
                                    if (qcStatus.ToLower().Equals("failed"))
                                    {
                                        bg_color = "#f77676c2";
                                    }
                                    else if (qcStatus.ToLower().Equals("error"))
                                    {
                                        bg_color = "#cceeff";
                                    }
                                    if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                                    {
                                        fixedbg_color = "#66ff66";
                                    }
                                    if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                                    {
                                        sev_level = "High";
                                    }
                                    else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                                    {
                                        sev_level = "Medium";
                                    }
                                    else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                                    {
                                        sev_level = "Low";
                                    }
                                    else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                                    {
                                        sev_level = "Warning";
                                    }
                                    else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                                    {
                                        sev_level = "NA";
                                    }
                                    string validation = "";
                                    if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                                        validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                                    else
                                        validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();

                                    sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                    {
                                        if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                        }

                                    }
                                    else
                                    {
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    }

                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    if (tpObj.ByType == "By Page")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        {
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                        }
                                        sb.AppendLine(" </td>");
                                    }
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + validation + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + "</span></p>");
                                    sb.AppendLine(" </td>");


                                    if (bg_color.Contains("#"))
                                    {
                                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                        {
                                            var color12 = HexToColor(bg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    if (sev_level != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:" + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + "'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");

                                    if (fixedbg_color.Contains("#"))
                                    {
                                        var color12 = HexToColor(fixedbg_color);
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["Fixed"].ToString() + "</span></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                    sb.AppendLine("</td>");
                                    sb.AppendLine("</tr>");
                                }
                            }
                            sb.AppendLine("</td>");
                            sb.AppendLine("</tr>");
                            sb.AppendLine("</thead>");
                            sb.AppendLine("</table>");
                            sb.AppendLine("</div>");
                            sb.AppendLine("</body>");
                            sb.AppendLine("</html>");
                            sb.AppendLine("</table>");
                            tpObj.File_Name = tpObj.Job_ID;
                        }

                        if (sb != null)
                        {
                            if (!sb.ToString().Equals(""))
                            {
                                Connection conOrg = new Connection();
                                conOrg.connectionstring = m_Conn;
                                DataSet dsetLimits = new DataSet();
                                dsetLimits = conOrg.GetDataSet("SELECT PREFIX_FILENAME FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + tpObj.ORGANIZATION_ID, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(dsetLimits))
                                {
                                    if (dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString() != "")
                                    {
                                        tpObj.Prefix_FileName = Convert.ToInt32(dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString());
                                    }
                                }

                                Guid guid;
                                guid = Guid.NewGuid();
                                tpObj.guidPath = guid.ToString();

                                DataSet templateDS = new DataSet();
                                // templateDS = conn.GetDataSet("SELECT TEMPLATE_NAME FROM REGOPS_WORD_STYLES_METADATA rwsm left join REGOPS_QC_PREFERENCES rqp on rqp.word_template_id=rwsm.template_id left join REGOPS_JOB_PLANS rjp on rjp.PREFERENCE_ID = rqp.id where rjp.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                                templateDS = conn.GetDataSet("SELECT rwsm.TEMPLATE_NAME FROM REGOPS_QC_JOBS a left join REGOPS_JOB_PLANS rjp on rjp.job_id =a.id left join REGOPS_QC_PREFERENCES rqp on rqp.id =rjp.PREFERENCE_ID left join REGOPS_WORD_STYLES_METADATA rwsm  on rwsm.template_id = rqp.word_template_id and a.attach_word_template = 1 where rjp.job_id = " + tpObj.ID, CommandType.Text, ConnectionState.Open);
                                if (conn.Validate(templateDS))
                                {
                                    for (int j = 0; j < templateDS.Tables[0].Rows.Count; j++)
                                    {
                                        if (templateDS.Tables[0].Rows[j]["TEMPLATE_NAME"].ToString() != null && templateDS.Tables[0].Rows[j]["TEMPLATE_NAME"].ToString() != "")
                                        {
                                            tpObj.Template_Name = templateDS.Tables[0].Rows[j]["TEMPLATE_NAME"].ToString();
                                        }

                                        DataSet dset = new DataSet();
                                        byte[] TemplateData = null;
                                        string extension = string.Empty;

                                        dset = conn.GetDataSet("SELECT d.FILE_NAME as SourceFileName,d.FILE_CONTENT as SourceContent,d1.FILE_NAME as OutputFileName,d1.FILE_CONTENT as OutputContent,d2.FILE_NAME as TemplateFileName,d2.FILE_CONTENT as TemplateContent FROM DCM_FILES d right join regops_job_files rj on rj.dcm_input_file_id=d.file_id left join DCM_FILES d1 on d1.file_id=rj.dcm_output_file_id left join DCM_FILES d2 on d2.file_id=rj.dcm_template_file_id WHERE rj.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                                        if (conn.Validate(dset))
                                        {


                                            for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                                            {
                                                byte[] SourceData = null;
                                                byte[] OutputData = null;
                                                TemplateData = null;
                                                //tpObj.File_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                                //tpObj.File_Upload_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                                tpObj.Source_File_Name = dset.Tables[0].Rows[i]["SOURCEFILENAME"].ToString();
                                                tpObj.Output_File_Name = dset.Tables[0].Rows[i]["OUTPUTFILENAME"].ToString();
                                                tpObj.Template_File_Name = dset.Tables[0].Rows[i]["TEMPLATEFILENAME"].ToString();

                                                if (dset.Tables[0].Rows[i]["SOURCECONTENT"].ToString() != null && dset.Tables[0].Rows[i]["SOURCECONTENT"].ToString() != "")
                                                {
                                                    SourceData = (byte[])dset.Tables[0].Rows[i]["SOURCECONTENT"];
                                                }
                                                if (dset.Tables[0].Rows[i]["OUTPUTCONTENT"].ToString() != null && dset.Tables[0].Rows[i]["OUTPUTCONTENT"].ToString() != "")
                                                {
                                                    OutputData = (byte[])dset.Tables[0].Rows[i]["OUTPUTCONTENT"];
                                                }
                                                if (dset.Tables[0].Rows[i]["TEMPLATECONTENT"].ToString() != null && dset.Tables[0].Rows[i]["TEMPLATECONTENT"].ToString() != "")
                                                {
                                                    TemplateData = (byte[])dset.Tables[0].Rows[i]["TEMPLATECONTENT"];
                                                }
                                                string deleteFilePath = string.Empty;
                                                if (tpObj.Source_File_Name != null && tpObj.Source_File_Name != "")
                                                {
                                                    var s = Regex.Replace(tpObj.Source_File_Name, @"""", "").Trim().ToString();
                                                    extension = Path.GetExtension(s);
                                                    tpObj.File_Name = s;
                                                }
                                                else
                                                {
                                                    var s = Regex.Replace(tpObj.Output_File_Name, @"""", "").Trim().ToString();
                                                    extension = Path.GetExtension(s);
                                                    tpObj.File_Name = s;
                                                }
                                                if (extension != null && extension != "" && tpObj.File_Name != "" && tpObj.File_Name != null)
                                                {
                                                    if (extension != ".zip")
                                                    {
                                                        SaveFileinFolderForDownload(tpObj, SourceData, OutputData, TemplateData, extension);
                                                    }
                                                    else
                                                    {
                                                        SaveUnzippedFilesForDownload(tpObj, SourceData, OutputData, TemplateData, extension);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    DataSet dset = new DataSet();
                                    string extension = string.Empty;

                                    dset = conn.GetDataSet("SELECT d.FILE_NAME as SourceFileName,d.FILE_CONTENT as SourceContent,d1.FILE_NAME as OutputFileName,d1.FILE_CONTENT as OutputContent FROM DCM_FILES d right join regops_job_files rj on rj.dcm_input_file_id=d.file_id left join DCM_FILES d1 on d1.file_id=rj.dcm_output_file_id WHERE rj.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);
                                    if (conn.Validate(dset))
                                    {


                                        for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                                        {
                                            byte[] SourceData = null;
                                            byte[] OutputData = null;

                                            //tpObj.File_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                            //tpObj.File_Upload_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                            tpObj.Source_File_Name = dset.Tables[0].Rows[i]["SOURCEFILENAME"].ToString();
                                            tpObj.Output_File_Name = dset.Tables[0].Rows[i]["OUTPUTFILENAME"].ToString();

                                            if (dset.Tables[0].Rows[i]["SOURCECONTENT"].ToString() != null && dset.Tables[0].Rows[i]["SOURCECONTENT"].ToString() != "")
                                            {
                                                SourceData = (byte[])dset.Tables[0].Rows[i]["SOURCECONTENT"];
                                            }
                                            if (dset.Tables[0].Rows[i]["OUTPUTCONTENT"].ToString() != null && dset.Tables[0].Rows[i]["OUTPUTCONTENT"].ToString() != "")
                                            {
                                                OutputData = (byte[])dset.Tables[0].Rows[i]["OUTPUTCONTENT"];
                                            }
                                            string deleteFilePath = string.Empty;

                                            if (tpObj.Source_File_Name != null && tpObj.Source_File_Name != "")
                                            {
                                                var s = Regex.Replace(tpObj.Source_File_Name, @"""", "").Trim().ToString();
                                                extension = Path.GetExtension(s);
                                                tpObj.File_Name = s;
                                            }
                                            else
                                            {
                                                var s = Regex.Replace(tpObj.Output_File_Name, @"""", "").Trim().ToString();
                                                extension = Path.GetExtension(s);
                                                tpObj.File_Name = s;
                                            }
                                            if (extension != null && extension != "" && tpObj.File_Name != "" && tpObj.File_Name != null)
                                            {
                                                if (extension != ".zip")
                                                {
                                                    SaveFileinFolderForDownloadNoTemplate(tpObj, SourceData, OutputData, extension);
                                                }
                                                else
                                                {
                                                    SaveUnzippedFilesForDownloadNoTemplate(tpObj, SourceData, OutputData, extension);
                                                }
                                            }
                                        }
                                    }
                                }

                                string filename = Path.GetFileNameWithoutExtension(tpObj.File_Name);
                                string destPath = m_SourceFolderPathQC + "\\" + tpObj.guidPath + "\\" + tpObj.Job_ID + "/" + tpObj.Job_ID;
                                string dirPath = m_SourceFolderPathQC + "\\" + tpObj.guidPath + "\\" + tpObj.Job_ID + "";
                                string templatePath = WordPredictTemplate;

                                if (Directory.Exists(dirPath))
                                {
                                    if (System.IO.Directory.Exists(dirPath))
                                    {
                                        string[] files = System.IO.Directory.GetFiles(dirPath);

                                        // Copy the files and overwrite destination files if they already exist.
                                        foreach (string s in files)
                                        {
                                            FileInfo f = new FileInfo(s);
                                            if (f.Extension.Contains(".html"))
                                                File.Delete(s);
                                        }
                                    }
                                    //Directory.Delete(dirPath);
                                }
                                if (!Directory.Exists(dirPath))
                                {
                                    Directory.CreateDirectory(dirPath);
                                }

                                File.WriteAllText(destPath + ".html", sb.ToString(), Encoding.UTF8);
                            }
                        }
                        string guId = Guid.NewGuid().ToString();
                        string desPath = m_DownloadFolderPathQC;
                        string zipFileName = string.Empty;
                        if (tpObj.ByType == "By Check")
                            zipFileName = "_Consolidate_By Check.zip";
                        else
                            zipFileName = "_Consolidate_By Page.zip";

                        string folderPath = m_SourceFolderPathQC + "//" + tpObj.Job_ID;
                        if (File.Exists(folderPath + zipFileName))
                        {
                            File.Delete(folderPath + zipFileName);
                        }

                        if (!File.Exists(folderPath + zipFileName))
                        {
                            using (ZipFile zip = new ZipFile(Encoding.UTF8))
                            {
                                string folderpPath = m_SourceFolderPathQC + "\\" + tpObj.guidPath + "//" + tpObj.Job_ID;
                                //add directory, give it a name

                                zip.AddDirectory(folderpPath);
                                // zip.AddFile(filepath1);
                                zip.Save(folderpPath + zipFileName);
                            }
                        }
                        result = tpObj.Job_ID + zipFileName;
                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }
        private string GenerateConsolidatedJobDetails(RegOpsQC tpObj)
        {
            string result = "";
            StringBuilder sb = null;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();

                        ds = conn.GetDataSet("select qcpref.PREFERENCE_NAME, b.JOB_ID,b.JOB_TITLE,b.PROJECT_ID,c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID = " + tpObj.ID + ") as USERNAME,a.FILE_NAME,a.FOLDER_NAME,b.CREATED_DATE,b.NO_OF_FILES,b.NO_OF_PAGES,(select Count(distinct File_Name)  from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =" + tpObj.ID + ") AS FILE_COUNT,(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID + ") as TOTALCHECKLIST," +
                           "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                           "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%failed%') as failChecklist," +
                           "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%fixed%') as fixChecklist," +
                            " d.QC_TYPE,extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                           " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join REGOPS_QC_PREFERENCES qcpref on qcpref.ID = b.PREFERENCE_ID left join REGOPS_QC_JOBS_CHECKLIST d on a.JOB_ID = d.JOB_ID and a.CHECKLIST_ID=d.CHECKLIST_ID left join Library lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID where a.JOB_ID=" + tpObj.ID + " order by a.FILE_NAME", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            sb = new StringBuilder();
                            sb.AppendLine("<html>");
                            sb.AppendLine("<head>");
                            sb.AppendLine("<title style='align='center'>");
                            sb.AppendLine("Page-");
                            sb.AppendLine(Guid.NewGuid().ToString());
                            sb.AppendLine("</title>");
                            sb.AppendLine("</head>");
                            sb.AppendLine("<body>");
                            sb.AppendLine("<div class='WordSection1'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Report</u></b></p>");
                            sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                            sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("style='width:481.0pt;margin-left:30.2pt;border-collapse:collapse;mso-yfti-tbllook:");
                            //sb.AppendLine("1184;mso-padding-alt:0in 0in 0in 0in'>");
                            sb.AppendLine("<tbody><tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine(" border-left:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine("</tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");


                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>No. of Files</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>No. of Pages</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total No. of Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                            //Passed Checklists
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                            //failed Checklists
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");


                            //Process time
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROCESSTIME"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            //created by
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            //created_date
                            sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                            //sb.AppendLine("padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            TimeZone zone = TimeZone.CurrentTimeZone;
                            string standard = zone.StandardName;
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp; " + standard + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                            sb.AppendLine("</tbody></table>");
                            sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                            sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                            sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("style='width:581.4pt;margin-left:30.2pt;border-collapse:collapse;mso-yfti-tbllook:");
                            //sb.AppendLine("1184;mso-padding-alt:0in 0in 0in 0in'>");
                            sb.AppendLine("<thead>");
                            sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Folder");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("border-left:none;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            //sb.AppendLine("none;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine("</tr>");

                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                                string color = "black";
                                string bg_color = "white";
                                string type = "0";
                                type = ds.Tables[0].Rows[i]["QC_TYPE"].ToString();

                                if (qcStatus == "Fixed")
                                {
                                    // bg_color = "#5DE988";
                                    //bg_color = "#E8E866";
                                    bg_color = "#caebff";
                                }
                                else if (qcStatus == "Failed")
                                {
                                    //bg_color = "#f1b2b2";
                                    bg_color = "#f77676c2";
                                }
                                else
                                {
                                    bg_color = "White";
                                }
                                type = ds.Tables[0].Rows[i]["QC_TYPE"].ToString();
                                if (type.Equals("1"))
                                {
                                    // bg_color = "#5DE988";
                                    bg_color = "#f77676c2";
                                    color = "black";
                                }
                                else if (qcStatus.ToLower().Equals("pass"))
                                {
                                    color = "black";
                                }
                                else if (qcStatus.ToLower().Equals("failed"))
                                {
                                    //bg_color = "#E8E866";
                                    color = "black";
                                }
                                string validation = "";
                                if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                                    validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                                else
                                    validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();

                                sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                                sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + validation + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                //sb.AppendLine(" none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                //sb.AppendLine(" padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                sb.AppendLine(" </td>");
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                //sb.AppendLine("none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                //sb.AppendLine("htmlBuilder.Append('padding: 0in 5.4pt 0in 5.4pt; height: 15.0pt'>");
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                sb.AppendLine("</td>");
                                sb.AppendLine("</tr>");
                            }
                            sb.AppendLine("</td>");
                            sb.AppendLine("</tr>");
                            sb.AppendLine("</thead>");
                            sb.AppendLine("</table>");
                            //sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                            sb.AppendLine("</div>");
                            sb.AppendLine("</body>");
                            sb.AppendLine("</html>");
                            sb.AppendLine("</table>");
                            tpObj.File_Name = tpObj.Job_ID;
                        }

                        if (!sb.ToString().Equals(""))
                        {
                            string destPath = m_SourceFolderPathQC + tpObj.Job_ID + "/" + tpObj.File_Name; //System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/") + tpObj.Job_ID + "/" + tpObj.File_Name;
                            string dirPath = m_SourceFolderPathQC + tpObj.Job_ID; //System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/") + tpObj.Job_ID;
                            if (Directory.Exists(dirPath))
                            {
                                if (System.IO.Directory.Exists(dirPath))
                                {
                                    string[] files = System.IO.Directory.GetFiles(dirPath);

                                    // Copy the files and overwrite destination files if they already exist.
                                    foreach (string s in files)
                                    {
                                        FileInfo f = new FileInfo(s);
                                        if (f.Extension.Contains(".html"))
                                            File.Delete(s);
                                    }
                                }
                                //Directory.Delete(dirPath);
                            }
                            if (!Directory.Exists(dirPath))
                            {
                                Directory.CreateDirectory(dirPath);
                            }
                            File.WriteAllText(destPath + ".html", sb.ToString(), Encoding.UTF8);
                        }

                        string guId = Guid.NewGuid().ToString();
                        string desPath = m_DownloadFolderPathQC;

                        string folderPath = m_SourceFolderPathQC + tpObj.Job_ID;

                        if (!File.Exists(folderPath + "_Consolidate.zip"))
                        {
                            using (ZipFile zip = new ZipFile(Encoding.UTF8))
                            {
                                //add directory, give it a name
                                zip.AddDirectory(folderPath);
                                zip.Save(folderPath + "_Consolidate" + ".zip");
                            }
                        }
                        result = tpObj.Job_ID + "_Consolidate" + ".zip";

                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }
        public string DownloadUpdatedFiles(RegOpsQC tpObj)
        {
            string result = "";
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        string desPath = string.Empty;
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        Guid mainId;
                        mainId = Guid.NewGuid();
                        string folderPath = m_SourceFolderPathQC + tpObj.Job_ID + "/Destination/";
                        desPath = m_DownloadFolderPathQC + tpObj.Job_ID;
                        string sourcePath = folderPath;
                        string fileName = string.Empty;
                        string destFile = string.Empty;
                        if (Directory.Exists(folderPath))
                        {
                            var filesCount = Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories).Length;
                            if (filesCount > 0)
                            {
                                string[] files = Directory.GetFiles(folderPath);
                                string[] folders = Directory.GetDirectories(folderPath);
                                desPath = folderPath.TrimEnd('\\');
                                if (files.Count() > 1)
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else if (files.Count() >= 0 && desPath != "" && folders.Count() > 0)
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else
                                {
                                    FileInfo fi = new FileInfo(files[0]);
                                    result = tpObj.Job_ID + "/Destination/" + fi.Name;
                                }
                            }
                            return result;
                        }
                        {
                            return "FileNotExists";
                        }

                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }

        public string DownloadPUpdatedFiles(RegOpsQC tpObj)
        {
            string result = "";
            Guid guid;
            guid = Guid.NewGuid();
            tpObj.guidPath = guid.ToString();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        string desPath = string.Empty;
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        Guid mainId;
                        Connection conOrg = new Connection();
                        conOrg.connectionstring = m_Conn;
                        DataSet dsetLimits = new DataSet();
                        dsetLimits = conOrg.GetDataSet("SELECT PREFIX_FILENAME FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + tpObj.ORGANIZATION_ID, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsetLimits))
                        {
                            if (dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString() != "")
                            {
                                tpObj.Prefix_FileName = Convert.ToInt32(dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString());
                            }
                        }
                        mainId = Guid.NewGuid();
                        byte[] OutputData = null;
                        DataSet dset = new DataSet();
                        dset = conn.GetDataSet("SELECT d.FILE_NAME,d.FILE_TYPE,d.FILE_CONTENT as OutputContent FROM DCM_FILES d left join regops_job_files rj on rj.dcm_output_file_id=d.file_id WHERE rj.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);

                        if (conn.Validate(dset))
                        {
                            for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                            {
                                tpObj.File_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                tpObj.File_Type = dset.Tables[0].Rows[i]["FILE_TYPE"].ToString();
                                if (dset.Tables[0].Rows[i]["OUTPUTCONTENT"].ToString() != null && dset.Tables[0].Rows[i]["OUTPUTCONTENT"].ToString() != "")
                                {
                                    OutputData = (byte[])dset.Tables[0].Rows[i]["OUTPUTCONTENT"];
                                }

                                var s = Regex.Replace(tpObj.File_Name, @"""", "").Trim().ToString();
                                string extension = Path.GetExtension(s);
                                if (extension == ".zip")
                                {
                                    string path = tpObj.File_Name;
                                    string filePath;
                                    string SourceFolder = string.Empty;
                                    string SourceFolder1 = string.Empty;
                                    string folderPath1 = m_SourceFolderPathQC;
                                    Directory.CreateDirectory(folderPath1 + tpObj.guidPath + "\\" + tpObj.Job_ID);
                                    if (System.IO.Directory.Exists(folderPath1))
                                    {
                                        SourceFolder1 = folderPath1 + tpObj.guidPath + "\\" + tpObj.Job_ID + "\\Output";
                                        if (Directory.Exists(SourceFolder1))
                                        {
                                            Directory.Delete(SourceFolder1, true);
                                        }
                                        Directory.CreateDirectory(SourceFolder1);

                                    }
                                    filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + tpObj.File_Name;
                                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                                    {
                                        fs.Write(OutputData, 0, OutputData.Length);
                                    }
                                    filePath = ReadXMLandPrepareCopy(filePath);
                                    string extractPath = filePath;
                                    string[] files = Directory.GetFiles(extractPath);
                                    HttpContext.Current.Session["Prefix"] = tpObj.Prefix_FileName;
                                    for (int j = 0; j < files.Count(); j++)
                                    {
                                        if (File.Exists(files[j]))
                                        {

                                            ProcessFile1(files[j], SourceFolder1);
                                        }
                                    }
                                    string[] folders = Directory.GetDirectories(extractPath);
                                    for (int j = 0; j < folders.Count(); j++)
                                    {
                                        if (Directory.Exists(extractPath))
                                        {
                                            ProcessDirectory1(folders[j], SourceFolder1);
                                        }
                                    }
                                    FileInfo file = new FileInfo(path);
                                    if (file.Exists)
                                    {
                                        System.GC.Collect();
                                        System.GC.WaitForPendingFinalizers();
                                        File.Delete(path);
                                    }
                                    if (Directory.Exists(filePath))
                                    {
                                        foreach (string file1 in Directory.GetFiles(filePath))
                                        {
                                            File.Delete(file1);
                                        }
                                        foreach (string subfolder in Directory.GetDirectories(filePath))
                                        {
                                            RemoveDirectories(subfolder);
                                        }
                                        Directory.Delete(filePath);
                                    }

                                }
                                else
                                {
                                    string folderPath11 = m_SourceFolderPathQC + tpObj.guidPath + "\\" + tpObj.Job_ID + "/Output/";
                                    if (!Directory.Exists(folderPath11))
                                    {
                                        //Directory.Delete(folderPath11, true);
                                        Directory.CreateDirectory(folderPath11);
                                    }
                                    FileInfo file = new FileInfo(tpObj.File_Name);
                                    if (file.Exists)//check file exsit or not
                                    {
                                        File.Delete(tpObj.File_Name);
                                    }
                                    if (tpObj.Prefix_FileName == 1)
                                    {
                                        tpObj.File_Name = "Output_" + tpObj.File_Name;
                                    }
                                    // Directory.CreateDirectory(folderPath11);
                                    using (FileStream fs = new FileStream(folderPath11 + "\\" + tpObj.File_Name, FileMode.Create))
                                    {
                                        fs.Write(OutputData, 0, OutputData.Length);

                                    }
                                }
                            }
                        }

                        string folderPath = m_SourceFolderPathQC + tpObj.guidPath + "\\" + tpObj.Job_ID + "/Output/";
                        desPath = m_DownloadFolderPathQC + tpObj.Job_ID;
                        string sourcePath = folderPath;
                        string fileName = string.Empty;
                        string destFile = string.Empty;
                        if (Directory.Exists(folderPath))
                        {
                            var filesCount = Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories).Length;
                            //string[] files = Directory.GetFiles(folderPath);
                            //var filesCount = files.Length;
                            if (filesCount > 0)
                            {
                                string[] files = Directory.GetFiles(folderPath);
                                string[] folders = Directory.GetDirectories(folderPath);
                                desPath = folderPath.TrimEnd('\\');
                                if (files.Count() > 1)
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else if ((files.Count() == 0 && desPath != "") && (files.Count() > 0))
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else if ((files.Count() == 0 && desPath != "" && folders.Count() > 0) || (folders.Count() > 0 && files.Count() > 0))
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else
                                {
                                    FileInfo fi = new FileInfo(files[0]);
                                    result = tpObj.Job_ID + "/Output/" + fi.Name;
                                }
                            }
                            return result;
                        }
                        {
                            return "FileNotExists";
                        }

                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }

        /// <summary>
        /// method to get Updated Source Files
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public string DownloadUpdatedSourceFiles(RegOpsQC tpObj)
        {
            string result = "";
            Guid guid;
            guid = Guid.NewGuid();
            tpObj.guidPath = guid.ToString();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        string desPath = string.Empty;
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        Guid mainId;
                        mainId = Guid.NewGuid();
                        byte[] SourceData = null;
                        DataSet dset = new DataSet();
                        dset = conn.GetDataSet("SELECT d.FILE_NAME,d.FILE_TYPE,d.FILE_CONTENT as SourceContent FROM DCM_FILES d left join regops_job_files rj on rj.dcm_input_file_id=d.file_id WHERE rj.job_id=" + tpObj.ID, CommandType.Text, ConnectionState.Open);

                        if (conn.Validate(dset))
                        {
                            for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                            {
                                tpObj.File_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                tpObj.File_Type = dset.Tables[0].Rows[i]["FILE_TYPE"].ToString();
                                if (dset.Tables[0].Rows[i]["SOURCECONTENT"].ToString() != null && dset.Tables[0].Rows[i]["SOURCECONTENT"].ToString() != "")
                                {
                                    SourceData = (byte[])dset.Tables[0].Rows[i]["SOURCECONTENT"];
                                }

                                var s = Regex.Replace(tpObj.File_Name, @"""", "").Trim().ToString();
                                string extension = Path.GetExtension(s);
                                if (extension == ".zip")
                                {
                                    string path = tpObj.File_Name;
                                    string filePath;
                                    string SourceFolder = string.Empty;
                                    string SourceFolder1 = string.Empty;
                                    string folderPath1 = m_SourceFolderPathQC;
                                    Directory.CreateDirectory(folderPath1 + tpObj.guidPath + "\\" + tpObj.Job_ID);
                                    if (System.IO.Directory.Exists(folderPath1))
                                    {
                                        SourceFolder1 = folderPath1 + tpObj.guidPath + "\\" + tpObj.Job_ID + "\\Source";
                                        if (Directory.Exists(SourceFolder1))
                                        {
                                            Directory.Delete(SourceFolder1, true);
                                        }
                                        Directory.CreateDirectory(SourceFolder1);

                                    }
                                    filePath = m_SourceFolderPathExternal + "\\ZipExtracts\\" + tpObj.File_Name;
                                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                                    {
                                        fs.Write(SourceData, 0, SourceData.Length);
                                    }
                                    filePath = ReadXMLandPrepareCopy(filePath);
                                    string extractPath = filePath;
                                    string[] files = Directory.GetFiles(extractPath);
                                    HttpContext.Current.Session["Prefix"] = tpObj.Prefix_FileName;
                                    for (int j = 0; j < files.Count(); j++)
                                    {
                                        if (File.Exists(files[j]))
                                        {

                                            ProcessSourceFile(files[j], SourceFolder1);
                                        }
                                    }
                                    string[] folders = Directory.GetDirectories(extractPath);
                                    for (int j = 0; j < folders.Count(); j++)
                                    {
                                        if (Directory.Exists(extractPath))
                                        {
                                            ProcessSourceDirectory(folders[j], SourceFolder1);
                                        }
                                    }
                                    FileInfo file = new FileInfo(path);
                                    if (file.Exists)
                                    {
                                        System.GC.Collect();
                                        System.GC.WaitForPendingFinalizers();
                                        File.Delete(path);
                                    }
                                    if (Directory.Exists(filePath))
                                    {
                                        foreach (string file1 in Directory.GetFiles(filePath))
                                        {
                                            File.Delete(file1);
                                        }
                                        foreach (string subfolder in Directory.GetDirectories(filePath))
                                        {
                                            RemoveDirectories(subfolder);
                                        }
                                        Directory.Delete(filePath);
                                    }

                                }
                                else
                                {
                                    string folderPath11 = m_SourceFolderPathQC + tpObj.guidPath + "\\" + tpObj.Job_ID + "/Source/";
                                    if (!Directory.Exists(folderPath11))
                                    {
                                        //Directory.Delete(folderPath11, true);
                                        Directory.CreateDirectory(folderPath11);
                                    }
                                    FileInfo file = new FileInfo(tpObj.File_Name);
                                    if (file.Exists)//check file exsit or not
                                    {
                                        File.Delete(tpObj.File_Name);
                                    }
                                    // Directory.CreateDirectory(folderPath11);
                                    using (FileStream fs = new FileStream(folderPath11 + "\\" + tpObj.File_Name, FileMode.Create))
                                    {
                                        fs.Write(SourceData, 0, SourceData.Length);

                                    }
                                }
                            }
                        }

                        string folderPath = m_SourceFolderPathQC + tpObj.guidPath + "\\" + tpObj.Job_ID + "/Source/";
                        desPath = m_DownloadFolderPathQC + tpObj.Job_ID;
                        string sourcePath = folderPath;
                        string fileName = string.Empty;
                        string destFile = string.Empty;
                        if (Directory.Exists(folderPath))
                        {
                            var filesCount = Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories).Length;
                            //string[] files = Directory.GetFiles(folderPath);
                            //var filesCount = files.Length;
                            if (filesCount > 0)
                            {
                                string[] files = Directory.GetFiles(folderPath);
                                string[] folders = Directory.GetDirectories(folderPath);
                                desPath = folderPath.TrimEnd('\\');
                                if (files.Count() > 1)
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else if ((files.Count() == 0 && desPath != "") && (files.Count() > 0))
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else if ((files.Count() == 0 && desPath != "" && folders.Count() > 0) || (folders.Count() > 0 && files.Count() > 0))
                                {
                                    if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                                    {
                                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                        {
                                            //add directory, give it a name
                                            zip.AddDirectory(desPath);
                                            zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                        }
                                    }
                                    result = tpObj.Job_ID + "_Updated" + ".zip";
                                }
                                else
                                {
                                    FileInfo fi = new FileInfo(files[0]);
                                    result = tpObj.Job_ID + "/Source/" + fi.Name;
                                }
                            }
                            return result;
                        }
                        {
                            return "FileNotExists";
                        }

                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }

        /// <summary>
        /// method to get job plan names
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public string GetJobValidationPlan(Int64 createdId, Int64 jobId)
        {
            string validationPlan = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(createdId).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                OracleDataAdapter da;
                string query = string.Empty;
                query = "select replace(WM_CONCAT(PREFERENCE_NAME),',',', ') as ValidationPlan from (select distinct A.PREFERENCE_NAME,B.plan_order from REGOPS_QC_PREFERENCES A,";
                query += "  REGOPS_JOB_PLANS B where A.ID = B.PREFERENCE_ID and B.JOB_ID =:JOB_ID order by  B.plan_order)";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", jobId));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);

                if (con.Validate(ds))
                {
                    validationPlan = ds.Tables[0].Rows[0]["ValidationPlan"].ToString();
                }
                return validationPlan;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }

        }
        public string GetWordTemplateNames(Int64 createdId, Int64 jobId)
        {
            string WordTemplateName = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(createdId).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                OracleDataAdapter da;
                string query = string.Empty;
                query = "Select  replace(WM_CONCAT(TEMPLATE_NAME),',',', ') as TemplateName from (select distinct A.TEMPLATE_NAME from REGOPS_WORD_STYLES_METADATA A,";
                query += " REGOPS_QC_PREFERENCES B,REGOPS_JOB_PLANS C where A.TEMPLATE_ID = B.WORD_TEMPLATE_ID and C.PREFERENCE_ID=B.ID and C.JOB_ID =:JOB_ID)";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", jobId));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);

                if (con.Validate(ds))
                {
                    WordTemplateName = ds.Tables[0].Rows[0]["TemplateName"].ToString();
                }
                return WordTemplateName;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }

        }
        public string[] GenerateValidationReportManageHtml(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            Connection conn = new Connection();
            string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            DataSet ds = new DataSet();
            string validationPlan = string.Empty;
            string WordTemplateName = string.Empty;
            validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
            WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
            var temp = tpObj.ISAttachPREDICTTemplate;
            OracleConnection con1 = new OracleConnection();
            con1.ConnectionString = m_DummyConn;
            OracleCommand cmd = new OracleCommand();
            con1.Open();
            OracleDataAdapter da;
            string query = string.Empty;
            string[] resdata = null;
            try
            {

                query = " select mlib.Library_Value as Country,TEMPLATE_NAME, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID,rp.PROJECT_TITLE, b.JOB_ID,b.JOB_TITLE,b.JOB_TYPE,b.JOB_DESCRIPTION, b.JOB_START_TIME,b.JOB_END_TIME,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,c.COMPOSITE_CHECK,a.PARENT_CHECK_ID,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
                "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
                " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.WORD_TEMPLATE_ID and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                tpObj.ProcessTime = elapsed.ToString();
                con1.Close();

                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<head>");
                    sb.AppendLine("<title style='align='center'>");
                    sb.AppendLine("Page-");
                    sb.AppendLine(Guid.NewGuid().ToString());
                    sb.AppendLine("</title>");
                    sb.AppendLine("</head>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<div class='WordSection1'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Analysis</u></b></p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<tbody><tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("</tr>");


                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Type</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TYPE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    if (temp == "1")
                    {
                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Word Template (styles)</span></p>");
                        sb.AppendLine(" </td>");

                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + WordTemplateName + "</span></p>");
                        sb.AppendLine(" </td>");

                        sb.AppendLine(" </tr>");
                    }
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (tpObj.Job_Type != "Publishing")
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        if (tpObj.Job_Type != "QC")
                        {
                            sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                        }
                    }
                    else
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Rules Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        if (tpObj.Job_Type != "QC")
                        {
                            sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Rules</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                        }
                    }
                    //Process Time
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time(HH:MM:SS)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + tpObj.ProcessTime + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created By
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created Date
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");

                    TimeZone zone = TimeZone.CurrentTimeZone;
                    string standard = string.Concat(System.Text.RegularExpressions.Regex
                      .Matches(zone.StandardName, "[A-Z]")
                      .OfType<System.Text.RegularExpressions.Match>()
                      .Select(match => match.Value));
                    if (standard == "CUT")
                        standard = "UTC";
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine("</tbody></table>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    if (tpObj.Job_Type != "Publishing")
                    {
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                        sb.AppendLine("</span></b></p>");
                        sb.AppendLine("</td>");
                    }
                    else
                    {
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                        sb.AppendLine("</span></b></p>");
                        sb.AppendLine("</td>");
                    }
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    if (tpObj.Job_Type != "QC")
                    {
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                        sb.AppendLine("</span></b></p>");
                        sb.AppendLine("</td>");
                    }

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine(" </td>");


                    sb.AppendLine("</tr>");

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (!(ds.Tables[0].Rows[i]["PARENT_CHECK_ID"].ToString() == "" && ds.Tables[0].Rows[i]["COMPOSITE_CHECK"].ToString() == "0"))
                        {
                            string checkParameter = string.Empty;
                            if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                            else
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                            string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                            string bg_color = "white";
                            string fixedbg_color = "white";
                            string sev_level = "";
                            string color = "black";
                            if (qcStatus.ToLower().Equals("failed"))
                            {
                                bg_color = "#f77676c2";
                            }
                            else if (qcStatus.ToLower().Equals("error"))
                            {
                                bg_color = "#cceeff";
                            }
                            if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                            {
                                fixedbg_color = "#66ff66";
                            }
                            if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                            {
                                sev_level = "High";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                            {
                                sev_level = "Medium";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                            {
                                sev_level = "Low";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                            {
                                sev_level = "Warning";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                            {
                                sev_level = "NA";
                            }
                            string Validation = "";
                            if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                            {
                                Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            else
                            {
                                Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }

                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");

                            if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                            {
                                if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                {
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                }
                                else
                                {
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                }

                            }
                            else
                            {
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                            }
                            sb.AppendLine(" </td>");

                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");


                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + Validation + "</span></p>");
                            sb.AppendLine(" </td>");

                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + "</span></p>");
                            sb.AppendLine(" </td>");
                            if (tpObj.Job_Type != "QC")
                            {
                                if (bg_color.Contains("#"))
                                {
                                    if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                    {

                                        var color12 = HexToColor(bg_color);
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                    }
                                }
                                else
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + bg_color + ";'>");
                                }

                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + bg_color + ";'>");
                            }
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                            else
                                sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                            sb.AppendLine(" </td>");

                            System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            if (sev_level != "")
                            {
                                sb.AppendLine("<div>");
                                sb.AppendLine("<div>");
                                sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                sb.AppendLine("</span>");
                                sb.AppendLine("</div>");
                                sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                sb.AppendLine("</div>");
                            }
                            else
                            {
                                sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                            }
                            sb.AppendLine(" </td>");
                            if (tpObj.Job_Type != "QC")
                            {
                                if (fixedbg_color.Contains("#"))
                                {
                                    var color12 = HexToColor(fixedbg_color);
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                }
                                else
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                                }
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["Fixed"].ToString() + "</span></p>");
                                sb.AppendLine("</td>");
                            }
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            if (ds.Tables[0].Rows[i]["COMMENTS"].ToString() != "" && ds.Tables[0].Rows[i]["COMMENTS"].ToString() != null)
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                            else
                                sb.AppendLine(" line-height:normal'><span style='font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                            sb.AppendLine(" </td>");
                        }
                        sb.AppendLine("</tr>");
                    }

                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</div>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                }

                Guid mainId;
                mainId = Guid.NewGuid();
                string desPath = m_DownloadFolderPathQC + mainId;
                Directory.CreateDirectory(desPath);
                File.WriteAllText(desPath + "\\" + tpObj.Job_ID + "-Validation Analysis.html", sb.ToString(), Encoding.UTF8);
                resdata = new string[2];
                resdata[0] = desPath;
                resdata[1] = tpObj.Job_ID + "-Validation Analysis.html";
                return resdata;
                //Directory.CreateDirectory(desPath);
                //return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string[] GenerateValidationReportHtml(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            string[] resdata = null;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                string validationPlan = string.Empty;
                validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                string WordTemplateName = string.Empty;
                WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
                var temp = tpObj.ISAttachPREDICTTemplate;
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                string query = string.Empty;
                query = " select mlib.Library_Value as Country,sty.TEMPLATE_NAME, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, rp.PROJECT_TITLE,b.JOB_ID,b.JOB_TITLE, b.JOB_TYPE,b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,c.COMPOSITE_CHECK,a.PARENT_CHECK_ID,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
                "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
                " round(extract( hour from JOB_END_TIME-JOB_START_TIME ),0)  || ':' || round(extract(minute from JOB_END_TIME-JOB_START_TIME ),0) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                tpObj.ProcessTime = elapsed.ToString();
                con1.Close();

                var Sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] ColumnFlag = Sobj.Split(',');
                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<head>");
                    sb.AppendLine("<title style='align='center'>");
                    sb.AppendLine("Page-");
                    sb.AppendLine(Guid.NewGuid().ToString());
                    sb.AppendLine("</title>");
                    sb.AppendLine("</head>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<div class='WordSection1'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Analysis</u></b></p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<tbody><tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("</tr>");


                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Type</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TYPE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (temp == "1")
                    {
                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Word Template (styles)</span></p>");
                        sb.AppendLine(" </td>");

                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + WordTemplateName + "</span></p>");
                        sb.AppendLine(" </td>");


                        sb.AppendLine(" </tr>");
                    }
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (tpObj.Job_Type != "Publishing")
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        if (tpObj.Job_Type != "QC")
                        {
                            sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                        }
                    }
                    else
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Rules Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        if (tpObj.Job_Type != "QC")
                        {
                            sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Rules</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");

                        }
                    }
                    //Process Time
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time(HH:MM:SS)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + tpObj.ProcessTime + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created By
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created Date
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    TimeZone zone = TimeZone.CurrentTimeZone;
                    string standard = string.Concat(System.Text.RegularExpressions.Regex
                      .Matches(zone.StandardName, "[A-Z]")
                      .OfType<System.Text.RegularExpressions.Match>()
                      .Select(match => match.Value));
                    if (standard == "CUT")
                        standard = "UTC";
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine("</tbody></table>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");

                    foreach (var sob in ColumnFlag)
                    {
                        if (sob == "FILE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "PREFERENCE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "PAGE_NUMBER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Page Number");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "Validation")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                        if (sob == "CHECK_PARAMETER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "QC_RESULT")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "severity_level")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (sob == "Fixed")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }

                        if (sob == "Comments")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine(" </td>");
                        }
                    }
                    sb.AppendLine("</tr>");

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (!(ds.Tables[0].Rows[i]["PARENT_CHECK_ID"].ToString() == "" && ds.Tables[0].Rows[i]["COMPOSITE_CHECK"].ToString() == "0"))
                        {
                            string checkParameter = string.Empty;
                            if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                            else
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                            string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                            string bg_color = "white";
                            string fixedbg_color = "white";
                            string sev_level = "";
                            string color = "black";
                            if (qcStatus.ToLower().Equals("failed"))
                            {
                                bg_color = "#f77676c2";
                            }
                            else if (qcStatus.ToLower().Equals("error"))
                            {
                                bg_color = "#cceeff";
                            }
                            if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                            {
                                fixedbg_color = "#66ff66";
                            }

                            if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                            {
                                sev_level = "High";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                            {
                                sev_level = "Medium";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                            {
                                sev_level = "Low";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                            {
                                sev_level = "Warning";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                            {
                                sev_level = "NA";
                            }
                            string Validation = "";
                            if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                            {
                                Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            else
                            {
                                Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            foreach (var sobj in ColumnFlag)
                            {
                                if (sobj == "FILE_NAME")
                                {
                                    sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");

                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                    {
                                        if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "PREFERENCE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "PAGE_NUMBER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "Validation")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + Validation + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "CHECK_PARAMETER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "QC_RESULT")
                                {
                                    if (bg_color.Contains("#"))
                                    {
                                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                        {
                                            var color12 = HexToColor(bg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "severity_level")
                                {
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    if (sev_level != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (sobj == "Fixed")
                                    {
                                        if (fixedbg_color.Contains("#"))
                                        {
                                            var color12 = HexToColor(fixedbg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                                        }
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["Fixed"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                }

                                if (sobj == "Comments")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["COMMENTS"].ToString() != "" && ds.Tables[0].Rows[i]["COMMENTS"].ToString() != null)
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                            }
                            sb.AppendLine("</tr>");
                        }
                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</div>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                }
                Guid mainId;
                mainId = Guid.NewGuid();

                string desPath = m_DownloadFolderPathQC + "\\" + mainId;
                Directory.CreateDirectory(desPath);
                File.WriteAllText(desPath + "\\" + tpObj.Job_ID + "-Validation Analysis.html", sb.ToString(), Encoding.UTF8);
                resdata = new string[2];
                resdata[0] = desPath;
                resdata[1] = tpObj.Job_ID + "-Validation Analysis.html";
                return resdata;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public string GenerateValidationReportXls(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            DateTime dateTime = DateTime.UtcNow.Date;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                var sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] excelflag = sobj.Split(',');
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                string query = string.Empty;
                query = " select mlib.Library_Value as Country, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
               "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
               "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
               "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
               " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
               " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                con1.Close();

                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<table style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:100%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                    foreach (var s in excelflag)
                    {
                        if (s == "FILE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "PREFERENCE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "Validation")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                        if (s == "CHECK_PARAMETER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "QC_RESULT")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "severity_level")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (s == "Fixed")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }

                        if (s == "Comments")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine(" </td>");
                        }

                    }
                    sb.AppendLine("</tr>");
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string checkParameter = string.Empty;
                        if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                            checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                        else
                            checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();

                        string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                        string color = "black";
                        string bg_color = "white";
                        string fixedbg_color = "white";
                        if (qcStatus.ToLower().Equals("failed"))
                        {
                            bg_color = "#f77676c2";
                        }
                        else if (qcStatus.ToLower().Equals("error"))
                        {
                            bg_color = "#cceeff";
                        }
                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                        {
                            fixedbg_color = "#66ff66";
                        }
                        string sev_level = "";
                        string type = "0";
                        string Isfixed = ds.Tables[0].Rows[i]["FIXED"].ToString();
                        type = ds.Tables[0].Rows[i]["QC_TYPE"].ToString();

                        if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                        {
                            sev_level = "High";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                        {
                            sev_level = "Medium";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                        {
                            sev_level = "Low";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                        {
                            sev_level = "Warning";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                        {
                            sev_level = "NA";
                        }
                        string Validation = "";
                        if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                        {
                            Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }
                        else
                        {
                            Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }

                        if (type == "1")
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                            foreach (var s in excelflag)
                            {
                                if (s == "FILE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    //sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                        if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                        }
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s.ToString() == "PREFERENCE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "Validation")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + Validation + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "CHECK_PARAMETER")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + checkParameter + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                                if (s == "QC_RESULT")
                                {
                                    if (bg_color.Contains("#"))
                                    {
                                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                        {
                                            var color12 = HexToColor(bg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "severity_level")
                                {
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    if (sev_level != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + fixedbg_color + "'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                }

                                if (s == "Comments")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                            }
                            sb.AppendLine("</tr>");
                        }
                        else
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                            foreach (var s in excelflag)
                            {
                                if (s == "FILE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                        if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                        }
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "PREFERENCE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "Validation")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + Validation + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "CHECK_PARAMETER")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + checkParameter + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                                if (s == "QC_RESULT")
                                {
                                    if (bg_color.Contains("#"))
                                    {
                                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                        {
                                            var color12 = HexToColor(bg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "severity_level")
                                {
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    if (sev_level != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%;background-color:" + fixedbg_color + "'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                }

                                if (s == "Comments")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                            }

                            sb.AppendLine("</tr>");
                        }
                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("<table>");
                    sb.AppendLine("<tr>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated By: </b>" + tpObj.UserName);
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated Date: </b>" + dateTime.ToString("dd/MM/yyyy"));
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                }
                return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "fail";
            }
        }

        public string GenerateValidationReportXlsByPage(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            DateTime dateTime = DateTime.UtcNow.Date;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                var sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] excelflag = sobj.Split(',');
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                string query = string.Empty;
                query = " select mlib.Library_Value as Country, rs.country_id,case when rsd.severity_level=1 then 'High' when rsd.severity_level=2 then 'Medium' when rsd.severity_level=3 then 'Low' when rsd.severity_level=4 then 'Warning' when rsd.severity_level=5 then 'NA' else '' end as severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,a.PAGE_NUMBER,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_Page_validation_det where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
              "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
              "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
              "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
              " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
              " from REGOPS_QC_Page_validation_det a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,a.PAGE_NUMBER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                con1.Close();
                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<table style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:100%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                    foreach (var s in excelflag)
                    {
                        if (s == "FILE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "PREFERENCE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "PAGE_NUMBER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Page Number");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "Validation")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                        if (s == "CHECK_PARAMETER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "QC_RESULT")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (s == "severity_level")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (s == "Fixed")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }

                        if (s == "Comments")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine(" </td>");
                        }

                    }
                    sb.AppendLine("</tr>");
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string checkParameter = string.Empty;
                        if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                            checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                        else
                            checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();

                        string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                        string color = "black";
                        string bg_color = "white";
                        string fixedbg_color = "white";
                        if (qcStatus.ToLower().Equals("failed"))
                        {
                            bg_color = "#f77676c2";
                        }
                        else if (qcStatus.ToLower().Equals("error"))
                        {
                            bg_color = "#cceeff";
                        }
                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                        {
                            fixedbg_color = "#66ff66";
                        }
                        string sev_level = "";
                        string type = "0";
                        string Isfixed = ds.Tables[0].Rows[i]["FIXED"].ToString();
                        type = ds.Tables[0].Rows[i]["QC_TYPE"].ToString();
                        string Validation = "";
                        if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                        {
                            Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }
                        else
                        {
                            Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }

                        if (type == "1")
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                            foreach (var s in excelflag)
                            {
                                if (s == "FILE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                        if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                        }
                                    else
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s.ToString() == "PREFERENCE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "PAGE_NUMBER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                    {
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</p>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "Validation")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'>" + Validation + "</p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "CHECK_PARAMETER")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine(" line-height:normal'>" + checkParameter + "</p>");
                                    sb.AppendLine("</td>");
                                }
                                if (s == "QC_RESULT")
                                {
                                    if (bg_color.Contains("#"))
                                    {
                                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                        {
                                            var color12 = HexToColor(bg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "severity_level")
                                {
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    if (ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + fixedbg_color + "'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                }

                                if (s == "Comments")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine("line-height:normal'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</p>");
                                    sb.AppendLine("</td>");
                                }
                            }

                            sb.AppendLine("</tr>");
                        }

                        else
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0'>");
                            foreach (var s in excelflag)
                            {
                                if (s == "FILE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                        if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                        }
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s.ToString() == "PREFERENCE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "PAGE_NUMBER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                    {
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</p>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "Validation")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + Validation + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "CHECK_PARAMETER")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + checkParameter + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                                if (s == "QC_RESULT")
                                {
                                    if (bg_color.Contains("#"))
                                    {
                                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                        {
                                            var color12 = HexToColor(bg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (s == "severity_level")
                                {
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    if (ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%;background-color:" + fixedbg_color + "'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                }

                                if (s == "Comments")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                            }

                            sb.AppendLine("</tr>");
                        }
                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("<table>");
                    sb.AppendLine("<tr>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated By: </b>" + tpObj.UserName);
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated Date: </b>" + dateTime.ToString("dd/MM/yyyy"));
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                    //sb.AppendLine("</table>");
                }
                return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "fail";
            }
        }

        public string[] DownloadCheckByHtmlReport(RegOpsQC tpObj)
        {
            try
            {
                if (tpObj.File_Type == "Batchpoc")
                {
                    string[] result = GenerateValidationReportManageHtmlforbatchpOc(tpObj);


                    return result;
                }
                    if (tpObj.File_Type == "HTML")
                {
                    string[] result = GenerateValidationReportHtml(tpObj);


                    return result;
                }
                else
                {
                    return GenerateValidationReportPdf(tpObj);
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string[] DownloadQCXlsReport(RegOpsQC tpObj)
        {
            string result = "";
            string[] resdata = null;
            try
            {
                Guid mainId;
                mainId = Guid.NewGuid();
                string desPath = m_DownloadFolderPathQC + mainId;

                if (tpObj.ByType == "By Page")
                {
                    result = GenerateValidationReportXlsByPage(tpObj);
                }
                else
                {
                    result = GenerateValidationReportXls(tpObj);
                }
                Directory.CreateDirectory(desPath);
                File.WriteAllText(desPath + "\\" + tpObj.Job_ID + "-Validation Analysis.xls", result, Encoding.UTF8);
                resdata = new string[2];
                resdata[0] = desPath;
                resdata[1] = tpObj.Job_ID + "-Validation Analysis.xls";
                return resdata;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        //Method to get word Checklists
        public List<RegOpsQC> GetWordQCCheckListsFromLibrary(RegOpsQC rObj)
        {
            List<RegOpsQC> WordCheckList = new List<RegOpsQC>();
            DataSet ds = new DataSet();
            RegOpsQC RegOpsQC = new RegOpsQC();
            string query = string.Empty;
            conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    //if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == rObj.UserID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == rObj.ROLE_ID)
                    //{
                    Int32 CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());

                    //Int32 CreatedID = Convert.ToInt32(rObj.Created_ID);

                    conec.ConnectionString = m_DummyConn;
                    conec.Open();
                    if (rObj.Category.ToLower() != "dossier")
                    {
                        if (rObj.Validation_Plan_Type.ToLower() == "publishing")
                        {
                            cmd = new OracleCommand("Select lg.library_value GroupName,lg.library_id GroupCheckId,items.HELP_TEXT HELP_TEXT,items.CHECK_UNITS CHECK_UNITS,items.LIBRARY_VALUE CheckName, items.LIBRARY_ID CheckList_ID, items.TYPE CheckType, items.PARENT_KEY PARENT_KEY, subchecklst.LIBRARY_Value as SubCheckName, subchecklst.LIBRARY_ID as SubCheckListID,items.CONTROL_TYPE as controltype,"
                          + " items.Check_Order,parentControls.library_value parentControlsValue, CASE WHEN items.CONTROL_TYPE like 'Dropdown|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) WHEN items.CONTROL_TYPE like 'Multiselect|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12) end Control_Type,"
                         + " subchecklst.CONTROL_TYPE as subControls, CASE WHEN subchecklst.CONTROL_TYPE like 'Dropdown|%' then substr(subchecklst.CONTROL_TYPE,instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) WHEN subchecklst.CONTROL_TYPE like 'Multiselect|%' then substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12)"
                         + " end SubControl_Type, subControls.library_value subControlsValue, subchecklst.parent_key as ParentCheckId,subchecklst.Type as SubType, subchecklst.Check_units as SubCheckUnits from(checks_library lg join checks_library items on lg.Library_Name = 'PUBLISH_CHECKLIST_GROUPS' and  lg.status = 1 and items.PARENT_KEY = lg.LIBRARY_ID and items.status = 1"
                         + " left join checks_library subchecklst on subchecklst.PARENT_KEY = items.LIBRARY_ID and subchecklst.status = 1)"
                         + " join org_checks org on((org.CHECKLIST_ID = items.LIBRARY_ID and org.PARENT_CHECK_ID is null and subchecklst.library_id is null) or (org.CHECKLIST_ID = subchecklst.LIBRARY_ID and org.PARENT_CHECK_ID is not null)) and org.organization_id = " + rObj.ORGANIZATION_ID + ""
                         + " left join MASTER_LIBRARY parentControls on(items.CONTROL_TYPE like '%Dropdown|%' or items.CONTROL_TYPE like '%Multiselect|%') and(parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) or parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12))"
                         + " left join MASTER_LIBRARY subControls on(subchecklst.CONTROL_TYPE like '%Dropdown|%' or  subchecklst.CONTROL_TYPE like '%Multiselect|%') and(subControls.library_name = substr(subchecklst.CONTROL_TYPE,"
                         + " instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) or subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12))"
                         + " order by lg.Check_order, items.Check_order, subchecklst.Check_order, parentControls.library_id, subControls.library_id", conec);
                        }
                        else
                        {
                            cmd = new OracleCommand("Select lg.library_value GroupName,lg.library_id GroupCheckId,items.HELP_TEXT HELP_TEXT,items.CHECK_UNITS CHECK_UNITS,items.LIBRARY_VALUE CheckName, items.LIBRARY_ID CheckList_ID, items.TYPE CheckType, items.PARENT_KEY PARENT_KEY, subchecklst.LIBRARY_Value as SubCheckName, subchecklst.LIBRARY_ID as SubCheckListID,items.CONTROL_TYPE as controltype,"
                                                  + " items.Check_Order,parentControls.library_value parentControlsValue, CASE WHEN items.CONTROL_TYPE like 'Dropdown|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) WHEN items.CONTROL_TYPE like 'Multiselect|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12) end Control_Type,"
                                                 + " subchecklst.CONTROL_TYPE as subControls, CASE WHEN subchecklst.CONTROL_TYPE like 'Dropdown|%' then substr(subchecklst.CONTROL_TYPE,instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) WHEN subchecklst.CONTROL_TYPE like 'Multiselect|%' then substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12)"
                                                 + " end SubControl_Type, subControls.library_value subControlsValue, subchecklst.parent_key as ParentCheckId,subchecklst.Type as SubType, subchecklst.Check_units as SubCheckUnits from(checks_library lg join checks_library items on lg.Library_Name = 'QC_CHECKLIST_GROUPS' and  lg.status = 1 and items.PARENT_KEY = lg.LIBRARY_ID and items.status = 1"
                                                 + " left join checks_library subchecklst on subchecklst.PARENT_KEY = items.LIBRARY_ID and subchecklst.status = 1)"
                                                 + " join org_checks org on((org.CHECKLIST_ID = items.LIBRARY_ID and org.PARENT_CHECK_ID is null and subchecklst.library_id is null) or (org.CHECKLIST_ID = subchecklst.LIBRARY_ID and org.PARENT_CHECK_ID is not null)) and org.organization_id = " + rObj.ORGANIZATION_ID + ""
                                                 + " left join MASTER_LIBRARY parentControls on(items.CONTROL_TYPE like '%Dropdown|%' or items.CONTROL_TYPE like '%Multiselect|%') and(parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) or parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12))"
                                                 + " left join MASTER_LIBRARY subControls on(subchecklst.CONTROL_TYPE like '%Dropdown|%' or  subchecklst.CONTROL_TYPE like '%Multiselect|%') and(subControls.library_name = substr(subchecklst.CONTROL_TYPE,"
                                                 + " instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) or subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12))"
                                                 + " order by lg.Check_order, items.Check_order, subchecklst.Check_order, parentControls.library_id, subControls.library_id", conec);
                        }

                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable dt = ds.Tables[0].DefaultView.ToTable(true, "GroupCheckId", "GroupName");

                            WordCheckList = (from DataRow dr in dt.Rows
                                             select new RegOpsQC()
                                             {
                                                 Created_ID = CreatedID,
                                                 Library_ID = Convert.ToInt32(dr["GroupCheckId"].ToString()),
                                                 Library_Value = dr["GroupName"].ToString(),
                                                 Group_Check_ID = Convert.ToInt32(dr["GroupCheckId"].ToString()),
                                                 GroupIndex = dr.Table.Rows.IndexOf(dr),
                                                 CheckList = GetcheckListDatanew(CreatedID, Convert.ToInt32(dr["GroupCheckId"].ToString()), dr.Table.Rows.IndexOf(dr), ds, "Word")
                                             }).ToList();
                        }
                    }

                    //return WordCheckList;
                    // }
                    //else
                    //{
                    //   // RegOpsQC = new RegOpsQC();
                    //    RegOpsQC.sessionCheck = "Error Page";
                    //    WordCheckList.Add(RegOpsQC);
                    //   // return WordCheckList;
                    //}                   
                }
                else
                {
                    //RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Login Page";
                    WordCheckList.Add(RegOpsQC);
                    //return WordCheckList;
                }
                return WordCheckList;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }


        //Get Pdf Checklists
        public List<RegOpsQC> GetQCCheckListsFromLibraryPDF(RegOpsQC tpobj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(tpobj.Created_ID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                string query = string.Empty;

                RegOpsQC tObj1 = new RegOpsQC();
                tObj1.PdfCheckList = GetPdfQCCheckListsFromLibrary(tpobj);
                tpLst.Add(tObj1);

                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        //Get Word Checklists
        public List<RegOpsQC> GetQCCheckListsFromLibraryWord(RegOpsQC tpobj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(tpobj.Created_ID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                string query = string.Empty;

                RegOpsQC tObj1 = new RegOpsQC();
                tObj1.WordCheckList = GetWordQCCheckListsFromLibrary(tpobj);
                tpLst.Add(tObj1);

                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public List<RegOpsQC> GetSubCheckListData1(long created_ID, long library_ID, long MainGroupId, DataSet ds)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            try
            {

                tpLst = (from DataRow dr in ds.Tables[0].Rows
                         select new RegOpsQC()
                         {
                             Created_ID = created_ID,
                             Sub_Library_ID = Convert.ToInt32(dr["Library_ID"].ToString()),
                             Library_Value = dr["LIBRARY_VALUE"].ToString(),
                             CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                             PARENT_KEY = Convert.ToInt64(dr["PARENT_KEY"].ToString()),
                             Group_Check_ID = MainGroupId,
                             checkvalue = "0",
                             Type = dr["TYPE"].ToString() != "" ? Convert.ToInt64(dr["TYPE"].ToString()) : 0,
                             Control_Type = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[0].ToString() : dr["CONTROL_TYPE"].ToString(),
                             Library_Name = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[1].ToString() : "",
                         }).ToList();


                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }

        }
        public List<RegOpsQC> GetcheckListData1(long created_ID, long library_ID, long index, DataSet ds)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    tpLst = (from DataRow dr in ds.Tables[0].Rows
                             select new RegOpsQC()
                             {
                                 Created_ID = created_ID,
                                 Library_ID = Convert.ToInt32(dr["Library_ID"].ToString()),
                                 Library_Value = dr["LIBRARY_VALUE"].ToString(),
                                 Group_Check_ID = library_ID,
                                 CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                 HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                 PARENT_KEY = Convert.ToInt64(dr["PARENT_KEY"].ToString()),
                                 GroupIndex = dr.Table.Rows.IndexOf(dr),
                                 checkvalue = "0",
                                 Type = Convert.ToInt64(dr["TYPE"].ToString()),
                                 Control_Type = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[0].ToString() : dr["CONTROL_TYPE"].ToString(),
                                 Library_Name = dr["CONTROL_TYPE"].ToString().Contains("Dropdown") ? dr["CONTROL_TYPE"].ToString().Split('|')[1].ToString() : "",
                                 SubCheckList = GetSubCheckListData(Convert.ToInt32(created_ID), Convert.ToInt32(dr["Library_ID"].ToString()), library_ID)
                             }).Distinct().ToList();
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        //Get Pdf checklists
        public List<RegOpsQC> GetPdfQCCheckListsFromLibrary(RegOpsQC rObj)
        {
            List<RegOpsQC> PdfCheckList = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    //if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == rObj.UserID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == rObj.ROLE_ID)
                    //{
                    Int32 Created_ID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(Created_ID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    //Int32 Created_ID = Convert.ToInt32(rObj.Created_ID);

                    conec.ConnectionString = m_DummyConn; DataSet ds = new DataSet();
                    conec.Open();

                    // Dossier condition implemented based on output type zip 

                    if (rObj.Category.ToLower() == "dossier")
                    {
                        if (rObj.Regops_Output_Type.ToLower() == "zip")
                        {
                            cmd = new OracleCommand("Select lg.library_value GroupName,lg.library_id GroupCheckId,items.HELP_TEXT HELP_TEXT,items.CHECK_UNITS CHECK_UNITS, items.LIBRARY_VALUE CheckName,"
                    + " items.LIBRARY_ID CheckList_ID, items.TYPE CheckType, items.PARENT_KEY PARENT_KEY, subchecklst.LIBRARY_Value as SubCheckName, subchecklst.LIBRARY_ID as SubCheckListID,"
                    + " items.CONTROL_TYPE as controltype, items.Check_Order,parentControls.library_value parentControlsValue, CASE WHEN items.CONTROL_TYPE like 'Dropdown|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE,'Dropdown') + 9) "
                    + "  WHEN items.CONTROL_TYPE like 'Multiselect|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') +12) end Control_Type, subchecklst.CONTROL_TYPE as subControls, "
                    + " CASE WHEN subchecklst.CONTROL_TYPE like 'Dropdown|%' then substr(subchecklst.CONTROL_TYPE,instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9)"
                    + " WHEN subchecklst.CONTROL_TYPE like 'Multiselect|%' then substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12) end SubControl_Type, subControls.library_value subControlsValue, subchecklst.parent_key as ParentCheckId,subchecklst.Type as SubType, subchecklst.Check_units as SubCheckUnits from(checks_library lg"
                    + " join checks_library items on lg.Library_Name = 'PUBLISH_PDF_CHECKLIST_GROUPS' and  lg.status = 1 and items.PARENT_KEY = lg.LIBRARY_ID and items.status = 1 "
                    + " left join checks_library subchecklst on subchecklst.PARENT_KEY = items.LIBRARY_ID and subchecklst.status = 1)"
                    + " join org_checks org on((org.CHECKLIST_ID = items.LIBRARY_ID and org.PARENT_CHECK_ID is null and subchecklst.library_id is null) or"
                    + " (org.CHECKLIST_ID = subchecklst.LIBRARY_ID and org.PARENT_CHECK_ID is not null)) and org.organization_id = " + rObj.ORGANIZATION_ID + ""
                    + " left join MASTER_LIBRARY parentControls on(items.CONTROL_TYPE like '%Dropdown|%' or items.CONTROL_TYPE like  '%Multiselect|%') and(parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) or  parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12))"
                    + " left join MASTER_LIBRARY subControls on(subchecklst.CONTROL_TYPE like '%Dropdown|%' or  subchecklst.CONTROL_TYPE like '%Multiselect|%')  and(subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) or  subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12))"
                    + " order by lg.Check_order, " + "items.Check_order,subchecklst.Check_order ,parentControls.library_id,subControls.library_id", conec);
                        }
                        else
                        {
                            cmd = new OracleCommand("Select lg.library_value GroupName,lg.library_id GroupCheckId,items.HELP_TEXT HELP_TEXT,items.CHECK_UNITS CHECK_UNITS, items.LIBRARY_VALUE CheckName,"
                    + " items.LIBRARY_ID CheckList_ID, items.TYPE CheckType, items.PARENT_KEY PARENT_KEY, subchecklst.LIBRARY_Value as SubCheckName, subchecklst.LIBRARY_ID as SubCheckListID,"
                    + " items.CONTROL_TYPE as controltype, items.Check_Order,parentControls.library_value parentControlsValue, CASE WHEN items.CONTROL_TYPE like 'Dropdown|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE,'Dropdown') + 9) "
                    + "  WHEN items.CONTROL_TYPE like 'Multiselect|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') +12) end Control_Type, subchecklst.CONTROL_TYPE as subControls, "
                    + " CASE WHEN subchecklst.CONTROL_TYPE like 'Dropdown|%' then substr(subchecklst.CONTROL_TYPE,instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9)"
                    + " WHEN subchecklst.CONTROL_TYPE like 'Multiselect|%' then substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12) end SubControl_Type, subControls.library_value subControlsValue, subchecklst.parent_key as ParentCheckId,subchecklst.Type as SubType, subchecklst.Check_units as SubCheckUnits from(checks_library lg"
                    + " join checks_library items on lg.Library_Name = 'PUBLISH_PDF_CHECKLIST_GROUPS' and lg.LIBRARY_VALUE !='Folder' and  lg.status = 1 and items.PARENT_KEY = lg.LIBRARY_ID and items.status = 1 "
                    + " left join checks_library subchecklst on subchecklst.PARENT_KEY = items.LIBRARY_ID and subchecklst.status = 1)"
                    + " join org_checks org on((org.CHECKLIST_ID = items.LIBRARY_ID and org.PARENT_CHECK_ID is null and subchecklst.library_id is null) or"
                    + " (org.CHECKLIST_ID = subchecklst.LIBRARY_ID and org.PARENT_CHECK_ID is not null)) and org.organization_id = " + rObj.ORGANIZATION_ID + ""
                    + " left join MASTER_LIBRARY parentControls on(items.CONTROL_TYPE like '%Dropdown|%' or items.CONTROL_TYPE like  '%Multiselect|%') and(parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) or  parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12))"
                    + " left join MASTER_LIBRARY subControls on(subchecklst.CONTROL_TYPE like '%Dropdown|%' or  subchecklst.CONTROL_TYPE like '%Multiselect|%')  and(subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) or  subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12))"
                    + " order by lg.Check_order, " + "items.Check_order,subchecklst.Check_order ,parentControls.library_id,subControls.library_id", conec);
                        }
                    }
                    else
                    {
                        if (rObj.Validation_Plan_Type.ToLower() == "publishing")
                        {
                            cmd = new OracleCommand("Select lg.library_value GroupName,lg.library_id GroupCheckId,items.HELP_TEXT HELP_TEXT,items.CHECK_UNITS CHECK_UNITS, items.LIBRARY_VALUE CheckName,"
                        + " items.LIBRARY_ID CheckList_ID, items.TYPE CheckType, items.PARENT_KEY PARENT_KEY, subchecklst.LIBRARY_Value as SubCheckName, subchecklst.LIBRARY_ID as SubCheckListID,"
                        + " items.CONTROL_TYPE as controltype, items.Check_Order,parentControls.library_value parentControlsValue, CASE WHEN items.CONTROL_TYPE like 'Dropdown|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE,'Dropdown') + 9) "
                        + "  WHEN items.CONTROL_TYPE like 'Multiselect|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') +12) end Control_Type, subchecklst.CONTROL_TYPE as subControls, "
                        + " CASE WHEN subchecklst.CONTROL_TYPE like 'Dropdown|%' then substr(subchecklst.CONTROL_TYPE,instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9)"
                        + " WHEN subchecklst.CONTROL_TYPE like 'Multiselect|%' then substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12) end SubControl_Type, subControls.library_value subControlsValue, subchecklst.parent_key as ParentCheckId,subchecklst.Type as SubType, subchecklst.Check_units as SubCheckUnits from(checks_library lg"
                        + " join checks_library items on lg.Library_Name = 'PUBLISH_PDF_CHECKLIST_GROUPS' and lg.LIBRARY_VALUE !='Folder' and  lg.status = 1 and items.PARENT_KEY = lg.LIBRARY_ID and items.status = 1 "
                        + " left join checks_library subchecklst on subchecklst.PARENT_KEY = items.LIBRARY_ID and subchecklst.status = 1)"
                        + " join org_checks org on((org.CHECKLIST_ID = items.LIBRARY_ID and org.PARENT_CHECK_ID is null and subchecklst.library_id is null) or"
                        + " (org.CHECKLIST_ID = subchecklst.LIBRARY_ID and org.PARENT_CHECK_ID is not null)) and org.organization_id = " + rObj.ORGANIZATION_ID + ""
                        + " left join MASTER_LIBRARY parentControls on(items.CONTROL_TYPE like '%Dropdown|%' or items.CONTROL_TYPE like  '%Multiselect|%') and(parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) or  parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12))"
                        + " left join MASTER_LIBRARY subControls on(subchecklst.CONTROL_TYPE like '%Dropdown|%' or  subchecklst.CONTROL_TYPE like '%Multiselect|%')  and(subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) or  subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12))"
                        + " order by lg.Check_order, " + "items.Check_order,subchecklst.Check_order ,parentControls.library_id,subControls.library_id", conec);
                        }
                        else
                        {
                            cmd = new OracleCommand("Select lg.library_value GroupName,lg.library_id GroupCheckId,items.HELP_TEXT HELP_TEXT,items.CHECK_UNITS CHECK_UNITS, items.LIBRARY_VALUE CheckName,"
                        + " items.LIBRARY_ID CheckList_ID, items.TYPE CheckType, items.PARENT_KEY PARENT_KEY, subchecklst.LIBRARY_Value as SubCheckName, subchecklst.LIBRARY_ID as SubCheckListID,"
                        + " items.CONTROL_TYPE as controltype, items.Check_Order,parentControls.library_value parentControlsValue, CASE WHEN items.CONTROL_TYPE like 'Dropdown|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE,'Dropdown') + 9) "
                        + "  WHEN items.CONTROL_TYPE like 'Multiselect|%' then substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') +12) end Control_Type, subchecklst.CONTROL_TYPE as subControls, "
                        + " CASE WHEN subchecklst.CONTROL_TYPE like 'Dropdown|%' then substr(subchecklst.CONTROL_TYPE,instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9)"
                        + " WHEN subchecklst.CONTROL_TYPE like 'Multiselect|%' then substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12) end SubControl_Type, subControls.library_value subControlsValue, subchecklst.parent_key as ParentCheckId,subchecklst.Type as SubType, subchecklst.Check_units as SubCheckUnits from(checks_library lg"
                        + " join checks_library items on lg.Library_Name = 'QC_PDF_CHECKLIST_GROUPS' and  lg.status = 1 and items.PARENT_KEY = lg.LIBRARY_ID and items.status = 1 "
                        + " left join checks_library subchecklst on subchecklst.PARENT_KEY = items.LIBRARY_ID and subchecklst.status = 1)"
                        + " join org_checks org on((org.CHECKLIST_ID = items.LIBRARY_ID and org.PARENT_CHECK_ID is null and subchecklst.library_id is null) or"
                        + " (org.CHECKLIST_ID = subchecklst.LIBRARY_ID and org.PARENT_CHECK_ID is not null)) and org.organization_id = " + rObj.ORGANIZATION_ID + ""
                        + " left join MASTER_LIBRARY parentControls on(items.CONTROL_TYPE like '%Dropdown|%' or items.CONTROL_TYPE like  '%Multiselect|%') and(parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Dropdown') + 9) or  parentControls.library_name = substr(items.CONTROL_TYPE, instr(items.CONTROL_TYPE, 'Multiselect') + 12))"
                        + " left join MASTER_LIBRARY subControls on(subchecklst.CONTROL_TYPE like '%Dropdown|%' or  subchecklst.CONTROL_TYPE like '%Multiselect|%')  and(subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Dropdown') + 9) or  subControls.library_name = substr(subchecklst.CONTROL_TYPE, instr(subchecklst.CONTROL_TYPE, 'Multiselect') + 12))"
                        + " order by lg.Check_order, " + "items.Check_order,subchecklst.Check_order ,parentControls.library_id,subControls.library_id", conec);
                        }
                    }


                    da = new OracleDataAdapter(cmd);
                    da.Fill(ds);
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt = ds.Tables[0].DefaultView.ToTable(true, "GroupCheckId", "GroupName");

                        PdfCheckList = (from DataRow dr in dt.Rows
                                        select new RegOpsQC()
                                        {
                                            Created_ID = Created_ID,
                                            Library_ID = Convert.ToInt32(dr["GroupCheckId"].ToString()),
                                            Library_Value = dr["GroupName"].ToString(),
                                            Group_Check_ID = Convert.ToInt32(dr["GroupCheckId"].ToString()),
                                            GroupIndex = dr.Table.Rows.IndexOf(dr),
                                            CheckList = GetcheckListDatanew(Created_ID, Convert.ToInt32(dr["GroupCheckId"].ToString()), dr.Table.Rows.IndexOf(dr), ds, "PDF")
                                        }).ToList();
                    }
                    // return PdfCheckList;
                    // }
                    //else
                    //{
                    //   // RegOpsQC = new RegOpsQC();
                    //    RegOpsQC.sessionCheck = "Error Page";
                    //    PdfCheckList.Add(RegOpsQC);
                    //    //return PdfCheckList;
                    //}                   
                }
                else
                {
                    // RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Login Page";
                    PdfCheckList.Add(RegOpsQC);
                    //return PdfCheckList;
                }
                return PdfCheckList;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }





        //Save Regops Qc preference Metadata
        public string SavePreferencesDetails1bk(RegOpsQC rOBJ)
        {
            OracleConnection con = new OracleConnection();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                con.ConnectionString = m_DummyConn;
                con.Open();
                string result = string.Empty;
                string WordFlag = string.Empty;
                string PdfFlag = string.Empty;
                rOBJ.QCJobCheckListInfo = JsonConvert.DeserializeObject<List<RegOpsQC>>(rOBJ.QCJobCheckListDetails);
                Int64 regOPS_QC_Pref_ID = 0;
                DataSet dsPref = new DataSet();
                dsPref = conn.GetDataSet("SELECT PREFERENCE_NAME FROM REGOPS_QC_PREFERENCES where lower(PREFERENCE_NAME)='" + rOBJ.Preference_Name.ToLower().ToString() + "'", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(dsPref))
                {
                    return "PreferenceExists";
                }
                else
                {
                    string File_Format1 = string.Empty;
                    string File_Format2 = string.Empty;
                    DataSet dsSeq1 = new DataSet();
                    dsSeq1 = conn.GetDataSet("SELECT REGOPS_QC_PREFERENCES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(dsSeq1))
                    {
                        regOPS_QC_Pref_ID = Convert.ToInt64(dsSeq1.Tables[0].Rows[0]["NEXTVAL"].ToString());
                    }

                    rOBJ.Created_Date = DateTime.Now;
                    OracleCommand cmd = null;
                    cmd = new OracleCommand("INSERT INTO REGOPS_QC_PREFERENCES(ID,PREFERENCE_NAME,CREATED_ID,CREATED_DATE,DESCRIPTION) values(:ID,:PREFERENCE_NAME,:CREATED_ID,:CREATED_DATE,:DESCRIPTION)", con);
                    cmd.Parameters.Add(new OracleParameter("ID", regOPS_QC_Pref_ID));
                    cmd.Parameters.Add(new OracleParameter("PREFERENCE_NAME", rOBJ.Preference_Name));
                    cmd.Parameters.Add(new OracleParameter("CREATED_ID", rOBJ.Created_ID));
                    cmd.Parameters.Add(new OracleParameter("CREATED_DATE", rOBJ.Created_Date));
                    cmd.Parameters.Add(new OracleParameter("DESCRIPTION", rOBJ.Validation_Description));
                    int m_Res = cmd.ExecuteNonQuery();
                    if (m_Res > 0)
                    {
                        Int64 Previousvalue = 0;
                        foreach (RegOpsQC obj in rOBJ.QCJobCheckListInfo)
                        {
                            //word checks save
                            if (obj.WordCheckList.Count > 0)
                            {
                                foreach (RegOpsQC chkgrp in obj.WordCheckList)
                                {
                                    foreach (RegOpsQC chkList in chkgrp.CheckList)
                                    {
                                        if (chkList.checkvalue == "1")
                                        {
                                            //checkId = obj.CheckList_ID;
                                            DataSet dsSeq = new DataSet();
                                            dsSeq = conn.GetDataSet("SELECT REGOPS_QC_PREFER_DETAILS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                                            if (conn.Validate(dsSeq))
                                            {
                                                Previousvalue = obj.ID = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                                            }
                                            WordFlag = "Word";
                                            cmd = new OracleCommand("INSERT INTO REGOPS_QC_PREFERENCE_DETAILS(ID,QC_PREFERENCES_ID,CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID,DOC_TYPE,CREATED_ID) VALUES(:ID,:QC_PREFERENCES_ID,:CHECKLIST_ID,:QC_TYPE,:CHECK_PARAMETER,:GROUP_CHECK_ID,:DOC_TYPE,:CREATED_ID)", con);
                                            cmd.Parameters.Add(new OracleParameter("ID", Previousvalue));
                                            cmd.Parameters.Add(new OracleParameter("QC_PREFERENCES_ID", regOPS_QC_Pref_ID));
                                            cmd.Parameters.Add(new OracleParameter("CHECKLIST_ID", chkList.Library_ID));
                                            cmd.Parameters.Add(new OracleParameter("QC_TYPE", chkList.QC_Type));
                                            cmd.Parameters.Add(new OracleParameter("CHECK_PARAMETER", chkList.Check_Parameter));
                                            cmd.Parameters.Add(new OracleParameter("GROUP_CHECK_ID", chkList.Group_Check_ID));
                                            cmd.Parameters.Add(new OracleParameter("DOC_TYPE", "Word"));
                                            cmd.Parameters.Add(new OracleParameter("CREATED_ID", chkList.Created_ID));
                                            m_Res = cmd.ExecuteNonQuery();
                                            if (m_Res > 0 && chkList.SubCheckList.Count > 0)
                                            {
                                                foreach (RegOpsQC subObj in chkList.SubCheckList)
                                                {
                                                    if (subObj.checkvalue == "1")
                                                    {
                                                        //DataSet SubdsSeq = new DataSet();
                                                        //SubdsSeq = conn.GetDataSet("SELECT REGOPS_QC_SUB_PREF_DETAILS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                                                        //if (conn.Validate(SubdsSeq))
                                                        //{
                                                        //    subObj.ID = Convert.ToInt64(SubdsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                                                        //}
                                                        //cmd = new OracleCommand("INSERT INTO REGOPS_QC_SUB_PREF_DETAILS(SUB_ID,QC_PREFERENCES_ID,SUB_CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,CHECKLIST_ID) VALUES(:SUB_ID,:QC_PREFERENCES_ID,:SUB_CHECKLIST_ID,:QC_TYPE,:CHECK_PARAMETER,:CHECKLIST_ID)", con);
                                                        //cmd.Parameters.Add(new OracleParameter("SUB_ID", subObj.ID));
                                                        //cmd.Parameters.Add(new OracleParameter("QC_PREFERENCES_ID", regOPS_QC_Pref_ID));
                                                        //cmd.Parameters.Add(new OracleParameter("SUB_CHECKLIST_ID", subObj.Sub_Library_ID));
                                                        //cmd.Parameters.Add(new OracleParameter("QC_TYPE", subObj.QC_Type));
                                                        //cmd.Parameters.Add(new OracleParameter("CHECK_PARAMETER", subObj.Check_Parameter));
                                                        //cmd.Parameters.Add(new OracleParameter("CHECKLIST_ID", Previousvalue));

                                                        DataSet SubdsSeq = new DataSet();
                                                        SubdsSeq = conn.GetDataSet("SELECT REGOPS_QC_PREFER_DETAILS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                                                        if (conn.Validate(SubdsSeq))
                                                        {
                                                            subObj.ID = Convert.ToInt64(SubdsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                                                        }
                                                        cmd = new OracleCommand("INSERT INTO REGOPS_QC_PREFERENCE_DETAILS(ID,QC_PREFERENCES_ID,CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID,DOC_TYPE,PARENT_CHECK_ID,CREATED_ID,PARENET_CHECK_LIBRARY_ID) VALUES(:ID,:QC_PREFERENCES_ID,:CHECKLIST_ID,:QC_TYPE,:CHECK_PARAMETER,:GROUP_CHECK_ID,:DOC_TYPE,:PARENT_CHECK_ID,:CREATED_ID,:PARENET_CHECK_LIBRARY_ID)", con);
                                                        cmd.Parameters.Add(new OracleParameter("ID", subObj.ID));
                                                        cmd.Parameters.Add(new OracleParameter("QC_PREFERENCES_ID", regOPS_QC_Pref_ID));
                                                        cmd.Parameters.Add(new OracleParameter("CHECKLIST_ID", subObj.Sub_Library_ID));
                                                        cmd.Parameters.Add(new OracleParameter("QC_TYPE", subObj.QC_Type));
                                                        cmd.Parameters.Add(new OracleParameter("CHECK_PARAMETER", subObj.Check_Parameter));
                                                        cmd.Parameters.Add(new OracleParameter("GROUP_CHECK_ID", chkList.Group_Check_ID));
                                                        cmd.Parameters.Add(new OracleParameter("DOC_TYPE", "Word"));
                                                        cmd.Parameters.Add(new OracleParameter("PARENT_CHECK_ID", Previousvalue));
                                                        cmd.Parameters.Add(new OracleParameter("CREATED_ID", chkList.Created_ID));
                                                        cmd.Parameters.Add(new OracleParameter("PARENET_CHECK_LIBRARY_ID", chkList.Library_ID));
                                                        m_Res = cmd.ExecuteNonQuery();
                                                        if (m_Res > 0)
                                                        {
                                                            result = "Success";
                                                        }
                                                        else
                                                        {
                                                            result = "Failed";
                                                        }
                                                    }
                                                }
                                            }
                                            result = "Success";
                                        }
                                    }
                                }
                            }
                            // pdf checks save
                            if (obj.PdfCheckList != null)
                            {
                                if (obj.PdfCheckList.Count > 0)
                                {
                                    foreach (RegOpsQC chkgrp in obj.PdfCheckList)
                                    {
                                        foreach (RegOpsQC chkList in chkgrp.CheckList)
                                        {
                                            if (chkList.checkvalue == "1")
                                            {
                                                //checkId = obj.CheckList_ID;
                                                DataSet dsSeq = new DataSet();
                                                dsSeq = conn.GetDataSet("SELECT REGOPS_QC_PREFER_DETAILS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                                                if (conn.Validate(dsSeq))
                                                {
                                                    Previousvalue = obj.ID = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                                                }
                                                PdfFlag = "PDF";
                                                cmd = new OracleCommand("INSERT INTO REGOPS_QC_PREFERENCE_DETAILS(ID,QC_PREFERENCES_ID,CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID,DOC_TYPE,CREATED_ID) VALUES(:ID,:QC_PREFERENCES_ID,:CHECKLIST_ID,:QC_TYPE,:CHECK_PARAMETER,:GROUP_CHECK_ID,:DOC_TYPE,:CREATED_ID)", con);
                                                cmd.Parameters.Add(new OracleParameter("ID", Previousvalue));
                                                cmd.Parameters.Add(new OracleParameter("QC_PREFERENCES_ID", regOPS_QC_Pref_ID));
                                                cmd.Parameters.Add(new OracleParameter("CHECKLIST_ID", chkList.Library_ID));
                                                cmd.Parameters.Add(new OracleParameter("QC_TYPE", chkList.QC_Type));
                                                cmd.Parameters.Add(new OracleParameter("CHECK_PARAMETER", chkList.Check_Parameter));
                                                cmd.Parameters.Add(new OracleParameter("GROUP_CHECK_ID", chkList.Group_Check_ID));
                                                cmd.Parameters.Add(new OracleParameter("DOC_TYPE", "PDF"));
                                                cmd.Parameters.Add(new OracleParameter("CREATED_ID", chkList.Created_ID));
                                                m_Res = cmd.ExecuteNonQuery();
                                                if (m_Res > 0 && chkList.SubCheckList.Count > 0)
                                                {
                                                    foreach (RegOpsQC subObj in chkList.SubCheckList)
                                                    {
                                                        if (subObj.checkvalue == "1")
                                                        {
                                                            //DataSet SubdsSeq = new DataSet();
                                                            //SubdsSeq = conn.GetDataSet("SELECT REGOPS_QC_SUB_PREF_DETAILS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                                                            //if (conn.Validate(SubdsSeq))
                                                            //{
                                                            //    subObj.ID = Convert.ToInt64(SubdsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                                                            //}
                                                            //cmd = new OracleCommand("INSERT INTO REGOPS_QC_SUB_PREF_DETAILS(SUB_ID,QC_PREFERENCES_ID,SUB_CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,CHECKLIST_ID) VALUES(:SUB_ID,:QC_PREFERENCES_ID,:SUB_CHECKLIST_ID,:QC_TYPE,:CHECK_PARAMETER,:CHECKLIST_ID)", con);
                                                            //cmd.Parameters.Add(new OracleParameter("SUB_ID", subObj.ID));
                                                            //cmd.Parameters.Add(new OracleParameter("QC_PREFERENCES_ID", regOPS_QC_Pref_ID));
                                                            //cmd.Parameters.Add(new OracleParameter("SUB_CHECKLIST_ID", subObj.Sub_Library_ID));
                                                            //cmd.Parameters.Add(new OracleParameter("QC_TYPE", subObj.QC_Type));
                                                            //cmd.Parameters.Add(new OracleParameter("CHECK_PARAMETER", subObj.Check_Parameter));
                                                            //cmd.Parameters.Add(new OracleParameter("CHECKLIST_ID", Previousvalue));
                                                            DataSet SubdsSeq = new DataSet();
                                                            SubdsSeq = conn.GetDataSet("SELECT REGOPS_QC_PREFER_DETAILS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                                                            if (conn.Validate(SubdsSeq))
                                                            {
                                                                subObj.ID = Convert.ToInt64(SubdsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                                                            }
                                                            cmd = new OracleCommand("INSERT INTO REGOPS_QC_PREFERENCE_DETAILS(ID,QC_PREFERENCES_ID,CHECKLIST_ID,QC_TYPE,CHECK_PARAMETER,GROUP_CHECK_ID,DOC_TYPE,PARENT_CHECK_ID,CREATED_ID,PARENET_CHECK_LIBRARY_ID) VALUES(:ID,:QC_PREFERENCES_ID,:CHECKLIST_ID,:QC_TYPE,:CHECK_PARAMETER,:GROUP_CHECK_ID,:DOC_TYPE,:PARENT_CHECK_ID,:CREATED_ID,:PARENET_CHECK_LIBRARY_ID)", con);
                                                            cmd.Parameters.Add(new OracleParameter("ID", subObj.ID));
                                                            cmd.Parameters.Add(new OracleParameter("QC_PREFERENCES_ID", regOPS_QC_Pref_ID));
                                                            cmd.Parameters.Add(new OracleParameter("CHECKLIST_ID", subObj.Sub_Library_ID));
                                                            cmd.Parameters.Add(new OracleParameter("QC_TYPE", subObj.QC_Type));
                                                            cmd.Parameters.Add(new OracleParameter("CHECK_PARAMETER", subObj.Check_Parameter));
                                                            cmd.Parameters.Add(new OracleParameter("GROUP_CHECK_ID", chkList.Group_Check_ID));
                                                            cmd.Parameters.Add(new OracleParameter("DOC_TYPE", "PDF"));
                                                            cmd.Parameters.Add(new OracleParameter("PARENT_CHECK_ID", Previousvalue));
                                                            cmd.Parameters.Add(new OracleParameter("CREATED_ID", chkList.Created_ID));
                                                            cmd.Parameters.Add(new OracleParameter("PARENET_CHECK_LIBRARY_ID", chkList.Library_ID));
                                                            m_Res = cmd.ExecuteNonQuery();
                                                            if (m_Res > 0)
                                                            {
                                                                result = "Success";
                                                            }
                                                            else
                                                            {
                                                                result = "Failed";
                                                            }
                                                        }
                                                    }
                                                    result = "Success";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if ((WordFlag != "") && (PdfFlag != ""))
                        {
                            rOBJ.File_Format = "Both";

                        }
                        if ((WordFlag != "") && (PdfFlag == ""))
                        {
                            rOBJ.File_Format = "Word";
                        }
                        if ((WordFlag == "") && (PdfFlag != ""))
                        {
                            rOBJ.File_Format = "PDF";
                        }
                        string query1 = "UPDATE REGOPS_QC_PREFERENCES SET FILE_FORMAT='" + rOBJ.File_Format + "' WHERE ID=" + regOPS_QC_Pref_ID + "";
                        int m_Res1 = conn.ExecuteNonQuery(query1, CommandType.Text, ConnectionState.Open);
                        if (m_Res1 > 0)
                            result = "Success";
                    }
                    else
                    {
                        result = "Failed";
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Error";
            }
            finally
            {
                con.Close();
            }
        }

        public string SavePreferencesDetails1(RegOpsQC rOBJ)
        {

            string result = string.Empty;
            OracleConnection con = null;
            Connection conn = null;
            OracleTransaction trans;
            con = new OracleConnection();
            conn = new Connection();
            string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            con.ConnectionString = m_DummyConn;
            con.Open();
            trans = con.BeginTransaction(IsolationLevel.ReadCommitted);
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == rOBJ.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == rOBJ.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == rOBJ.ROLE_ID)
                    {


                        long[] QC_Preference_Id;
                        long[] CHECKLIST_ID;
                        long[] Group_Check_ID;
                        long[] Created_ID;
                        long[] Parent_Check_ID;
                        long[] QC_TYPE;
                        long[] Check_Order;
                        byte[][] Check_Parameter_File;
                        String[] CHECK_PARAMETER;
                        string[] DOC_TYPE = null;
                        int i = 0;
                        rOBJ.QCJobCheckListInfo = JsonConvert.DeserializeObject<List<RegOpsQC>>(rOBJ.QCJobCheckListDetails);
                        Int64 regOPS_QC_Pref_ID = 0;

                        DataSet ds = new DataSet();
                        cmd = new OracleCommand("SELECT PREFERENCE_NAME FROM REGOPS_QC_PREFERENCES where upper(PREFERENCE_NAME) = :plan_name", con);
                        cmd.Parameters.Add("plan_name", rOBJ.Preference_Name.ToLower().ToString());
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            return "PreferenceExists";
                        }

                        else
                        {
                            string File_Format1 = string.Empty;
                            string File_Format2 = string.Empty;
                            DataSet dsSeq1 = new DataSet();
                            dsSeq1 = conn.GetDataSet("SELECT REGOPS_QC_PREFERENCES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                            if (conn.Validate(dsSeq1))
                            {
                                regOPS_QC_Pref_ID = Convert.ToInt64(dsSeq1.Tables[0].Rows[0]["NEXTVAL"].ToString());
                            }
                            rOBJ.Created_Date = DateTime.Now;
                            cmd = null;

                            cmd = new OracleCommand("INSERT INTO REGOPS_QC_PREFERENCES(ID,PREFERENCE_NAME,CREATED_ID,CREATED_DATE,DESCRIPTION,VALIDATION_PLAN_TYPE,CATEGORY,PLAN_GROUP,WORD_TEMPLATE_ID,OUTPUT_TYPE,STATUS) values(:ID,:PREFERENCE_NAME,:CREATED_ID,:CREATED_DATE,:DESCRIPTION,:VALIDATION_PLAN_TYPE,:CATEGORY,:PLAN_GROUP,:WORD_TEMPLATE_ID,:RegopsOutputType,:STATUS)", con);
                            cmd.Parameters.Add(new OracleParameter("ID", regOPS_QC_Pref_ID));
                            cmd.Parameters.Add(new OracleParameter("PREFERENCE_NAME", rOBJ.Preference_Name));
                            cmd.Parameters.Add(new OracleParameter("CREATED_ID", rOBJ.Created_ID));
                            cmd.Parameters.Add(new OracleParameter("CREATED_DATE", rOBJ.Created_Date));
                            cmd.Parameters.Add(new OracleParameter("DESCRIPTION", rOBJ.Validation_Description));
                            cmd.Parameters.Add(new OracleParameter("VALIDATION_PLAN_TYPE", rOBJ.Validation_Plan_Type));
                            cmd.Parameters.Add(new OracleParameter("CATEGORY", rOBJ.Category));
                            cmd.Parameters.Add(new OracleParameter("PLAN_GROUP", rOBJ.Plan_Group));
                            cmd.Parameters.Add(new OracleParameter("WORD_TEMPLATE_ID", rOBJ.WordTemplate_ID));
                            cmd.Parameters.Add(new OracleParameter("RegopsOutputType", rOBJ.Regops_Output_Type != "" ? Convert.ToInt64(rOBJ.Regops_Output_Type) : 0));
                            cmd.Parameters.Add(new OracleParameter("STATUS", "1"));
                            cmd.Transaction = trans;
                            int m_Res = cmd.ExecuteNonQuery();
                            if (m_Res > 0)
                            {
                                List<RegOpsQC> lstchks = new List<RegOpsQC>();
                                List<RegOpsQC> lstSubchks = new List<RegOpsQC>();
                                foreach (RegOpsQC obj in rOBJ.QCJobCheckListInfo)
                                {
                                    if (obj.WordCheckList != null)
                                    {
                                        if (obj.WordCheckList.Count > 0)
                                        {
                                            // WordFlag = true;
                                            foreach (RegOpsQC chkgrp in obj.WordCheckList)
                                            {
                                                lstchks.AddRange(chkgrp.CheckList);
                                            }
                                        }
                                    }
                                    if (obj.PdfCheckList != null)
                                    {
                                        if (obj.PdfCheckList.Count > 0)
                                        {
                                            // PdfFlag = true;
                                            foreach (RegOpsQC chkgrp in obj.PdfCheckList)
                                            {
                                                lstchks.AddRange(chkgrp.CheckList);
                                            }
                                        }
                                    }
                                }
                                if (lstchks.Count > 0)
                                {
                                    lstchks = lstchks.Where(x => x.checkvalue == "1").ToList();
                                    foreach (RegOpsQC rObj in lstchks)
                                    {

                                        if (rObj.Control_Type == "File Upload")
                                        {
                                            if (rOBJ.Attachment_Name != null)
                                            {
                                                string sourcePath = m_SourceFolderPathTempFiles + rOBJ.Attachment_Name;
                                                //Convert the File data to Byte Array.
                                                byte[] file = System.IO.File.ReadAllBytes(sourcePath);
                                                rObj.Check_Parameter_File = file;
                                                string[] s = Regex.Split(rOBJ.Attachment_Name, @"%%%%%%%");
                                                string extension = Path.GetExtension(rOBJ.Attachment_Name);
                                                rObj.Check_Parameter = s[0] + extension;
                                                FileInfo fileTem = new FileInfo(sourcePath);
                                                if (fileTem.Exists)//check file exsit or not
                                                {
                                                    File.Delete(sourcePath);
                                                }
                                            }
                                        }
                                        rObj.Qc_Preferences_Id = regOPS_QC_Pref_ID;
                                        rObj.CheckList_ID = rObj.Library_ID;
                                        if (rObj.SubCheckList != null)
                                        {
                                            if (rObj.SubCheckList.Count > 0)
                                            {
                                                rObj.SubCheckList = rObj.SubCheckList.Where(x => x.checkvalue == "1").ToList();
                                                foreach (RegOpsQC sObj in rObj.SubCheckList)
                                                {
                                                    sObj.Qc_Preferences_Id = regOPS_QC_Pref_ID;
                                                    sObj.CheckList_ID = sObj.Sub_Library_ID;
                                                    if (rOBJ.Validation_Plan_Type == "Publishing")
                                                    {
                                                        sObj.QC_Type = sObj.Type;
                                                    }
                                                    else
                                                    {
                                                        sObj.QC_Type = sObj.QC_Type;
                                                    }
                                                    if (sObj.Check_Parameter != null && sObj.Control_Type == "Multiselect")
                                                        sObj.Check_Parameter = sObj.Check_Parameter.Replace("{", "[").Replace("}", "]");
                                                    sObj.Group_Check_ID = sObj.Group_Check_ID;
                                                    sObj.DocType = sObj.DocType;
                                                    sObj.Parent_Check_ID = sObj.PARENT_KEY;
                                                    sObj.Created_ID = rObj.Created_ID;
                                                    lstSubchks.Add(sObj);
                                                }
                                            }
                                        }
                                    }
                                    foreach (RegOpsQC rSubObj in lstSubchks)
                                    {
                                        lstchks.Add(rSubObj);
                                    }
                                    QC_Preference_Id = new long[lstchks.Count];
                                    CHECKLIST_ID = new long[lstchks.Count];
                                    DOC_TYPE = new string[lstchks.Count];
                                    Group_Check_ID = new long[lstchks.Count];
                                    QC_TYPE = new long[lstchks.Count];
                                    CHECK_PARAMETER = new string[lstchks.Count];
                                    Parent_Check_ID = new long[lstchks.Count];
                                    Check_Order = new long[lstchks.Count];
                                    Created_ID = new long[lstchks.Count];
                                    Check_Parameter_File = new byte[lstchks.Count][];
                                    i = 0;
                                    foreach (RegOpsQC rObj in lstchks)
                                    {
                                        QC_Preference_Id[i] = regOPS_QC_Pref_ID;
                                        CHECKLIST_ID[i] = rObj.CheckList_ID;
                                        DOC_TYPE[i] = rObj.DocType;
                                        Group_Check_ID[i] = rObj.Group_Check_ID;
                                        if (rOBJ.Validation_Plan_Type == "Publishing")
                                        {
                                            QC_TYPE[i] = rObj.Type;
                                        }
                                        else
                                        {
                                            QC_TYPE[i] = rObj.QC_Type;
                                        }
                                        if (rObj.Control_Type == "Multiselect")
                                            CHECK_PARAMETER[i] = rObj.Check_Parameter.Replace("{", "[").Replace("}", "]");
                                        else
                                            CHECK_PARAMETER[i] = rObj.Check_Parameter;
                                        Parent_Check_ID[i] = rObj.Parent_Check_ID;
                                        Check_Order[i] = rObj.Check_Order_ID;
                                        Created_ID[i] = rObj.Created_ID;
                                        Check_Parameter_File[i] = rObj.Check_Parameter_File;
                                        i++;
                                    }
                                    cmd1 = new OracleCommand();
                                    cmd1.ArrayBindCount = lstchks.Count;
                                    cmd1.CommandType = CommandType.StoredProcedure;
                                    cmd1.CommandText = "SP_REGOPS_QC_Save_PLAN_DTLS";
                                    cmd1.Parameters.Add(new OracleParameter("ParQC_Preference_ID", QC_Preference_Id));
                                    cmd1.Parameters.Add(new OracleParameter("ParCHECKLIST_ID", CHECKLIST_ID));
                                    cmd1.Parameters.Add(new OracleParameter("ParDOC_Type", DOC_TYPE));
                                    cmd1.Parameters.Add(new OracleParameter("ParGROUP_CHECK_ID", Group_Check_ID));
                                    cmd1.Parameters.Add(new OracleParameter("ParParent_CHECK_ID", Parent_Check_ID));
                                    cmd1.Parameters.Add(new OracleParameter("ParQC_TYPE", QC_TYPE));
                                    cmd1.Parameters.Add(new OracleParameter("ParCHECK_PARAMETER", CHECK_PARAMETER));
                                    cmd1.Parameters.Add(new OracleParameter("ParCreated_Id", Created_ID));
                                    cmd1.Parameters.Add(new OracleParameter("ParCheck_Order", Check_Order));
                                    cmd1.Parameters.Add(new OracleParameter("Check_Parameter_File", OracleDbType.Blob, Check_Parameter_File, ParameterDirection.Input));
                                    cmd1.Connection = con;
                                    cmd1.Transaction = trans;
                                    int mres = cmd1.ExecuteNonQuery();
                                    if (mres == -1)
                                        result = "Success";
                                    else
                                        result = "Failed";
                                }

                                if (DOC_TYPE.Contains("Word") && DOC_TYPE.Contains("PDF"))
                                {
                                    rOBJ.File_Format = "Both";
                                }
                                if (DOC_TYPE.Contains("Word") && !DOC_TYPE.Contains("PDF"))
                                {
                                    rOBJ.File_Format = "Word";
                                }
                                if (!DOC_TYPE.Contains("Word") && DOC_TYPE.Contains("PDF"))
                                {
                                    rOBJ.File_Format = "PDF";
                                }
                                cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCES SET FILE_FORMAT=:FILE_FORMAT WHERE ID=:ID", con);
                                cmd.Parameters.Add("FILE_FORMAT", rOBJ.File_Format);
                                cmd.Parameters.Add("ID", regOPS_QC_Pref_ID);
                                cmd.Transaction = trans;
                                int m_Res1 = cmd.ExecuteNonQuery();
                                trans.Commit();
                                if (m_Res1 > 0)
                                    result = "Success";
                            }
                            else
                            {
                                result = "Failed";
                            }
                        }
                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                trans.Rollback();
                ErrorLogger.Error(ex);
                return "Error";
            }
            finally
            {
                con.Close();
                conn.connection.Close();
                cmd = null;
                cmd1 = null;
            }
        }



        //Get logic for validation plan details
        public List<ValidationPlan> GetGroupCheckListValidationDetails(ValidationPlan tpObj)
        {
            OracleConnection con1 = new OracleConnection();
            try
            {
                List<ValidationPlan> tpLst = new List<ValidationPlan>();
                ValidationPlan RegOpsQC = new ValidationPlan();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());

                        Connection conn = new Connection();
                        conn.connectionstring = m_DummyConn;
                        con1.ConnectionString = m_DummyConn;
                        con1.Open();
                        string query = string.Empty;
                        int? Status = null;
                        if (tpObj.Status != "" && tpObj.Status != null)
                        {
                            if (("Active").ToUpper().Contains(tpObj.Status.ToUpper()))
                            {
                                Status = 1;
                            }
                            else if (("Inactive").ToUpper().Contains(tpObj.Status.ToUpper()))
                            {
                                Status = 0;
                            }
                        }
                        DataSet ds = new DataSet();
                        DataSet predefineDs = new DataSet();
                        if (tpObj.SearchValue == "" || tpObj.SearchValue == null)
                        {
                            query = " select a.ID,a.PREFERENCE_NAME,a.CATEGORY,a.CREATED_DATE,a.DESCRIPTION as Validation_Description,a.File_Format,a.validation_plan_type,case when a.STATUS=1 then 'Active' when  a.STATUS=0 then 'Inactive' end as Status, case when a.PREDEFINED_PLAN_ID > 0 then 'Yes' else 'No' end as IsPredefinedPlan, b.FIRST_NAME || ' '|| b.LAST_NAME AS Created_By from REGOPS_QC_PREFERENCES a left join  USERS b on a.CREATED_ID=b.USER_ID  ORDER BY a.CREATED_DATE DESC";
                            cmd = new OracleCommand(query, con1);
                            da = new OracleDataAdapter(cmd);
                            da.Fill(ds);
                            con1.Close();
                        }
                        else
                        {
                            string[] createDate;
                            query = "select a.ID,a.PREFERENCE_NAME,a.CATEGORY,a.CREATED_DATE,a.DESCRIPTION as Validation_Description,a.File_Format,a.validation_plan_type,case when a.STATUS=1 then 'Active' when  a.STATUS=0 then 'Inactive' end as Status, case when a.PREDEFINED_PLAN_ID > 0 then 'Yes' else 'No' end as IsPredefinedPlan, b.FIRST_NAME || ' '|| b.LAST_NAME AS Created_By from REGOPS_QC_PREFERENCES a left join  USERS b on a.CREATED_ID=b.USER_ID Where ";
                            if (!string.IsNullOrEmpty(tpObj.Status) && tpObj.Status != "Both")
                            {
                                query += " a.STATUS=:Status AND ";
                            }
                            if (!string.IsNullOrEmpty(tpObj.Preference_Name))
                            {
                                query += " lower(A.PREFERENCE_NAME) like :PREFERENCE_NAME AND ";
                            }
                            if (!string.IsNullOrEmpty(tpObj.File_Format))
                            {
                                query += " lower(A.File_Format) like :File_Format AND";
                            }
                            if (!string.IsNullOrEmpty(tpObj.Validation_Plan_Type))
                            {
                                query += " lower(a.validation_plan_type) =:validation_plan_type AND";
                            }
                            if (!string.IsNullOrEmpty(tpObj.Category))
                            {
                                query += " lower(a.CATEGORY) =:Category AND";
                            }
                            if (!string.IsNullOrEmpty(tpObj.Create_date))
                            {
                                createDate = tpObj.Create_date.Split('-');
                                query += "  SUBSTR(A.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE(:CREATED_TDATE, 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE(:CREATED_FDATE, 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                            }

                            query += " 1=1 ORDER BY a.CREATED_DATE DESC";
                        }
                        cmd = new OracleCommand(query, con1);
                        if (Status != null)
                        {
                            cmd.Parameters.Add(new OracleParameter("Status", Status));
                        }
                        if (tpObj.Preference_Name != "" && tpObj.Preference_Name != null)
                        {
                            cmd.Parameters.Add(new OracleParameter("PREFERENCE_NAME", "%" + tpObj.Preference_Name.ToLower() + "%"));
                        }
                        if (tpObj.File_Format != "" && tpObj.File_Format != null)
                        {
                            cmd.Parameters.Add(new OracleParameter("File_Format", "%" + tpObj.File_Format.ToLower() + "%"));
                        }
                        if (tpObj.Validation_Plan_Type != "" && tpObj.Validation_Plan_Type != null)
                        {
                            cmd.Parameters.Add(new OracleParameter("validation_plan_type", tpObj.Validation_Plan_Type.ToLower()));
                        }
                        if (tpObj.Category != "" && tpObj.Category != null)
                        {
                            cmd.Parameters.Add(new OracleParameter("Category", tpObj.Category.ToLower()));
                        }
                        if (tpObj.Create_date != "")
                        {
                            string[] createDate;
                            createDate = tpObj.Create_date.Split('-');
                            cmd.Parameters.Add(new OracleParameter("CREATED_TDATE", createDate[0].Trim()));
                            cmd.Parameters.Add(new OracleParameter("CREATED_FDATE", createDate[1].Trim()));
                        }
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        con1.Close();
                        if (conn.Validate(ds))
                        {
                            tpLst = new DataTable2List().DataTableToList<ValidationPlan>(ds.Tables[0]);
                        }
                        return tpLst;
                    }
                    RegOpsQC = new ValidationPlan();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new ValidationPlan();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                con1.Close();
            }

        }

        //get logic for validation details by id
        public List<RegOpsQC> GroupCheckListDetailsbyID(RegOpsQC tpObj)
        {
            Connection conn = null;
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        string query = string.Empty;
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();
                        OracleDataAdapter da;
                        List<RegOpsQC> resultList = new List<RegOpsQC>();
                        int CreatedID = Convert.ToInt32(tpObj.Created_ID);
                        int PreferenceID = Convert.ToInt32(tpObj.Preference_ID);
                        DataSet ds = new DataSet();

                        query = " select rg.*,ml.library_value as Regops_output_type,rwm.TEMPLATE_NAME,rwm.VERSION from REGOPS_QC_PREFERENCES rg left join Regops_Word_Styles_Metadata rwm on rwm.TEMPLATE_ID=rg.WORD_TEMPLATE_ID left join MASTER_LIBRARY ml on ml.LIBRARY_ID=rg.OUTPUT_TYPE where ID=:ID";
                        cmd = new OracleCommand(query, con1);
                        cmd.Parameters.Add(new OracleParameter("ID", tpObj.Preference_ID));
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        con1.Close();
                        if (conn.Validate(ds))
                        {
                            tpLst = (from DataRow dr in ds.Tables[0].Rows
                                     select new RegOpsQC()
                                     {
                                         ID = Convert.ToInt32(dr["ID"].ToString()),
                                         Preference_Name = dr["PREFERENCE_NAME"].ToString(),
                                         Validation_Description = dr["DESCRIPTION"].ToString(),
                                         Validation_Plan_Type = dr["VALIDATION_PLAN_TYPE"].ToString(),
                                         Category = dr["CATEGORY"].ToString(),
                                         Plan_Group = dr["PLAN_GROUP"].ToString(),
                                         Template_Name = dr["TEMPLATE_NAME"].ToString(),
                                         Version = dr["VERSION"].ToString(),
                                         WordTemplate_ID = dr["WORD_TEMPLATE_ID"].ToString() != "" ? Convert.ToInt32(dr["WORD_TEMPLATE_ID"].ToString()) : 0,
                                         Regops_Output_Type = dr["REGOPS_OUTPUT_TYPE"].ToString(),
                                         WordCheckList = GroupWORDCheckListDetailsbyID(CreatedID, PreferenceID),
                                         EditWordCheckList = GetQCCheckListsFromLibraryWord(tpObj)
                                     }).ToList();
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }

        }

        //get logic for validation details by id
        public List<RegOpsQC> GroupCheckListDetailsbyIDPDF(RegOpsQC tpObj)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    //if(Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    //{
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    //int CreatedID = Convert.ToInt32(tpObj.Created_ID);                    
                    int PreferenceID = Convert.ToInt32(tpObj.Preference_ID);

                    DataSet ds = new DataSet();
                    ds = conn.GetDataSet("select rg.*,ml.library_value as Regops_output_type from REGOPS_QC_PREFERENCES rg left join MASTER_LIBRARY ml on ml.LIBRARY_ID=rg.OUTPUT_TYPE where ID=" + tpObj.Preference_ID + "", CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds))
                    {
                        tpObj.Regops_Output_Type = ds.Tables[0].Rows[0]["REGOPS_OUTPUT_TYPE"].ToString();
                        tpLst = (from DataRow dr in ds.Tables[0].Rows
                                 select new RegOpsQC()
                                 {
                                     ID = Convert.ToInt32(dr["ID"].ToString()),
                                     Preference_Name = dr["PREFERENCE_NAME"].ToString(),
                                     Validation_Description = dr["DESCRIPTION"].ToString(),
                                     Regops_Output_Type = dr["REGOPS_OUTPUT_TYPE"].ToString(),
                                     PdfCheckList = GroupPDFCheckListDetailsbyID(CreatedID, PreferenceID),
                                     EditPdfCheckList = GetQCCheckListsFromLibraryPDF(tpObj)
                                 }).ToList();

                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                    //return tpLst;
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// Method called for View plan in create Job and view plan
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public List<RegOpsQC> JobGroupCheckListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();

                        cmd = new OracleCommand("select rwm.TEMPLATE_NAME,rwm.VERSION,P.CATEGORY,ml.library_value as Regops_output_type, P.ID,P.PREFERENCE_NAME,P.FILE_FORMAT,P.DESCRIPTION,P.VALIDATION_PLAN_TYPE,(SELECT COUNT(S.ID) FROM REGOPS_QC_PREFERENCE_DETAILS S WHERE S.QC_PREFERENCES_ID = P.ID AND S.QC_TYPE = 1) AS FIXCONT,(SELECT COUNT(S.ID) FROM REGOPS_QC_PREFERENCE_DETAILS S WHERE S.QC_PREFERENCES_ID = P.ID)  AS CHECKCOUNT from REGOPS_QC_PREFERENCES P left join Regops_Word_Styles_Metadata rwm on rwm.TEMPLATE_ID=P.WORD_TEMPLATE_ID left join MASTER_LIBRARY ml on ml.LIBRARY_ID=P.OUTPUT_TYPE where P.ID =:Preference_ID", con1);
                        cmd.Parameters.Add(new OracleParameter("Preference_ID", tpObj.Preference_ID));
                        OracleDataAdapter da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        con1.Close();
                        //ds = conn.GetDataSet("select P.ID,P.PREFERENCE_NAME,P.FILE_FORMAT,P.DESCRIPTION,P.VALIDATION_PLAN_TYPE,(SELECT COUNT(S.ID) FROM REGOPS_QC_PREFERENCE_DETAILS S WHERE S.QC_PREFERENCES_ID = P.ID AND S.QC_TYPE = 1) AS FIXCONT,(SELECT COUNT(S.ID) FROM REGOPS_QC_PREFERENCE_DETAILS S WHERE S.QC_PREFERENCES_ID = P.ID)  AS CHECKCOUNT from REGOPS_QC_PREFERENCES P where P.ID = " + tpObj.Preference_ID + "", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                RegOpsQC tObj1 = new RegOpsQC();
                                tObj1.ID = Convert.ToInt64(ds.Tables[0].Rows[i]["ID"].ToString());
                                tObj1.Preference_Name = ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                                tObj1.File_Format = ds.Tables[0].Rows[i]["FILE_FORMAT"].ToString();
                                tObj1.Validation_Description = ds.Tables[0].Rows[i]["DESCRIPTION"].ToString();
                                tObj1.Validation_Plan_Type = ds.Tables[0].Rows[i]["VALIDATION_PLAN_TYPE"].ToString();
                                tObj1.Category = ds.Tables[0].Rows[i]["CATEGORY"].ToString();
                                tObj1.Template_Name = ds.Tables[0].Rows[i]["TEMPLATE_NAME"].ToString();
                                tObj1.Regops_Output_Type = ds.Tables[0].Rows[i]["REGOPS_OUTPUT_TYPE"].ToString();
                                tObj1.Version = ds.Tables[0].Rows[i]["VERSION"].ToString();
                                tObj1.TotalFixedCheckCount = Convert.ToDecimal(ds.Tables[0].Rows[i]["FIXCONT"].ToString());
                                tObj1.TotalCheckCount = Convert.ToDecimal(ds.Tables[0].Rows[i]["CHECKCOUNT"].ToString());
                                tObj1.WordCheckList = JobGroupWORDCheckListDetailsbyID(tpObj);

                                tObj1.PdfCheckList = JobGroupPDFCheckListDetailsbyID(tpObj);
                                tpLst.Add(tObj1);
                            }
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// Method called for View plan in create Job and view plan
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public List<RegOpsQC> ViewJobByIDCheckList(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        ds = conn.GetDataSet("select P.*,ml.library_value as Regops_output_type,(select COUNT(*) from REGOPS_QC_JOBS_CHECKLIST where QC_PREFERENCES_ID=P.ID AND QC_TYPE=1 and JOB_ID=" + tpObj.Job_ID + ")AS NO_FIX_CONFIG ,(select COUNT(*) from REGOPS_QC_JOBS_CHECKLIST where QC_PREFERENCES_ID = P.ID AND  JOB_ID=" + tpObj.Job_ID + ")AS NO_CHECK_CINFIG from REGOPS_QC_PREFERENCES P left join MASTER_LIBRARY ml on ml.LIBRARY_ID=P.OUTPUT_TYPE where ID=" + tpObj.Preference_ID, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                RegOpsQC tObj1 = new RegOpsQC();
                                tObj1.ID = Convert.ToInt64(ds.Tables[0].Rows[i]["ID"].ToString());
                                tObj1.Preference_Name = ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                                tObj1.File_Format = ds.Tables[0].Rows[i]["FILE_FORMAT"].ToString();
                                tObj1.Validation_Description = ds.Tables[0].Rows[i]["DESCRIPTION"].ToString();
                                tObj1.Category = ds.Tables[0].Rows[i]["CATEGORY"].ToString();
                                tObj1.Validation_Plan_Type = ds.Tables[0].Rows[i]["VALIDATION_PLAN_TYPE"].ToString();
                                tObj1.No_Of_Checks_Configured = Convert.ToInt64(ds.Tables[0].Rows[i]["NO_CHECK_CINFIG"].ToString());
                                tObj1.No_Of_Fixes = Convert.ToInt64(ds.Tables[0].Rows[i]["NO_FIX_CONFIG"].ToString());
                                tObj1.Regops_Output_Type = ds.Tables[0].Rows[i]["REGOPS_OUTPUT_TYPE"].ToString();
                                tObj1.WordCheckList = ViewJobWordDetailsByID(tpObj);
                                tObj1.PdfCheckList = ViewJobByIDPDFList(tpObj);
                                tpLst.Add(tObj1);
                            }
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> ViewJobByIDPDFList(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> pdfLst = new List<RegOpsQC>();
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                string query = string.Empty;
                query = "select rc.GROUP_CHECK_ID,lib.library_value as GroupName,lib.CHECK_ORDER as Group_Order,rc.QC_PREFERENCES_ID,rc.DOC_TYPE,rc.CREATED_ID,rc.ID,rc.CHECKLIST_ID,lib1.HELP_TEXT,lib1.Control_type,lib1.CHECK_UNITS,lib1.Library_Value as Check_Name,rc.QC_TYPE,rc.CHECK_PARAMETER,rc.CHECK_ORDER,rc.PARENT_CHECK_ID"
                  + " from REGOPS_QC_JOBS_CHECKLIST rc inner join CHECKS_LIBRARY lib  on lib.LIBRARY_ID = rc.GROUP_CHECK_ID inner join CHECKS_LIBRARY lib1 on lib1.LIBRARY_ID = rc.CHECKLIST_ID where DOC_TYPE='PDF' and QC_PREFERENCES_ID=" + tpObj.Preference_ID + " and rc.JOB_ID= " + tpObj.Job_ID + "  and lib.status=1 and lib1.status=1 order by lib.check_order,rc.ID";
                ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    DataTable dt = ds.Tables[0].DefaultView.ToTable(true, "GROUP_CHECK_ID", "GroupName");

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Group_Check_ID = Convert.ToInt32(dt.Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.Group_Check_Name = dt.Rows[i]["groupname"].ToString();
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tObj1.Created_ID = tpObj.Created_ID;

                        DataTable dt1 = new DataTable();
                        DataView dv = new DataView(ds.Tables[0]);
                        dv.RowFilter = "GROUP_CHECK_ID = " + dt.Rows[i]["GROUP_CHECK_ID"] + " and PARENT_CHECK_ID is null";

                        tpLst = (from DataRow dr in dv.ToTable().Rows
                                 select new RegOpsQC()
                                 {
                                     ID = Convert.ToInt32(dr["ID"].ToString()),
                                     CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                     QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                     HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                     CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                     Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                     Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ") : dr["CHECK_PARAMETER"].ToString(),
                                     Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString()),
                                     DocType = dr["DOC_TYPE"].ToString(),
                                     Check_Name = dr["check_name"].ToString(),
                                     Control_Type = dr["Control_type"].ToString(),
                                     Created_ID = tpObj.Created_ID,
                                     SubCheckList = GetSubCheckListDataForView(dr, ds),
                                     QCTypeStr = (dr["QC_TYPE"].ToString() == "1") ? "Yes" : "No"
                                 }).ToList();
                        if (tpLst.Count > 0)
                        {
                            tObj1.CheckList = tpLst;
                            pdfLst.Add(tObj1);
                        }
                    }
                }

                return pdfLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> ViewJobWordDetailsByID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> WrdLst = new List<RegOpsQC>();
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                string query = string.Empty;
                query = "select rc.GROUP_CHECK_ID,lib.library_value as GroupName,lib.CHECK_ORDER as Group_Order,rc.QC_PREFERENCES_ID,rc.DOC_TYPE,rc.CREATED_ID,rc.ID,rc.CHECKLIST_ID,lib1.HELP_TEXT,lib1.Control_type,lib1.CHECK_UNITS,lib1.Library_Value as Check_Name,rc.QC_TYPE,rc.CHECK_PARAMETER,rc.CHECK_ORDER,rc.PARENT_CHECK_ID"
                  + " from REGOPS_QC_JOBS_CHECKLIST rc inner join CHECKS_LIBRARY lib  on lib.LIBRARY_ID = rc.GROUP_CHECK_ID inner join CHECKS_LIBRARY lib1 on lib1.LIBRARY_ID = rc.CHECKLIST_ID where DOC_TYPE='Word' and QC_PREFERENCES_ID=" + tpObj.Preference_ID + " and rc.JOB_ID= " + tpObj.Job_ID + " and lib.status=1 and lib1.status=1 order by lib.check_order,rc.ID";
                ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    DataTable dt = ds.Tables[0].DefaultView.ToTable(true, "GROUP_CHECK_ID", "GroupName");

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Group_Check_ID = Convert.ToInt32(dt.Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.Group_Check_Name = dt.Rows[i]["groupname"].ToString();
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tObj1.Created_ID = tpObj.Created_ID;

                        DataTable dt1 = new DataTable();
                        DataView dv = new DataView(ds.Tables[0]);
                        dv.RowFilter = "GROUP_CHECK_ID = " + dt.Rows[i]["GROUP_CHECK_ID"] + " and PARENT_CHECK_ID is null";

                        tpLst = (from DataRow dr in dv.ToTable().Rows
                                 select new RegOpsQC()
                                 {
                                     ID = Convert.ToInt32(dr["ID"].ToString()),
                                     CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                     QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                     HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                     CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                     Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                     Control_Type = dr["Control_type"].ToString(),
                                     Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ") : dr["CHECK_PARAMETER"].ToString(),
                                     Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString()),
                                     DocType = dr["DOC_TYPE"].ToString(),
                                     Check_Name = dr["check_name"].ToString(),
                                     Created_ID = tpObj.Created_ID,
                                     SubCheckList = GetSubCheckListDataForView(dr, ds),
                                     QCTypeStr = (dr["QC_TYPE"].ToString() == "1") ? "Yes" : "No"
                                 }).ToList();
                        if (tpLst.Count > 0)
                        {
                            tObj1.CheckList = tpLst;
                            WrdLst.Add(tObj1);
                        }
                    }
                }

                return WrdLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GroupWORDCheckListDetailsbyID(long Created_ID, long Preference_ID)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(Created_ID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                List<RegOpsQC> WrdLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                string query = string.Empty;
                query = "select rc.GROUP_CHECK_ID,lib.library_value as GroupName,lib.CHECK_ORDER as Group_Order,rc.QC_PREFERENCES_ID,rc.DOC_TYPE,rc.CREATED_ID,rc.ID,rc.CHECKLIST_ID,lib1.HELP_TEXT,lib1.Control_type,lib1.CHECK_UNITS,lib1.Library_Value as Check_Name,rc.QC_TYPE,rc.CHECK_PARAMETER,rc.CHECK_ORDER,rc.PARENT_CHECK_ID"
             + " from REGOPS_QC_PREFERENCE_DETAILS rc inner join checks_library lib  on lib.LIBRARY_ID = rc.GROUP_CHECK_ID inner join checks_library lib1 on lib1.LIBRARY_ID = rc.CHECKLIST_ID where DOC_TYPE='Word' and QC_PREFERENCES_ID=:QC_PREFERENCES_ID and lib.status=1 and lib1.status=1 order by lib.check_order,rc.ID";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("QC_PREFERENCES_ID", Preference_ID));
                OracleDataAdapter da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                con1.Close();
                if (conn.Validate(ds))
                {

                    tpLst = (from DataRow dr in ds.Tables[0].Rows
                             select new RegOpsQC()
                             {
                                 ID = Convert.ToInt32(dr["ID"].ToString()),
                                 CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                 //QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                 QC_Type = dr["QC_TYPE"].ToString() != "" && dr["QC_TYPE"] != null ? Convert.ToInt32(dr["QC_TYPE"].ToString()) : 0,
                                 Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                 Control_Type = dr["CONTROL_TYPE"].ToString(),
                                 Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\", "").Replace("\"[", "[").Replace("]\"", "]") : dr["CHECK_PARAMETER"].ToString(),
                                 DocType = dr["DOC_TYPE"].ToString(),
                                 Library_Value = dr["Check_Name"].ToString(),
                                 //Created_ID = Convert.ToInt32(dr["CREATED_ID"].ToString()),
                                 Created_ID = dr["CREATED_ID"].ToString() != "" && dr["CREATED_ID"] != null ? Convert.ToInt32(dr["CREATED_ID"].ToString()) : 0,
                                 checkvalue = "1",
                                 Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString()),
                                 SubCheckList = GetSubCheckListDataForEdit(dr, ds)
                             }).ToList();
                }

                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> JobGroupWORDCheckListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                List<RegOpsQC> WrdLst = new List<RegOpsQC>();
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                string query = string.Empty;
                query = "select rc.GROUP_CHECK_ID,lib.library_value as GroupName,lib.CHECK_ORDER as Group_Order,rc.QC_PREFERENCES_ID,rc.DOC_TYPE,rc.CREATED_ID,rc.ID,rc.CHECKLIST_ID,lib1.HELP_TEXT,lib1.Control_type,lib1.CHECK_UNITS,lib1.Library_Value as Check_Name,rc.QC_TYPE,rc.CHECK_PARAMETER,rc.CHECK_ORDER,rc.PARENT_CHECK_ID"
                  + " from REGOPS_QC_PREFERENCE_DETAILS rc inner join CHECKS_LIBRARY lib  on lib.LIBRARY_ID = rc.GROUP_CHECK_ID inner join CHECKS_LIBRARY lib1 on lib1.LIBRARY_ID = rc.CHECKLIST_ID where DOC_TYPE='Word' and QC_PREFERENCES_ID=:Preference_ID and lib.status=1 and lib1.status=1 order by lib.check_order,rc.ID";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("Preference_ID", tpObj.Preference_ID));
                OracleDataAdapter da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                con1.Close();

                if (conn.Validate(ds))
                {
                    DataTable dt = ds.Tables[0].DefaultView.ToTable(true, "GROUP_CHECK_ID", "GroupName");

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Group_Check_ID = Convert.ToInt32(dt.Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.Group_Check_Name = dt.Rows[i]["groupname"].ToString();
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tObj1.Created_ID = tpObj.Created_ID;

                        DataTable dt1 = new DataTable();
                        DataView dv = new DataView(ds.Tables[0]);
                        dv.RowFilter = "GROUP_CHECK_ID = " + dt.Rows[i]["GROUP_CHECK_ID"] + " and PARENT_CHECK_ID is null";

                        tpLst = (from DataRow dr in dv.ToTable().Rows
                                 select new RegOpsQC()
                                 {
                                     ID = Convert.ToInt32(dr["ID"].ToString()),
                                     CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                     //QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                     QC_Type = dr["QC_TYPE"].ToString() != "" && dr["QC_TYPE"] != null ? Convert.ToInt32(dr["QC_TYPE"].ToString()) : 0,
                                     HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                     CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                     Control_Type = dr["Control_type"].ToString(),
                                     Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                     Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "[").Replace("]\"", "]").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ") : dr["CHECK_PARAMETER"].ToString(),
                                     Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString()),
                                     DocType = dr["DOC_TYPE"].ToString(),
                                     Check_Name = dr["check_name"].ToString(),
                                     Created_ID = tpObj.Created_ID,
                                     SubCheckList = GetSubCheckListDataForView(dr, ds),
                                     QCTypeStr = (dr["QC_TYPE"].ToString() == "1") ? "Yes" : "No"
                                 }).ToList();
                        if (tpLst.Count > 0)
                        {
                            tObj1.CheckList = tpLst;
                            WrdLst.Add(tObj1);
                        }
                    }
                }
                return WrdLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetSubCheckListDataForView(DataRow tObj1, DataSet ds)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataView dv = new DataView(ds.Tables[0]);
                dv.RowFilter = "PARENT_CHECK_ID = " + tObj1["CHECKLIST_ID"];
                if (dv.ToTable().Rows.Count > 0)
                {
                    tpLst = (from DataRow dr in dv.ToTable().Rows
                             select new RegOpsQC()
                             {
                                 Sub_ID = Convert.ToInt32(dr["ID"].ToString()),
                                 CheckList_ID = Convert.ToInt32(dr["PARENT_CHECK_ID"].ToString()),
                                 Sub_CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                 //QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                 QC_Type = dr["QC_TYPE"].ToString() != "" && dr["QC_TYPE"] != null ? Convert.ToInt32(dr["QC_TYPE"].ToString()) : 0,
                                 HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                 CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                 Check_Name = dr["check_name"].ToString(),
                                 Control_Type = dr["Control_type"].ToString(),
                                 Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ") : dr["CHECK_PARAMETER"].ToString(),
                                 //Created_ID = Convert.ToInt32(dr["CREATED_ID"].ToString()),
                                 Created_ID = dr["CREATED_ID"].ToString() != "" && dr["CREATED_ID"] != null ? Convert.ToInt32(dr["CREATED_ID"].ToString()) : 0,
                                 Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString()),
                                 Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                 QCTypeStr = (dr["QC_TYPE"].ToString() == "1") ? "Yes" : "No",
                                 checkvalue = "1",
                             }).ToList();
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetSubCheckListDataForEdit(DataRow tObj1, DataSet ds)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataView dv = new DataView(ds.Tables[0]);
                dv.RowFilter = "PARENT_CHECK_ID = " + tObj1["CHECKLIST_ID"];
                if (dv.ToTable().Rows.Count > 0)
                {
                    tpLst = (from DataRow dr in dv.ToTable().Rows
                             select new RegOpsQC()
                             {
                                 Sub_ID = Convert.ToInt32(dr["ID"].ToString()),
                                 CheckList_ID = Convert.ToInt32(dr["PARENT_CHECK_ID"].ToString()),
                                 Sub_CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                 //QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                 QC_Type = dr["QC_TYPE"].ToString() != "" && dr["QC_TYPE"] != null ? Convert.ToInt32(dr["QC_TYPE"].ToString()) : 0,
                                 HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                 CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                 Check_Name = dr["check_name"].ToString(),
                                 Control_Type = dr["Control_type"].ToString(),
                                 Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\", "").Replace("\"[", "[").Replace("]\"", "]") : dr["CHECK_PARAMETER"].ToString(),
                                 // Created_ID = Convert.ToInt32(dr["CREATED_ID"].ToString()),
                                 Created_ID = dr["CREATED_ID"].ToString() != "" && dr["CREATED_ID"] != null ? Convert.ToInt32(dr["CREATED_ID"].ToString()) : 0,
                                 Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString()),
                                 Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                 QCTypeStr = (dr["QC_TYPE"].ToString() == "1") ? "Yes" : "No",
                                 checkvalue = "1",
                             }).ToList();
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }


        public List<RegOpsQC> JobGroupPDFCheckListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> pdfLst = new List<RegOpsQC>();
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                DataSet ds = new DataSet();
                string query = string.Empty;
                query = "select rc.GROUP_CHECK_ID,lib.library_value as GroupName,lib.CHECK_ORDER as Group_Order,rc.QC_PREFERENCES_ID,rc.DOC_TYPE,rc.CREATED_ID,rc.ID,rc.CHECKLIST_ID,lib1.HELP_TEXT,lib1.Control_type,lib1.CHECK_UNITS,lib1.Library_Value as Check_Name,rc.QC_TYPE,regexp_replace(regexp_replace(regexp_replace( regexp_replace(rc.CHECK_PARAMETER,'\\[',''),'\\]',''),'\"',''),',',', ') CHECK_PARAMETER,rc.CHECK_ORDER,rc.PARENT_CHECK_ID"
                  + " from REGOPS_QC_PREFERENCE_DETAILS rc inner join CHECKS_LIBRARY lib  on lib.LIBRARY_ID = rc.GROUP_CHECK_ID inner join CHECKS_LIBRARY lib1 on lib1.LIBRARY_ID = rc.CHECKLIST_ID where DOC_TYPE='PDF' and QC_PREFERENCES_ID=:Preference_ID and lib.status=1 and lib1.status=1 order by lib.check_order,rc.ID";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("Preference_ID", tpObj.Preference_ID));
                OracleDataAdapter da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                con1.Close();

                //ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    DataTable dt = ds.Tables[0].DefaultView.ToTable(true, "GROUP_CHECK_ID", "GroupName");

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.Group_Check_ID = Convert.ToInt32(dt.Rows[i]["GROUP_CHECK_ID"].ToString());
                        tObj1.Group_Check_Name = dt.Rows[i]["groupname"].ToString();
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tObj1.Created_ID = tpObj.Created_ID;

                        DataTable dt1 = new DataTable();
                        DataView dv = new DataView(ds.Tables[0]);
                        dv.RowFilter = "GROUP_CHECK_ID = " + dt.Rows[i]["GROUP_CHECK_ID"] + " and PARENT_CHECK_ID is null";

                        tpLst = (from DataRow dr in dv.ToTable().Rows
                                 select new RegOpsQC()
                                 {
                                     ID = Convert.ToInt32(dr["ID"].ToString()),
                                     CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                    // QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                     QC_Type = dr["QC_TYPE"].ToString() != "" && dr["QC_TYPE"] != null ? Convert.ToInt32(dr["QC_TYPE"].ToString()) : 0,
                                     HELP_TEXT = dr["HELP_TEXT"].ToString(),
                                     CHECK_UNITS = dr["CHECK_UNITS"].ToString(),
                                     Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                     Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "[").Replace("]\"", "]").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ") : dr["CHECK_PARAMETER"].ToString(),
                                     Qc_Preferences_Id = Convert.ToInt32(dr["QC_PREFERENCES_ID"].ToString()),
                                     DocType = dr["DOC_TYPE"].ToString(),
                                     Check_Name = dr["check_name"].ToString(),
                                     Control_Type = dr["Control_type"].ToString(),
                                     Created_ID = tpObj.Created_ID,
                                     SubCheckList = GetSubCheckListDataForView(dr, ds),
                                     QCTypeStr = (dr["QC_TYPE"].ToString() == "1") ? "Yes" : "No"
                                 }).ToList();
                        if (tpLst.Count > 0)
                        {
                            tObj1.CheckList = tpLst;
                            pdfLst.Add(tObj1);
                        }
                    }
                }
                return pdfLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public List<RegOpsQC> GroupPDFCheckListDetailsbyID(long CreatedID, long Preference_ID)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(Convert.ToInt32(CreatedID)).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                string query = string.Empty;
                DataSet ds = new DataSet();
                query = "select rc.GROUP_CHECK_ID,lib.library_value as GroupName,lib.CHECK_ORDER as Group_Order,rc.QC_PREFERENCES_ID,rc.DOC_TYPE,rc.CREATED_ID,rc.ID,rc.CHECKLIST_ID,lib1.HELP_TEXT,lib1.Control_type,lib1.CHECK_UNITS,lib1.Library_Value as Check_Name,rc.QC_TYPE,rc.CHECK_PARAMETER,rc.CHECK_ORDER,rc.PARENT_CHECK_ID"
             + " from REGOPS_QC_PREFERENCE_DETAILS rc inner join checks_library lib  on lib.LIBRARY_ID = rc.GROUP_CHECK_ID inner join checks_library lib1 on lib1.LIBRARY_ID = rc.CHECKLIST_ID where DOC_TYPE='PDF' and QC_PREFERENCES_ID=" + Preference_ID + " and lib.status=1 and lib1.status=1 order by lib.check_order,rc.ID";
                ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    tpLst = (from DataRow dr in ds.Tables[0].Rows
                             select new RegOpsQC()
                             {
                                 Created_ID = Convert.ToInt32(CreatedID),
                                 Qc_Preferences_Id = Convert.ToInt32(Preference_ID),
                                 ID = Convert.ToInt32(dr["ID"].ToString()),
                                 CheckList_ID = Convert.ToInt32(dr["CHECKLIST_ID"].ToString()),
                                // QC_Type = Convert.ToInt32(dr["QC_TYPE"].ToString()),
                                 QC_Type = dr["QC_TYPE"].ToString() != "" && dr["QC_TYPE"] != null ? Convert.ToInt32(dr["QC_TYPE"].ToString()) : 0,
                                 Group_Check_ID = Convert.ToInt32(dr["GROUP_CHECK_ID"].ToString()),
                                 Control_Type = dr["Control_type"].ToString(),
                                 Check_Parameter = (dr["CONTROL_TYPE"].ToString().Contains("Multiselect")) ? (dr["CHECK_PARAMETER"].ToString()).Replace("\\", "").Replace("\"[", "[").Replace("]\"", "]") : dr["CHECK_PARAMETER"].ToString(),
                                 DocType = dr["DOC_TYPE"].ToString(),
                                 Library_Value = dr["Check_Name"].ToString(),
                                 SubCheckList = GetSubCheckListDataForEdit(dr, ds)
                             }).ToList();
                }

                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        //Update functionality for validation checklist
        public string UpdatePreferencesDetails(RegOpsQC rOBJ)
        {
            string result = string.Empty;
            OracleConnection con = null;
            OracleTransaction trans;
            con = new OracleConnection();
            OracleDataAdapter da;
            string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            con.ConnectionString = m_DummyConn;
            con.Open();
            List<RegOpsQC> existingChecksList = new List<RegOpsQC>();
            List<RegOpsQC> newChecksList = new List<RegOpsQC>();
            List<RegOpsQC> updateChecksList = new List<RegOpsQC>();
            List<RegOpsQC> deleteChecksList = new List<RegOpsQC>();
            List<RegOpsQC> newSubChecksList = new List<RegOpsQC>();
            List<RegOpsQC> updateSubChecksList = new List<RegOpsQC>();
            List<RegOpsQC> deleteSubChecksList = new List<RegOpsQC>();
            List<RegOpsQC> lstallchks = new List<RegOpsQC>();
            List<RegOpsQC> lstallSubchks = new List<RegOpsQC>();
            List<RegOpsQC> lstwordchecks = new List<RegOpsQC>();
            List<RegOpsQC> lstpdfchecks = new List<RegOpsQC>();
            List<RegOpsQC> newChecksListControlType = new List<RegOpsQC>();
            List<RegOpsQC> updateChecksListControlType = new List<RegOpsQC>();
            List<RegOpsQC> deleteChecksListControlType = new List<RegOpsQC>();
            bool updatefilecontrol = false;

            trans = con.BeginTransaction(IsolationLevel.ReadCommitted);
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == rOBJ.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == rOBJ.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == rOBJ.ROLE_ID)
                    {
                        rOBJ.QCJobCheckListInfo = JsonConvert.DeserializeObject<List<RegOpsQC>>(rOBJ.QCJobCheckListDetails);

                        if (rOBJ.QCJobCheckListInfo.Count > 0)
                        {
                            DataSet dsPref = new DataSet();
                            DataSet dsSeq1 = new DataSet();
                            cmd = new OracleCommand();
                            rOBJ.Updated_Date = DateTime.Now;
                            string query = string.Empty;

                            string File_Format1 = string.Empty;
                            string File_Format2 = string.Empty;
                            long[] QC_Preference_Id;
                            long[] CHECKLIST_ID;
                            long[] Group_Check_ID;
                            long[] Created_ID;
                            long[] Parent_Check_ID;
                            long[] QC_TYPE;
                            long[] Check_Order;
                            byte[][] Check_Parameter_File;
                            String[] CHECK_PARAMETER;
                            string[] DOC_TYPE = null;
                            int i = 0;


                            DateTime UpdateDate = DateTime.Now;
                            String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");


                            cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCES SET DESCRIPTION=:DESCRIPTION,UPDATED_ID=:UPDATED_ID,UPDATED_DATE=:UPDATED_DATE,WORD_TEMPLATE_ID=:WORD_TEMPLATE_ID WHERE ID=:ID", con);
                            cmd.Parameters.Add("DESCRIPTION", rOBJ.Validation_Description);
                            cmd.Parameters.Add("UPDATED_ID", rOBJ.Created_ID);
                            cmd.Parameters.Add("UPDATED_DATE", Date);
                            cmd.Parameters.Add("WORD_TEMPLATE_ID", rOBJ.WordTemplate_ID);
                            cmd.Parameters.Add("ID", rOBJ.Preference_ID);
                            cmd.Transaction = trans;
                            int m_Res = cmd.ExecuteNonQuery();
                            if (m_Res > 0)
                            {
                                result = "Success";
                                List<RegOpsQC> lstchks = new List<RegOpsQC>();
                                List<RegOpsQC> lstSubchks = new List<RegOpsQC>();
                                foreach (RegOpsQC obj in rOBJ.QCJobCheckListInfo)
                                {
                                    DataSet dsset = new DataSet();
                                    cmd = new OracleCommand("SELECT * FROM REGOPS_QC_PREFERENCE_DETAILS WHERE QC_PREFERENCES_ID=:ID", con);
                                    cmd.Parameters.Add("ID", rOBJ.Preference_ID);
                                    cmd.Transaction = trans;
                                    da = new OracleDataAdapter(cmd);
                                    da.Fill(dsset);
                                    if (dsset.Tables[0].Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in dsset.Tables[0].Rows)
                                        {
                                            RegOpsQC objqc = new RegOpsQC();
                                            objqc.CheckList_ID = Convert.ToInt64(dr["CHECKLIST_ID"].ToString());
                                            existingChecksList.Add(objqc);
                                        }
                                    }


                                    //word checks save
                                    if (obj.WordCheckList != null)
                                    {
                                        if (obj.WordCheckList.Count > 0)
                                        {
                                            foreach (RegOpsQC chkgrp in obj.WordCheckList)
                                            {
                                                lstchks.AddRange(chkgrp.CheckList);
                                            }
                                        }
                                    }

                                    // pdf checks save
                                    if (obj.PdfCheckList != null)
                                    {
                                        if (obj.PdfCheckList.Count > 0)
                                        {
                                            foreach (RegOpsQC chkgrp in obj.PdfCheckList)
                                            {
                                                lstchks.AddRange(chkgrp.CheckList);
                                            }
                                        }
                                    }
                                    if (lstchks.Count > 0)
                                    {
                                        lstallchks = lstchks.ToList();

                                        lstwordchecks = lstchks.Where(x => x.DocType == "Word" && x.checkvalue == "1").ToList();
                                        lstpdfchecks = lstchks.Where(x => x.DocType == "PDF" && x.checkvalue == "1").ToList();
                                        lstchks = lstchks.Where(x => x.checkvalue == "1").ToList();
                                        newChecksList = lstchks.Where(x => !existingChecksList.Any(y => y.CheckList_ID == x.Library_ID && x.checkvalue == "1") && x.Control_Type != "File Upload").ToList();
                                        updateChecksList = lstchks.Where(x => existingChecksList.Any(y => y.CheckList_ID == x.Library_ID && x.checkvalue == "1") && x.Control_Type != "File Upload").ToList();
                                        deleteChecksList = lstallchks.Where(x => existingChecksList.Any(y => y.CheckList_ID == x.Library_ID && x.checkvalue == "0") && x.Control_Type != "File Upload").ToList();

                                        // for file upload check 
                                        newChecksListControlType = lstchks.Where(x => !existingChecksList.Any(y => y.CheckList_ID == x.Library_ID && x.checkvalue == "1") && x.Control_Type == "File Upload").ToList();
                                        updateChecksListControlType = lstchks.Where(x => existingChecksList.Any(y => y.CheckList_ID == x.Library_ID && x.checkvalue == "1") && x.Control_Type == "File Upload").ToList();
                                        deleteChecksListControlType = lstallchks.Where(x => existingChecksList.Any(y => y.CheckList_ID == x.Library_ID && x.checkvalue == "0") && x.Control_Type == "File Upload").ToList();



                                        foreach (RegOpsQC rObj in lstchks)
                                        {

                                            if (rObj.Control_Type == "File Upload")
                                            {

                                                if (rOBJ.Attachment_Name != null)
                                                {
                                                    string sourcePath = m_SourceFolderPathTempFiles + rOBJ.Attachment_Name;
                                                    //Convert the File data to Byte Array.
                                                    byte[] file = System.IO.File.ReadAllBytes(sourcePath);
                                                    rObj.Check_Parameter_File = file;
                                                    string[] s = Regex.Split(rOBJ.Attachment_Name, @"%%%%%%%");
                                                    string extension = Path.GetExtension(rOBJ.Attachment_Name);
                                                    rObj.Check_Parameter = s[0] + extension;
                                                    FileInfo fileTem = new FileInfo(sourcePath);
                                                    if (fileTem.Exists)//check file exsit or not
                                                    {
                                                        File.Delete(sourcePath);
                                                    }

                                                    if (updateChecksListControlType.Count == 0 && deleteChecksListControlType.Count == 0)
                                                    {
                                                        newChecksListControlType.Clear();
                                                        newChecksListControlType.Add(rObj);
                                                    }
                                                    else if (newChecksListControlType.Count == 0 && deleteChecksListControlType.Count == 0)
                                                    {
                                                        updatefilecontrol = true;
                                                        updateChecksListControlType.Clear();
                                                        updateChecksListControlType.Add(rObj);
                                                    }
                                                    else if (newChecksListControlType.Count == 0 && updateChecksListControlType.Count == 0)
                                                    {
                                                        deleteChecksListControlType.Add(rObj);
                                                    }


                                                }
                                            }
                                            rObj.Qc_Preferences_Id = rOBJ.Preference_ID;
                                            rObj.CheckList_ID = rObj.Library_ID;

                                            if (rObj.SubCheckList != null)
                                            {
                                                if (rObj.SubCheckList.Count > 0)
                                                {
                                                    List<RegOpsQC> lsttotalchks = new List<RegOpsQC>();
                                                    lsttotalchks = rObj.SubCheckList.ToList();
                                                    rObj.SubCheckList = rObj.SubCheckList.Where(x => x.checkvalue == "1").ToList();
                                                    List<RegOpsQC> newchks = new List<RegOpsQC>();
                                                    List<RegOpsQC> updatechks = new List<RegOpsQC>();
                                                    List<RegOpsQC> deletechks = new List<RegOpsQC>();
                                                    newchks = rObj.SubCheckList.Where(x => !existingChecksList.Any(y => y.CheckList_ID == x.Sub_Library_ID && x.checkvalue == "1")).ToList();
                                                    updatechks = rObj.SubCheckList.Where(x => existingChecksList.Any(y => y.CheckList_ID == x.Sub_Library_ID && x.checkvalue == "1")).ToList();
                                                    deletechks = lsttotalchks.Where(x => existingChecksList.Any(y => y.CheckList_ID == x.Sub_Library_ID && x.checkvalue == "0")).ToList();

                                                    foreach (RegOpsQC robja in newchks)
                                                    {
                                                        robja.Qc_Preferences_Id = rOBJ.Preference_ID;
                                                        robja.CheckList_ID = robja.Sub_Library_ID;
                                                        if (rOBJ.Validation_Plan_Type == "Publishing")
                                                        {
                                                            robja.QC_Type = robja.Type;
                                                        }
                                                        else
                                                        {
                                                            robja.QC_Type = robja.QC_Type;
                                                        }
                                                        if (robja.Check_Parameter != null && robja.Control_Type == "Multiselect")
                                                            robja.Check_Parameter = robja.Check_Parameter.Replace("{", "[").Replace("}", "]");
                                                        robja.Group_Check_ID = robja.Group_Check_ID;
                                                        robja.DocType = robja.DocType;
                                                        robja.Parent_Check_ID = robja.PARENT_KEY;
                                                        robja.Created_ID = robja.Created_ID;
                                                        newSubChecksList.Add(robja);
                                                    }
                                                    foreach (RegOpsQC robja in updatechks)
                                                    {
                                                        robja.Qc_Preferences_Id = rOBJ.Preference_ID;
                                                        robja.CheckList_ID = robja.Sub_Library_ID;
                                                        if (rOBJ.Validation_Plan_Type == "Publishing")
                                                        {
                                                            robja.QC_Type = robja.Type;
                                                        }
                                                        else
                                                        {
                                                            robja.QC_Type = robja.QC_Type;
                                                        }
                                                        if (robja.Check_Parameter != null && robja.Control_Type == "Multiselect")
                                                            robja.Check_Parameter = robja.Check_Parameter.Replace("{", "[").Replace("}", "]");
                                                        robja.Group_Check_ID = robja.Group_Check_ID;
                                                        robja.DocType = robja.DocType;
                                                        robja.Parent_Check_ID = robja.PARENT_KEY;
                                                        robja.Created_ID = robja.Created_ID;
                                                        updateSubChecksList.Add(robja);
                                                    }
                                                    foreach (RegOpsQC robja in deletechks)
                                                    {
                                                        robja.Qc_Preferences_Id = rOBJ.Preference_ID;
                                                        robja.CheckList_ID = robja.Sub_Library_ID;
                                                        if (rOBJ.Validation_Plan_Type == "Publishing")
                                                        {
                                                            robja.QC_Type = robja.Type;
                                                        }
                                                        else
                                                        {
                                                            robja.QC_Type = robja.QC_Type;
                                                        }
                                                        if (robja.Check_Parameter != null && robja.Control_Type == "Multiselect")
                                                            robja.Check_Parameter = robja.Check_Parameter.Replace("{", "[").Replace("}", "]");
                                                        robja.Group_Check_ID = robja.Group_Check_ID;
                                                        robja.DocType = robja.DocType;
                                                        robja.Parent_Check_ID = robja.PARENT_KEY;
                                                        robja.Created_ID = robja.Created_ID;
                                                        deleteSubChecksList.Add(robja);
                                                    }

                                                }
                                            }
                                        }

                                        foreach (RegOpsQC rSubObj in newSubChecksList)
                                        {
                                            newChecksList.Add(rSubObj);
                                        }
                                        foreach (RegOpsQC rSubObj in updateSubChecksList)
                                        {
                                            updateChecksList.Add(rSubObj);
                                        }
                                        foreach (RegOpsQC rSubObj in deleteSubChecksList)
                                        {
                                            deleteChecksList.Add(rSubObj);
                                        }

                                        // added file upload check to newcheckslist
                                        if (newChecksListControlType.Count > 0)
                                        {
                                            foreach (RegOpsQC rSubObj in newChecksListControlType)
                                            {
                                                newChecksList.Add(rSubObj);
                                            }
                                        }

                                        // added file upload check to deletecheckslist
                                        if (deleteChecksListControlType.Count > 0)
                                        {
                                            foreach (RegOpsQC rSubObj in deleteChecksListControlType)
                                            {
                                                deleteChecksList.Add(rSubObj);
                                            }
                                        }


                                        if (newChecksList.Count > 0)
                                        {
                                            QC_Preference_Id = new long[newChecksList.Count];
                                            CHECKLIST_ID = new long[newChecksList.Count];
                                            DOC_TYPE = new string[newChecksList.Count];
                                            Group_Check_ID = new long[newChecksList.Count];
                                            QC_TYPE = new long[newChecksList.Count];
                                            CHECK_PARAMETER = new string[newChecksList.Count];
                                            Parent_Check_ID = new long[newChecksList.Count];
                                            Check_Order = new long[newChecksList.Count];
                                            Created_ID = new long[newChecksList.Count];
                                            Check_Parameter_File = new byte[newChecksList.Count][];


                                            i = 0;
                                            foreach (RegOpsQC rObj in newChecksList)
                                            {
                                                QC_Preference_Id[i] = rOBJ.Preference_ID;
                                                CHECKLIST_ID[i] = rObj.CheckList_ID;
                                                DOC_TYPE[i] = rObj.DocType;
                                                Group_Check_ID[i] = rObj.Group_Check_ID;
                                                if (rOBJ.Validation_Plan_Type == "Publishing")
                                                {
                                                    QC_TYPE[i] = rObj.Type;
                                                }
                                                else
                                                {
                                                    QC_TYPE[i] = rObj.QC_Type;
                                                }
                                                if (rObj.Control_Type == "Multiselect")
                                                    CHECK_PARAMETER[i] = rObj.Check_Parameter.Replace("{", "[").Replace("}", "]");
                                                else
                                                    CHECK_PARAMETER[i] = rObj.Check_Parameter;
                                                Parent_Check_ID[i] = rObj.Parent_Check_ID;
                                                Check_Order[i] = rObj.Check_Order_ID;
                                                Created_ID[i] = rObj.Created_ID;
                                                Check_Parameter_File[i] = rObj.Check_Parameter_File;
                                                i++;
                                            }

                                            cmd1 = new OracleCommand();
                                            cmd1.ArrayBindCount = newChecksList.Count;
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.CommandText = "SP_REGOPS_QC_Save_PLAN_DTLS";
                                            cmd1.Parameters.Add(new OracleParameter("ParQC_Preference_ID", QC_Preference_Id));
                                            cmd1.Parameters.Add(new OracleParameter("ParCHECKLIST_ID", CHECKLIST_ID));
                                            cmd1.Parameters.Add(new OracleParameter("ParDOC_Type", DOC_TYPE));
                                            cmd1.Parameters.Add(new OracleParameter("ParGROUP_CHECK_ID", Group_Check_ID));
                                            cmd1.Parameters.Add(new OracleParameter("ParParent_CHECK_ID", Parent_Check_ID));
                                            cmd1.Parameters.Add(new OracleParameter("ParQC_TYPE", QC_TYPE));
                                            cmd1.Parameters.Add(new OracleParameter("ParCHECK_PARAMETER", CHECK_PARAMETER));
                                            cmd1.Parameters.Add(new OracleParameter("ParCreated_Id", Created_ID));
                                            cmd1.Parameters.Add(new OracleParameter("ParCheck_Order", Check_Order));
                                            cmd1.Parameters.Add(new OracleParameter("Check_Parameter_File", OracleDbType.Blob, Check_Parameter_File, ParameterDirection.Input));
                                            cmd1.Connection = con;
                                            cmd1.Transaction = trans;
                                            int mres = cmd1.ExecuteNonQuery();
                                            if (mres == -1)
                                                result = "Success";
                                            else
                                                result = "Failed";
                                        }


                                    }

                                }
                                if (updateChecksList.Count > 0)
                                {
                                    foreach (RegOpsQC rObj in updateChecksList)
                                    {
                                        if (rObj.Control_Type == "Multiselect")
                                            rObj.Check_Parameter = rObj.Check_Parameter.Replace("{", "[").Replace("}", "]");
                                        else
                                            rObj.Check_Parameter = rObj.Check_Parameter;
                                        if (rObj.Check_Parameter != null && rObj.Check_Parameter.ToString() != "")
                                        {
                                            cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCE_DETAILS SET CHECK_PARAMETER=:Check_Parameter,QC_TYPE=:QCType WHERE CHECKLIST_ID=:CheckListID AND QC_PREFERENCES_ID=:PreferenceID", con);
                                            cmd.Parameters.Add("Check_Parameter", rObj.Check_Parameter);
                                            cmd.Parameters.Add("QCType", rObj.QC_Type);
                                            cmd.Parameters.Add("CheckListID", rObj.CheckList_ID);
                                            cmd.Parameters.Add("PreferenceID", rOBJ.Preference_ID);
                                            int m_Res3 = cmd.ExecuteNonQuery();
                                            if (m_Res3 > 0)
                                                result = "Success";
                                        }
                                        else
                                        {
                                            cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCE_DETAILS SET QC_TYPE=:QCType WHERE CHECKLIST_ID=:CheckListID AND QC_PREFERENCES_ID=:PreferenceID", con);
                                            cmd.Parameters.Add("QCType", rObj.QC_Type);
                                            cmd.Parameters.Add("CheckListID", rObj.CheckList_ID);
                                            cmd.Parameters.Add("PreferenceID", rOBJ.Preference_ID);
                                            int m_Res3 = cmd.ExecuteNonQuery();
                                            if (m_Res3 > 0)
                                                result = "Success";
                                        }

                                    }
                                }

                                if (deleteChecksList.Count > 0)
                                {
                                    foreach (RegOpsQC rObj in deleteChecksList)
                                    {
                                        // to delete sub check
                                        if (rObj.Parent_Check_ID != 0)
                                        {
                                            cmd = new OracleCommand("DELETE FROM REGOPS_QC_PREFERENCE_DETAILS  WHERE CHECKLIST_ID=:CheckListID AND QC_PREFERENCES_ID=:PREFERENCEID", con);
                                            cmd.Parameters.Add("CheckListID", rObj.Sub_Library_ID);
                                            cmd.Parameters.Add("PREFERENCEID", rOBJ.Preference_ID);
                                            int m_Res3 = cmd.ExecuteNonQuery();
                                            if (m_Res3 > 0)
                                                result = "Success";
                                        }
                                        else
                                        {
                                            // to delete sub checks if the main check containing sub checks is removed
                                            if (rObj.SubCheckList != null && rObj.SubCheckList.Count > 0)
                                            {
                                                cmd = new OracleCommand("DELETE FROM REGOPS_QC_PREFERENCE_DETAILS  WHERE PARENT_CHECK_ID=:PARENT_CHECK_ID AND QC_PREFERENCES_ID=:PREFERENCEID", con);
                                                cmd.Parameters.Add("PARENT_CHECK_ID", rObj.Library_ID);
                                                cmd.Parameters.Add("PREFERENCEID", rOBJ.Preference_ID);
                                                int m_Res3 = cmd.ExecuteNonQuery();
                                            }
                                            // to delete main check
                                            cmd = new OracleCommand("DELETE FROM REGOPS_QC_PREFERENCE_DETAILS  WHERE CHECKLIST_ID=:CheckListID AND QC_PREFERENCES_ID=:PREFERENCEID", con);
                                            cmd.Parameters.Add("CheckListID", rObj.Library_ID);
                                            cmd.Parameters.Add("PREFERENCEID", rOBJ.Preference_ID);
                                            int m_Res4 = cmd.ExecuteNonQuery();
                                            if (m_Res4 > 0)
                                            {
                                                result = "Success";
                                            }

                                        }

                                    }
                                }

                                // update file upload check

                                if (updateChecksListControlType.Count > 0)
                                {
                                    foreach (RegOpsQC rObj in updateChecksListControlType)
                                    {
                                        if (updatefilecontrol == true)
                                        {
                                            cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCE_DETAILS SET CHECK_PARAMETER=:Check_Parameter,QC_TYPE=:QCType, CHECK_PARAMETER_FILE=:FileContent WHERE CHECKLIST_ID=:CheckListID AND QC_PREFERENCES_ID=:PreferenceID", con);
                                            cmd.Parameters.Add("Check_Parameter", rObj.Check_Parameter);
                                            cmd.Parameters.Add("QCType", rObj.QC_Type);
                                            cmd.Parameters.Add("FileContent", rObj.Check_Parameter_File);
                                            cmd.Parameters.Add("CheckListID", rObj.CheckList_ID);
                                            cmd.Parameters.Add("PreferenceID", rOBJ.Preference_ID);

                                            int m_Res3 = cmd.ExecuteNonQuery();
                                            if (m_Res3 > 0)
                                                result = "Success";
                                        }
                                        else
                                        {
                                            cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCE_DETAILS SET CHECK_PARAMETER=:Check_Parameter,QC_TYPE=:QCType WHERE CHECKLIST_ID=:CheckListID AND QC_PREFERENCES_ID=:PreferenceID", con);
                                            cmd.Parameters.Add("Check_Parameter", rObj.Check_Parameter);
                                            cmd.Parameters.Add("QCType", rObj.QC_Type);
                                            cmd.Parameters.Add("CheckListID", rObj.CheckList_ID);
                                            cmd.Parameters.Add("PreferenceID", rOBJ.Preference_ID);
                                            int m_Res3 = cmd.ExecuteNonQuery();
                                            if (m_Res3 > 0)
                                                result = "Success";

                                        }

                                    }
                                }



                                if (lstwordchecks != null && lstwordchecks.Count > 0 && lstpdfchecks != null && lstpdfchecks.Count > 0)
                                {
                                    rOBJ.File_Format = "Both";
                                }
                                else if (lstwordchecks != null && lstwordchecks.Count > 0)
                                {
                                    rOBJ.File_Format = "Word";
                                }
                                else if (lstpdfchecks != null && lstpdfchecks.Count > 0)
                                {
                                    rOBJ.File_Format = "PDF";
                                }
                                cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCES SET FILE_FORMAT=:FILE_FORMAT WHERE ID=:ID", con);
                                cmd.Parameters.Add("FILE_FORMAT", rOBJ.File_Format);
                                cmd.Parameters.Add("ID", rOBJ.Preference_ID);
                                cmd.Transaction = trans;
                                int m_Res1 = cmd.ExecuteNonQuery();
                                trans.Commit();
                                if (m_Res1 > 0)
                                    result = "Success";


                            }
                            else
                                result = "Fail";
                        }
                        else
                        {
                            result = "Fail";
                        }

                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                trans.Rollback();
                ErrorLogger.Error(ex);
                return "Error";
            }
            finally
            {
                con.Close();
            }
        }

        public string UpdatePreferencesDetails11(RegOpsQC rOBJ)
        {
            string result = string.Empty;
            OracleConnection con = null;
            OracleTransaction trans;
            con = new OracleConnection();
            string[] m_ConnDetails = GetConnectionInfo(rOBJ.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            con.ConnectionString = m_DummyConn;
            con.Open();
            trans = con.BeginTransaction(IsolationLevel.ReadCommitted);
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == rOBJ.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == rOBJ.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == rOBJ.ROLE_ID)
                    {
                        rOBJ.QCJobCheckListInfo = JsonConvert.DeserializeObject<List<RegOpsQC>>(rOBJ.QCJobCheckListDetails);

                        if (rOBJ.QCJobCheckListInfo.Count > 0)
                        {
                            DataSet dsPref = new DataSet();
                            DataSet dsSeq1 = new DataSet();
                            cmd = new OracleCommand();
                            rOBJ.Updated_Date = DateTime.Now;
                            string query = string.Empty;

                            string File_Format1 = string.Empty;
                            string File_Format2 = string.Empty;
                            long[] QC_Preference_Id;
                            long[] CHECKLIST_ID;
                            long[] Group_Check_ID;
                            long[] Created_ID;
                            long[] Parent_Check_ID;
                            long[] QC_TYPE;
                            long[] Check_Order;
                            byte[][] Check_Parameter_File;
                            String[] CHECK_PARAMETER;
                            string[] DOC_TYPE = null;
                            int i = 0;


                            DateTime UpdateDate = DateTime.Now;
                            String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");

                            //  query =  "UPDATE REGOPS_QC_PREFERENCES SET DESCRIPTION='" + rOBJ.Validation_Description + "',UPDATED_ID=" + rOBJ.Created_ID + ",UPDATED_DATE='" + Date + "',FILE_FORMAT='" + rOBJ.File_Format + "' WHERE ID=" + rOBJ.Preference_ID + "";

                            cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCES SET DESCRIPTION=:DESCRIPTION,UPDATED_ID=:UPDATED_ID,UPDATED_DATE=:UPDATED_DATE,WORD_TEMPLATE_ID=:WORD_TEMPLATE_ID WHERE ID=:ID", con);
                            cmd.Parameters.Add("DESCRIPTION", rOBJ.Validation_Description);
                            cmd.Parameters.Add("UPDATED_ID", rOBJ.Created_ID);
                            cmd.Parameters.Add("UPDATED_DATE", Date);
                            cmd.Parameters.Add("WORD_TEMPLATE_ID", rOBJ.WordTemplate_ID);
                            cmd.Parameters.Add("ID", rOBJ.Preference_ID);
                            cmd.Transaction = trans;
                            int m_Res = cmd.ExecuteNonQuery();
                            if (m_Res > 0)
                            {
                                result = "Success";
                                List<RegOpsQC> lstchks = new List<RegOpsQC>();
                                List<RegOpsQC> lstSubchks = new List<RegOpsQC>();
                                foreach (RegOpsQC obj in rOBJ.QCJobCheckListInfo)
                                {
                                    cmd = new OracleCommand("DELETE FROM REGOPS_QC_PREFERENCE_DETAILS WHERE QC_PREFERENCES_ID=:ID", con);
                                    cmd.Parameters.Add("ID", rOBJ.Preference_ID);
                                    cmd.Transaction = trans;
                                    m_Res = cmd.ExecuteNonQuery();
                                    //word checks save
                                    if (obj.WordCheckList.Count > 0)
                                    {
                                        // WordFlag = true;
                                        foreach (RegOpsQC chkgrp in obj.WordCheckList)
                                        {
                                            lstchks.AddRange(chkgrp.CheckList);
                                        }
                                    }
                                    // pdf checks save
                                    if (obj.PdfCheckList != null)
                                    {
                                        if (obj.PdfCheckList.Count > 0)
                                        {
                                            // PdfFlag = true;
                                            foreach (RegOpsQC chkgrp in obj.PdfCheckList)
                                            {
                                                lstchks.AddRange(chkgrp.CheckList);
                                            }
                                        }
                                    }
                                    if (lstchks.Count > 0)
                                    {
                                        lstchks = lstchks.Where(x => x.checkvalue == "1").ToList();
                                        foreach (RegOpsQC rObj in lstchks)
                                        {
                                            if (rObj.Control_Type == "File Upload")
                                            {
                                                if (rOBJ.Attachment_Name != null)
                                                {
                                                    string sourcePath = m_SourceFolderPathTempFiles + rOBJ.Attachment_Name;
                                                    //Convert the File data to Byte Array.
                                                    byte[] file = System.IO.File.ReadAllBytes(sourcePath);
                                                    rObj.Check_Parameter_File = file;
                                                    string[] s = Regex.Split(rOBJ.Attachment_Name, @"%%%%%%%");
                                                    string extension = Path.GetExtension(rOBJ.Attachment_Name);
                                                    rObj.Check_Parameter = s[0] + extension;
                                                    FileInfo fileTem = new FileInfo(sourcePath);
                                                    if (fileTem.Exists)//check file exsit or not
                                                    {
                                                        File.Delete(sourcePath);
                                                    }
                                                }
                                            }
                                            rObj.Qc_Preferences_Id = rOBJ.Preference_ID;
                                            rObj.CheckList_ID = rObj.Library_ID;
                                            if (rObj.SubCheckList != null)
                                            {
                                                if (rObj.SubCheckList.Count > 0)
                                                {
                                                    rObj.SubCheckList = rObj.SubCheckList.Where(x => x.checkvalue == "1").ToList();
                                                    foreach (RegOpsQC sObj in rObj.SubCheckList)
                                                    {
                                                        sObj.Qc_Preferences_Id = rOBJ.Preference_ID;
                                                        sObj.CheckList_ID = sObj.Sub_Library_ID;
                                                        sObj.QC_Type = sObj.QC_Type;
                                                        sObj.Check_Parameter = sObj.Check_Parameter;
                                                        sObj.Group_Check_ID = sObj.Group_Check_ID;
                                                        sObj.DocType = sObj.DocType;
                                                        sObj.Parent_Check_ID = sObj.PARENT_KEY;
                                                        sObj.Created_ID = rObj.Created_ID;
                                                        lstSubchks.Add(sObj);
                                                    }
                                                }
                                            }
                                        }
                                        foreach (RegOpsQC rSubObj in lstSubchks)
                                        {
                                            lstchks.Add(rSubObj);
                                        }
                                        QC_Preference_Id = new long[lstchks.Count];
                                        CHECKLIST_ID = new long[lstchks.Count];
                                        DOC_TYPE = new string[lstchks.Count];
                                        Group_Check_ID = new long[lstchks.Count];
                                        QC_TYPE = new long[lstchks.Count];
                                        CHECK_PARAMETER = new string[lstchks.Count];
                                        Parent_Check_ID = new long[lstchks.Count];
                                        Check_Order = new long[lstchks.Count];
                                        Created_ID = new long[lstchks.Count];
                                        Check_Parameter_File = new byte[lstchks.Count][];
                                        i = 0;
                                        foreach (RegOpsQC rObj in lstchks)
                                        {
                                            QC_Preference_Id[i] = rOBJ.Preference_ID;
                                            CHECKLIST_ID[i] = rObj.CheckList_ID;
                                            DOC_TYPE[i] = rObj.DocType;
                                            Group_Check_ID[i] = rObj.Group_Check_ID;
                                            QC_TYPE[i] = rObj.QC_Type;
                                            CHECK_PARAMETER[i] = rObj.Check_Parameter;
                                            Parent_Check_ID[i] = rObj.Parent_Check_ID;
                                            Check_Order[i] = rObj.Check_Order_ID;
                                            Created_ID[i] = rObj.Created_ID;
                                            Check_Parameter_File[i] = rObj.Check_Parameter_File;
                                            i++;
                                        }

                                        cmd1 = new OracleCommand();
                                        cmd1.ArrayBindCount = lstchks.Count;
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.CommandText = "SP_REGOPS_QC_Save_PLAN_DTLS";
                                        cmd1.Parameters.Add(new OracleParameter("ParQC_Preference_ID", QC_Preference_Id));
                                        cmd1.Parameters.Add(new OracleParameter("ParCHECKLIST_ID", CHECKLIST_ID));
                                        cmd1.Parameters.Add(new OracleParameter("ParDOC_Type", DOC_TYPE));
                                        cmd1.Parameters.Add(new OracleParameter("ParGROUP_CHECK_ID", Group_Check_ID));
                                        cmd1.Parameters.Add(new OracleParameter("ParParent_CHECK_ID", Parent_Check_ID));
                                        cmd1.Parameters.Add(new OracleParameter("ParQC_TYPE", QC_TYPE));
                                        cmd1.Parameters.Add(new OracleParameter("ParCHECK_PARAMETER", CHECK_PARAMETER));
                                        cmd1.Parameters.Add(new OracleParameter("ParCreated_Id", Created_ID));
                                        cmd1.Parameters.Add(new OracleParameter("ParCheck_Order", Check_Order));
                                        cmd1.Parameters.Add(new OracleParameter("Check_Parameter_File", OracleDbType.Blob, Check_Parameter_File, ParameterDirection.Input));
                                        cmd1.Connection = con;
                                        cmd1.Transaction = trans;
                                        int mres = cmd1.ExecuteNonQuery();
                                        if (mres == -1)
                                            result = "Success";
                                        else
                                            result = "Failed";

                                    }

                                }
                                if (DOC_TYPE.Contains("Word") && DOC_TYPE.Contains("PDF"))
                                {
                                    rOBJ.File_Format = "Both";
                                }
                                if (DOC_TYPE.Contains("Word") && !DOC_TYPE.Contains("PDF"))
                                {
                                    rOBJ.File_Format = "Word";
                                }
                                if (!DOC_TYPE.Contains("Word") && DOC_TYPE.Contains("PDF"))
                                {
                                    rOBJ.File_Format = "PDF";
                                }
                                cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCES SET FILE_FORMAT=:FILE_FORMAT WHERE ID=:ID", con);
                                cmd.Parameters.Add("FILE_FORMAT", rOBJ.File_Format);
                                cmd.Parameters.Add("ID", rOBJ.Preference_ID);
                                cmd.Transaction = trans;
                                int m_Res1 = cmd.ExecuteNonQuery();
                                trans.Commit();
                                if (m_Res1 > 0)
                                    result = "Success";
                            }
                            else
                                result = "Fail";
                        }
                        else
                        {
                            result = "Fail";
                        }

                        return result;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                trans.Rollback();
                ErrorLogger.Error(ex);
                return "Error";
            }
            finally
            {
                con.Close();
            }
        }

        public List<string> GetControlValues(RegOpsQC tObj)
        {
            List<string> ControlValues = new List<string>();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                OracleConnection con = new OracleConnection();
                //con.ConnectionString = m_DummyConn;
                //con.Open();

                DataSet ds = new DataSet();
                ds = conn.GetDataSet("Select * from LIBRARY where LIBRARY_NAME= '" + tObj.Library_Name.ToString() + "' ", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        ControlValues.Add(ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString());
                    }
                }
                return ControlValues;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return ControlValues;
            }
        }

        //Method to get files from folders and sub folders
        public string[] GetFiles(string targetDirectory)
        {
            // Process the list of files found in the directory.
            string[] fileEntries = Directory.GetFiles(targetDirectory);
            return fileEntries;
        }

        public static void ProcessUpdatedFile(string file, string SourceFolder, string destPath)
        {
            string fileName;
            string fName = Path.GetFileName(file);
            fileName = System.IO.Path.GetFileName(fName);
            System.IO.Directory.CreateDirectory(destPath.Trim('\\'));
            string destFile = System.IO.Path.Combine(destPath, fileName);
            System.IO.File.Copy(file, destFile, true);
        }

        public static void ProcessUpdatedFileDownldDirectory(string targetDirectory, string SFolder, string destPath)
        {
            // Process the list of files found in the directory.

            string folderName = new DirectoryInfo(targetDirectory).Name;

            string destFolder = System.IO.Path.Combine(destPath, folderName);
            System.IO.Directory.CreateDirectory(destFolder);
            string[] fileEntries = Directory.GetFiles(targetDirectory);
            foreach (string fileName in fileEntries)
                ProcessUpdatedFile(fileName, destFolder, destPath + "/" + folderName);

            //Recurse into subdirectories of this directory.
            string[] subdirectoryEntries = Directory.GetDirectories(targetDirectory);
            foreach (string subdirectory in subdirectoryEntries)
                ProcessUpdatedFileDownldDirectory(subdirectory, destFolder, destFolder);
        }
        public void UpdateFailedJobStatus(RegOpsQC rObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string qry = "UPDATE REGOPS_QC_JOBS SET NO_OF_PAGES='" + rObj.No_Of_Pages + "',JOB_END_TIME=(SELECT CURRENT_TIMESTAMP FROM DUAL),JOB_STATUS='Error',UPDATED_ID='" + rObj.Created_ID + "',UPDATED_DATE=(SELECT CURRENT_TIMESTAMP FROM DUAL) WHERE ID='" + rObj.JID + "'";
                int m_res1 = conn.ExecuteNonQuery(qry, CommandType.Text, ConnectionState.Open);
            }
            catch (Exception ee)
            {
                ErrorLogger.Error(ee);
            }
        }
        public Int64 GetSetingsDataForJobEmailAlert(RegOpsQC rObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                Int64 value = 0;
                ds = conn.GetDataSet("select JOB_EMAIL_ALERT fROM SETTINGS", CommandType.Text, ConnectionState.Open);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    value = Convert.ToInt64(ds.Tables[0].Rows[0]["JOB_EMAIL_ALERT"].ToString());

                }
                return value;
            }
            catch (Exception ee)
            {
                ErrorLogger.Error(ee);
                return 0;
            }
        }

        public List<string> GetBookmarkKeywords(Int64 Created_ID)
        {
            List<string> lstKeyWords = new List<string>();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> chkLst = new List<RegOpsQC>();
                DataSet ds = conn.GetDataSet("select LIBRARY_VALUE from LIBRARY where LIBRARY_NAME='QC_ABRREVIATIONS' order by LIBRARY_ID", CommandType.Text, ConnectionState.Open);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    lstKeyWords = new List<string>();
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        lstKeyWords.Add(ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString());
                    }
                }
                return lstKeyWords;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return lstKeyWords;
            }

        }

        //get logic for validation details by id bharathi
        public List<RegOpsQC> GroupCheckOrderListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();

                ds = conn.GetDataSet("select rg.*,ml.library_value as Regops_output_type from REGOPS_QC_PREFERENCES rg left join MASTER_LIBRARY ml on ml.LIBRARY_ID=rg.OUTPUT_TYPE where ID=" + tpObj.Preference_ID + "", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.ID = Convert.ToInt64(ds.Tables[0].Rows[i]["ID"].ToString());
                        tObj1.Preference_Name = ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                        tObj1.Validation_Description = ds.Tables[0].Rows[i]["DESCRIPTION"].ToString();
                        tObj1.Regops_Output_Type = ds.Tables[0].Rows[i]["REGOPS_OUTPUT_TYPE"].ToString();
                        tObj1.WordCheckList = GroupWORDCheckOrderListDetailsbyID(tpObj);
                        tObj1.PdfCheckList = GroupPDFCheckOrderListDetailsbyID(tpObj);
                        tpLst.Add(tObj1);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GroupWORDCheckOrderListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                int num = 0;

                ds = conn.GetDataSet("select a.*,b.CHECK_ORDER,b.LIBRARY_VALUE as CheckName,lib.library_value as GroupName from REGOPS_QC_PREFERENCE_DETAILS a left join  CHECKS_LIBRARY b on a.CHECKLIST_ID=b.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.library_id=a.group_check_id  where QC_PREFERENCES_ID=" + tpObj.Preference_ID + " and DOC_TYPE='Word' and b.status=1 and PARENT_CHECK_ID is null order by b.Check_order", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        num += 1;
                        tObj1.ID = Convert.ToInt32(ds.Tables[0].Rows[i]["ID"].ToString());
                        tObj1.CheckList_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["CHECKLIST_ID"].ToString());
                        if (ds.Tables[0].Rows[i]["QC_TYPE"].ToString() != "" && ds.Tables[0].Rows[i]["QC_TYPE"] != null)
                        {
                            tObj1.QC_Type = Convert.ToInt32(ds.Tables[0].Rows[i]["QC_TYPE"].ToString());
                        }
                        tObj1.Check_Parameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                        tObj1.Group_Check_Name = ds.Tables[0].Rows[i]["GroupName"].ToString();
                        tObj1.Check_Name = ds.Tables[0].Rows[i]["CheckName"].ToString();
                        tObj1.Check_Order_ID = num;
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tpLst.Add(tObj1);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GroupPDFCheckOrderListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                int num = 0;

                ds = conn.GetDataSet("select a.*,b.CHECK_ORDER,b.LIBRARY_VALUE as CheckName,lib.library_value as GroupName from REGOPS_QC_PREFERENCE_DETAILS a left join  CHECKS_LIBRARY b on a.CHECKLIST_ID=b.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.library_id=a.group_check_id where QC_PREFERENCES_ID=" + tpObj.Preference_ID + " and DOC_TYPE='PDF' and b.status=1 and PARENT_CHECK_ID is null order by b.Check_order", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        num += 1;
                        tObj1.ID = Convert.ToInt32(ds.Tables[0].Rows[i]["ID"].ToString());
                        tObj1.CheckList_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["CHECKLIST_ID"].ToString());
                        if (ds.Tables[0].Rows[i]["QC_TYPE"].ToString() != "" && ds.Tables[0].Rows[i]["QC_TYPE"] != null)
                        {
                            tObj1.QC_Type = Convert.ToInt32(ds.Tables[0].Rows[i]["QC_TYPE"].ToString());
                        }
                        tObj1.Check_Parameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                        tObj1.Group_Check_Name = ds.Tables[0].Rows[i]["GroupName"].ToString();
                        tObj1.Check_Name = ds.Tables[0].Rows[i]["CheckName"].ToString();
                        tObj1.Check_Order_ID = num;
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tpLst.Add(tObj1);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }


        public List<RegOpsQC> GroupJobCheckOrderListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();

                ds = conn.GetDataSet("select * from REGOPS_QC_PREFERENCES where ID=" + tpObj.Preference_ID + "", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        tObj1.ID = Convert.ToInt64(ds.Tables[0].Rows[i]["ID"].ToString());
                        tObj1.Preference_Name = ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                        tObj1.Validation_Description = ds.Tables[0].Rows[i]["DESCRIPTION"].ToString();
                        tObj1.WordCheckList = GroupJobWORDCheckOrderListDetailsbyID(tpObj);
                        tObj1.PdfCheckList = GroupJobPDFCheckOrderListDetailsbyID(tpObj);
                        tpLst.Add(tObj1);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GroupJobWORDCheckOrderListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                int num = 0;

                ds = conn.GetDataSet("select a.*,b.CHECK_ORDER,b.LIBRARY_VALUE as CheckName,lib.library_value as GroupName from REGOPS_QC_JOBS_CHECKLIST a left join  CHECKS_LIBRARY b on a.CHECKLIST_ID=b.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.library_id=a.group_check_id  where QC_PREFERENCES_ID=" + tpObj.Preference_ID + " and JOB_ID=" + tpObj.Job_ID + " and DOC_TYPE='Word' and b.status=1 and PARENT_CHECK_ID is null order by b.Check_order", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        num += 1;
                        tObj1.ID = Convert.ToInt32(ds.Tables[0].Rows[i]["ID"].ToString());
                        tObj1.CheckList_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["CHECKLIST_ID"].ToString());
                        tObj1.QC_Type = Convert.ToInt32(ds.Tables[0].Rows[i]["QC_TYPE"].ToString());
                        tObj1.Check_Parameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                        tObj1.Group_Check_Name = ds.Tables[0].Rows[i]["GroupName"].ToString();
                        tObj1.Check_Name = ds.Tables[0].Rows[i]["CheckName"].ToString();
                        tObj1.Check_Order_ID = num;
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tpLst.Add(tObj1);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GroupJobPDFCheckOrderListDetailsbyID(RegOpsQC tpObj)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                int num = 0;

                ds = conn.GetDataSet("select a.*,b.CHECK_ORDER,b.LIBRARY_VALUE as CheckName,lib.library_value as GroupName from REGOPS_QC_JOBS_CHECKLIST a left join  CHECKS_LIBRARY b on a.CHECKLIST_ID=b.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.library_id=a.group_check_id where QC_PREFERENCES_ID=" + tpObj.Preference_ID + " and JOB_ID=" + tpObj.Job_ID + " and DOC_TYPE='PDF' and b.status=1 and PARENT_CHECK_ID is null order by b.Check_order", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC tObj1 = new RegOpsQC();
                        num += 1;
                        tObj1.ID = Convert.ToInt32(ds.Tables[0].Rows[i]["ID"].ToString());
                        tObj1.CheckList_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["CHECKLIST_ID"].ToString());
                        tObj1.QC_Type = Convert.ToInt32(ds.Tables[0].Rows[i]["QC_TYPE"].ToString());
                        tObj1.Check_Parameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                        tObj1.Group_Check_Name = ds.Tables[0].Rows[i]["GroupName"].ToString();
                        tObj1.Check_Name = ds.Tables[0].Rows[i]["CheckName"].ToString();
                        tObj1.Check_Order_ID = num;
                        tObj1.Qc_Preferences_Id = tpObj.Preference_ID;
                        tpLst.Add(tObj1);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public string CheckValidationPlanNameUnique(RegOpsQC rObj)
        {
            OracleConnection con = new OracleConnection();
            try
            {

                Connection conn = new Connection();

                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                con.ConnectionString = m_DummyConn;
                con.Open();
                DataSet ds = new DataSet();

                // dsPref = conn.GetDataSet("SELECT PREFERENCE_NAME FROM REGOPS_QC_PREFERENCES where upper(PREFERENCE_NAME)='" + rObj.Preference_Name.ToUpper() + "'", CommandType.Text, ConnectionState.Open);//Commented by Nagesh on 21-Dec-2020

                OracleCommand cmd = new OracleCommand();
                cmd = new OracleCommand("SELECT PREFERENCE_NAME FROM REGOPS_QC_PREFERENCES where upper(PREFERENCE_NAME) = :plan_name", con);
                //cmd.Parameters.Add("plan_name", rObj.Preference_Name.ToUpper().ToString());
                cmd.Parameters.Add("plan_name", rObj.Preference_Name.ToUpper().ToString());
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    return "PreferenceExists";
                }
                else
                    return "Not exists";


            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }
            finally
            {
                con.Close();
            }

        }

        public List<ZipFiles> GetWordDocumentLists(RegOpsQC rObj)
        {
            try
            {
                List<ZipFiles> m_String = new List<ZipFiles>();
                string folderPath = string.Empty; string folderPath1 = string.Empty;
                string filePath = string.Empty;
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == rObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == rObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == rObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        ds = conn.GetDataSet("Select distinct val.FILE_NAME,val.JOB_ID,job.IS_DELETED,files.DCM_INPUT_FILE_ID from REGOPS_QC_VALIDATION_DETAILS val,REGOPS_QC_JOBS job , REGOPS_JOB_FILES files where val.JOB_ID=job.ID and files.JOB_ID=job.ID and val.JOB_ID=" + rObj.ID, CommandType.Text, ConnectionState.Open);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataSet ds1 = new DataSet();
                            ds1 = conn.GetDataSet("Select CONTENT_TYPE,FILE_NAME,FILE_CONTENT from DCM_FILES where FILE_ID=" + ds.Tables[0].Rows[0]["DCM_INPUT_FILE_ID"].ToString(), CommandType.Text, ConnectionState.Open);
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                if (ds1.Tables[0].Rows[0]["CONTENT_TYPE"].ToString() != "Folder" && ds1.Tables[0].Rows[0]["CONTENT_TYPE"].ToString() != "application/x-zip-compressed")
                                {
                                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                    {
                                        ZipFiles obj = new ZipFiles();
                                        if (ds.Tables[0].Rows[i]["IS_DELETED"].ToString() == "")
                                        {
                                            obj.Name = ds.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                            m_String.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ZipPath = "Files Deleted";
                                            m_String.Add(obj);
                                        }
                                    }
                                    m_String = m_String.Where(x => !x.Name.EndsWith(".pdf")).GroupBy(x => x.Name).Select(y => y.First()).ToList();
                                }
                                else
                                {
                                    byte[] byteArray = null;
                                    byteArray = (byte[])ds1.Tables[0].Rows[0]["FILE_CONTENT"];
                                    Guid gid; string FileName = ds1.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                    gid = Guid.NewGuid();
                                    folderPath = m_DownloadFolderPathQC + "\\" + gid;
                                    if (!Directory.Exists(folderPath))
                                    {
                                        Directory.CreateDirectory(folderPath);
                                    }
                                    using (FileStream fs = new FileStream(folderPath + "\\" + FileName, FileMode.OpenOrCreate))
                                    {
                                        fs.Write(byteArray, 0, byteArray.Length);
                                    }
                                    folderPath1 = folderPath + "\\" + FileName;
                                    filePath = ReadXMLandPrepareCopy(folderPath1);
                                    string[] entries = Directory.GetFileSystemEntries(filePath, "*", SearchOption.AllDirectories);
                                    foreach (var sobj in entries)
                                    {
                                        string[] s1 = Regex.Split(sobj, @"ZipExtracts\\");
                                        string[] s2 = Regex.Split(s1[1], @"\\");
                                        var iterator = s2.Take(0).Concat(s2.Skip(0 + 1));
                                        var formArry = string.Join("//", iterator);
                                        bool result = Path.HasExtension(formArry);
                                        if (result == true)
                                        {
                                            ZipFiles obj1 = new ZipFiles();
                                            obj1.Name = formArry;
                                            m_String.Add(obj1);
                                        }
                                    }
                                    m_String = m_String.Where(x => !x.Name.EndsWith(".pdf")).GroupBy(x => x.Name).Select(y => y.First()).ToList();
                                    FileInfo file1 = new FileInfo(filePath);
                                    if (Directory.Exists(filePath))
                                    {
                                        foreach (string file2 in Directory.GetFiles(filePath))
                                        {
                                            System.GC.Collect();
                                            System.GC.WaitForPendingFinalizers();
                                            File.Delete(file2);
                                        }
                                        //This condition is used to check all child Directories and delete files
                                        foreach (string subfolder in Directory.GetDirectories(filePath))
                                        {
                                            System.GC.Collect();
                                            System.GC.WaitForPendingFinalizers();
                                            RemoveDirectories(subfolder);
                                        }
                                        Directory.Delete(filePath);
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        ZipFiles obj = new ZipFiles();
                        obj.ZipPath = "Error Page";
                        m_String.Add(obj);
                    }
                }
                else
                {
                    ZipFiles obj = new ZipFiles();
                    obj.ZipPath = "Login Page";
                    m_String.Add(obj);
                }
                return m_String;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string GetCompareDocumentName(string document1, string document2, string jobID)
        {
            return m_DownloadFolderPathQC + "//" + jobID + "//" + Path.GetFileName(document1);
        }

        public string GetComparePdfDocumentName(string document1, string document2, string jobID)
        {
            return m_DownloadFolderPathQC + "//" + jobID + "//" + Path.GetFileNameWithoutExtension(document1) + ".pdf";
        }



        public List<string> CompareDocumnetsAspose(RegOpsQC rObj)
        {
            try
            {
                string fileName = string.Empty; List<string> objresult = new List<string>();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn; string folderSourcePath = string.Empty;
                string document1 = string.Empty; string document2 = string.Empty;
                string comppath = string.Empty; string downloadcomppath = string.Empty; string folderOutputPath = string.Empty;
                DataSet dset = conn.GetDataSet("Select dc1.FILE_ID as OUTPUT_FILE_ID,dc1.FILE_NAME as OUTPUT_FILE_NAME,dc1.FILE_CONTENT as OUTPUT_FILE_CONTENT, dc.FILE_ID,dc.FILE_NAME,dc.FILE_CONTENT,reg.JOB_ID from DCM_FILES dc,DCM_FILES dc1,REGOPS_JOB_FILES reg where dc.FILE_ID=reg.DCM_INPUT_FILE_ID and dc1.FILE_ID=reg.DCM_OUTPUT_FILE_ID and JOB_ID=" + rObj.ID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(dset))
                {
                    folderSourcePath = m_SourceFolderPathQC + rObj.Job_ID + "/Source/";
                    folderOutputPath = m_SourceFolderPathQC + rObj.Job_ID + "/Output/";
                    var ds = (from x in dset.Tables[0].AsEnumerable()
                              where x.Field<string>("FILE_NAME") == rObj.File_Name
                              select new
                              {
                                  File_Upload_Name = x["FILE_NAME"].ToString(),
                                  File_IDStr = x["OUTPUT_FILE_ID"].ToString(),
                                  file_ID = x["FILE_ID"].ToString(),
                                  byteArrayIn = (byte[])x["FILE_CONTENT"],
                                  byteArrayOut = (byte[])x["OUTPUT_FILE_CONTENT"]
                              }).ToList();
                    if (ds.Count != 0)
                    {
                        if (!Directory.Exists(folderSourcePath))
                        {
                            Directory.CreateDirectory(folderSourcePath);
                        }
                        using (FileStream fs = new FileStream(folderSourcePath + "\\" + ds[0].File_Upload_Name, FileMode.OpenOrCreate))
                        {
                            fs.Write(ds[0].byteArrayIn, 0, ds[0].byteArrayIn.Length);
                        }
                        if (!Directory.Exists(folderOutputPath))
                        {
                            Directory.CreateDirectory(folderOutputPath);
                        }
                        using (FileStream fs = new FileStream(folderOutputPath + "\\" + ds[0].File_Upload_Name, FileMode.OpenOrCreate))
                        {
                            fs.Write(ds[0].byteArrayOut, 0, ds[0].byteArrayOut.Length);
                        }
                        document1 = m_SourceFolderPathQC + rObj.Job_ID + "/Source/" + rObj.File_Name;
                        document2 = m_SourceFolderPathQC + rObj.Job_ID + "/Output/" + rObj.File_Name;
                    }
                    else
                    {
                        for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                        {
                            string extension1 = Path.GetExtension(dset.Tables[0].Rows[i]["FILE_NAME"].ToString());
                            if (extension1 == ".zip")
                            {
                                var byteArrayIn = (byte[])dset.Tables[0].Rows[i]["FILE_CONTENT"];
                                var byteArrayOut = (byte[])dset.Tables[0].Rows[i]["OUTPUT_FILE_CONTENT"];
                                rObj.File_Upload_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                UnzippedCompareDocument(rObj, folderOutputPath, folderSourcePath, byteArrayIn, byteArrayOut);
                                document1 = rObj.File_Source;
                                document2 = rObj.DestFilePath;
                            }
                        }
                    }

                    comppath = rObj.Job_ID + "//" + Path.GetFileNameWithoutExtension(document1);
                    string desfile = m_DownloadFolderPathQC + "/" + comppath;
                    // Create a temporary folder
                    string comparisonDocument = GetCompareDocumentName(document1, document2, rObj.Job_ID);
                    downloadcomppath = rObj.Job_ID;
                    string filepathSource = document1; string extension = Path.GetExtension(document1).Replace(".", "");
                    string filedest = document2; string extensiond = Path.GetExtension(document2).Replace(".", "");
                    objresult.Add(filepathSource);
                    objresult.Add(filedest);
                }
                else
                {
                    objresult.Add("File is removed");
                }
                return objresult;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public ArrayList CompareWordDocumnets(RegOpsQC rObj)
        {
            try
            {
                ArrayList result = new ArrayList();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string comppath = string.Empty; string downloadcomppath = string.Empty;
                string[] sobj = Regex.Split(rObj.File_Name, @"Output_");
                string File_Name = string.Empty; string document1 = string.Empty; string document2 = string.Empty;

                conn.connectionstring = m_Conn;

                List<string> obj1 = new List<string>();
                obj1 = CompareDocumnetsAspose(rObj);
                //DataSet dsetLimits = new DataSet();
                //dsetLimits = conn.GetDataSet("SELECT PREFIX_FILENAME FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + rObj.ORGANIZATION_ID, CommandType.Text, ConnectionState.Open);
                //if (conn.Validate(dsetLimits))
                //{
                //    if (dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString() != "")
                //    {
                //        rObj.Prefix_FileName = Convert.ToInt32(dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString());
                //    }
                //}
                //if (rObj.Prefix_FileName == 1)
                //{
                //    document1 = m_SourceFolderPathQC + rObj.Job_ID + "/Source/" + "Source_" + rObj.File_Name;
                //    document2 = m_SourceFolderPathQC + rObj.Job_ID + "/Output/" + "Output_" + rObj.File_Name;
                //}
                //else
                //{
                document1 = m_SourceFolderPathQC + rObj.Job_ID + "/Source/" + rObj.File_Name;
                document2 = m_SourceFolderPathQC + rObj.Job_ID + "/Output/" + rObj.File_Name;
                // }

                comppath = rObj.Job_ID + "//" + Path.GetFileNameWithoutExtension(document1);
                string desfile = m_DownloadFolderPathQC + "/" + comppath;
                // Create a temporary folder
                string comparisonDocument = GetCompareDocumentName(obj1[0], obj1[1], rObj.Job_ID);
                downloadcomppath = rObj.Job_ID;
                // Call the util class for comparison
                DocumentComparisonUtil docCompUtil = new DocumentComparisonUtil();
                int added = 0, deleted = 0;
                docCompUtil.Compare(obj1[0], obj1[1], comparisonDocument, ref added, ref deleted);

                Guid guId = Guid.NewGuid();
                Document doc1 = new Document(obj1[0]);
                string path = rObj.Job_ID + "_" + guId + "html";
                string targetpath = m_DownloadFolderPathQC + "/" + rObj.Job_ID + "_" + guId;
                HtmlSaveOptions option = new HtmlSaveOptions(SaveFormat.Html);
                option.ExportImagesAsBase64 = true;
                doc1.Save(targetpath.Trim() + "html/Aspose_DocToHTML.html", option);
                string desourcefile = rObj.Job_ID + "_" + guId + "html" + "/Aspose_DocToHTML.html";

                result.Add("Success"); // 0. Result
                result.Add((desfile)); // 1. Path of the comparison document
                result.Add(added); // 2. Number of additions
                result.Add(deleted); // 3. Number of deletions
                result.Add(rObj.File_Name);//4. File Name
                result.Add(comppath);//5. Iframe Path
                result.Add(desourcefile);//6. Iframe Path source
                result.Add(downloadcomppath);//7. Download Path
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }







        public ArrayList ComparePdfDocumnets(RegOpsQC rObj)
        {
            try
            {
                ArrayList result = new ArrayList();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string comppath = string.Empty; string downloadcomppath = string.Empty;
                string document1 = m_SourceFolderPathQC + rObj.Job_ID + "/Source/" + rObj.File_Name;
                string document2 = m_SourceFolderPathQC + rObj.Job_ID + "/Destination/" + rObj.File_Name;
                comppath = rObj.Job_ID + "//" + Path.GetFileNameWithoutExtension(document1);
                string desfile = m_DownloadFolderPathQC + "/" + comppath;
                // Create a temporary folder
                string comparisonDocument = GetComparePdfDocumentName(document1, document2, rObj.Job_ID);
                downloadcomppath = rObj.Job_ID;
                // Call the inetsoft PDFComparer class for comparison
                string key = Environment.GetEnvironmentVariable("PDFC_KEY");
                if (!string.IsNullOrEmpty(key))
                {
                    PDFC.ActivateLicense(key);
                }

                //   rObj.File_Name = "Ampicillin ANDA 202865 2019 NDA PADER.pdf";
                string path1 = "D:\\InetPdfcComparePDF\\InetPdfcComparePDF\\SampleFiles\\" + rObj.File_Name;//m_SourceFolderPathQC + rObj.Job_ID + "\\" + rObj.File_Name;

                string srcPath = m_SourceFolderPathQC + rObj.Job_ID + "\\Source\\" + rObj.File_Name;
                string destPath = m_SourceFolderPathQC + rObj.Job_ID + "\\Destination\\" + rObj.File_Name;
                int added = 0, deleted = 0;
                DifferencesPDFPresenter differencesPDFPresenter = new DifferencesPDFPresenter(path1, false);
                differencesPDFPresenter.SetOverlapAlpha(0);

                differencesPDFPresenter.SetPaintSides(ExportPresenter.PAINT_RIGHT);

                using (new PDFComparer()
                        .AddPresenter(differencesPDFPresenter)
                        .Compare(srcPath, destPath))
                { }

                result.Add("Success"); // 0. Result
                result.Add((desfile)); // 1. Path of the comparison document
                result.Add(added); // 2. Number of additions
                result.Add(deleted); // 3. Number of deletions
                result.Add(rObj.File_Name);//4. File Name
                result.Add(comppath);//5. Iframe Path
                result.Add(downloadcomppath);//6. Download Path
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public ArrayList DownloadCompareWordDocumnets(RegOpsQC rObj)
        {
            try
            {
                ArrayList result = new ArrayList();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn; string document1 = string.Empty;
                Connection conOrg = new Connection();
                conOrg.connectionstring = m_Conn;

                List<string> obj1 = new List<string>();
                obj1 = CompareDocumnetsAspose(rObj);
                string comparisonDocument = GetCompareDocumentName(obj1[0], obj1[1], rObj.Job_ID);
                // Call the util class for comparison
                DocumentComparisonUtil docCompUtil = new DocumentComparisonUtil();
                int added = 0, deleted = 0;
                docCompUtil.Compare(obj1[0], obj1[1], comparisonDocument, ref added, ref deleted);
                string comppath = rObj.Job_ID + "//" + Path.GetFileNameWithoutExtension(obj1[0]);
                string desfile = m_DownloadFolderPathQC + "/" + comppath;
                //DataSet dsetLimits = new DataSet();
                //dsetLimits = conOrg.GetDataSet("SELECT PREFIX_FILENAME FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + rObj.ORGANIZATION_ID, CommandType.Text, ConnectionState.Open);
                //if (conn.Validate(dsetLimits))
                //{
                //    if (dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString() != "")
                //    {
                //        rObj.Prefix_FileName = Convert.ToInt32(dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString());
                //    }
                //}
                //if (rObj.Prefix_FileName == 1)
                //{
                //    document1 = m_DownloadFolderPathQC + rObj.Job_ID + "\\Source_" + Path.GetFileName(rObj.File_Name.ToString());
                //}
                //else
                //{
                document1 = m_DownloadFolderPathQC + rObj.Job_ID + "\\" + Path.GetFileName(rObj.File_Name.ToString());
                //}
                string despath = m_DownloadFolderPathQC + rObj.Job_ID;
                result.Add(document1);
                result.Add(rObj.File_Name);
                result.Add(despath);
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex); ;
                return null;
            }
        }

        public string CompareWordDocumnetsDraftable(RegOpsQC rObj)
        {
            try
            {
                string fileName = string.Empty;
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn; string folderSourcePath = string.Empty;
                string document1 = string.Empty; string document2 = string.Empty;
                string comppath = string.Empty; string downloadcomppath = string.Empty; string folderOutputPath = string.Empty;
                DataSet dset = conn.GetDataSet("Select dc1.FILE_ID as OUTPUT_FILE_ID,dc1.FILE_NAME as OUTPUT_FILE_NAME,dc1.FILE_CONTENT as OUTPUT_FILE_CONTENT, dc.FILE_ID,dc.FILE_NAME,dc.FILE_CONTENT,reg.JOB_ID from DCM_FILES dc,DCM_FILES dc1,REGOPS_JOB_FILES reg where dc.FILE_ID=reg.DCM_INPUT_FILE_ID and dc1.FILE_ID=reg.DCM_OUTPUT_FILE_ID and JOB_ID=" + rObj.ID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(dset))
                {
                    folderSourcePath = m_SourceFolderPathQC + rObj.Job_ID + "/Source/";
                    folderOutputPath = m_SourceFolderPathQC + rObj.Job_ID + "/Output/";
                    var ds = (from x in dset.Tables[0].AsEnumerable()
                              where x.Field<string>("FILE_NAME") == rObj.File_Name
                              select new
                              {
                                  File_Upload_Name = x["FILE_NAME"].ToString(),
                                  File_IDStr = x["OUTPUT_FILE_ID"].ToString(),
                                  file_ID = x["FILE_ID"].ToString(),
                                  byteArrayIn = (byte[])x["FILE_CONTENT"],
                                  byteArrayOut = (byte[])x["OUTPUT_FILE_CONTENT"]
                              }).ToList();
                    if (ds.Count != 0)
                    {
                        if (!Directory.Exists(folderSourcePath))
                        {
                            Directory.CreateDirectory(folderSourcePath);
                        }
                        using (FileStream fs = new FileStream(folderSourcePath + "\\" + ds[0].File_Upload_Name, FileMode.OpenOrCreate))
                        {
                            fs.Write(ds[0].byteArrayIn, 0, ds[0].byteArrayIn.Length);
                        }
                        if (!Directory.Exists(folderOutputPath))
                        {
                            Directory.CreateDirectory(folderOutputPath);
                        }
                        using (FileStream fs = new FileStream(folderOutputPath + "\\" + ds[0].File_Upload_Name, FileMode.OpenOrCreate))
                        {
                            fs.Write(ds[0].byteArrayOut, 0, ds[0].byteArrayOut.Length);
                        }
                        document1 = m_SourceFolderPathQC + rObj.Job_ID + "/Source/" + rObj.File_Name;
                        document2 = m_SourceFolderPathQC + rObj.Job_ID + "/Output/" + rObj.File_Name;
                    }
                    else
                    {
                        for (int i = 0; i < dset.Tables[0].Rows.Count; i++)
                        {
                            string extension = Path.GetExtension(dset.Tables[0].Rows[i]["FILE_NAME"].ToString());
                            if (extension == ".zip")
                            {
                                var byteArrayIn = (byte[])dset.Tables[0].Rows[i]["FILE_CONTENT"];
                                var byteArrayOut = (byte[])dset.Tables[0].Rows[i]["OUTPUT_FILE_CONTENT"];
                                rObj.File_Upload_Name = dset.Tables[0].Rows[i]["FILE_NAME"].ToString();
                                UnzippedCompareDocument(rObj, folderOutputPath, folderSourcePath, byteArrayIn, byteArrayOut);
                                document1 = rObj.File_Source;
                                document2 = rObj.DestFilePath;
                            }
                        }
                    }

                    comppath = rObj.Job_ID + "//" + Path.GetFileNameWithoutExtension(document1);
                    string desfile = m_DownloadFolderPathQC + "/" + comppath;
                    // Create a temporary folder
                    string comparisonDocument = GetCompareDocumentName(document1, document2, rObj.Job_ID);
                    downloadcomppath = rObj.Job_ID;
                    System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;
                    using (var comparisons = new Comparisons(CompareKey1, CompareKey2))
                    {
                        string filepathSource = document1; string extension = Path.GetExtension(document1).Replace(".", "");
                        string filedest = document2; string extensiond = Path.GetExtension(document2).Replace(".", "");
                        var comparison = comparisons.Create(
                            Comparisons.Side.FromFile(filepathSource, extension),
                            Comparisons.Side.FromFile(filedest, extensiond)
                        );
                        fileName = comparisons.SignedViewerURL(comparison.Identifier);
                    }
                    if (rObj.DeleteZipPath != null && rObj.Folder_Name != null)
                    {
                        FileInfo file1 = new FileInfo(rObj.DeleteZipPath);
                        if (Directory.Exists(rObj.DeleteZipPath))
                        {
                            foreach (string file2 in Directory.GetFiles(rObj.DeleteZipPath))
                            {
                                System.GC.Collect();
                                System.GC.WaitForPendingFinalizers();
                                File.Delete(file2);
                            }
                            //This condition is used to check all child Directories and delete files
                            foreach (string subfolder in Directory.GetDirectories(rObj.DeleteZipPath))
                            {
                                System.GC.Collect();
                                System.GC.WaitForPendingFinalizers();
                                RemoveDirectories(subfolder);
                            }
                            Directory.Delete(rObj.DeleteZipPath);
                        }
                        FileInfo file = new FileInfo(rObj.Folder_Name);
                        if (Directory.Exists(rObj.Folder_Name))
                        {
                            foreach (string file3 in Directory.GetFiles(rObj.Folder_Name))
                            {
                                System.GC.Collect();
                                System.GC.WaitForPendingFinalizers();
                                File.Delete(file3);
                            }
                            //This condition is used to check all child Directories and delete files
                            foreach (string subfolder in Directory.GetDirectories(rObj.Folder_Name))
                            {
                                System.GC.Collect();
                                System.GC.WaitForPendingFinalizers();
                                RemoveDirectories(subfolder);
                            }
                            Directory.Delete(rObj.Folder_Name);
                        }
                    }
                    else
                    {
                        DirectoryInfo directory = new DirectoryInfo(m_SourceFolderPathQC + rObj.Job_ID);
                        foreach (FileInfo file in directory.GetFiles())
                        {
                            System.GC.Collect();
                            System.GC.WaitForPendingFinalizers();
                            file.Delete();
                        }
                        foreach (DirectoryInfo dir in directory.GetDirectories())
                        {
                            System.GC.Collect();
                            System.GC.WaitForPendingFinalizers();
                            dir.Delete(true);
                        }
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        directory.Delete();
                    }
                }
                else
                {
                    fileName = "File is removed";
                }
                return fileName;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public ArrayList DownloadComparePdfDocumnets(RegOpsQC rObj)
        {
            try
            {
                ArrayList result = new ArrayList();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string document1 = m_DownloadFolderPathQC + "/" + rObj.Job_ID + "//" + rObj.File_Name;
                string des = m_DownloadFolderPathQC + "/" + rObj.Job_ID + "//" + Path.GetFileNameWithoutExtension(document1) + ".pdf";
                result.Add(des);
                result.Add(rObj.File_Name);
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex); ;
                return null;
            }
        }

        public ArrayList CompareSourceWordDocumnets(RegOpsQC rObj)
        {
            try
            {
                ArrayList result = new ArrayList();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string comppath = string.Empty; string guId = Guid.NewGuid().ToString();
                if (Path.GetExtension(rObj.File_Name) != ".pdf")
                {
                    conn.connectionstring = m_Conn; string document1 = string.Empty;
                    DataSet dsetLimits = new DataSet();
                    dsetLimits = conn.GetDataSet("SELECT PREFIX_FILENAME FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + rObj.ORGANIZATION_ID, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(dsetLimits))
                    {
                        if (dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString() != "")
                        {
                            rObj.Prefix_FileName = Convert.ToInt32(dsetLimits.Tables[0].Rows[0]["PREFIX_FILENAME"].ToString());
                        }
                    }
                    if (rObj.Prefix_FileName == 1)
                    {
                        document1 = m_SourceFolderPathQC + rObj.Job_ID + "/Source/Source_" + rObj.File_Name;
                    }
                    else
                    {
                        document1 = m_SourceFolderPathQC + rObj.Job_ID + "/Source/" + rObj.File_Name;
                    }

                    Document doc1 = new Document(document1);
                    string path = rObj.Job_ID + "_" + guId + "html";
                    string targetpath = m_DownloadFolderPathQC + "/" + rObj.Job_ID + "_" + guId;
                    HtmlSaveOptions option = new HtmlSaveOptions(SaveFormat.Html);
                    option.ExportImagesAsBase64 = true;
                    doc1.Save(targetpath.Trim() + "html/Aspose_DocToHTML.html", option);
                    string desfile = rObj.Job_ID + "_" + guId + "html" + "/Aspose_DocToHTML.html";
                    result.Add("Success"); // 0. Result
                    result.Add(document1); // 1. Path of the comparison document
                    result.Add(path);// 2. Path of the comparison document
                    result.Add(desfile);


                }
                else
                {
                    string key = Environment.GetEnvironmentVariable("PDFC_KEY");
                    if (!string.IsNullOrEmpty(key))
                    {
                        PDFC.ActivateLicense(key);
                    }

                    //   rObj.File_Name = "Ampicillin ANDA 202865 2019 NDA PADER.pdf";
                    string path1 = "D:\\InetPdfcComparePDF\\InetPdfcComparePDF\\SampleFiles\\" + rObj.File_Name;//m_SourceFolderPathQC + rObj.Job_ID + "\\" + rObj.File_Name;

                    string srcPath = m_SourceFolderPathQC + rObj.Job_ID + "\\Source\\" + rObj.File_Name;
                    string destPath = m_SourceFolderPathQC + rObj.Job_ID + "\\Destination\\" + rObj.File_Name;

                    DifferencesPDFPresenter differencesPDFPresenter = new DifferencesPDFPresenter(path1, false);
                    differencesPDFPresenter.SetOverlapAlpha(0);

                    differencesPDFPresenter.SetPaintSides(ExportPresenter.PAINT_RIGHT);


                    using (new PDFComparer()
                            .AddPresenter(differencesPDFPresenter)
                            .Compare(srcPath, destPath))
                    { }

                    result.Add("Success"); // 0. Result
                    result.Add(path1); // 1. modified campare file will save here...
                    result.Add(path1);// 2. Path of the comparison document
                    result.Add(destPath);


                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        //Added by sowmya
        public List<string> GetHyphensList(Int64 Created_ID)
        {
            List<string> HardHyphenList = null;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("Select LIBRARY_VALUE from LIBRARY where LIBRARY_NAME = 'QC_Hardhyphen_Keywords'", CommandType.Text, ConnectionState.Open);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    HardHyphenList = new List<string>();
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        HardHyphenList.Add(ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString());
                    }
                }
                return HardHyphenList;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return HardHyphenList;
            }
        }
        //Added by sowmya
        public List<string> GetHardSpaceKeyWordsList(Int64 Created_ID)
        {
            List<string> HardSpaceKeyWordsList = null;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("Select LIBRARY_VALUE from LIBRARY where LIBRARY_NAME = 'QC_Hardspace_Keywords'", CommandType.Text, ConnectionState.Open);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    HardSpaceKeyWordsList = new List<string>();
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        HardSpaceKeyWordsList.Add(ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString());
                    }
                }
                return HardSpaceKeyWordsList;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return HardSpaceKeyWordsList;
            }
        }

        public List<RegOpsQC> GetValidationDetailsByJob(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();
                        OracleDataAdapter da;
                        string query = string.Empty;
                        query = " SELECT J.ID AS JID,PR.ID,PR.PREFERENCE_NAME,PR.FILE_FORMAT,PR.VALIDATION_PLAN_TYPE, PL.PLAN_ORDER FROM REGOPS_JOB_PLANS PL JOIN REGOPS_QC_PREFERENCES PR ON PL.PREFERENCE_ID=PR.ID JOIN REGOPS_QC_JOBS J ON J.ID = PL.JOB_ID  AND J.JOB_ID =:JOB_ID order by PL.PLAN_ORDER";
                        cmd = new OracleCommand(query, con1);
                        cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.Job_ID));
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        con1.Close();
                        // ds = conn.GetDataSet("SELECT J.ID AS JID,P.ID,P.PREFERENCE_NAME,P.FILE_FORMAT,VALIDATION_PLAN_TYPE FROM REGOPS_QC_PREFERENCES  P JOIN  REGOPS_QC_JOBS J ON P.ID=J.PREFERENCE_ID WHERE  JOB_ID='" + tpObj.Job_ID + "'", CommandType.Text, ConnectionState.Open);
                        //ds = conn.GetDataSet("SELECT J.ID AS JID,PR.ID,PR.PREFERENCE_NAME,PR.FILE_FORMAT,PR.VALIDATION_PLAN_TYPE, PL.PLAN_ORDER FROM REGOPS_JOB_PLANS PL JOIN REGOPS_QC_PREFERENCES PR ON PL.PREFERENCE_ID=PR.ID JOIN REGOPS_QC_JOBS J ON J.ID = PL.JOB_ID  AND J.JOB_ID = '" + tpObj.Job_ID + "' order by PL.PLAN_ORDER", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                RegOpsQC tObj1 = new RegOpsQC();
                                tObj1.ID = Convert.ToInt64(ds.Tables[0].Rows[i]["ID"].ToString());
                                tObj1.Preference_Name = ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                                tObj1.File_Format = ds.Tables[0].Rows[i]["FILE_FORMAT"].ToString();
                                tObj1.Validation_Plan_Type = ds.Tables[0].Rows[i]["VALIDATION_PLAN_TYPE"].ToString();
                                if (ds.Tables[0].Rows[i]["PLAN_ORDER"].ToString() != "")
                                    tObj1.Plan_Order = Convert.ToInt32(ds.Tables[0].Rows[i]["PLAN_ORDER"].ToString());
                                tpLst.Add(tObj1);
                            }
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetVlidationDetailByValidationID(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        ds = conn.GetDataSet("SELECT J.ID AS JID,P.ID,P.PREFERENCE_NAME,P.FILE_FORMAT,VALIDATION_PLAN_TYPE FROM REGOPS_QC_PREFERENCES  P JOIN  REGOPS_QC_JOBS J ON P.ID=J.PREFERENCE_ID WHERE  JOB_ID='" + tpObj.Job_ID + "'", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                RegOpsQC tObj1 = new RegOpsQC();
                                tObj1.ID = Convert.ToInt64(ds.Tables[0].Rows[i]["ID"].ToString());
                                tObj1.Preference_Name = ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                                tObj1.File_Format = ds.Tables[0].Rows[i]["FILE_FORMAT"].ToString();
                                tObj1.Validation_Plan_Type = ds.Tables[0].Rows[i]["VALIDATION_PLAN_TYPE"].ToString();
                                tpLst.Add(tObj1);
                            }
                        }
                        return tpLst;
                    }
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new RegOpsQC();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetProjectAttributes(RegOpsQC regQCObj)
        {
            List<RegOpsQC> listDoc = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            string query = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Int32 Created_ID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(Created_ID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    Connection con = new Connection();
                    con.connectionstring = m_DummyConn;
                    DataSet ds = new DataSet();

                    query = "SELECT LIBRARY_ID,LIBRARY_NAME,LIBRARY_VALUE,CONTROL_TYPE FROM LIBRARY WHERE LIBRARY_NAME='" + regQCObj.Library_Name + "' AND STATUS=1";
                    ds = con.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (con.Validate(ds))
                    {
                        listDoc = new DataTable2List().DataTableToList<RegOpsQC>(ds.Tables[0]);
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    listDoc.Add(RegOpsQC);
                }
                return listDoc;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public string ProjectTitleUniqueCheck(RegOpsQC regProjObj)
        {
            OracleConnection o_Con = null;
            string res = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(regProjObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                o_Con = new OracleConnection();
                o_Con.ConnectionString = m_DummyConn;
                DataSet dsproj = new DataSet();
                OracleCommand cmd = new OracleCommand();
                cmd = new OracleCommand("SELECT PROJECT_TITLE FROM REGOPS_PROJECTS WHERE UPPER(PROJECT_TITLE)= :Project_Title", o_Con);
                cmd.Parameters.Add("Project_Title", regProjObj.Project_Title.ToUpper().ToString());
                da = new OracleDataAdapter(cmd);
                da.Fill(dsproj);

                if (dsproj.Tables[0].Rows.Count > 0)
                {
                    res = "Title Already exists";
                }
                else
                {
                    res = "Success";
                }
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }

        }
        public List<RegOpsQC> ProductUniqueCheck(RegOpsQC regProjObj)
        {
            List<RegOpsQC> listDoc = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection o_Con = null;
            string res = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(regProjObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                o_Con = new OracleConnection();
                o_Con.ConnectionString = m_DummyConn;
                DataSet dsproj = new DataSet();
                OracleCommand cmd = new OracleCommand();
                string query = "select Library_ID as Product_ID,LIBRARY_VALUE as ProductName from LIBRARY where LIBRARY_NAME='Master_Products' and Lower(LIBRARY_VALUE)=:LIBRARY_VALUE";
                cmd = new OracleCommand(query, o_Con);
                cmd.Parameters.Add("LIBRARY_VALUE", regProjObj.Library_Value.ToLower().ToString());
                da = new OracleDataAdapter(cmd);
                da.Fill(dsproj);

                if (dsproj.Tables[0].Rows.Count > 0)
                {
                    listDoc = new DataTable2List().DataTableToList<RegOpsQC>(dsproj.Tables[0]);
                }
                else
                {
                    res = "Success";
                }
                return listDoc;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }

        }
        public string CreateProjct(RegOpsQC regProjObj)
        {
            OracleConnection o_Con = null;
            string res = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    Connection con = new Connection();
                    o_Con = new OracleConnection();
                    con.connectionstring = m_DummyConn;
                    o_Con.ConnectionString = m_DummyConn;
                    DataSet dsproj = new DataSet();
                    cmd = new OracleCommand("SELECT PROJECT_TITLE FROM REGOPS_PROJECTS WHERE UPPER(PROJECT_TITLE)= :Project_Title", o_Con);
                    cmd.Parameters.Add("Project_Title", regProjObj.Project_Title.ToUpper().ToString());

                    da = new OracleDataAdapter(cmd);
                    da.Fill(dsproj);

                    if (dsproj.Tables[0].Rows.Count > 0)
                    {
                        return "Title Already exists";
                    }
                    else
                    {
                        DataSet verify = new DataSet();
                        verify = con.GetDataSet("SELECT count(1) as Max_Length  FROM REGOPS_PROJECTS", CommandType.Text, ConnectionState.Open);
                        string projID;
                        projID = verify.Tables[0].Rows[0]["Max_Length"].ToString();
                        if (projID != "0")
                        {
                            string val1 = (Convert.ToDecimal(projID) + 1).ToString();
                            //   regProjObj.Project_ID = "VAL" + val1.PadLeft(3, '0');  ----- modified to VAL to PR due to changes in second phase
                            regProjObj.Project_ID = "PR" + val1.PadLeft(3, '0');
                        }
                        else
                        {
                            regProjObj.Project_ID = "PR" + "001";
                        }
                        o_Con.Open();
                        if (regProjObj.Product_ID == 0 && regProjObj.ProductName != null)
                        {
                            DataSet dsprod = new DataSet();
                            dsprod = con.GetDataSet("SELECT LIBRARY_ID,LIBRARY_VALUE FROM LIBRARY WHERE LIBRARY_NAME='Master_Products' and lower(LIBRARY_VALUE)='" + regProjObj.ProductName.ToLower().ToString() + "'", CommandType.Text, ConnectionState.Open);
                            if (con.Validate(dsprod))
                            {
                                regProjObj.Product_ID = Convert.ToInt64(dsprod.Tables[0].Rows[0]["LIBRARY_ID"]);
                            }
                            else
                            {
                                DataSet dsSeq = new DataSet();
                                Int64 id = 0;
                                dsSeq = con.GetDataSet("SELECT MAX(LIBRARY_ID)+1 AS VAL FROM LIBRARY", CommandType.Text, ConnectionState.Open);
                                if (con.Validate(dsSeq))
                                {
                                    id = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["VAL"].ToString());
                                }
                                string m_Query = "INSERT INTO LIBRARY(LIBRARY_ID, LIBRARY_NAME, LIBRARY_VALUE, STATUS) VALUES(";
                                m_Query += ":ID,:libName,:prodname,:status)";
                                OracleCommand cmd1 = new OracleCommand(m_Query, o_Con);
                                cmd1.Parameters.Add(new OracleParameter("ID", id));
                                cmd1.Parameters.Add(new OracleParameter("libName", "Master_Products"));
                                cmd1.Parameters.Add(new OracleParameter("prodname", regProjObj.ProductName));
                                cmd1.Parameters.Add(new OracleParameter("status", "1"));
                                int result = cmd1.ExecuteNonQuery();
                                if (result > 0)
                                {
                                    regProjObj.Product_ID = id;
                                }
                            }
                        }
                        DataSet ds = new DataSet();
                        ds = con.GetDataSet("SELECT REGOPS_PROJECTS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                        if (con.Validate(ds))
                        {
                            regProjObj.proj_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                        }

                        regProjObj.Created_Date = DateTime.Now;
                        string query = "INSERT INTO REGOPS_PROJECTS(PROJ_ID,PROJECT_ID,PROJECT_TITLE,DESCRIPTION,STATUS,CREATED_ID,CREATED_DATE,PRODUCT_ID,PRODUCT_TYPE) VALUES";
                        query += "(:PROJ_ID,:PROJECT_ID,:PROJECT_TITLE,:DESCRIPTION,:STATUS,:CREATED_ID,:CREATED_DATE,:PRODUCT_ID,:PRODUCT_TYPE)";
                        OracleCommand cmd = new OracleCommand(query, o_Con);
                        cmd = new OracleCommand(query, o_Con);
                        cmd.Parameters.Add(new OracleParameter("PROJ_ID", regProjObj.proj_ID));
                        cmd.Parameters.Add(new OracleParameter("PROJECT_ID", regProjObj.Project_ID));
                        cmd.Parameters.Add(new OracleParameter("PROJECT_TITLE", regProjObj.Project_Title));
                        //cmd.Parameters.Add(new OracleParameter("PROJECT_TYPE", regProjObj.Project_Type));
                        cmd.Parameters.Add(new OracleParameter("DESCRIPTION", regProjObj.Proj_Description));
                        cmd.Parameters.Add(new OracleParameter("STATUS", "New"));
                        cmd.Parameters.Add(new OracleParameter("CREATED_ID", CreatedID));
                        cmd.Parameters.Add(new OracleParameter("CREATED_DATE", regProjObj.Created_Date));
                        cmd.Parameters.Add(new OracleParameter("PRODUCT_ID", regProjObj.Product_ID));
                        cmd.Parameters.Add(new OracleParameter("PRODUCT_TYPE", regProjObj.Product_Type));
                        int m_res = cmd.ExecuteNonQuery();

                        if (m_res > 0)
                        {
                            if (regProjObj.Project_Attribute_List.Count > 0 || regProjObj.Other_Attribute_List.Count > 0)
                            {
                                res = SaveAttribute(regProjObj);
                            }
                            else
                            {
                                res = Convert.ToString(regProjObj.proj_ID);
                            }
                        }

                        else
                            res = "Failed";
                        return res;
                    }
                }
                else
                {
                    res = "Login Page";
                }
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }
            finally
            {
                o_Con.Close();
            }

        }

        public string SaveAttribute(RegOpsQC pmod)
        {
            OracleConnection o_Con = new OracleConnection();
            string m_Result = string.Empty, m_Query = string.Empty;
            long id = 0, m_res = 0;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(pmod.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                o_Con.ConnectionString = m_DummyConn;
                DataSet dsSeq = new DataSet();
                o_Con.Open();
                if (pmod.Project_Attribute_List != null)
                {
                    for (int i = 0; i < pmod.Project_Attribute_List.Count; i++)
                    {
                        if ((pmod.Project_Attribute_List[i] != null) && (!string.IsNullOrEmpty(pmod.Project_Attribute_List[i].Attribute_Name) && !string.IsNullOrEmpty(pmod.Project_Attribute_List[i].Attribute_Value)))
                        {
                            dsSeq = con.GetDataSet("SELECT REGOPS_PROJECT_ATTRIBUTES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                            if (con.Validate(dsSeq))
                            {
                                id = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                            }
                            m_Query = "INSERT INTO REGOPS_PROJECT_ATTRIBUTES(ATTRIBUTE_ID,ATTRIBUTE_NAME,ATTRIBUTE_VALUE,PROJ_ID,CREATED_ID,CREATED_DATE,Attribute_Type) VALUES";
                            m_Query += "(:ID,:attrName,:attrVal,:PUB_JOB_ID,:createdID,:Created_Date,:attrType)";
                            OracleCommand cmd = new OracleCommand(m_Query, o_Con);
                            cmd.Parameters.Add(new OracleParameter("ID", id));
                            cmd.Parameters.Add(new OracleParameter("attrName", pmod.Project_Attribute_List[i].Attribute_Name));
                            cmd.Parameters.Add(new OracleParameter("attrVal", pmod.Project_Attribute_List[i].Attribute_Value));
                            cmd.Parameters.Add(new OracleParameter("PROJ_ID", pmod.proj_ID));
                            cmd.Parameters.Add(new OracleParameter("createdID", pmod.Created_ID));
                            cmd.Parameters.Add(new OracleParameter("Created_Date", pmod.Created_Date));
                            cmd.Parameters.Add(new OracleParameter("attrType", "Primary"));
                            m_res = cmd.ExecuteNonQuery();
                        }
                    }
                    for (int i = 0; i < pmod.Other_Attribute_List.Count; i++)
                    {
                        if ((pmod.Other_Attribute_List[i] != null) && (!string.IsNullOrEmpty(pmod.Other_Attribute_List[i].Attribute_Name) && !string.IsNullOrEmpty(pmod.Other_Attribute_List[i].Attribute_Value)))
                        {
                            dsSeq = con.GetDataSet("SELECT REGOPS_PROJECT_ATTRIBUTES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                            if (con.Validate(dsSeq))
                            {
                                id = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                            }
                            m_Query = "INSERT INTO REGOPS_PROJECT_ATTRIBUTES(ATTRIBUTE_ID,ATTRIBUTE_NAME,ATTRIBUTE_VALUE,PROJ_ID,CREATED_ID,CREATED_DATE,Attribute_Type) VALUES";
                            m_Query += "(:ID,:attrName,:attrVal,:PUB_JOB_ID,:createdID,:Created_Date,:attrType)";
                            OracleCommand cmd = new OracleCommand(m_Query, o_Con);
                            cmd.Parameters.Add(new OracleParameter("ID", id));
                            cmd.Parameters.Add(new OracleParameter("attrName", pmod.Other_Attribute_List[i].Attribute_Name));
                            cmd.Parameters.Add(new OracleParameter("attrVal", pmod.Other_Attribute_List[i].Attribute_Value));
                            cmd.Parameters.Add(new OracleParameter("PROJ_ID", pmod.proj_ID));
                            cmd.Parameters.Add(new OracleParameter("createdID", pmod.Created_ID));
                            cmd.Parameters.Add(new OracleParameter("Created_Date", pmod.Created_Date));
                            cmd.Parameters.Add(new OracleParameter("attrType", "Other"));
                            m_res = cmd.ExecuteNonQuery();
                        }
                    }
                }
                

                if (m_res >= 0)
                {
                    string Success = Convert.ToString(pmod.proj_ID);
                    m_Result = Success; //"Success"
                }
                else
                {
                    m_Result = "Fail";
                }

                return m_Result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Fail";
            }
        }

        public List<RegOpsQC> GetProjects(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection conec = new OracleConnection();

            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    OracleConnection con1 = new OracleConnection();
                    con1.ConnectionString = m_DummyConn;
                    OracleCommand cmd = new OracleCommand();
                    con1.Open();
                    OracleDataAdapter da;
                    DataSet ds = new DataSet();
                    string query = string.Empty, condition = string.Empty;
                    string queryTotal = string.Empty; RegOpsQC rgobj = new RegOpsQC();
                    if (regObjQc.myFiles == "1" && regObjQc.othersFiles == "1")
                        condition = "";
                    else if (regObjQc.myFiles == "1" && regObjQc.othersFiles == "0")
                        condition = "AND rp.CREATE_ID=" + CreatedID + "  ";
                    else if (regObjQc.myFiles == "0" && regObjQc.othersFiles == "1")
                        condition = "AND rp.CREATE_ID NOT IN(" + CreatedID + ")  ";
                    else if (regObjQc.myFiles == "0" && regObjQc.othersFiles == "0")
                        condition = "AND rp.CREATE_ID IS NULL  ";
                    if (string.IsNullOrEmpty(regObjQc.SearchValue))
                    {
                        query = "SELECT * FROM (SELECT A.*, rownum r_ FROM(";
                        query += "SELECT rp.PROJ_ID, rp.PROJECT_ID, rp.PROJECT_TITLE,l.LIBRARY_VALUE as PRODUCT_NAME, rp.DESCRIPTION, rp.STATUS, rp.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,rp.CREATED_ID  FROM REGOPS_PROJECTS rp left join LIBRARY l on rp.PRODUCT_ID=l.LIBRARY_ID join Users u on u.USER_ID = rp.CREATED_ID " + condition + " ORDER BY rp.PROJ_ID DESC";
                        query += ") A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE r_ >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";

                        queryTotal = "Select Count(*) as TotalRecords from(";
                        queryTotal += "SELECT rp.PROJ_ID, rp.PROJECT_ID, rp.PROJECT_TITLE,l.LIBRARY_VALUE as PRODUCT_NAME,rp.DESCRIPTION, rp.STATUS, rp.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,rp.CREATED_ID  FROM REGOPS_PROJECTS rp left join LIBRARY l on rp.PRODUCT_ID=l.LIBRARY_ID join Users u on u.USER_ID = rp.CREATED_ID  " + condition + "  ORDER BY rp.PROJ_ID DESC";
                        queryTotal += ")";

                        cmd = new OracleCommand(queryTotal, con1);
                        da = new OracleDataAdapter(cmd);
                        DataSet dsC = new DataSet();
                        da.Fill(dsC);
                        if (conn.Validate(dsC))
                        {
                            rgobj.TotalRecords = Convert.ToInt32(dsC.Tables[0].Rows[0]["TotalRecords"].ToString());
                        }
                    }
                    else
                    {
                        string[] createDate, DueDate;
                        query = "SELECT * FROM (SELECT A.*, rownum r_ FROM(";
                        query += "SELECT rp.PROJ_ID, rp.PROJECT_ID, rp.PROJECT_TITLE,l.LIBRARY_VALUE as PRODUCT_NAME, rp.DESCRIPTION, rp.STATUS, rp.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,rp.CREATED_ID FROM REGOPS_PROJECTS rp left join LIBRARY l on rp.PRODUCT_ID=l.LIBRARY_ID join Users u on u.USER_ID = rp.CREATED_ID  WHERE ";

                        queryTotal = "Select Count(*) as TotalRecords from(";
                        queryTotal += "SELECT rp.PROJ_ID, rp.PROJECT_ID, rp.PROJECT_TITLE,l.LIBRARY_VALUE as PRODUCT_NAME, rp.DESCRIPTION, rp.STATUS, rp.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by FROM REGOPS_PROJECTS rp left join LIBRARY l on rp.PRODUCT_ID=l.LIBRARY_ID join Users u on u.USER_ID = rp.CREATED_ID  WHERE ";

                        if (!string.IsNullOrEmpty(regObjQc.Project_ID))
                        {
                            query += "lower(rp.PROJECT_ID) like '%" + regObjQc.Project_ID.ToLower() + "%' AND";
                            queryTotal += "lower(rp.PROJECT_ID) like '%" + regObjQc.Project_ID.ToLower() + "%' AND";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Project_Title))
                        {
                            query += " lower(rp.PROJECT_TITLE) like '%" + regObjQc.Project_Title.ToLower() + "%' AND";
                            queryTotal += " lower(rp.PROJECT_TITLE) like '%" + regObjQc.Project_Title.ToLower() + "%' AND";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Status))
                        {
                            query += " lower(rp.STATUS) like '%" + regObjQc.Status.ToLower() + "%' AND";
                            queryTotal += " lower(rp.STATUS) like '%" + regObjQc.Status.ToLower() + "%' AND";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Create_date))
                        {
                            createDate = regObjQc.Create_date.Split('-');
                            query += " SUBSTR(rp.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                            queryTotal += " SUBSTR(rp.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Due_Date))
                        {
                            DueDate = regObjQc.Due_Date.Split('-');
                            query += " rp.PROJ_ID IN (SELECT PROJ_ID FROM(SELECT * FROM REGOPS_PROJECT_ATTRIBUTES WHERE ATTRIBUTE_NAME = 'Due Date') WHERE TO_DATE(ATTRIBUTE_VALUE, 'MM/DD/YYYY HH:MI:SS AM')  BETWEEN(SELECT TO_DATE('" + DueDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND (SELECT TO_DATE('" + DueDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL)) AND";

                            queryTotal += " rp.PROJ_ID IN(SELECT PROJ_ID FROM(SELECT * FROM REGOPS_PROJECT_ATTRIBUTES WHERE ATTRIBUTE_NAME = 'Due Date') WHERE TO_DATE(ATTRIBUTE_VALUE, 'MM/DD/YYYY HH:MI:SS AM')  BETWEEN(SELECT TO_DATE('" + DueDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND (SELECT TO_DATE('" + DueDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL)) AND";
                        }
                        if (!string.IsNullOrEmpty(condition))
                        {
                            query += " 1=1 " + condition + " AND ";
                            queryTotal += " 1=1 " + condition + " AND ";
                        }
                        query += " 1=1 ORDER BY rp.PROJ_ID DESC";
                        queryTotal += " 1=1 ORDER BY rp.PROJ_ID DESC";
                        query += ") A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE r_ >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";
                        queryTotal += ")";
                    }
                    DataSet ds11 = new DataSet();
                    cmd = new OracleCommand(queryTotal, con1);
                    da = new OracleDataAdapter(cmd);
                    da.Fill(ds11);

                    if (conn.Validate(ds11))
                    {
                        rgobj.TotalRecords = Convert.ToInt32(ds11.Tables[0].Rows[0]["TotalRecords"].ToString());
                    }
                    DataSet ds1 = new DataSet();
                    cmd = new OracleCommand(query, con1);
                    da = new OracleDataAdapter(cmd);
                    da.Fill(ds1);
                    con1.Close();
                    if (conn.Validate(ds1))
                    {
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                            tpLst.Add(rgobj);
                        }
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        /// <summary>
        /// to save the files uploaded in Project
        /// </summary>
        /// <param name="rObj"></param>
        /// <returns></returns>
        public List<string> SaveExternalFile(RegOpsQC rObj)
        {
            List<string> result = new List<string>();
            string query = string.Empty;
            string filePath = string.Empty;
            OracleConnection conn = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    Connection con = new Connection();
                    con.connectionstring = m_DummyConn;
                    conn.ConnectionString = m_DummyConn;
                    conn.Open();
                    List<FileInformation> objFileList = JsonConvert.DeserializeObject<List<FileInformation>>(rObj.File_Upload_Name);
                    foreach (var objFile in objFileList)
                    {
                        byte[] PDFdoc = null;
                        filePath = objFile.FilePath;
                        FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);
                        BinaryReader reader = new BinaryReader(fs);
                        PDFdoc = reader.ReadBytes((int)fs.Length);
                        fs.Close();
                        string extension = Path.GetExtension(objFile.File_Name);
                        decimal f1 = (new FileInfo(objFile.FilePath).Length);

                        int countFiles = 0;
                        double filessize = 0;
                        if (extension == ".zip")
                        {
                            using (ZipFile zip = ZipFile.Read(filePath))
                            {
                                List<string> countfiles = zip.EntryFileNames.ToList();
                                string NewPath = m_SourceFolderPathExternal + "\\" + "ZipExtracts\\" + objFile.File_Name + "_exactedOutput" + "\\";
                                GiveAllPermissions(NewPath);
                                zip.ExtractAll(NewPath);
                                foreach (var entry in countfiles)
                                {
                                    if (!entry.EndsWith("/"))
                                    {
                                        FileInfo fi = new FileInfo(NewPath + entry);
                                        long size = fi.Length;
                                        filessize += size;
                                        countFiles += 1;
                                    }
                                }
                            }
                            string NewPath1 = m_SourceFolderPathExternal + "\\" + "ZipExtracts\\" + objFile.File_Name + "_exactedOutput";
                            System.IO.DirectoryInfo di = new DirectoryInfo(NewPath1);
                            foreach (FileInfo file in di.GetFiles())
                            {
                                file.Delete();
                            }
                            foreach (DirectoryInfo dir in di.GetDirectories())
                            {
                                dir.Delete(true);
                            }
                            Directory.Delete(NewPath1);
                        }
                        else
                        {
                            countFiles += 1;
                            FileInfo fi = new FileInfo(filePath);
                            long size = fi.Length;
                            filessize = size;
                        }
                        DataSet ds = new DataSet();
                        string m_Result = string.Empty;
                        Int64 cmsCompId = 0;
                        DataSet dsSeq = new DataSet();
                        dsSeq = con.GetDataSet("SELECT DCM_FILES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                        if (con.Validate(dsSeq))
                        {
                            cmsCompId = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                        }
                        OracleCommand cmd = new OracleCommand("insert into DCM_FILES(FILE_ID,FILE_NAME,FILE_TYPE,DESCRIPTION,FILE_SIZE,CONTENT_TYPE,CREATED_ID,FILE_SOURCE,FILE_CONTENT,NO_OF_FILES) Values(:FILE_ID,:FILE_NAME,:FILE_TYPE,:DESCRIPTION,:FILE_SIZE,:CONTENT_TYPE,:CREATED_ID,:FILE_SOURCE,:FILE_CONTENT,:NO_OF_FILES)", conn);
                        cmd.Parameters.Add(new OracleParameter("FILE_ID", cmsCompId));
                        cmd.Parameters.Add(new OracleParameter("FILE_NAME", objFile.File_Name));
                        cmd.Parameters.Add(new OracleParameter("FILE_TYPE", rObj.File_Type));
                        cmd.Parameters.Add(new OracleParameter("DESCRIPTION", rObj.Description));
                        cmd.Parameters.Add(new OracleParameter("FILE_SIZE", filessize));
                        if (rObj.content_Type != "Folder")
                            cmd.Parameters.Add(new OracleParameter("CONTENT_TYPE", MimeMapping.GetMimeMapping(objFile.File_Name)));
                        else
                            cmd.Parameters.Add(new OracleParameter("CONTENT_TYPE", rObj.content_Type));
                        cmd.Parameters.Add(new OracleParameter("CREATED_ID", rObj.Created_ID));
                        cmd.Parameters.Add(new OracleParameter("FILE_SOURCE", rObj.File_Source));
                        cmd.Parameters.Add(new OracleParameter("FILE_CONTENT", PDFdoc));
                        cmd.Parameters.Add(new OracleParameter("NO_OF_FILES", countFiles));
                        int res = cmd.ExecuteNonQuery();

                        if (res > 0)
                        {
                            if (rObj.File_Source == "Project")
                            {
                                DataSet ds1 = new DataSet();
                                ds1 = con.GetDataSet("SELECT DCM_FILE_RELATIONS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                                if (con.Validate(ds1))
                                {
                                    rObj.ID = Convert.ToInt64(ds1.Tables[0].Rows[0]["NEXTVAL"].ToString());
                                }
                                query = "INSERT INTO DCM_FILE_RELATIONS(FILE_ID,MODULE_NAME,MODULE_REF_ID,CREATED_ID,DCM_FILE_ID) VALUES";
                                query += "(:FILE_ID,:MODULE_NAME,:MODULE_REF_ID,:CREATED_ID,:DCM_FILE_ID)";
                                OracleCommand cmd1 = new OracleCommand(query, conn);
                                cmd1.Parameters.Add(new OracleParameter("FILE_ID", rObj.ID));
                                cmd1.Parameters.Add(new OracleParameter("MODULE_NAME", "Project"));
                                cmd1.Parameters.Add(new OracleParameter("MODULE_REF_ID", rObj.proj_ID));
                                cmd1.Parameters.Add(new OracleParameter("CREATED_ID", rObj.UserID));
                                cmd1.Parameters.Add(new OracleParameter("DCM_FILE_ID", cmsCompId));
                                int m_res = cmd1.ExecuteNonQuery();
                                if (m_res > 0)
                                {
                                    string result1 = string.Empty;
                                    RegOpsQC regOpsObj = new RegOpsQC();
                                    regOpsObj.UserID = rObj.UserID;
                                    regOpsObj.ORGANIZATION_ID = rObj.ORGANIZATION_ID;
                                    regOpsObj.ROLE_ID = rObj.ROLE_ID;
                                    regOpsObj.file_ID = cmsCompId;
                                    regOpsObj.proj_ID = rObj.proj_ID;
                                    regOpsObj.Activity = "File Uploaded";
                                    result1 = new RegOpsQCActions().SaveFilesActivity(regOpsObj);
                                }
                            }
                            string folderPath = m_SourceFolderPathQC;
                            string newpath = filePath;
                            if (System.IO.Directory.Exists(folderPath))
                            {
                                FileInfo file = new FileInfo(newpath);
                                if (file.Exists)
                                {
                                    file.Delete();
                                }
                            }
                            result.Add(cmsCompId.ToString());
                        }
                        else
                            result.Add("Fail");
                    }
                }
                else
                {
                    result.Add("Login Page");
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
            finally
            {
                conn.Close();
            }
        }


        public Int64 UploadFileinProjectForDestination(RegOpsQC regProjObj, string file, Int64 sourceFId)
        {
            OracleConnection o_Con = new OracleConnection();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(regProjObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                o_Con.ConnectionString = m_DummyConn;
                string res = string.Empty;
                DataSet ds = new DataSet();
                var s = Regex.Replace(file, @"""", "").Trim().ToString();
                string extension = Path.GetExtension(s); string extension1 = string.Empty;
                regProjObj.File_Upload_Name = Regex.Replace(s, @"%%%%%%%", "").Trim().ToString();
                string[] s1 = Regex.Split(s, @"%%%%%%%");
                string fName = regProjObj.File_Name;
                //string fName = Path.GetFileName(regProjObj.DestFilePath);
                byte[] PDFdoc = null;
                string filePath = file;
                FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);
                BinaryReader reader = new BinaryReader(fs);
                PDFdoc = reader.ReadBytes((int)fs.Length);
                fs.Close();
                if (regProjObj.Regops_Output_Type == "PDF")
                {
                    extension1 = extension;
                    fName = regProjObj.File_Name;
                }
                else
                {
                     extension1 = Path.GetExtension(fName);
                }
                int countFiles = 0;
                double filessize = 0;
                Guid main1;
                main1 = Guid.NewGuid();
                if (extension1 == ".zip")
                {
                    using (ZipFile zip = ZipFile.Read(filePath))
                    {
                        List<string> countfiles = zip.EntryFileNames.ToList();
                        string NewPath = m_SourceFolderPathExternal + "\\" + "ZipExtracts\\" + main1 + "\\";
                        GiveAllPermissions(NewPath);
                        zip.ExtractAll(NewPath);
                        foreach (var entry in countfiles)
                        {
                            if (!entry.EndsWith("/"))
                            {
                                FileInfo fi = new FileInfo(NewPath + entry);
                                long size = fi.Length;
                                filessize += size;
                                countFiles += 1;
                            }
                        }
                    }
                    string NewPath1 = m_SourceFolderPathExternal + "\\" + "ZipExtracts\\" + main1 + "\\";
                    System.IO.DirectoryInfo di = new DirectoryInfo(NewPath1);

                    foreach (FileInfo fi in di.GetFiles())
                    {
                        fi.Delete();
                    }
                    foreach (DirectoryInfo dir in di.GetDirectories())
                    {
                        dir.Delete(true);
                    }
                    Directory.Delete(NewPath1);
                    File.Delete(filePath);
                }
                else
                {
                    countFiles += 1;
                    FileInfo fi = new FileInfo(filePath);
                    long size = fi.Length;
                    filessize = size;
                }
                string m_Result = string.Empty;
                DataSet dsSeq = new DataSet();
                dsSeq = con.GetDataSet("SELECT DCM_FILES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);

                Int64 fid = 0;
                if (con.Validate(dsSeq))
                {
                    fid = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                }
                o_Con.Open();
                OracleCommand cmd = new OracleCommand("insert into DCM_FILES(FILE_ID,FILE_NAME,FILE_TYPE,FILE_SIZE,CONTENT_TYPE,CREATED_ID,FILE_SOURCE,FILE_CONTENT,NO_OF_FILES) Values(:FILE_ID,:FILE_NAME,:FILE_TYPE,:FILE_SIZE,:CONTENT_TYPE,:CREATED_ID,:FILE_SOURCE,:FILE_CONTENT,:NO_OF_FILES)", o_Con);
                cmd.Parameters.Add(new OracleParameter("FILE_ID", fid));
                cmd.Parameters.Add(new OracleParameter("FILE_NAME", fName));
                cmd.Parameters.Add(new OracleParameter("FILE_TYPE", "Output"));
                cmd.Parameters.Add(new OracleParameter("FILE_SIZE", filessize));
                if (regProjObj.content_Type == "Folder")
                    cmd.Parameters.Add(new OracleParameter("CONTENT_TYPE", "Folder"));
                else
                    cmd.Parameters.Add(new OracleParameter("CONTENT_TYPE", MimeMapping.GetMimeMapping(fName)));
                cmd.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.UserID));
                cmd.Parameters.Add(new OracleParameter("FILE_SOURCE", "Project"));
                cmd.Parameters.Add(new OracleParameter("FILE_CONTENT", PDFdoc));
                cmd.Parameters.Add(new OracleParameter("NO_OF_FILES", countFiles));
                int m_res = cmd.ExecuteNonQuery();
                if (m_res > 0)
                {
                    Int64 fileId = 0;
                    ds = con.GetDataSet("SELECT DCM_FILE_RELATIONS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                    if (con.Validate(ds))
                    {
                        fileId = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                    }
                    //string query1 = "INSERT INTO REGOPS_PROJECT_FILES(FILE_ID,PROJ_ID,CREATED_ID,CREATED_DATE,DCM_FILE_ID,JOB_ID) VALUES";
                    //query1 = query1 + "(:FILE_ID,:PROJ_ID,:CREATED_ID,:CREATED_DATE,:DCM_FILE_ID,:JOB_ID)";
                    //OracleCommand cmd1 = new OracleCommand(query1, o_Con);
                    //cmd1 = new OracleCommand(query1, o_Con);
                    //cmd1.Parameters.Add(new OracleParameter("FILE_ID", regProjObj.file_ID));
                    //cmd1.Parameters.Add(new OracleParameter("PROJ_ID", regProjObj.proj_ID));
                    //cmd1.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.Created_ID));
                    //cmd1.Parameters.Add(new OracleParameter("CREATED_DATE", regProjObj.Created_Date));
                    //cmd1.Parameters.Add(new OracleParameter("DCM_FILE_ID", fid));
                    //cmd1.Parameters.Add(new OracleParameter("JOB_ID", regProjObj.ID));
                    string query1 = "INSERT INTO DCM_FILE_RELATIONS(FILE_ID,MODULE_NAME,MODULE_REF_ID,CREATED_ID,DCM_FILE_ID) VALUES";
                    query1 += "(:FILE_ID,:MODULE_NAME,:MODULE_REF_ID,:CREATED_ID,:DCM_FILE_ID)";
                    OracleCommand cmd1 = new OracleCommand(query1, o_Con);
                    cmd1.Parameters.Add(new OracleParameter("FILE_ID", fileId));
                    cmd1.Parameters.Add(new OracleParameter("MODULE_NAME", "Project"));
                    cmd1.Parameters.Add(new OracleParameter("MODULE_REF_ID", regProjObj.proj_ID));
                    cmd1.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.Created_ID));
                    cmd1.Parameters.Add(new OracleParameter("DCM_FILE_ID", fid));
                    int m_res1 = cmd1.ExecuteNonQuery();
                    if (m_res1 > 0)
                    {
                        //ds = con.GetDataSet("SELECT REGOPS_JOB_FILES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                        //if (con.Validate(ds))
                        //{
                        //    regProjObj.Job_File_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                        //}
                        //regProjObj.Created_Date = DateTime.Now;
                        //string query12 = "INSERT INTO REGOPS_JOB_FILES(JOB_FILE_ID,JOB_ID,DCM_FILE_ID,CREATED_ID,CREATED_DATE,INPUT_FILE_ID) VALUES";
                        //query12 = query12 + "(:JOB_FILE_ID,:JOB_ID,:DCM_FILE_ID,:CREATED_ID,:CREATED_DATE,:INPUT_FILE_ID)";
                        //OracleCommand cmd12 = new OracleCommand(query12, o_Con);
                        //cmd1 = new OracleCommand(query12, o_Con);
                        //cmd1.Parameters.Add(new OracleParameter("JOB_FILE_ID", regProjObj.Job_File_ID));
                        //cmd1.Parameters.Add(new OracleParameter("JOB_ID", regProjObj.ID));
                        //cmd1.Parameters.Add(new OracleParameter("DCM_FILE_ID", fid));
                        //cmd1.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.Created_ID));
                        //cmd1.Parameters.Add(new OracleParameter("CREATED_DATE", regProjObj.Created_Date));
                        //cmd1.Parameters.Add(new OracleParameter("INPUT_FILE_ID", sourceFId));
                        string query12 = "UPDATE REGOPS_JOB_FILES set DCM_OUTPUT_FILE_ID=:DCM_OUTPUT_FILE_ID where JOB_ID=:JOB_ID and DCM_INPUT_FILE_ID=:DCM_INPUT_FILE_ID";
                        cmd1 = new OracleCommand(query12, o_Con);
                        cmd1.Parameters.Add(new OracleParameter("DCM_OUTPUT_FILE_ID", fid));
                        cmd1.Parameters.Add(new OracleParameter("JOB_ID", regProjObj.ID));
                        cmd1.Parameters.Add(new OracleParameter("DCM_INPUT_FILE_ID", sourceFId));
                        int m_res12 = cmd1.ExecuteNonQuery();
                        if (m_res12 > 0)
                        {
                            //save output file in activity table

                            regProjObj.Activity = "This is an output file of Job " + regProjObj.Job_ID;

                            ds = con.GetDataSet("SELECT REGOPS_PROJ_FILE_ACTIVITY_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                            if (con.Validate(ds))
                            {
                                regProjObj.Activity_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                            }
                            string query = "INSERT INTO REGOPS_PROJ_FILE_ACTIVITY (ACTIVITY_ID,FILE_ID,PROJ_ID,ACTIVITY,CREATED_ID) VALUES";
                            query += "(:ACTIVITY_ID,:FILE_ID,:PROJ_ID,:ACTIVITY,:CREATED_ID)";
                            OracleCommand cmd2 = new OracleCommand(query, o_Con);
                            cmd2 = new OracleCommand(query, o_Con);
                            cmd2.Parameters.Add(new OracleParameter("ACTIVITY_ID", regProjObj.Activity_ID));
                            cmd2.Parameters.Add(new OracleParameter("FILE_ID", fid));
                            cmd2.Parameters.Add(new OracleParameter("PROJ_ID", regProjObj.proj_ID));
                            cmd2.Parameters.Add(new OracleParameter("ACTIVITY", regProjObj.Activity));
                            cmd2.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.UserID));
                            int m_res2 = cmd2.ExecuteNonQuery();
                        }
                    }
                }
                return fid;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return 0;
            }

        }

        public Int64 TemplateFileinProjectForDestination1(RegOpsQC regProjObj, string file, Int64 sourceFId)
        {
            OracleConnection o_Con = new OracleConnection();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(regProjObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                o_Con.ConnectionString = m_DummyConn;
                string res = string.Empty;
                DataSet ds = new DataSet();
                var s = Regex.Replace(file, @"""", "").Trim().ToString();
                string extension = Path.GetExtension(s);
                regProjObj.File_Upload_Name = Regex.Replace(s, @"%%%%%%%", "").Trim().ToString();
                string[] s1 = Regex.Split(s, @"%%%%%%%");
                string[] f2 = Regex.Split(s1[0], @"\\");
                string fName = regProjObj.Template_File_Name;
                byte[] PDFdoc = null;
                string filePath = file;
                FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);
                BinaryReader reader = new BinaryReader(fs);
                PDFdoc = reader.ReadBytes((int)fs.Length);
                fs.Close();
                string extension1 = Path.GetExtension(regProjObj.Template_File_Name);
                int countFiles = 0;
                double filessize = 0;
                Guid guid;
                guid = Guid.NewGuid();
                if (extension1 == ".zip")
                {
                    using (ZipFile zip = ZipFile.Read(filePath))
                    {
                        List<string> countfiles = zip.EntryFileNames.ToList();
                        string NewPath = m_SourceFolderPathExternal + "\\" + "ZipExtracts\\" + guid + "\\";
                        GiveAllPermissions(NewPath);
                        zip.ExtractAll(NewPath);
                        foreach (var entry in countfiles)
                        {
                            if (!entry.EndsWith("/"))
                            {
                                FileInfo fi = new FileInfo(NewPath + entry);
                                long size = fi.Length;
                                filessize += size;
                                countFiles += 1;
                            }
                        }
                    }
                    string NewPath1 = m_SourceFolderPathExternal + "\\" + "ZipExtracts\\" + guid + "\\";
                    System.IO.DirectoryInfo di = new DirectoryInfo(NewPath1);
                    foreach (FileInfo fi in di.GetFiles())
                    {
                        fi.Delete();
                    }
                    foreach (DirectoryInfo dir in di.GetDirectories())
                    {
                        dir.Delete(true);
                    }
                    Directory.Delete(NewPath1);
                    File.Delete(filePath);
                }
                else
                {
                    countFiles += 1;
                    FileInfo fi = new FileInfo(filePath);
                    long size = fi.Length;
                    filessize = size;
                }
                string m_Result = string.Empty;
                DataSet dsSeq = new DataSet();
                dsSeq = con.GetDataSet("SELECT DCM_FILES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);

                Int64 fid = 0;
                if (con.Validate(dsSeq))
                {
                    fid = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["NEXTVAL"].ToString());
                }
                o_Con.Open();
                OracleCommand cmd = new OracleCommand("insert into DCM_FILES(FILE_ID,FILE_NAME,FILE_TYPE,FILE_SIZE,CONTENT_TYPE,CREATED_ID,FILE_SOURCE,FILE_CONTENT,NO_OF_FILES) Values(:FILE_ID,:FILE_NAME,:FILE_TYPE,:FILE_SIZE,:CONTENT_TYPE,:CREATED_ID,:FILE_SOURCE,:FILE_CONTENT,:NO_OF_FILES)", o_Con);
                cmd.Parameters.Add(new OracleParameter("FILE_ID", fid));
                cmd.Parameters.Add(new OracleParameter("FILE_NAME", regProjObj.Template_File_Name));
                cmd.Parameters.Add(new OracleParameter("FILE_TYPE", "Source with Template"));
                cmd.Parameters.Add(new OracleParameter("FILE_SIZE", filessize));
                if (regProjObj.content_Type == "Folder")
                    cmd.Parameters.Add(new OracleParameter("CONTENT_TYPE", "Folder"));
                else
                    cmd.Parameters.Add(new OracleParameter("CONTENT_TYPE", MimeMapping.GetMimeMapping(regProjObj.Template_File_Name)));
                cmd.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.UserID));
                cmd.Parameters.Add(new OracleParameter("FILE_SOURCE", "Project"));
                cmd.Parameters.Add(new OracleParameter("FILE_CONTENT", PDFdoc));
                cmd.Parameters.Add(new OracleParameter("NO_OF_FILES", countFiles));
                int m_res = cmd.ExecuteNonQuery();
                if (m_res > 0)
                {
                    Int64 fileId = 0;
                    ds = con.GetDataSet("SELECT DCM_FILE_RELATIONS_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                    if (con.Validate(ds))
                    {
                        fileId = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                    }
                    string query1 = "INSERT INTO DCM_FILE_RELATIONS(FILE_ID,MODULE_NAME,MODULE_REF_ID,CREATED_ID,DCM_FILE_ID) VALUES";
                    query1 += "(:FILE_ID,:MODULE_NAME,:MODULE_REF_ID,:CREATED_ID,:DCM_FILE_ID)";
                    OracleCommand cmd1 = new OracleCommand(query1, o_Con);
                    cmd1.Parameters.Add(new OracleParameter("FILE_ID", fileId));
                    cmd1.Parameters.Add(new OracleParameter("MODULE_NAME", "Project"));
                    cmd1.Parameters.Add(new OracleParameter("MODULE_REF_ID", regProjObj.proj_ID));
                    cmd1.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.Created_ID));
                    cmd1.Parameters.Add(new OracleParameter("DCM_FILE_ID", fid));
                    int m_res1 = cmd1.ExecuteNonQuery();
                    if (m_res1 > 0)
                    {
                        string query12 = "UPDATE REGOPS_JOB_FILES set DCM_TEMPLATE_FILE_ID=:DCM_TEMPLATE_FILE_ID where JOB_ID=:JOB_ID and DCM_INPUT_FILE_ID=:DCM_INPUT_FILE_ID";
                        cmd1 = new OracleCommand(query12, o_Con);
                        cmd1.Parameters.Add(new OracleParameter("DCM_TEMPLATE_FILE_ID", fid));
                        cmd1.Parameters.Add(new OracleParameter("JOB_ID", regProjObj.ID));
                        cmd1.Parameters.Add(new OracleParameter("DCM_INPUT_FILE_ID", sourceFId));
                        int m_res12 = cmd1.ExecuteNonQuery();
                        if (m_res12 > 0)
                        {
                            //save source with template file in activity table
                            regProjObj.Activity = "This is a source with template file of Job " + regProjObj.Job_ID;

                            ds = con.GetDataSet("SELECT REGOPS_PROJ_FILE_ACTIVITY_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                            if (con.Validate(ds))
                            {
                                regProjObj.Activity_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                            }
                            string query = "INSERT INTO REGOPS_PROJ_FILE_ACTIVITY (ACTIVITY_ID,FILE_ID,PROJ_ID,ACTIVITY,CREATED_ID) VALUES";
                            query += "(:ACTIVITY_ID,:FILE_ID,:PROJ_ID,:ACTIVITY,:CREATED_ID)";
                            OracleCommand cmd2 = new OracleCommand(query, o_Con);
                            cmd2 = new OracleCommand(query, o_Con);
                            cmd2.Parameters.Add(new OracleParameter("ACTIVITY_ID", regProjObj.Activity_ID));
                            cmd2.Parameters.Add(new OracleParameter("FILE_ID", fid));
                            cmd2.Parameters.Add(new OracleParameter("PROJ_ID", regProjObj.proj_ID));
                            cmd2.Parameters.Add(new OracleParameter("ACTIVITY", regProjObj.Activity));
                            cmd2.Parameters.Add(new OracleParameter("CREATED_ID", regProjObj.UserID));
                            int m_res2 = cmd2.ExecuteNonQuery();
                        }
                    }
                }
                return fid;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return 0;
            }

        }

        public List<RegOpsQC> getProjectFilesbakup(RegOpsQC regObjQc)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(regObjQc.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string query = string.Empty; string queryTotal = string.Empty; RegOpsQC rgobj = new RegOpsQC();
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();

                if (string.IsNullOrEmpty(regObjQc.SearchValue))
                {
                    query = "SELECT * FROM (SELECT A.*, rownum RowIndex FROM(";
                    query += "SELECT A.* FROM (SELECT  R.PROJ_ID,CASE WHEN J.INPUT_FILE_ID IS NULL THEN NULL ELSE  J.JOB_ID END AS JOB_ID,R.DCM_FILE_ID,D.FILE_ID,D.FILE_TYPE,D.FILE_NAME,D.FILE_SOURCE,D.CONTENT_TYPE, D.CREATED_DATE,u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,D.FILE_SIZE  FROM DCM_FILES D JOIN REGOPS_PROJECT_FILES R ON D.FILE_ID=R.DCM_FILE_ID AND R.IS_DELETED IS NULL LEFT JOIN (SELECT J.ID AS JOBID, J.JOB_ID, J.JOB_TITLE, J.JOB_STATUS, J.PROJ_ID , JF.DCM_FILE_ID, JF.INPUT_FILE_ID FROM REGOPS_QC_JOBS J  JOIN REGOPS_JOB_FILES JF ON  J.ID = JF.JOB_ID AND J.PROJ_ID = " + regObjQc.proj_ID + ")J ON J.PROJ_ID = R.PROJ_ID AND D.FILE_ID = J.DCM_FILE_ID  join Users u on u.USER_ID = R.CREATED_ID WHERE R.PROJ_ID = " + regObjQc.proj_ID + ") A WHERE A.PROJ_ID =" + regObjQc.proj_ID + "  AND NOT( FILE_TYPE='Output' AND job_id IS NULL) ORDER BY A.FILE_ID desc";
                    query += ") A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE RowIndex >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";

                    queryTotal = "Select Count(*) as TotalRecords from(";
                    queryTotal += "SELECT A.* FROM (SELECT  R.PROJ_ID,CASE WHEN J.INPUT_FILE_ID IS NULL THEN NULL ELSE  J.JOB_ID END AS JOB_ID,R.DCM_FILE_ID,D.FILE_ID,D.FILE_TYPE,D.FILE_NAME,D.FILE_SOURCE,D.CONTENT_TYPE, D.CREATED_DATE,u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,D.FILE_SIZE  FROM DCM_FILES D JOIN REGOPS_PROJECT_FILES R ON D.FILE_ID=R.DCM_FILE_ID AND R.IS_DELETED IS NULL LEFT JOIN (SELECT J.ID AS JOBID, J.JOB_ID, J.JOB_TITLE, J.JOB_STATUS, J.PROJ_ID , JF.DCM_FILE_ID, JF.INPUT_FILE_ID FROM REGOPS_QC_JOBS J  JOIN REGOPS_JOB_FILES JF ON  J.ID = JF.JOB_ID AND J.PROJ_ID = " + regObjQc.proj_ID + ")J ON J.PROJ_ID = R.PROJ_ID AND D.FILE_ID = J.DCM_FILE_ID  join Users u on u.USER_ID = R.CREATED_ID WHERE R.PROJ_ID = " + regObjQc.proj_ID + ") A WHERE A.PROJ_ID =" + regObjQc.proj_ID + "  AND NOT( FILE_TYPE='Output' AND job_id IS NULL) ORDER BY A.FILE_ID desc";
                    queryTotal += ")";

                    DataSet dsC = new DataSet();
                    dsC = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(dsC))
                    {
                        rgobj.TotalRecords = Convert.ToInt32(dsC.Tables[0].Rows[0]["TotalRecords"].ToString());
                    }
                }
                else
                {
                    string[] createDate;
                    query = "SELECT * FROM (SELECT A.*, rownum RowIndex FROM(";
                    query += "SELECT A.* FROM (SELECT  R.PROJ_ID,CASE WHEN J.INPUT_FILE_ID IS NULL THEN NULL ELSE  J.JOB_ID END AS JOB_ID,R.DCM_FILE_ID,D.FILE_ID,D.FILE_TYPE,D.FILE_NAME,D.FILE_SOURCE,D.CONTENT_TYPE, D.CREATED_DATE,u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,D.FILE_SIZE FROM DCM_FILES D JOIN REGOPS_PROJECT_FILES R ON D.FILE_ID=R.DCM_FILE_ID AND R.IS_DELETED IS NULL LEFT JOIN (SELECT J.ID AS JOBID, J.JOB_ID, J.JOB_TITLE, J.JOB_STATUS, J.PROJ_ID , JF.DCM_FILE_ID, JF.INPUT_FILE_ID FROM REGOPS_QC_JOBS J  JOIN REGOPS_JOB_FILES JF ON  J.ID = JF.JOB_ID AND J.PROJ_ID = " + regObjQc.proj_ID + ")J ON J.PROJ_ID = R.PROJ_ID AND D.FILE_ID = J.DCM_FILE_ID  join Users u on u.USER_ID = R.CREATED_ID)A WHERE A.PROJ_ID =" + regObjQc.proj_ID + " AND ";


                    queryTotal = "Select Count(*) as TotalRecords from(";
                    queryTotal = queryTotal + "SELECT A.* FROM (SELECT  R.PROJ_ID,CASE WHEN J.INPUT_FILE_ID IS NULL THEN NULL ELSE  J.JOB_ID END AS JOB_ID,R.DCM_FILE_ID,D.FILE_ID,D.FILE_TYPE,D.FILE_NAME,D.FILE_SOURCE,D.CONTENT_TYPE, D.CREATED_DATE,u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,D.FILE_SIZE FROM DCM_FILES D JOIN REGOPS_PROJECT_FILES R ON D.FILE_ID=R.DCM_FILE_ID AND R.IS_DELETED IS NULL LEFT JOIN (SELECT J.ID AS JOBID, J.JOB_ID, J.JOB_TITLE, J.JOB_STATUS, J.PROJ_ID , JF.DCM_FILE_ID, JF.INPUT_FILE_ID FROM REGOPS_QC_JOBS J  JOIN REGOPS_JOB_FILES JF ON  J.ID = JF.JOB_ID AND J.PROJ_ID = " + regObjQc.proj_ID + ")J ON J.PROJ_ID = R.PROJ_ID AND D.FILE_ID = J.DCM_FILE_ID  join Users u on u.USER_ID = R.CREATED_ID)A WHERE A.PROJ_ID =" + regObjQc.proj_ID + " AND ";

                    if (!string.IsNullOrEmpty(regObjQc.File_Name))
                    {
                        query += "lower(A.FILE_NAME) like '%" + regObjQc.File_Name.ToLower() + "%' AND";
                        queryTotal += "lower(A.FILE_NAME) like '%" + regObjQc.File_Name.ToLower() + "%' AND";
                    }
                    if (!string.IsNullOrEmpty(regObjQc.File_Type))
                    {
                        query += " lower(A.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%' AND";
                        queryTotal = queryTotal + " lower(A.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%' AND";
                    }
                    if (!string.IsNullOrEmpty(regObjQc.Job_ID))
                    {
                        query += " lower(A.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%' AND";
                        queryTotal += " lower(A.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%' AND";
                    }
                    if (!string.IsNullOrEmpty(regObjQc.Created_By))
                    {
                        query += " (lower(A.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(A.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%') AND";
                        queryTotal += " (lower(A.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(A.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%') AND";
                    }
                    if (!string.IsNullOrEmpty(regObjQc.Create_date))
                    {
                        createDate = regObjQc.Create_date.Split('-');
                        query += " SUBSTR(A.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                        queryTotal += " SUBSTR(A.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                    }
                    query += " NOT( FILE_TYPE='Output' AND job_id IS NULL) AND 1=1  ORDER BY A.FILE_ID desc";
                    queryTotal += " NOT( FILE_TYPE='Output' AND job_id IS NULL) AND 1=1  ORDER BY A.FILE_ID desc";
                    query += ") A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE RowIndex >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";
                    queryTotal += ")";
                }
                DataSet ds11 = new DataSet();
                ds11 = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds11))
                {
                    rgobj.TotalRecords = Convert.ToInt32(ds11.Tables[0].Rows[0]["TotalRecords"].ToString());
                }
                DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds1))
                {
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                        tpLst.Add(rgobj);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// to get project files
        /// </summary>
        /// <param name="regObjQc"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetProjectFiles(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    OracleConnection con1 = new OracleConnection();
                    con1.ConnectionString = m_DummyConn;
                    OracleCommand cmd = new OracleCommand();
                    con1.Open();
                    OracleDataAdapter da;
                    DataSet ds = new DataSet();
                    string query = string.Empty; string condition = string.Empty; string queryTotal = string.Empty; RegOpsQC rgobj = new RegOpsQC();
                    if (regObjQc.myJobs == "1" && regObjQc.othersJob == "1")
                        condition = "";
                    else if (regObjQc.myJobs == "1" && regObjQc.othersJob == "0")
                        condition = " R.CREATED_ID=" + CreatedID + " AND ";
                    else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "1")
                        condition = " R.CREATED_ID NOT IN(" + CreatedID + ") AND ";
                    else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "0")
                        condition = " R.CREATED_ID IS NULL AND ";

                    if (string.IsNullOrEmpty(regObjQc.SearchValue))
                    {
                        query = "SELECT* FROM(SELECT A.*, rownum RowIndex FROM(select R.MODULE_REF_ID as PROJ_ID,R.CREATED_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE,D.CONTENT_TYPE, D.FILE_SOURCE,case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        query += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL left join regops_job_files RJ on RJ.DCM_OUTPUT_FILE_ID = D.FILE_ID LEFT JOIN REGOPS_QC_JOBS J on J.ID = RJ.JOB_ID and J.PROJ_ID = R.MODULE_REF_ID ";
                        query += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + " R.MODULE_REF_ID =:PROJ_ID ORDER BY D.FILE_ID desc) A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE RowIndex >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";

                        queryTotal = "Select Count(*) as TotalRecords from(";
                        queryTotal += "select R.MODULE_REF_ID as PROJ_ID,R.CREATED_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, D.CONTENT_TYPE, D.FILE_SOURCE,  case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        queryTotal += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL left join regops_job_files RJ on RJ.DCM_OUTPUT_FILE_ID = D.FILE_ID LEFT JOIN REGOPS_QC_JOBS J on J.ID = RJ.JOB_ID and J.PROJ_ID = R.MODULE_REF_ID ";
                        queryTotal += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + "  R.MODULE_REF_ID =:PROJ_ID ORDER BY D.FILE_ID desc)";
                    }
                    else
                    {
                        string[] createDate;
                        if (!string.IsNullOrEmpty(regObjQc.Job_ID))
                        {
                            query = "SELECT * FROM(SELECT A.*, rownum RowIndex FROM(select R.MODULE_REF_ID as PROJ_ID,R.CREATED_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, CASE WHEN RJ.DCM_INPUT_FILE_ID IS NULL THEN 'Source' ELSE  'Output' END AS FILE_TYPE, D.CONTENT_TYPE, D.FILE_SOURCE,  case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                            query += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL left join regops_job_files RJ on RJ.DCM_OUTPUT_FILE_ID = D.FILE_ID or RJ.DCM_TEMPLATE_FILE_ID = D.FILE_ID LEFT JOIN REGOPS_QC_JOBS J on J.ID = RJ.JOB_ID and J.PROJ_ID = R.MODULE_REF_ID";
                            query += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + "  R.MODULE_REF_ID =:PROJ_ID and lower(J.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%'";

                            queryTotal = "SELECT  Count(*) as TotalRecords  FROM(select R.MODULE_REF_ID as PROJ_ID,R.CREATED_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, CASE WHEN RJ.DCM_INPUT_FILE_ID IS NULL THEN 'Source' ELSE  'Output' END AS FILE_TYPE,D.CONTENT_TYPE, D.FILE_SOURCE,  case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                            queryTotal += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL left join regops_job_files RJ on RJ.DCM_OUTPUT_FILE_ID = D.FILE_ID LEFT JOIN REGOPS_QC_JOBS J on J.ID = RJ.JOB_ID and J.PROJ_ID = R.MODULE_REF_ID";
                            queryTotal += " join Users u on u.USER_ID = R.CREATED_ID where  " + condition + " R.MODULE_REF_ID =:PROJ_ID and lower(J.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%'";

                            if (!string.IsNullOrEmpty(regObjQc.File_Name))
                            {
                                query += " and lower(replace(D.FILE_NAME,' ','')) like replace('%" + regObjQc.File_Name.ToLower() + "%',' ','')";
                                queryTotal += " and lower(replace(D.FILE_NAME,' ','')) like replace('%" + regObjQc.File_Name.ToLower() + "%',' ','')";
                            }
                            if (!string.IsNullOrEmpty(regObjQc.File_Type))
                            {
                                query += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                                queryTotal += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                            }
                            query += " ORDER BY D.FILE_ID desc) A";
                            queryTotal += " ORDER BY D.FILE_ID desc) ";

                            query += " WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE RowIndex >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";

                        }
                        else
                        {
                            query = "SELECT * FROM(SELECT A.*, rownum RowIndex FROM(select R.MODULE_REF_ID as PROJ_ID,R.CREATED_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, D.CONTENT_TYPE, D.FILE_SOURCE,  case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                            query += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL left join regops_job_files RJ on RJ.DCM_OUTPUT_FILE_ID = D.FILE_ID or RJ.DCM_TEMPLATE_FILE_ID = D.FILE_ID LEFT JOIN REGOPS_QC_JOBS J on J.ID = RJ.JOB_ID and J.PROJ_ID = R.MODULE_REF_ID ";
                            query += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + "  R.MODULE_REF_ID =:PROJ_ID";

                            queryTotal = "SELECT Count(*) as TotalRecords FROM(select R.MODULE_REF_ID as PROJ_ID,R.CREATED_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, D.CONTENT_TYPE, D.FILE_SOURCE,  case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                            queryTotal += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL left join regops_job_files RJ on RJ.DCM_OUTPUT_FILE_ID = D.FILE_ID LEFT JOIN REGOPS_QC_JOBS J on J.ID = RJ.JOB_ID and J.PROJ_ID = R.MODULE_REF_ID ";
                            queryTotal += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + "  R.MODULE_REF_ID =:PROJ_ID";

                            if (!string.IsNullOrEmpty(regObjQc.File_Name))
                            {
                                query += " and lower(replace(D.FILE_NAME,' ','')) like replace('%" + regObjQc.File_Name.ToLower() + "%',' ','')";
                                queryTotal += " and lower(replace(D.FILE_NAME,' ','')) like replace('%" + regObjQc.File_Name.ToLower() + "%',' ','')";
                            }
                            if (!string.IsNullOrEmpty(regObjQc.File_Type))
                            {
                                query += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                                queryTotal += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                            }
                            if (!string.IsNullOrEmpty(regObjQc.Created_By))
                            {
                                query += " and (lower(u.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(u.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%') ";
                                queryTotal += " and (lower(u.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(u.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%')";
                            }
                            if (!string.IsNullOrEmpty(regObjQc.Create_date))
                            {
                                createDate = regObjQc.Create_date.Split('-');
                                query += " and SUBSTR(D.CREATED_DATE, 0,9) BETWEEN  TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM')  AND   TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') ";
                                queryTotal += " and SUBSTR(D.CREATED_DATE, 0,9) BETWEEN TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM')  AND   TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') ";
                            }
                            query += " ORDER BY D.FILE_ID desc) A";
                            queryTotal += " ORDER BY D.FILE_ID desc)";

                            query += " WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE RowIndex >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";
                        }
                    }
                    DataSet ds11 = new DataSet();
                    cmd = new OracleCommand(queryTotal, con1);
                    cmd.Parameters.Add(new OracleParameter("PROJ_ID", regObjQc.proj_ID));
                    da = new OracleDataAdapter(cmd);
                    da.Fill(ds11);
                    if (conn.Validate(ds11))
                    {
                        rgobj.TotalRecords = Convert.ToInt32(ds11.Tables[0].Rows[0]["TotalRecords"].ToString());
                    }
                    DataSet ds1 = new DataSet();
                    cmd = new OracleCommand(query, con1);
                    cmd.Parameters.Add(new OracleParameter("PROJ_ID", regObjQc.proj_ID));
                    da = new OracleDataAdapter(cmd);
                    da.Fill(ds1);
                    con1.Close();
                    if (conn.Validate(ds1))
                    {
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            TimeZone zone = TimeZone.CurrentTimeZone;
                            string timezone = zone.StandardName;
                            rgobj.TimeZone = string.Concat(System.Text.RegularExpressions.Regex
                                  .Matches(timezone, "[A-Z]")
                                  .OfType<System.Text.RegularExpressions.Match>()
                                  .Select(match => match.Value));
                            if (rgobj.TimeZone == "CUT")
                                rgobj.TimeZone = "UTC";
                            rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                            tpLst.Add(rgobj);
                        }
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }


        /// <summary>
        /// to get project files
        /// </summary>
        /// <param name="regObjQc"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetAllProjectFiles(RegOpsQC regObjQc)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(regObjQc.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                con1.Open();
                DataSet ds1 = new DataSet();
                DataSet ds = new DataSet();
                string query = string.Empty; string queryTotal = string.Empty; RegOpsQC rgobj = new RegOpsQC();
                List<RegOpsQC> tpLst = new List<RegOpsQC>();

                if (string.IsNullOrEmpty(regObjQc.SearchValue))
                {
                    //query = "Select R.PROJ_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                    //query += " FROM DCM_FILES D JOIN REGOPS_PROJECT_FILES R ON D.FILE_ID = R.DCM_FILE_ID AND R.IS_DELETED IS NULL LEFT JOIN REGOPS_QC_JOBS J on J.ID = R.JOB_ID and J.PROJ_ID = R.PROJ_ID ";
                    //query += " join Users u on u.USER_ID = R.CREATED_ID where R.PROJ_ID =:PROJ_ID ORDER BY D.FILE_ID desc";

                    query = "Select R.module_ref_id, R.DCM_FILE_ID, J.JOB_ID, D.FILE_SIZE, D.FILE_TYPE, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                    query += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.IS_DELETED IS NULL";
                    query += " join Users u on u.USER_ID = R.CREATED_ID where R.module_ref_id =:PROJ_ID ORDER BY D.FILE_ID desc";
                }
                else
                {
                    string[] createDate;
                    if (!string.IsNullOrEmpty(regObjQc.Job_ID))
                    {
                        //query = "select R.PROJ_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, CASE WHEN JF.INPUT_FILE_ID IS NULL THEN 'Source' ELSE  'Output' END AS FILE_TYPE, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        //query += " FROM REGOPS_JOB_FILES JF JOIN REGOPS_QC_JOBS J on J.ID = JF.JOB_ID join REGOPS_PROJECT_FILES R ON J.PROJ_ID = R.PROJ_ID  and r.DCM_FILE_ID = JF.DCM_FILE_ID join DCM_FILES D on D.FILE_ID = R.DCM_FILE_ID AND R.IS_DELETED IS NULL";
                        //query += " join Users u on u.USER_ID = R.CREATED_ID where R.PROJ_ID =:PROJ_ID and lower(J.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%'";

                        query = "select R.module_ref_id, R.DCM_FILE_ID, D.FILE_ID, D.FILE_SIZE, CASE WHEN JF.DCM_INPUT_FILE_ID IS NULL THEN 'Source' ELSE  'Output' END AS FILE_TYPE, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        query += " FROM REGOPS_JOB_FILES JF JOIN REGOPS_QC_JOBS J on J.ID = JF.JOB_ID join dcm_file_relations R ON J.PROJ_ID = R.module_ref_id  and r.DCM_FILE_ID = JF.DCM_INPUT_FILE_ID join DCM_FILES D on D.FILE_ID = R.DCM_FILE_ID AND R.IS_DELETED IS NULL";
                        query += " join Users u on u.USER_ID = R.CREATED_ID where R.module_ref_id =:PROJ_ID and lower(J.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%'";

                        if (!string.IsNullOrEmpty(regObjQc.File_Name))
                        {
                            query += " and lower(D.FILE_NAME) like '%" + regObjQc.File_Name.ToLower() + "%'";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.File_Type))
                        {
                            query += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                        }
                        query += " ORDER BY D.FILE_ID desc";

                    }
                    else
                    {
                        query = "select R.module_ref_id, R.DCM_FILE_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        query += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.IS_DELETED IS NULL";
                        query += " join Users u on u.USER_ID = R.CREATED_ID where R.module_ref_id =:PROJ_ID";


                        if (!string.IsNullOrEmpty(regObjQc.File_Name))
                        {
                            query += " and lower(D.FILE_NAME) like '%" + regObjQc.File_Name.ToLower() + "%'";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.File_Type))
                        {
                            query += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Created_By))
                        {
                            query += " and (lower(u.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(u.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%') ";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Create_date))
                        {
                            createDate = regObjQc.Create_date.Split('-');
                            query += " and SUBSTR(D.CREATED_DATE, 0,9) BETWEEN  TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM')  AND   TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') ";
                        }
                        query += " ORDER BY D.FILE_ID desc";
                    }
                }
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("PROJ_ID", regObjQc.proj_ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds1);
                con1.Close();
                if (conn.Validate(ds1))
                {
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        TimeZone zone = TimeZone.CurrentTimeZone;
                        string timezone = zone.StandardName;
                        rgobj.TimeZone = string.Concat(System.Text.RegularExpressions.Regex
                              .Matches(timezone, "[A-Z]")
                              .OfType<System.Text.RegularExpressions.Match>()
                              .Select(match => match.Value));
                        rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                        tpLst.Add(rgobj);
                    }
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// to get only source files in job creation
        /// </summary>
        /// <param name="regObjQc"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetUploadedFilesforJobCreation(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    string query = string.Empty; RegOpsQC rgobj = new RegOpsQC(); string condition = string.Empty;

                    DataSet ds = new DataSet();

                    query = "select R.MODULE_REF_ID as PROJ_ID, R.DCM_FILE_ID,  D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE,D.FILE_CONTENT, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                    query += " FROM DCM_FILES D left join DCM_FILE_RELATIONS R ON D.FILE_ID = R.DCM_FILE_ID and R.MODULE_NAME = 'Project' AND R.IS_DELETED IS NULL";
                    query += " join Users u on u.USER_ID = R.CREATED_ID where R.CREATED_ID=" + CreatedID + " and D.FILE_TYPE='" + regObjQc.File_Type + "' and R.MODULE_REF_ID =" + regObjQc.proj_ID;

                    if (!string.IsNullOrEmpty(regObjQc.File_IDStr))
                    {
                        query += " and D.FILE_ID IN (" + regObjQc.File_IDStr + ")";
                    }

                    query += " ORDER BY D.FILE_ID desc";

                    DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds1))
                    {
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            TimeZone zone = TimeZone.CurrentTimeZone;
                            string timezone = zone.StandardName;
                            rgobj.TimeZone = string.Concat(System.Text.RegularExpressions.Regex
                                  .Matches(timezone, "[A-Z]")
                                  .OfType<System.Text.RegularExpressions.Match>()
                                  .Select(match => match.Value));
                            if (rgobj.TimeZone == "CUT")
                                rgobj.TimeZone = "UTC";
                            rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                            tpLst.Add(rgobj);
                        }
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        /// <summary>
        /// To get files list uploaded in files tab
        /// </summary>
        /// <param name="regObjQc"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetFilesforJobCreation(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    string query = string.Empty; string queryTotal = string.Empty; RegOpsQC rgobj = new RegOpsQC(); string condition = string.Empty;

                    DataSet ds = new DataSet();
                    if (regObjQc.myJobs == "1" && regObjQc.othersJob == "1")
                        condition = "";
                    else if (regObjQc.myJobs == "1" && regObjQc.othersJob == "0")
                        condition = " R.CREATED_ID=" + CreatedID + " AND ";
                    else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "1")
                        condition = " R.CREATED_ID NOT IN(" + CreatedID + ") AND ";
                    else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "0")
                        condition = " R.CREATED_ID IS NULL AND ";

                    if (string.IsNullOrEmpty(regObjQc.SearchValue))
                    {
                        query = "SELECT* FROM(SELECT A.*, rownum RowIndex FROM(select R.MODULE_REF_ID as PROJ_ID, R.DCM_FILE_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        query += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL";
                        query += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + " D.FILE_TYPE='Source' and R.MODULE_REF_ID =" + regObjQc.proj_ID + " ORDER BY D.FILE_ID desc) A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE RowIndex >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";

                        queryTotal = "Select Count(*) as TotalRecords from(";
                        queryTotal += "select R.MODULE_REF_ID as PROJ_ID, R.DCM_FILE_ID, J.JOB_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        queryTotal += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL";
                        queryTotal += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + " D.FILE_TYPE='Source' and R.MODULE_REF_ID =" + regObjQc.proj_ID + " ORDER BY D.FILE_ID desc)";

                        DataSet dsC = new DataSet();
                        dsC = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsC))
                        {
                            rgobj.TotalRecords = Convert.ToInt32(dsC.Tables[0].Rows[0]["TotalRecords"].ToString());
                        }
                    }
                    else
                    {
                        string[] createDate;
                        query = "SELECT * FROM(SELECT A.*, rownum RowIndex FROM(select R.MODULE_REF_ID as PROJ_ID, R.DCM_FILE_ID,  D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        query += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL";
                        query += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + " D.FILE_TYPE='Source' and R.MODULE_REF_ID =" + regObjQc.proj_ID;

                        queryTotal = "SELECT Count(*) as TotalRecords FROM(select R.MODULE_REF_ID as PROJ_ID, R.DCM_FILE_ID,  D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, case when D.CONTENT_TYPE='Folder' then substr(D.FILE_NAME,1,instr(D.FILE_NAME,'.zip')-1) else D.FILE_NAME END FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        queryTotal += " FROM DCM_FILES D JOIN dcm_file_relations R ON D.FILE_ID = R.DCM_FILE_ID AND R.MODULE_NAME='Project' AND R.IS_DELETED IS NULL";
                        queryTotal += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + " D.FILE_TYPE='Source' and R.MODULE_REF_ID =" + regObjQc.proj_ID;

                        if (!string.IsNullOrEmpty(regObjQc.File_Name))
                        {
                            query += " and lower(replace(D.FILE_NAME,' ','')) like replace('%" + regObjQc.File_Name.ToLower() + "%',' ','')";
                            queryTotal += " and lower(replace(D.FILE_NAME,' ','')) like replace('%" + regObjQc.File_Name.ToLower() + "%',' ','')";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.File_Type))
                        {
                            query += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                            queryTotal += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.File_IDStr))
                        {
                            query += " and D.FILE_ID IN (" + regObjQc.File_IDStr + ")";
                            queryTotal += " and D.FILE_ID IN (" + regObjQc.File_IDStr + ")";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Created_By))
                        {
                            query += " and (lower(u.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(u.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%') ";
                            queryTotal += " and (lower(u.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(u.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%')";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Create_date))
                        {
                            createDate = regObjQc.Create_date.Split('-');
                            query += " and SUBSTR(D.CREATED_DATE, 0,9) BETWEEN  TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM')  AND   TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') ";
                            queryTotal += " and SUBSTR(D.CREATED_DATE, 0,9) BETWEEN TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM')  AND   TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') ";
                        }
                        query += " ORDER BY D.FILE_ID desc) A";
                        queryTotal += " ORDER BY D.FILE_ID desc)";
                        query += " WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE RowIndex >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";

                    }
                    DataSet ds11 = new DataSet();
                    ds11 = conn.GetDataSet(queryTotal, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds11))
                    {
                        rgobj.TotalRecords = Convert.ToInt32(ds11.Tables[0].Rows[0]["TotalRecords"].ToString());
                    }
                    DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds1))
                    {
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            TimeZone zone = TimeZone.CurrentTimeZone;
                            string timezone = zone.StandardName;
                            rgobj.TimeZone = string.Concat(System.Text.RegularExpressions.Regex
                                  .Matches(timezone, "[A-Z]")
                                  .OfType<System.Text.RegularExpressions.Match>()
                                  .Select(match => match.Value));
                            if (rgobj.TimeZone == "CUT")
                                rgobj.TimeZone = "UTC";
                            rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                            tpLst.Add(rgobj);
                        }
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        /// <summary>
        /// to get only source files in job creation
        /// </summary>
        /// <param name="regObjQc"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetAllFilesforJobCreation(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection conec = new OracleConnection();
            try
            {

                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    string query = string.Empty; string queryTotal = string.Empty; string condition = string.Empty; RegOpsQC rgobj = new RegOpsQC();

                    DataSet ds = new DataSet();
                    if (regObjQc.myJobs == "1" && regObjQc.othersJob == "1")
                        condition = "";
                    else if (regObjQc.myJobs == "1" && regObjQc.othersJob == "0")
                        condition = " R.CREATED_ID=" + CreatedID + " AND ";
                    else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "1")
                        condition = " R.CREATED_ID NOT IN(" + CreatedID + ") AND ";
                    else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "0")
                        condition = " R.CREATED_ID IS NULL AND ";
                    if (string.IsNullOrEmpty(regObjQc.SearchValue))
                    {
                        query = "select R.MODULE_REF_ID, R.DCM_FILE_ID, D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        query += " FROM DCM_FILES D JOIN DCM_FILE_RELATIONS R ON D.FILE_ID = R.DCM_FILE_ID AND R.IS_DELETED IS NULL";
                        query += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + " D.FILE_TYPE='Source' and R.MODULE_REF_ID =" + regObjQc.proj_ID + " ORDER BY D.FILE_ID desc";
                    }
                    else
                    {
                        string[] createDate;
                        query = "select  R.MODULE_REF_ID, R.DCM_FILE_ID,  D.FILE_ID, D.FILE_SIZE, D.FILE_TYPE, D.FILE_NAME, D.FILE_SOURCE, D.CONTENT_TYPE, D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by";
                        query += " FROM DCM_FILES D JOIN DCM_FILE_RELATIONS R ON D.FILE_ID = R.DCM_FILE_ID AND R.IS_DELETED IS NULL";
                        query += " join Users u on u.USER_ID = R.CREATED_ID where " + condition + " D.FILE_TYPE='Source' and R.MODULE_REF_ID =" + regObjQc.proj_ID;
                        if (!string.IsNullOrEmpty(regObjQc.File_Name))
                        {
                            query += " and lower(D.FILE_NAME) like '%" + regObjQc.File_Name.ToLower() + "%'";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.File_Type))
                        {
                            query += " and lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%'";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.File_IDStr))
                        {
                            query += " and D.FILE_ID IN (" + regObjQc.File_IDStr + ")";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Created_By))
                        {
                            query += " and (lower(u.FIRST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' OR lower(u.LAST_NAME) like '%" + regObjQc.Created_By.ToLower() + "%') ";
                        }
                        if (!string.IsNullOrEmpty(regObjQc.Create_date))
                        {
                            createDate = regObjQc.Create_date.Split('-');
                            query += " and SUBSTR(D.CREATED_DATE, 0,9) BETWEEN  TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM')  AND   TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') ";
                        }
                        query += " ORDER BY D.FILE_ID desc";
                    }
                    DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds1))
                    {
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            TimeZone zone = TimeZone.CurrentTimeZone;
                            string timezone = zone.StandardName;
                            rgobj.TimeZone = string.Concat(System.Text.RegularExpressions.Regex
                                  .Matches(timezone, "[A-Z]")
                                  .OfType<System.Text.RegularExpressions.Match>()
                                  .Select(match => match.Value));
                            if (rgobj.TimeZone == "CUT")
                                rgobj.TimeZone = "UTC";
                            rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                            tpLst.Add(rgobj);
                        }
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        public List<RegOpsQC> getFilesforJobCreationbakup(RegOpsQC regObjQc)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(regObjQc.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string query = string.Empty;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                if (string.IsNullOrEmpty(regObjQc.SearchValue))
                {
                    query = "SELECT P.PROJ_ID,P.PROJECT_ID,P.PROJECT_TITLE,F.DCM_FILE_ID,D.FILE_ID,D.FILE_NAME,D.FILE_TYPE,D.FILE_SOURCE,D.CONTENT_TYPE,D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by FROM REGOPS_PROJECTS P JOIN REGOPS_PROJECT_FILES F ON P.PROJ_ID = F.PROJ_ID JOIN DCM_FILES D ON F.DCM_FILE_ID = D.FILE_ID  join Users u on u.USER_ID = F.CREATED_ID AND F.PROJ_ID = " + regObjQc.proj_ID + "";
                }
                else
                {
                    string[] createDate;
                    query = "SELECT P.PROJ_ID,P.PROJECT_ID,P.PROJECT_TITLE,F.DCM_FILE_ID,D.FILE_ID,D.FILE_NAME,D.FILE_TYPE,D.FILE_SOURCE,D.CONTENT_TYPE,D.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by FROM REGOPS_PROJECTS P JOIN REGOPS_PROJECT_FILES F ON P.PROJ_ID = F.PROJ_ID JOIN DCM_FILES D ON F.DCM_FILE_ID = D.FILE_ID  join Users u on u.USER_ID = F.CREATED_ID AND F.PROJ_ID = " + regObjQc.proj_ID + " AND";
                    if (!string.IsNullOrEmpty(regObjQc.File_Name))
                    {
                        query += "lower(D.FILE_NAME) like '%" + regObjQc.File_Name.ToLower() + "%' AND";
                    }
                    if (!string.IsNullOrEmpty(regObjQc.File_Type))
                    {
                        query += " lower(D.FILE_TYPE) like '%" + regObjQc.File_Type.ToLower() + "%' AND";
                    }
                    if (!string.IsNullOrEmpty(regObjQc.Create_date))
                    {
                        createDate = regObjQc.Create_date.Split('-');
                        query += " SUBSTR(D.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                    }
                    query += " 1=1  ORDER BY PROJ_ID";
                }
                DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds1))
                {
                    tpLst = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        //Delete DOcument
        public string DeleteDocument(RegOpsQC fileInfo)
        {
            string message = string.Empty;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(fileInfo.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                con1.Open();
                string m_query = string.Empty;
                m_query = "UPDATE DCM_FILE_RELATIONS SET IS_DELETED=1 ,UPDATED_ID=:UPDATED_ID,UPDATED_DATE=(SELECT SYSDATE FROM DUAL) WHERE DCM_FILE_ID=:DCM_FILE_ID";
                cmd = new OracleCommand(m_query, con1);
                cmd.Parameters.Add("UPDATED_ID", fileInfo.Created_ID);
                cmd.Parameters.Add("DCM_FILE_ID", fileInfo.file_ID);
                int result = cmd.ExecuteNonQuery();
                if (result > 0)
                {
                    message = "Success";
                }
                return message;
            }

            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "";
            }
        }

        public List<RegOpsQC> GetFileInformation(RegOpsQC rObj)
        {
            Connection conn = new Connection();
            string query = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> fileInfoObjLst = null;
                DataSet ds = new DataSet();
                //   query = "SELECT rpf.*, 'Home' AS DIRECTORY,(SELECT WM_CONCAT(S.PREFERENCE_NAME) FROM REGOPS_QC_PREFERENCES S WHERE ID IN( SELECT DISTINCT P.PREFERENCE_ID FROM REGOPS_JOB_PLANS P WHERE P.JOB_ID IN(SELECT F.JOB_ID FROM REGOPS_JOB_FILES F WHERE F.DCM_FILE_ID = rpf.FILE_ID))) AS   VALIDATION_PLAN,u.first_name||' '||u.LAST_NAME as Uploaded_by FROM DCM_FILES rpf join users u on u.USER_ID=rpf.CREATED_ID WHERE rpf.FILE_ID = " + rObj.file_ID + "";
                query = "SELECT  rpf.FILE_ID,rpf.FILE_NAME,rpf.FILE_TYPE,rpf.FILE_SIZE,rpf.CREATED_DATE, 'Home' AS DIRECTORY,WM_CONCAT(rp.preference_name),u.first_name||' '||u.LAST_NAME as Uploaded_by,rp.PREFERENCE_NAME,rqj.JOB_ID FROM DCM_FILES rpf";
                query += " inner join users u on u.USER_ID = rpf.CREATED_ID left join REGOPS_JOB_FILES rj on rpf.FILE_ID = CASE WHEN rpf.FILE_TYPE = 'Source' THEN rj.DCM_INPUT_FILE_ID WHEN rpf.FILE_TYPE = 'Output' THEN rj.DCM_OUTPUT_FILE_ID ELSE rj.DCM_TEMPLATE_FILE_ID END left join REGOPS_QC_JOBS rqj on rj.JOB_ID=rqj.ID";
                query += " left join REGOPS_JOB_PLANS jp on jp.job_id = rj.job_id left join REGOPS_QC_PREFERENCES rp on rp.ID = jp.PREFERENCE_ID WHERE rpf.FILE_ID =" + rObj.file_ID + " group by rpf.FILE_ID,rpf.FILE_NAME,rpf.FILE_TYPE,rpf.DESCRIPTION,rpf.FILE_SIZE,rpf.CREATED_DATE,u.first_name,u.LAST_NAME,rp.PREFERENCE_NAME,rqj.JOB_ID";
                ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC obj = new RegOpsQC();
                        fileInfoObjLst = new List<RegOpsQC>();
                        obj.file_ID = Convert.ToInt64(ds.Tables[0].Rows[i]["FILE_ID"].ToString());
                        obj.DIRECTORY = ds.Tables[0].Rows[i]["DIRECTORY"].ToString();
                        obj.Filesize = ds.Tables[0].Rows[i]["FILE_SIZE"].ToString();
                        double sizefiles = 0;
                        sizefiles = Convert.ToDouble(obj.Filesize);
                        if ((sizefiles / 1024) > 1024)
                        {
                            double val = ((sizefiles / 1024) / 1024);
                            obj.Files_size = Math.Round(val, 2) + " MB";
                        }
                        else
                        {
                            obj.Files_size = Math.Round((sizefiles / 1024), 2) + " KB";
                        }
                        obj.File_Name = ds.Tables[0].Rows[i]["FILE_NAME"].ToString();
                        obj.File_Type = ds.Tables[0].Rows[i]["FILE_TYPE"].ToString();
                        obj.Uploaded_by = ds.Tables[0].Rows[i]["Uploaded_by"].ToString();
                        obj.Preference_Name = ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                        obj.Job_ID = ds.Tables[0].Rows[i]["JOB_ID"].ToString();
                        obj.Created_Date = Convert.ToDateTime(ds.Tables[0].Rows[i]["CREATED_DATE"].ToString());
                        fileInfoObjLst.Add(obj);
                    }
                }
                return fileInfoObjLst;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string DownloadProjectFilesHtml(RegOpsQC tpObj)
        {
            try
            {
                string result = string.Empty;
                StringBuilder sb = new StringBuilder();
                Guid mainId;
                mainId = Guid.NewGuid();
                tpObj.guidPath = mainId.ToString();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        string query = string.Empty;
                        string File_Name = string.Empty;
                        byte[] OutputData = null;
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();
                        OracleDataAdapter da;
                        DataSet ds1 = new DataSet();
                        query = "SELECT FILE_NAME,FILE_CONTENT FROM DCM_FILES WHERE FILE_ID=:FILE_ID";
                        cmd = new OracleCommand(query, con1);
                        cmd.Parameters.Add(new OracleParameter("FILE_ID", tpObj.file_ID));
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        con1.Close();
                        if (conn.Validate(ds))
                        {
                            File_Name = ds.Tables[0].Rows[0]["FILE_NAME"].ToString();
                            string extension = Path.GetExtension(File_Name);
                            OutputData = (byte[])ds.Tables[0].Rows[0]["FILE_CONTENT"];
                            string guidPath = m_SourceFolderPathExternal + "\\" + "RegOpsQCFiles\\" + mainId;

                            if (!Directory.Exists(guidPath))
                            {
                                Directory.CreateDirectory(guidPath);
                            }

                            string filePath = m_SourceFolderPathExternal + "\\" + "RegOpsQCFiles\\" + mainId + "\\" + tpObj.file_ID;
                            FileInfo fileTem = new FileInfo(filePath);
                            if (fileTem.Exists)//check file exsit or not
                            {
                                File.Delete(filePath);
                            }
                            string filePath1 = m_SourceFolderPathExternal + "\\" + "RegOpsQCFiles\\";
                            using (FileStream fs = new FileStream(filePath1 + mainId + "\\" + tpObj.file_ID + extension, FileMode.Create))
                            {
                                fs.Write(OutputData, 0, OutputData.Length);
                            }
                            RegOpsQC regOpsObj = new RegOpsQC();
                            regOpsObj.UserID = tpObj.Created_ID;
                            regOpsObj.ORGANIZATION_ID = tpObj.ORGANIZATION_ID;
                            regOpsObj.ROLE_ID = tpObj.ROLE_ID;
                            regOpsObj.file_ID = tpObj.file_ID;
                            regOpsObj.proj_ID = tpObj.proj_ID;
                            regOpsObj.Activity = "File Downloaded";
                            result = new RegOpsQCActions().SaveFilesActivity(regOpsObj);
                        }
                        return File_Name;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "";
            }
        }

        // Download Multiple Files
        public string GetDownloadFiles(RegOpsQC tpObj)
        {
            try
            {
                string result = string.Empty;
                string fileName = string.Empty, dirDelPath = string.Empty, downPath = string.Empty, folderPath = string.Empty, filePath = string.Empty,
                sourcePath = string.Empty, destFile = string.Empty, targetPath = string.Empty, Project_id = string.Empty;

                StringBuilder sb = new StringBuilder();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        string query = string.Empty;
                        string File_Name = string.Empty;
                        byte[] OutputData = null;
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();
                        OracleDataAdapter da;
                        DataSet ds1 = new DataSet();
                        tpObj.FilesList = JsonConvert.DeserializeObject<List<RegOpsQC>>(tpObj.File_Upload_Name);
                        string[] files = new string[tpObj.FilesList.Count];
                        Guid g;
                        g = Guid.NewGuid();
                        int Count = 1;
                        for (int i = 0; i < tpObj.FilesList.Count; i++)
                        {
                            query = "SELECT FILE_NAME,FILE_CONTENT FROM DCM_FILES WHERE FILE_ID=:FILE_ID";
                            cmd = new OracleCommand(query, con1);
                            cmd.Parameters.Add(new OracleParameter("FILE_ID", tpObj.FilesList[i].file_ID));
                            da = new OracleDataAdapter(cmd);
                            ds.Clear();
                            da.Fill(ds);
                            con1.Close();
                            if (conn.Validate(ds))
                            {
                                File_Name = ds.Tables[0].Rows[0]["FILE_NAME"].ToString();
                                string extension = Path.GetExtension(File_Name);
                                OutputData = (byte[])ds.Tables[0].Rows[0]["FILE_CONTENT"];

                                folderPath = m_SourceFolderPathExternal + "\\RegOpsQCFiles\\";
                                filePath = folderPath + tpObj.FilesList[i].file_ID;
                                targetPath = folderPath + "Download\\" + "\\" + g + "\\";
                                dirDelPath = targetPath;
                                if (!Directory.Exists(targetPath))
                                {
                                    Directory.CreateDirectory(targetPath);
                                }
                                if (System.IO.Directory.Exists(folderPath))
                                {
                                    fileName = System.IO.Path.GetFileName(File_Name);
                                    fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
                                    destFile = targetPath + fileName;
                                    for (int j = 0; j < Count; j++)
                                    {
                                        if (File.Exists(destFile))
                                        {
                                            fileName = (Path.GetFileNameWithoutExtension(fileName)) + " (" + Count + ") " + Path.GetExtension(fileName);
                                            destFile = targetPath + fileName;
                                            Count++;
                                        }
                                        else
                                        {
                                            Count = 1;
                                        }
                                    }
                                    files[i] = destFile;
                                    if (!File.Exists(destFile))
                                    {
                                        using (FileStream fs = new FileStream(targetPath + fileName, FileMode.Create))
                                        {
                                            fs.Write(OutputData, 0, OutputData.Length);
                                        }
                                    }
                                }
                                RegOpsQC regOpsObj = new RegOpsQC();
                                regOpsObj.UserID = tpObj.Created_ID;
                                regOpsObj.ORGANIZATION_ID = tpObj.ORGANIZATION_ID;
                                regOpsObj.ROLE_ID = tpObj.ROLE_ID;
                                // regOpsObj.file_ID = tpObj.file_ID;
                                regOpsObj.file_ID = tpObj.FilesList[i].file_ID;
                                regOpsObj.proj_ID = tpObj.proj_ID;
                                regOpsObj.Activity = "File Downloaded";
                                result = new RegOpsQCActions().SaveFilesActivity(regOpsObj);
                            }

                        }
                        if (Directory.Exists(targetPath))
                        {
                            if (System.IO.Directory.Exists(targetPath))
                            {
                                using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                {
                                    zip.AddFiles(files, "Download");//Zip file inside filename  
                                    downPath = targetPath + "Download" + ".zip";
                                    zip.Save(downPath);//location and name for creating zip file  
                                }
                            }
                        }
                        return downPath;
                    }
                    result = "Error Page";
                    return result;
                }
                result = "Login Page";
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "";
            }
        }


        public string GetDownloadFiles1(Plans tpObj)
        {
            string fileName = string.Empty, dirDelPath = string.Empty, downPath = string.Empty, folderPath = string.Empty, filePath = string.Empty,
                sourcePath = string.Empty, destFile = string.Empty, targetPath = string.Empty, Project_id = string.Empty, result = string.Empty;
            string query = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                DataSet ds = new DataSet();
                tpObj.FilesList = JsonConvert.DeserializeObject<List<Plans>>(tpObj.File_Upload_Name);
                string[] files = new string[tpObj.FilesList.Count];
                Guid g;
                g = Guid.NewGuid();
                int Count = 1;
                for (int i = 0; i < tpObj.FilesList.Count; i++)
                {

                    Project_id = tpObj.FilesList[i].Project_ID;
                    folderPath = m_SourceFolderPathExternal + "\\DCM\\";
                    filePath = folderPath + tpObj.FilesList[i].File_ID_Name;
                    targetPath = folderPath + "Download\\" + "\\" + g + "\\";
                    dirDelPath = targetPath;
                    if (!Directory.Exists(targetPath))
                    {
                        Directory.CreateDirectory(targetPath);
                    }

                    if (System.IO.Directory.Exists(folderPath))
                    {
                        fileName = System.IO.Path.GetFileName(tpObj.FilesList[i].File_Name);
                        fileName = (Path.GetFileNameWithoutExtension(fileName)) + Path.GetExtension(fileName);
                        destFile = System.IO.Path.Combine(targetPath, fileName);
                        for (int j = 0; j < Count; j++)
                        {
                            if (File.Exists(destFile))
                            {
                                fileName = (Path.GetFileNameWithoutExtension(fileName)) + " (" + Count + ") " + Path.GetExtension(fileName);
                                destFile = System.IO.Path.Combine(targetPath, fileName);
                                Count++;
                            }
                            else
                            {
                                Count = 1;
                            }
                        }
                        files[i] = destFile;
                        if (!File.Exists(destFile))
                        {
                            System.IO.File.Copy(filePath, destFile, true);
                        }
                    }

                    RegOpsQC regOpsObj = new RegOpsQC();
                    regOpsObj.UserID = tpObj.UserID;
                    regOpsObj.ORGANIZATION_ID = tpObj.ORGANIZATION_ID;
                    regOpsObj.ROLE_ID = tpObj.ROLE_ID;
                    regOpsObj.file_ID = tpObj.FilesList[i].file_ID;
                    regOpsObj.proj_ID = tpObj.proj_ID;
                    regOpsObj.Activity = "File Downloaded";
                    result = new RegOpsQCActions().SaveFilesActivity(regOpsObj);



                }

                if (Directory.Exists(targetPath))
                {
                    if (System.IO.Directory.Exists(targetPath))
                    {
                        using (ZipFile zip = new ZipFile(Encoding.UTF8))
                        {
                            zip.AddFiles(files, "Download");//Zip file inside filename  
                            downPath = targetPath + "Download" + ".zip";
                            zip.Save(downPath);//location and name for creating zip file  
                        }
                    }
                }
                return downPath;
            }
            catch
            {
                throw;
            }
        }
        public List<RegOpsQC> GetJobsFromProject(RegOpsQC regObjQc)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == regObjQc.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == regObjQc.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == regObjQc.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(regObjQc.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();
                        OracleDataAdapter da;
                        string query = string.Empty, condition = string.Empty; string queryCount = string.Empty;
                        DataSet ds = new DataSet(); RegOpsQC rgobj = new RegOpsQC();
                        if (regObjQc.myJobs == "1" && regObjQc.othersJob == "1")
                            condition = "";
                        else if (regObjQc.myJobs == "1" && regObjQc.othersJob == "0")
                            condition = " qcjobs.CREATED_ID=" + regObjQc.Created_ID + " AND ";
                        else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "1")
                            condition = " qcjobs.CREATED_ID NOT IN(" + regObjQc.Created_ID + ") AND ";
                        else if (regObjQc.myJobs == "0" && regObjQc.othersJob == "0")
                            condition = " qcjobs.CREATED_ID IS NULL AND ";
                        if (regObjQc.SearchValue == "False")
                        {
                            query = "SELECT * FROM (SELECT A.*, rownum r_ FROM(";
                            query += "SELECT a.*,B.No_Of_Plans FROM (SELECT A.* FROM(select ID,JOB_ID,PROJECT_ID, JOB_TITLE,JOB_TYPE,category,TO_CHAR(NO_OF_FILES) NO_OF_FILES, ";
                            query += "CREATED_DATE, CREATE_ID,USER_NAME, JOB_STATUS, sum(pass) as CheckPassCount,sum(fail) as CheckFailedCount, ";
                            query += "sum(fixed) as TotalFixedCheckCount,sum(TotalCount) as TotalCheckCount, IS_DELETED ";
                            query += "from(select qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE,qcjobs.category, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, U.FIRST_NAME || ' '|| U.LAST_NAME AS USER_NAME, ";
                            query += "qcjobs.JOB_STATUS, count(regval.QC_RESULT) as TotalCount, ";
                            query += "case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail, ";
                            query += "SUM(COALESCE(regval.IS_FIXED,0)) fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty, ";
                            query += "qcjobs.IS_DELETED, qcjobs.CREATED_ID AS CREATE_ID from REGOPS_QC_VALIDATION_DETAILS regval ";
                            query += "right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID ";
                            query += "left join users u on u.USER_ID = qcjobs.CREATED_ID where  " + condition + " qcjobs.proj_id =:proj_id ";
                            query += "group by qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE,qcjobs.category, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, U.FIRST_NAME , U.LAST_NAME, ";
                            query += "qcjobs.JOB_STATUS, regval.QC_RESULT, qcjobs.IS_DELETED, qcjobs.CREATED_ID)t group by ID, ";
                            query += "JOB_ID,PROJECT_ID,  JOB_TITLE,JOB_TYPE,category,NO_OF_FILES, CREATED_DATE, USER_NAME, JOB_STATUS,IS_DELETED,CREATE_ID order by Id desc) A ) A,(select RJB.JOB_ID, ";
                            query += "COUNT(RJB.PREFERENCE_ID) AS No_Of_Plans ";
                            query += "from REGOPS_JOB_PLANS RJB group by RJB.JOB_ID) B where A.ID=B.JOB_ID ";
                            query += "order by A.ID desc";
                            query += ") A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE r_ >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";

                            queryCount = "SELECT * FROM (SELECT A.*, rownum r_ FROM(";
                            queryCount += "SELECT a.*,B.No_Of_Plans FROM (SELECT A.* FROM(select ID,JOB_ID,PROJECT_ID, JOB_TITLE,JOB_TYPE,TO_CHAR(NO_OF_FILES) NO_OF_FILES, ";
                            queryCount += "CREATED_DATE, CREATE_ID,USER_NAME, JOB_STATUS, sum(pass) as CheckPassCount,sum(fail) as CheckFailedCount, ";
                            queryCount += "sum(fixed) as TotalFixedCheckCount,sum(TotalCount) as TotalCheckCount, IS_DELETED ";
                            queryCount += "from(select qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, U.FIRST_NAME || ' '|| U.LAST_NAME AS USER_NAME, ";
                            queryCount += "qcjobs.JOB_STATUS, count(regval.QC_RESULT) as TotalCount, ";
                            queryCount += "case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail, ";
                            queryCount += "SUM(COALESCE(regval.IS_FIXED,0)) fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty, ";
                            queryCount += "qcjobs.IS_DELETED, qcjobs.CREATED_ID AS CREATE_ID from REGOPS_QC_VALIDATION_DETAILS regval ";
                            queryCount += "right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID ";
                            queryCount += "left join users u on u.USER_ID = qcjobs.CREATED_ID where  " + condition + " qcjobs.proj_id =:proj_id ";
                            queryCount += "group by qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, U.FIRST_NAME , U.LAST_NAME, ";
                            queryCount += "qcjobs.JOB_STATUS, regval.QC_RESULT, qcjobs.IS_DELETED, qcjobs.CREATED_ID)t group by ID, ";
                            queryCount += "JOB_ID,PROJECT_ID,  JOB_TITLE,JOB_TYPE,NO_OF_FILES, CREATED_DATE, USER_NAME, JOB_STATUS,IS_DELETED,CREATE_ID order by Id desc) A ) A,(select RJB.JOB_ID, ";
                            queryCount += "COUNT(RJB.PREFERENCE_ID) AS No_Of_Plans ";
                            queryCount += "from REGOPS_JOB_PLANS RJB group by RJB.JOB_ID) B where A.ID=B.JOB_ID ";
                            queryCount += "order by A.ID desc";
                            queryCount += ")";

                            DataSet dsC = new DataSet();
                            cmd = new OracleCommand(query, con1);
                            cmd.Parameters.Add(new OracleParameter("proj_id", regObjQc.proj_ID));
                            da = new OracleDataAdapter(cmd);
                            da.Fill(dsC);
                            if (conn.Validate(dsC))
                            {
                                rgobj.TotalRecords = Convert.ToInt32(dsC.Tables[0].Rows[0]["TotalRecords"].ToString());
                            }
                        }
                        else
                        {
                            string[] createDate;
                            query = "SELECT * FROM (SELECT A.*, rownum r_ FROM(";
                            query += "SELECT a.*,B.No_Of_Plans FROM (SELECT A.* FROM(select ID,JOB_ID,PROJECT_ID, JOB_TITLE,JOB_TYPE,category,TO_CHAR(NO_OF_FILES) NO_OF_FILES, ";
                            query += "CREATED_DATE, CREATE_ID,USER_NAME, JOB_STATUS, sum(pass) as CheckPassCount,sum(fail) as CheckFailedCount, ";
                            query += "sum(fixed) as TotalFixedCheckCount,sum(TotalCount) as TotalCheckCount, IS_DELETED ";
                            query += "from(select qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE,qcjobs.category, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, U.FIRST_NAME || ' '|| U.LAST_NAME AS USER_NAME, ";
                            query += "qcjobs.JOB_STATUS, count(regval.QC_RESULT) as TotalCount, ";
                            query += "case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail, ";
                            query += "SUM(COALESCE(regval.IS_FIXED,0)) fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty, ";
                            query += "qcjobs.IS_DELETED, qcjobs.CREATED_ID AS CREATE_ID from REGOPS_QC_VALIDATION_DETAILS regval ";
                            query += "right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID ";
                            query += "left join users u on u.USER_ID = qcjobs.CREATED_ID where  " + condition + " qcjobs.proj_id = " + regObjQc.proj_ID + " ";
                            query += "group by qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE,qcjobs.category, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.USER_NAME,U.FIRST_NAME,U.LAST_NAME, ";
                            query += "qcjobs.JOB_STATUS, regval.QC_RESULT, qcjobs.IS_DELETED, qcjobs.CREATED_ID)t group by ID, ";
                            query += "JOB_ID,PROJECT_ID,  JOB_TITLE,JOB_TYPE,category,NO_OF_FILES, CREATED_DATE, USER_NAME, JOB_STATUS,IS_DELETED,CREATE_ID order by Id desc) A ) A,(select RJB.JOB_ID, ";
                            query += "COUNT(RJB.PREFERENCE_ID) AS No_Of_Plans ";
                            query += "from REGOPS_JOB_PLANS RJB group by RJB.JOB_ID) B where A.ID=B.JOB_ID  AND ";

                            queryCount = "Select Count(*) as TotalRecords from(";
                            queryCount += "SELECT a.*,B.No_Of_Plans FROM (SELECT A.* FROM(select ID,JOB_ID,PROJECT_ID, JOB_TITLE,JOB_TYPE,TO_CHAR(NO_OF_FILES) NO_OF_FILES, ";
                            queryCount += "CREATED_DATE, CREATE_ID,USER_NAME, JOB_STATUS, sum(pass) as CheckPassCount,sum(fail) as CheckFailedCount, ";
                            queryCount += "sum(fixed) as TotalFixedCheckCount,sum(TotalCount) as TotalCheckCount, IS_DELETED ";
                            queryCount += "from(select qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, U.FIRST_NAME || ' '|| U.LAST_NAME AS USER_NAME, ";
                            queryCount += "qcjobs.JOB_STATUS, count(regval.QC_RESULT) as TotalCount, ";
                            queryCount += "case when regval.QC_RESULT = 'Passed' then count(1) else 0 end pass, case when regval.QC_RESULT = 'Failed' then count(1) else 0  end  fail, ";
                            queryCount += "SUM(COALESCE(regval.IS_FIXED,0)) fixed, case when regval.QC_RESULT is null then count(1) else 0 end empty, ";
                            queryCount += "qcjobs.IS_DELETED, qcjobs.CREATED_ID AS CREATE_ID from REGOPS_QC_VALIDATION_DETAILS regval ";
                            queryCount += "right join REGOPS_QC_JOBS qcjobs on qcjobs.ID = regval.JOB_ID ";
                            queryCount += "left join users u on u.USER_ID = qcjobs.CREATED_ID where  " + condition + " qcjobs.proj_id = " + regObjQc.proj_ID + " ";
                            queryCount += "group by qcjobs.ID, qcjobs.JOB_ID, qcjobs.PROJECT_ID, qcjobs.JOB_TITLE,qcjobs.JOB_TYPE, qcjobs.NO_OF_FILES, qcjobs.CREATED_DATE, u.USER_NAME,U.FIRST_NAME,U.LAST_NAME, ";
                            queryCount += "qcjobs.JOB_STATUS, regval.QC_RESULT, qcjobs.IS_DELETED, qcjobs.CREATED_ID)t group by ID, ";
                            queryCount += "JOB_ID,PROJECT_ID,  JOB_TITLE,JOB_TYPE,NO_OF_FILES, CREATED_DATE, USER_NAME, JOB_STATUS,IS_DELETED,CREATE_ID order by Id desc) A ) A,(select RJB.JOB_ID, ";
                            queryCount += "COUNT(RJB.PREFERENCE_ID) AS No_Of_Plans ";
                            queryCount += "from REGOPS_JOB_PLANS RJB group by RJB.JOB_ID) B where A.ID=B.JOB_ID  AND ";

                            if (!string.IsNullOrEmpty(regObjQc.Job_ID))
                            {
                                query += " lower(A.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%' AND ";
                                queryCount += " lower(A.JOB_ID) like '%" + regObjQc.Job_ID.ToLower() + "%' AND ";
                            }
                            if (!string.IsNullOrEmpty(regObjQc.Status))
                            {
                                query += " lower(A.JOB_STATUS) like '%" + regObjQc.Status.ToLower() + "%' AND";
                                queryCount += " lower(A.JOB_STATUS) like '%" + regObjQc.Status.ToLower() + "%' AND";
                            }
                            if (!string.IsNullOrEmpty(regObjQc.Created_By))
                            {
                                query += " lower(A.USER_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' AND";
                                queryCount += " lower(A.USER_NAME) like '%" + regObjQc.Created_By.ToLower() + "%' AND";
                            }
                            if (!string.IsNullOrEmpty(regObjQc.Create_date))
                            {
                                createDate = regObjQc.Create_date.Split('-');
                                query += "  SUBSTR(CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                                queryCount += "  SUBSTR(CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                            }
                            query += " 1=1 order by A.ID desc";
                            queryCount += " 1=1 order by A.ID desc";
                            query += ") A WHERE rownum < ((" + regObjQc.Pagenumber + " * " + regObjQc.pageSize + ") + 1 )) WHERE r_ >= (((" + regObjQc.Pagenumber + " - 1) * " + regObjQc.pageSize + ") + 1)";
                            queryCount += ")";
                            DataSet ds11 = new DataSet();
                            cmd = new OracleCommand(queryCount, con1);
                            da = new OracleDataAdapter(cmd);
                            da.Fill(ds11);

                            if (conn.Validate(ds11))
                            {
                                rgobj.TotalRecords = Convert.ToInt32(ds11.Tables[0].Rows[0]["TotalRecords"].ToString());
                            }
                        }
                        DataSet ds1 = new DataSet();
                        cmd = new OracleCommand(query, con1);
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds1);
                        con1.Close();
                        if (conn.Validate(ds1))
                        {
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                TimeZone zone = TimeZone.CurrentTimeZone;
                                string timezone = zone.StandardName;
                                rgobj.TimeZone = string.Concat(System.Text.RegularExpressions.Regex
                                      .Matches(timezone, "[A-Z]")
                                      .OfType<System.Text.RegularExpressions.Match>()
                                      .Select(match => match.Value));
                                if (rgobj.TimeZone == "CUT")
                                    rgobj.TimeZone = "UTC";
                                rgobj.TableList = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                                tpLst.Add(rgobj);
                            }
                        }
                        return tpLst;
                    }
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public List<RegOpsQC> PreviewDocument(RegOpsQC regObjQc)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(regObjQc.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string query = string.Empty;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                query = "SELECT C.*,(SELECT  D.FIRST_NAME ||'  '||D.LAST_NAME FROM USERS D  WHERE D.USER_ID=C.CREATED_ID) CREATED_BY FROM(SELECT  A.ID, A.JOB_ID,  A.JOB_TITLE,  A.JOB_DESCRIPTION,  A.CREATED_DATE,  A.CREATED_ID,  TO_CHAR(A.NO_OF_FILES) NO_OF_FILES,A.JOB_STATUS,A.PROJ_ID,B.TotalCheckCount,B.CheckPassCount,B.TotalFixedCheckCount,B.CheckFailedCount FROM (SELECT ID, JOB_ID, JOB_TITLE, JOB_DESCRIPTION, CREATED_DATE, CREATED_ID, NO_OF_FILES, COUNT(PREFERENCE_ID)No_Of_Plans,JOB_STATUS , PROJ_ID FROM REGOPS_QC_JOBS GROUP BY ID, JOB_ID, JOB_TITLE, JOB_DESCRIPTION, CREATED_DATE, CREATED_ID, NO_OF_FILES, JOB_STATUS, PROJ_ID)A JOIN (SELECT JOB_ID AS IN_ID, COUNT(CHECKLIST_ID) AS TotalCheckCount, SUM(PASSED) AS CheckPassCount, SUM(FIXED) AS TotalFixedCheckCount , SUM(FAILED) AS  CheckFailedCount FROM(SELECT JOB_ID, CHECKLIST_ID, CASE WHEN QC_RESULT = 'Passed' THEN COUNT(1) ELSE 0 END AS PASSED, CASE WHEN QC_RESULT = 'Fixed' THEN COUNT(1) ELSE 0 END AS FIXED,CASE WHEN QC_RESULT = 'Failed' THEN cOUNT(1) ELSE 0 END AS FAILED FROM REGOPS_QC_VALIDATION_DETAILS  GROUP BY JOB_ID, CHECKLIST_ID,QC_RESULT) GROUP BY JOB_ID)B ON A.ID = B.IN_ID)C";
                DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds1))
                {
                    tpLst = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public string GetDocumentName(string document1, string document2, string Project_ID)
        {
            return m_SourceFolderPathExternal + "\\DCM" + "//" + Path.GetFileNameWithoutExtension(document1) + ".docx";
        }
        public string GetPreviewDocumentName(string document1, string Project_ID)
        {
            if (document1.Split('.').Last() != "pdf")
            {
                return m_SourceFolderPathExternal + "\\DCM" + "//" + Path.GetFileNameWithoutExtension(document1) + ".docx";
            }
            else
                return m_SourceFolderPathExternal + "\\DCM" + "\\" + Path.GetFileNameWithoutExtension(document1) + ".pdf";

        }

        public static System.Drawing.Color HexToColor(string hexString)
        {
            //replace # occurences
            if (hexString.IndexOf('#') != -1)
                hexString = hexString.Replace("#", "");

            int r, g, b = 0;

            r = int.Parse(hexString.Substring(0, 2), NumberStyles.AllowHexSpecifier);
            g = int.Parse(hexString.Substring(2, 2), NumberStyles.AllowHexSpecifier);
            b = int.Parse(hexString.Substring(4, 2), NumberStyles.AllowHexSpecifier);

            return System.Drawing.Color.FromArgb(r, g, b);
        }
        public ArrayList PreviewWordDocumnetsHtml(RegOpsQC rObj)
        {
            try
            {
                ArrayList result = new ArrayList();
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string comppath = string.Empty; string downloadcomppath = string.Empty; string previewdocument = string.Empty;
                string document1 = m_SourceFolderPathExternal + "\\DCM" + "\\" + rObj.file_ID + "." + rObj.File_Type;
                comppath = Path.GetFileNameWithoutExtension(document1);
                string desfile = document1;
                if (document1.Split('.').Last() != "doc")
                {
                    // Create a temporary folder
                    previewdocument = GetPreviewDocumentName(document1, rObj.Project_ID);
                }
                else
                {
                    previewdocument = document1;
                }
                // Call the util class for preview doc
                DocumentComparisonUtil docCompUtil = new DocumentComparisonUtil();
                int added = 0, deleted = 0;
                //docCompUtil.Compare(document1, document2, comparisonDocument, ref added, ref deleted);
                docCompUtil.PreviewDoctoHtml(previewdocument, ref added, ref deleted);
                result.Add("Success"); // 0. Result
                result.Add((desfile)); // 1. Path of the comparison document
                result.Add(added); // 2. Number of additions
                result.Add(deleted); // 3. Number of deletions
                result.Add(rObj.File_Name);//4. File Name
                result.Add(comppath);//5. Iframe Path
                                     //result.Add(downloadcomppath);//6. Download Path
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        public List<RegOpsQC> GetJobFilesForRerun(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    string query = string.Empty;
                    DataSet ds1 = new DataSet();
                    OracleConnection con1 = new OracleConnection();
                    con1.ConnectionString = m_DummyConn;
                    OracleCommand cmd = new OracleCommand();
                    con1.Open();
                    OracleDataAdapter da;
                    query = "select ID,Job_id,job_Title from REGOPS_QC_JOBS where id=:ID";
                    cmd = new OracleCommand(query, con1);
                    cmd.Parameters.Add(new OracleParameter("ID", regObjQc.ID));
                    da = new OracleDataAdapter(cmd);
                    da.Fill(ds1);
                    con1.Close();
                    //query = "select ID,Job_id,job_Title from REGOPS_QC_JOBS where id=" + regObjQc.ID;
                    //DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds1))
                    {
                        RegOpsQC obj = new RegOpsQC();
                        obj.Job_Title = ds1.Tables[0].Rows[0]["JOB_TITLE"].ToString();
                        obj.FilesList = GetFilesListForJobRerun(regObjQc, CreatedID);
                        obj.PlansList = GetPlanList(regObjQc, CreatedID);
                        obj.InactivePlanRerun = GetInactivePlans(regObjQc, CreatedID);
                        tpLst.Add(obj);
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }

        }

        private List<RegOpsQC> GetPlanList(RegOpsQC regObjQc, int CreatedID)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string query = string.Empty;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                query = "select rjp.*,rqp.PREFERENCE_NAME,rqp.FILE_FORMAT,rqp.ID,rqp.CREATED_DATE from REGOPS_JOB_PLANS rjp left join REGOPS_QC_PREFERENCES rqp on rqp.ID=rjp.PREFERENCE_ID where rqp.Status=1 and JOB_ID=" + regObjQc.ID;
                DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds1))
                {
                    for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC obj = new RegOpsQC();
                        obj.ID = Convert.ToInt64(ds1.Tables[0].Rows[i]["ID"].ToString());
                        obj.Preference_ID = Convert.ToInt64(ds1.Tables[0].Rows[i]["PREFERENCE_ID"].ToString());
                        obj.Plan_Order = Convert.ToInt64(ds1.Tables[0].Rows[i]["PLAN_ORDER"].ToString());
                        obj.Preference_Name = ds1.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString();
                        obj.File_Format = ds1.Tables[0].Rows[i]["FILE_FORMAT"].ToString();
                        obj.Created_Date = Convert.ToDateTime(ds1.Tables[0].Rows[i]["CREATED_DATE1"].ToString());
                        tpLst.Add(obj);
                    }

                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        private string GetInactivePlans(RegOpsQC regObjQc, int CreatedID)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string query = string.Empty;
                string plan = string.Empty;
                query = "select rqp.PREFERENCE_NAME from REGOPS_JOB_PLANS rjp left join REGOPS_QC_PREFERENCES rqp on rqp.ID=rjp.PREFERENCE_ID where (rqp.status=0 or rqp.status is null) and JOB_ID=" + regObjQc.ID;
                DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds1))
                {
                    for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                    {
                        plan = plan + ds1.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + ", ";
                    }
                }
                return plan.Trim().TrimEnd(',');
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
        /// <summary>
        /// To get external file
        /// </summary>
        /// <param name="RegOpsQC"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetValidationPlanExternalFile(RegOpsQC obj)
        {
            string result = string.Empty;
            string query = string.Empty;
            List<RegOpsQC> listDoc = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    int CreaedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreaedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    Connection con = new Connection();
                    con.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    DataSet ds = new DataSet();

                    if (!string.IsNullOrEmpty(obj.SearchValue))
                    {
                        query = "SELECT A.FILE_ID ID,A.FILE_NAME,A.FILE_TYPE,A.FILE_TITLE DOC_TITLE, DESCRIPTION,A.CONTENT_TYPE,U.FIRST_NAME || ' ' || U.LAST_NAME AS Created_By, TO_CHAR(A.CREATED_DATE, 'YYYY/MM/DD HH24:MI:SS') AS LAST_UPDATE FROM DCM_FILES A JOIN USERS U ON A.CREATED_ID = U.USER_ID ";
                    }
                    else
                    {
                        query = "SELECT A.FILE_ID ID,A.FILE_NAME,A.FILE_TYPE,A.FILE_TITLE DOC_TITLE,A.CONTENT_TYPE, DESCRIPTION,U.FIRST_NAME || ' ' || U.LAST_NAME AS Created_By, TO_CHAR(A.CREATED_DATE, 'YYYY/MM/DD HH24:MI:SS') AS LAST_UPDATE FROM DCM_FILES A JOIN USERS U ON A.CREATED_ID = U.USER_ID WHERE ";
                        if (!string.IsNullOrEmpty(obj.File_Name))
                            query += "LOWER(A.FILE_NAME) LIKE '%" + obj.File_Name + "%' AND ";
                        if (!string.IsNullOrEmpty(obj.File_Name))
                            query += "LOWER(A.FILE_NAME) LIKE '%" + obj.File_Name + "%' AND ";
                        if (!string.IsNullOrEmpty(obj.Created_By))
                        {
                            query += " (lower(U.FIRST_NAME) like '%" + obj.Created_By.ToLower() + "%' OR lower(U.LAST_NAME) like '%" + obj.Created_By.ToLower() + "%') AND ";
                        }
                        if (!string.IsNullOrEmpty(obj.Create_date))
                        {
                            string[] createDate = obj.Create_date.Split('-');
                            query += " SUBSTR(A.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";
                        }
                        query += " 1=1  ORDER BY A.FILE_ID";
                    }
                    ds = con.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (con.Validate(ds))
                    {
                        listDoc = new DataTable2List().DataTableToList<RegOpsQC>(ds.Tables[0]);
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    listDoc.Add(RegOpsQC);
                }
                return listDoc;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }
        private List<RegOpsQC> GetFilesListForJobRerun(RegOpsQC regObjQc, int CreatedID)
        {
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                string query = string.Empty;
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                DataSet ds = new DataSet();
                query = "select rjf.*,rpf.FILE_NAME,rpf.FILE_TYPE from REGOPS_JOB_FILES rjf left join DCM_FILES rpf on rpf.FILE_ID=rjf.DCM_INPUT_FILE_ID where rjf.JOB_ID=" + regObjQc.ID + " and rpf.FILE_TYPE='Source'";
                DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds1))
                {

                    for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC obj = new RegOpsQC();
                        obj.file_ID = Convert.ToInt64(ds1.Tables[0].Rows[i]["DCM_INPUT_FILE_ID"].ToString());
                        obj.File_Name = ds1.Tables[0].Rows[i]["FILE_NAME"].ToString();
                        obj.File_Type = ds1.Tables[0].Rows[i]["FILE_TYPE"].ToString();
                        tpLst.Add(obj);
                    }

                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string UpdateProjectFile(RegOpsQC objReg)
        {
            string result = string.Empty;
            OracleConnection conn = new OracleConnection();
            Connection con = new Connection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');

                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    con.connectionstring = m_DummyConn;
                    conn.ConnectionString = m_DummyConn;
                    conn.Open();
                    DateTime CreatedDate = DateTime.Now;
                    String Date = CreatedDate.ToString("dd-MMM-yyyy , hh:mm:ss");
                    objReg.uploadFileList = JsonConvert.DeserializeObject<List<RegOpsQC>>(objReg.uploadListDetails);
                    if (objReg.uploadFileList.Count > 0)
                    {
                        foreach (RegOpsQC obj in objReg.uploadFileList)
                        {
                            DataSet ds1 = new DataSet();
                            ds1 = con.GetDataSet("SELECT REGOPS_PROJECT_FILES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                            if (con.Validate(ds1))
                            {
                                objReg.ID = Convert.ToInt64(ds1.Tables[0].Rows[0]["NEXTVAL"].ToString());
                            }
                            string query = "INSERT INTO REGOPS_PROJECT_FILES(FILE_ID,PROJ_ID,CREATED_ID,CREATED_DATE,DCM_FILE_ID) VALUES";
                            query += "(:FILE_ID,:PROJ_ID,:CREATED_ID,:CREATED_DATE,:DCM_FILE_ID)";
                            OracleCommand cmd1 = new OracleCommand(query, conn);
                            cmd1.Parameters.Add(new OracleParameter("FILE_ID", objReg.ID));
                            cmd1.Parameters.Add(new OracleParameter("PROJ_ID", objReg.proj_ID));
                            cmd1.Parameters.Add(new OracleParameter("CREATED_ID", CreatedID));
                            cmd1.Parameters.Add(new OracleParameter("CREATED_DATE", Date));
                            cmd1.Parameters.Add(new OracleParameter("DCM_FILE_ID", obj.ID));
                            int m_res = cmd1.ExecuteNonQuery();
                            if (m_res > 0)
                                result = "Success";
                            else
                                result = "Fail";
                        }
                    }
                }
                else
                {
                    result = "Error Page";
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Fail";
            }
            finally
            {
                conn.Close();
            }
        }

        public List<RegOpsQC> GetProjectMetadata(RegOpsQC tpObj)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpQC = new RegOpsQC();
            try
            {

                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        ds = conn.GetDataSet("SELECT P.PROJ_ID,P.PROJECT_ID,P.PROJECT_TITLE,P.PRODUCT_TYPE,l.LIBRARY_VALUE as PRODUCTNAME,P.DESCRIPTION,P.STATUS, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by,P.CREATED_DATE FROM REGOPS_PROJECTS P left join LIBRARY l on P.PRODUCT_ID=l.LIBRARY_ID JOIN USERS U ON U.USER_ID = P.CREATED_ID WHERE P.PROJ_ID=" + tpObj.proj_ID + " ORDER BY P.PROJ_ID", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(ds))
                        {
                            tpLst = new DataTable2List().DataTableToList<RegOpsQC>(ds.Tables[0]);
                        }
                        if (tpLst.Count > 0)
                        {
                            List<ProjectAttributes> projectAttributesLst, otherAttributeList;
                            for (int i = 0; i < tpLst.Count; i++)
                            {
                                DataSet ds1 = new DataSet();
                                DataSet ds2 = new DataSet();
                                ds1 = conn.GetDataSet("SELECT ATTRIBUTE_ID,ATTRIBUTE_NAME,ATTRIBUTE_VALUE,PROJ_ID,Attribute_Type FROM REGOPS_PROJECT_ATTRIBUTES WHERE PROJ_ID=" + tpLst[i].proj_ID + " AND ATTRIBUTE_TYPE='Primary'", CommandType.Text, ConnectionState.Open);
                                ds2 = conn.GetDataSet("SELECT ATTRIBUTE_ID,ATTRIBUTE_NAME,ATTRIBUTE_VALUE,PROJ_ID,Attribute_Type FROM REGOPS_PROJECT_ATTRIBUTES WHERE PROJ_ID=" + tpLst[i].proj_ID + " AND ATTRIBUTE_TYPE='Other'", CommandType.Text, ConnectionState.Open);

                                if (conn.Validate(ds1))
                                {
                                    projectAttributesLst = new List<ProjectAttributes>();
                                    projectAttributesLst = new DataTable2List().DataTableToList<ProjectAttributes>(ds1.Tables[0]);
                                    tpLst[i].Project_Attribute_List = projectAttributesLst;
                                }
                                if (conn.Validate(ds2))
                                {
                                    otherAttributeList = new List<ProjectAttributes>();
                                    otherAttributeList = new DataTable2List().DataTableToList<ProjectAttributes>(ds2.Tables[0]);
                                    tpLst[i].Other_Attribute_List = otherAttributeList;
                                }
                            }
                        }
                        return tpLst;
                    }
                    else
                    {
                        RegOpQC = new RegOpsQC();
                        RegOpQC.sessionCheck = "Error Page";
                        tpLst.Add(RegOpQC);
                        return tpLst;
                    }

                }
                RegOpQC = new RegOpsQC();
                RegOpQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string EditProjectMetadata(RegOpsQC tpObj)
        {
            OracleConnection o_Con = new OracleConnection();
            try
            {
                string m_Result = string.Empty, m_Query = string.Empty;
                List<RegOpsQC> pmodLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                //if (HttpContext.Current.Session["UserId"] != null)
                //{
                    Connection conn = new Connection();

                    //int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    o_Con.ConnectionString = m_DummyConn;
                    DataSet dsproj = new DataSet();
                    DateTime StartDate = DateTime.Now;
                    string Date = StartDate.ToString("dd-MMM-yyyy");
                    o_Con.Open();
                    if (tpObj.Product_ID == 0 && tpObj.ProductName != null)
                    {
                        DataSet dsprod = new DataSet();
                        dsprod = conn.GetDataSet("SELECT LIBRARY_ID,LIBRARY_VALUE FROM LIBRARY WHERE LIBRARY_NAME='Master_Products' and lower(LIBRARY_VALUE)='" + tpObj.ProductName.ToLower().ToString() + "'", CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsprod))
                        {
                            tpObj.Product_ID = Convert.ToInt64(dsprod.Tables[0].Rows[0]["LIBRARY_ID"]);
                        }
                        else
                        {
                            DataSet dsSeq = new DataSet();
                            Int64 id = 0;
                            dsSeq = conn.GetDataSet("SELECT MAX(LIBRARY_ID)+1 AS VAL FROM LIBRARY", CommandType.Text, ConnectionState.Open);
                            if (conn.Validate(dsSeq))
                            {
                                id = Convert.ToInt64(dsSeq.Tables[0].Rows[0]["VAL"].ToString());
                            }
                            string m_Query1 = "INSERT INTO LIBRARY(LIBRARY_ID, LIBRARY_NAME, LIBRARY_VALUE, STATUS) VALUES(";
                            m_Query1 += ":ID,:libName,:prodname,:status)";
                            OracleCommand cmd1 = new OracleCommand(m_Query1, o_Con);
                            cmd1.Parameters.Add(new OracleParameter("ID", id));
                            cmd1.Parameters.Add(new OracleParameter("libName", "Master_Products"));
                            cmd1.Parameters.Add(new OracleParameter("prodname", tpObj.ProductName));
                            cmd1.Parameters.Add(new OracleParameter("status", "1"));
                            int result = cmd1.ExecuteNonQuery();
                            if (result > 0)
                            {
                                tpObj.Product_ID = id;
                                m_Result = "Success";
                            }
                        }
                    }

                    OracleCommand cmd = new OracleCommand("update REGOPS_PROJECTS SET PROJECT_TITLE =:Project_Title, PRODUCT_TYPE=:Product_Type,PRODUCT_ID=:Product_ID,DESCRIPTION=:DESCRIPTION,STATUS=:Status,UPDATED_ID=:Created_ID,UPDATED_DATE=:updatedDate where PROJ_ID =:PROJ_ID", o_Con);
                    cmd.Parameters.Add(new OracleParameter("Project_Title", tpObj.Project_Title));
                    cmd.Parameters.Add(new OracleParameter("Product_Type", tpObj.Product_Type));
                    //cmd.Parameters.Add(new OracleParameter("Project_Type", tpObj.Project_Type));
                    cmd.Parameters.Add(new OracleParameter("Product_ID", tpObj.Product_ID));
                    cmd.Parameters.Add(new OracleParameter("DESCRIPTION", tpObj.Description));
                    cmd.Parameters.Add(new OracleParameter("Status", tpObj.Status));
                    cmd.Parameters.Add(new OracleParameter("Created_ID", tpObj.Created_ID));
                    cmd.Parameters.Add(new OracleParameter("updatedDate", StartDate));
                    cmd.Parameters.Add(new OracleParameter("PROJ_ID", tpObj.proj_ID));
                    int m_Res = cmd.ExecuteNonQuery();
                    string m_query = string.Empty;
                    m_query += "DELETE FROM REGOPS_PROJECT_ATTRIBUTES WHERE PROJ_ID =:PROJ_ID";
                    cmd = new OracleCommand(m_query, o_Con);
                    cmd.Parameters.Add(new OracleParameter("PROJ_ID", tpObj.proj_ID));
                    int Res = cmd.ExecuteNonQuery();
                    m_Result = SaveAttribute(tpObj);
                //}
                //else
                //{
                //    m_Result = "Login Page";
                //}
                return m_Result;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }
        }

        public List<RegOpsQC> GetProductsFromLibrary(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    string query = string.Empty;
                    OracleConnection con1 = new OracleConnection();
                    con1.ConnectionString = m_DummyConn;
                    OracleCommand cmd = new OracleCommand();
                    con1.Open();
                    OracleDataAdapter da;
                    DataSet ds = new DataSet();
                    DataSet ds1 = new DataSet();
                    if (regObjQc.SearchValue != "" && regObjQc.SearchValue != null)
                    {
                        query = "select Library_ID as Product_ID,LIBRARY_VALUE as ProductName from LIBRARY where LIBRARY_NAME='Master_Products' and LIBRARY_VALUE is not null and upper(LIBRARY_VALUE) LIKE :LIBRARY_VALUE";
                        cmd = new OracleCommand(query, con1);
                        cmd.Parameters.Add(new OracleParameter("LIBRARY_VALUE", "%" + regObjQc.SearchValue.ToUpper() + "%"));
                    }
                    else
                    {
                        query = "select Library_ID as Product_ID,LIBRARY_VALUE as ProductName from LIBRARY where LIBRARY_NAME='Master_Products' and LIBRARY_VALUE is not null";
                        cmd = new OracleCommand(query, con1);
                    }
                    da = new OracleDataAdapter(cmd);
                    da.Fill(ds1);
                    con1.Close();
                    if (conn.Validate(ds1))
                    {
                        tpLst = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetProjectWiseMetaData(RegOpsQC regObjQc)
        {
            List<RegOpsQC> tpLst = new List<RegOpsQC>();
            RegOpsQC RegOpsQC = new RegOpsQC();
            OracleConnection conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    string query = string.Empty;

                    DataSet ds = new DataSet();
                    query = "SELECT A.PROJ_ID,A.PROJECT_ID,A.PROJECT_TITLE,A.PRODUCT_NAME,A.DESCRIPTION,A.STATUS,A.CREATED_DATE,A.created_by,TOTAL_JOB,TOTAL_PLANS FROM(SELECT rp.PROJ_ID, rp.PROJECT_ID, rp.PROJECT_TITLE,l.LIBRARY_VALUE as PRODUCT_NAME,rp.DESCRIPTION, rp.STATUS, rp.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME as created_by , count(distinct p.job_id) AS TOTAL_JOB, count(p.preference_id) AS TOTAL_PLANS FROM REGOPS_PROJECTS rp left join LIBRARY l on rp.PRODUCT_ID = l.LIBRARY_ID join Users u on u.USER_ID = rp.CREATED_ID LEFT JOIN REGOPS_QC_JOBS J ON RP.PROJ_ID = J.PROJ_ID LEFT JOIN REGOPS_JOB_PLANS P ON J.ID = P.JOB_ID group by rp.PROJ_ID, rp.PROJECT_ID, rp.PROJECT_TITLE, l.LIBRARY_VALUE,rp.DESCRIPTION, rp.STATUS, rp.CREATED_DATE, u.FIRST_NAME || ' ' || u.LAST_NAME) A  WHERE A.PROJ_ID=" + regObjQc.proj_ID + " ORDER BY A.PROJ_ID DESC";
                    DataSet ds1 = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds1))
                    {
                        tpLst = new DataTable2List().DataTableToList<RegOpsQC>(ds1.Tables[0]);
                    }
                }
                else
                {
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
            finally
            {
                conec.Close();
            }
        }

        public string UpdateJobCancel(RegOpsQC tpObj)
        {
            string m_Result = string.Empty, m_Query = string.Empty;
            OracleConnection conec = new OracleConnection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    RegOpsQC RegOpsQC = new RegOpsQC();
                    Connection conn = new Connection();
                    int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                    string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    conec.ConnectionString = m_DummyConn;
                    OracleConnection con = new OracleConnection();
                    con.ConnectionString = m_DummyConn;
                    con.Open();
                    DateTime StartDate = DateTime.Now;
                    string Date = StartDate.ToString("dd-MMM-yyyy");
                    cmd = new OracleCommand("UPDATE REGOPS_QC_JOBS SET JOB_STATUS='Cancelled',UPDATED_ID=:UPDATED_ID,UPDATED_DATE=:UPDATED_DATE WHERE JOB_ID=:JOB_ID", con);
                    cmd.Parameters.Add("UPDATED_ID", CreatedID);
                    cmd.Parameters.Add("UPDATED_DATE", Date);
                    cmd.Parameters.Add("JOB_ID", tpObj.Job_ID);
                    int m_Res = cmd.ExecuteNonQuery();
                    con.Close();
                    //m_Query = "UPDATE REGOPS_QC_JOBS SET JOB_STATUS='Cancelled',UPDATED_ID=" + CreatedID + ",UPDATED_DATE='" + Date + "' WHERE JOB_ID='" + tpObj.Job_ID + "'";
                    //int m_Res = conn.ExecuteNonQuery(m_Query, CommandType.Text, ConnectionState.Open);
                    if (m_Res > 0)
                        m_Result = "Success";
                    else
                        m_Result = "Fail";
                }
                else
                {
                    m_Result = "Login Page";
                }
                return m_Result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }
            finally
            {
                conec.Close();
            }
        }

        public string Checkstring(string str)
        {
            if (str != "" && str != null)
            {
                str = str.Replace("'", "''").Trim();
                str = str.Replace(@"\", @"\\");
            }
            return str;
        }



        /* save Files Activity tab */
        public string SaveFilesActivity(RegOpsQC rOBJ)
        {
            OracleConnection o_Con = new OracleConnection();
            Connection con = new Connection();
            string res = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == rOBJ.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == rOBJ.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == rOBJ.ROLE_ID)
                    {
                        string[] m_ConnDetails = GetConnectionInfo(rOBJ.UserID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        con.connectionstring = m_DummyConn;
                        o_Con.ConnectionString = m_DummyConn;
                        DataSet ds = new DataSet();
                        ds = con.GetDataSet("SELECT REGOPS_PROJ_FILE_ACTIVITY_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                        if (con.Validate(ds))
                        {
                            rOBJ.Activity_ID = Convert.ToInt64(ds.Tables[0].Rows[0]["NEXTVAL"].ToString());
                        }

                        o_Con.Open();
                        string query = "INSERT INTO REGOPS_PROJ_FILE_ACTIVITY (ACTIVITY_ID,FILE_ID,PROJ_ID,ACTIVITY,CREATED_ID) VALUES";
                        query += "(:ACTIVITY_ID,:FILE_ID,:PROJ_ID,:ACTIVITY,:CREATED_ID)";
                        OracleCommand cmd = new OracleCommand(query, o_Con);
                        cmd = new OracleCommand(query, o_Con);
                        cmd.Parameters.Add(new OracleParameter("ACTIVITY_ID", rOBJ.Activity_ID));
                        cmd.Parameters.Add(new OracleParameter("FILE_ID", rOBJ.file_ID));
                        cmd.Parameters.Add(new OracleParameter("PROJ_ID", rOBJ.proj_ID));
                        cmd.Parameters.Add(new OracleParameter("ACTIVITY", rOBJ.Activity));
                        cmd.Parameters.Add(new OracleParameter("CREATED_ID", rOBJ.UserID));
                        int m_res = cmd.ExecuteNonQuery();
                        if (m_res > 0)
                        {
                            res = "Success";
                        }
                        else
                            res = "Failed";
                        return res;
                    }
                    res = "Error Page";
                    return res;
                }
                res = "Login Page";
                return res;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Failed";
            }
            finally
            {
                o_Con.Close();
                con.connection.Close();
            }
        }
        /*get FilesActiviytab activities*/
        public List<RegOpsQC> GetFileActivityDetails(RegOpsQC rObj)
        {
            Connection conn = new Connection();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(rObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                List<RegOpsQC> activityFileInfo = new List<RegOpsQC>();
                string query = "SELECT u.FIRST_NAME || ' ' || u.LAST_NAME as created_by, rpf.ACTIVITY_ID,rpf.FILE_ID,rpf.PROJ_ID,rpf.ACTIVITY,rpf.CREATED_ID,rpf.CREATED_DATE FROM REGOPS_PROJ_FILE_ACTIVITY  rpf JOIN USERS u on u.USER_ID=rpf.CREATED_ID WHERE rpf.PROJ_ID=" + rObj.proj_ID + "and rpf.FILE_ID=" + rObj.file_ID + " order by ACTIVITY_ID desc";
                DataSet ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    activityFileInfo = new DataTable2List().DataTableToList<RegOpsQC>(ds.Tables[0]);
                }
                return activityFileInfo;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        //get file size and file count for organization for jobs
        public List<FileList> GetOrgFilesSizeCount(FileList fobj)
        {
            List<FileList> result = new List<FileList>(); Connection con = new Connection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == fobj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == fobj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == fobj.ROLE_ID)
                    {
                        DataSet dsOrg = new DataSet();
                        con.connectionstring = m_Conn;
                        Connection conn = new Connection();
                        string[] m_ConnDetails = GetConnectionInfo(fobj.UserID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        string m_Query = "SELECT MAX_FILE_COUNT,MAX_FILE_SIZE FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + fobj.ORGANIZATION_ID + "";
                        dsOrg = con.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                        if (con.Validate(dsOrg))
                        {
                            Int64 countFiles = 0;
                            string fileIds = string.Empty;
                            var objFileList = JsonConvert.DeserializeObject<List<RegOpsQC>>(fobj.FileString);
                            if (objFileList.Count <= 1000)
                            {
                                foreach (var sObj in objFileList)
                                {
                                    fileIds = fileIds + "," + sObj.file_ID;
                                }
                                fileIds = fileIds.TrimStart(',');
                                FileList orgObj = new FileList();
                                //string extension = Path.GetExtension(sObj.File_Name);
                                DataSet ds = new DataSet();
                                con.connectionstring = m_Conn;
                                string m_query = "SELECT SUM(FILE_SIZE) as Filesize,sum(NO_OF_FILES) as NoOfFiles FROM DCM_FILES WHERE FILE_ID IN (" + fileIds + ")";
                                ds = conn.GetDataSet(m_query, CommandType.Text, ConnectionState.Open);
                                orgObj.FileCount = Convert.ToInt32(dsOrg.Tables[0].Rows[0]["MAX_FILE_COUNT"]);
                                orgObj.FileSize = dsOrg.Tables[0].Rows[0]["MAX_FILE_SIZE"].ToString();
                                //orgObj.File_Name = sObj.File_Name;
                                var FileCount = Convert.ToInt64(ds.Tables[0].Rows[0]["NoOfFiles"].ToString());
                                if (Convert.ToInt32(orgObj.FileCount) >= FileCount || orgObj.FileCount == -1)
                                {
                                    orgObj.FileCountSuccess = "Files count is matched";
                                }
                                else
                                {
                                    result.Add(orgObj);
                                    return result;
                                }
                                double size = Convert.ToDouble(ds.Tables[0].Rows[0]["Filesize"].ToString());
                                double sizeMB = ConvertBytesToMegabytes(size);
                                if (Convert.ToDecimal(sizeMB) <= Convert.ToDecimal(orgObj.FileSize))
                                {
                                    orgObj.FileSizeSuccess = "Files size is matched";
                                }
                                else
                                {
                                    result.Add(orgObj);
                                    return result;
                                }
                                result.Add(orgObj);

                            }
                            if (objFileList.Count > 1000)
                            {
                                FileList orgObj = new FileList();
                                List<FileList> Obj = null;
                                DataSet ds = new DataSet();
                                long sizeFiles = 0;
                                long filessize = 0;
                                Int64 filecount = 0;
                                foreach (var sObj in objFileList)
                                {
                                    Obj = new List<FileList>();
                                    con.connectionstring = m_Conn;
                                    string m_query = "SELECT FILE_SIZE,NO_OF_FILES FROM DCM_FILES WHERE FILE_ID=" + sObj.file_ID + "";
                                    ds = conn.GetDataSet(m_query, CommandType.Text, ConnectionState.Open);
                                    long size = Convert.ToInt64(ds.Tables[0].Rows[0]["FILE_SIZE"].ToString());
                                    sizeFiles += size;
                                    Int64 FilesCount = Convert.ToInt64(ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString());
                                    countFiles += FilesCount;
                                }
                                orgObj.FileCount = Convert.ToInt32(dsOrg.Tables[0].Rows[0]["MAX_FILE_COUNT"]);
                                orgObj.FileSize = dsOrg.Tables[0].Rows[0]["MAX_FILE_SIZE"].ToString();
                                filessize = sizeFiles;
                                filecount = countFiles;
                                if (Convert.ToInt32(orgObj.FileCount) >= filecount || orgObj.FileCount == -1)
                                {
                                    orgObj.FileCountSuccess = "Files count is matched";
                                }
                                else
                                {
                                    result.Add(orgObj);
                                    return result;
                                }
                                //long size1 = Convert.ToInt64(ds.Tables[0].Rows[0]["FILE_SIZE"].ToString());
                                double sizeMB = ConvertBytesToMegabytes(filessize);
                                if (Convert.ToDecimal(sizeMB) <= Convert.ToDecimal(orgObj.FileSize))
                                {
                                    orgObj.FileSizeSuccess = "Files size is matched";
                                }
                                else
                                {
                                    result.Add(orgObj);
                                    return result;
                                }
                                result.Add(orgObj);

                            }
                        }
                    }
                    else
                    {
                        FileList obj = new FileList();
                        obj.FileSizeSuccess = "Error Page";
                        result.Add(obj);
                    }
                }
                else
                {
                    FileList obj = new FileList();
                    obj.FileSizeSuccess = "Login Page";
                    result.Add(obj);
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        //get external Storage/internal Storage and Limit for organization Users
        public string GetOrgStorageData(RegOpsQC fobj)
        {
            string result = string.Empty;
            Connection con = new Connection();
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == fobj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == fobj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == fobj.ROLE_ID)
                    {
                        Int64 UserID = Convert.ToInt64(HttpContext.Current.Session["UserId"]);
                        DataSet dsOrg = new DataSet(); DataSet dsOrgUser = new DataSet();
                        con.connectionstring = m_Conn;
                        string m_Query = "SELECT INTERNAL_STORAGE,INTERNAL_STORAGE_USER,EXTERNAL_STORAGE,EXTERNAL_STORAGE_USER FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + fobj.ORGANIZATION_ID + "";
                        dsOrg = con.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                        if (con.Validate(dsOrg))
                        {
                            Connection conn = new Connection();
                            string[] m_ConnDetails = GetConnectionInfo(UserID).Split('|');
                            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                            conn.connectionstring = m_DummyConn;
                            //string pathToZipFile = m_SourceFolderPathExternal + "\\" + "DCM\\";
                            //long size = 0;
                            //DirectoryInfo dir = new DirectoryInfo(pathToZipFile);
                            //foreach (FileInfo fi in dir.GetFiles("*.*", SearchOption.AllDirectories))
                            //{
                            //    size += fi.Length;
                            //}
                            string m_query = "SELECT SUM(FILE_SIZE) as FILESIZE FROM DCM_FILES WHERE CREATED_ID=" + UserID + "";
                            dsOrgUser = conn.GetDataSet(m_query, CommandType.Text, ConnectionState.Open);
                            double filesize = Convert.ToDouble(dsOrgUser.Tables[0].Rows[0]["FILESIZE"].ToString());
                            //long size = filesize.Length;
                            double sizeMB = ConvertBytesToMegabytesToGB(filesize);
                            if (dsOrg.Tables[0].Rows[0]["EXTERNAL_STORAGE"].ToString() != "Unlimited" && dsOrg.Tables[0].Rows[0]["EXTERNAL_STORAGE"].ToString() != "")
                            {
                                if (Convert.ToDouble(dsOrg.Tables[0].Rows[0]["EXTERNAL_STORAGE"]) >= sizeMB)
                                {
                                    result = "File Storage avaliable";
                                    string m_Query1 = "SELECT FILE_ID,FILE_NAME FROM DCM_FILES WHERE CREATED_ID=" + UserID + "";
                                    dsOrgUser = conn.GetDataSet(m_Query1, CommandType.Text, ConnectionState.Open);
                                    if (conn.Validate(dsOrgUser))
                                    {
                                        long sizeUser = 0;
                                        for (int k = 0; k < dsOrgUser.Tables[0].Rows.Count; k++)
                                        {
                                            if (dsOrgUser.Tables[0].Rows[k]["FILE_NAME"].ToString() != string.Empty)
                                            {
                                                string m_query1 = "SELECT FILE_SIZE FROM DCM_FILES WHERE FILE_ID=" + dsOrgUser.Tables[0].Rows[k]["FILE_ID"] + "";
                                                dsOrgUser = conn.GetDataSet(m_query1, CommandType.Text, ConnectionState.Open);
                                                //string pathTo = m_SourceFolderPathExternal + "\\" + "DCM\\" + dsOrgUser.Tables[0].Rows[k]["FILE_ID"];
                                                string pathTo = dsOrgUser.Tables[0].Rows[0]["FILE_SIZE"].ToString();
                                                FileInfo fi = new FileInfo(pathTo);
                                                sizeUser += fi.Length;
                                            }
                                        }
                                        double sizeGBUser = ConvertBytesToMegabytesToGB(sizeUser);
                                        if (dsOrg.Tables[0].Rows[0]["EXTERNAL_STORAGE_USER"].ToString() != "Unlimited" && dsOrg.Tables[0].Rows[0]["EXTERNAL_STORAGE_USER"].ToString() != "")
                                        {
                                            if (Convert.ToDouble(dsOrg.Tables[0].Rows[0]["EXTERNAL_STORAGE_USER"]) >= sizeGBUser)
                                            {
                                                result = "File User Storage avaliable";
                                            }
                                            else
                                            {
                                                result = "File User Storage exceeded";
                                            }
                                        }
                                        else
                                        {
                                            result = "File User Storage avaliable";
                                        }
                                    }
                                }
                                else
                                {
                                    result = "File Storage exceeded";
                                }
                            }
                            else
                            {
                                result = "File User Storage avaliable";
                            }
                        }
                    }
                    else
                    {
                        result = "Error Page";
                    }
                }
                else
                {
                    result = "Login Page";
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        //get Limit for jobs in organization for a particular project
        public string GetOrgProjectJobsLimit(RegOpsQC fobj)
        {
            string result = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == fobj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == fobj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == fobj.ROLE_ID)
                    {
                        Connection conn = new Connection(); DataSet dsOrgUser = new DataSet();
                        Int64 UserID = Convert.ToInt64(HttpContext.Current.Session["UserId"]);
                        string[] m_ConnDetails = GetConnectionInfo(UserID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        string m_Query1 = "Select Count(*) as Count from REGOPS_QC_JOBS";
                        dsOrgUser = conn.GetDataSet(m_Query1, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsOrgUser))
                        {
                            Connection con = new Connection(); DataSet dsOrg = new DataSet();
                            con.connectionstring = m_Conn;
                            string m_Query = "SELECT VAL_JOBS_LIMIT FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + fobj.ORGANIZATION_ID + "";
                            dsOrg = con.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                            if (con.Validate(dsOrg))
                            {
                                if (dsOrg.Tables[0].Rows[0]["VAL_JOBS_LIMIT"].ToString() != "Unlimited" && dsOrg.Tables[0].Rows[0]["VAL_JOBS_LIMIT"].ToString() != "")
                                {
                                    if (Convert.ToInt32(dsOrg.Tables[0].Rows[0]["VAL_JOBS_LIMIT"]) > Convert.ToInt32(dsOrgUser.Tables[0].Rows[0]["COUNT"]))
                                    {
                                        result = "Job file Limit avaliable";
                                    }
                                    else
                                    {
                                        result = "Job file Limit exceeded";
                                    }
                                }
                                else
                                {
                                    result = "Job file Limit avaliable";
                                }
                            }
                        }
                    }
                    else
                    {
                        result = "Error Page";
                    }
                }
                else
                {
                    result = "Login Page";
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }


        //get Limit for documents in organization for jobs
        public string GetOrgJobsDocumentLimit(RegOpsQC fobj)
        {
            string result = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == fobj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == fobj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == fobj.ROLE_ID)
                    {
                        Connection conn = new Connection(); DataSet dsOrgUser = new DataSet();
                        Int64 UserID = Convert.ToInt64(HttpContext.Current.Session["UserId"]);
                        string[] m_ConnDetails = GetConnectionInfo(UserID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        string m_Query1 = "Select SUM(NO_OF_FILES) as COUNT from REGOPS_QC_JOBS where NO_OF_FILES is not null";
                        dsOrgUser = conn.GetDataSet(m_Query1, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsOrgUser))
                        {
                            Connection con = new Connection(); DataSet dsOrg = new DataSet();
                            con.connectionstring = m_Conn;
                            string m_Query = "SELECT VAL_EXTERNAL_DOCS_LIMIT FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + fobj.ORGANIZATION_ID + "";
                            dsOrg = con.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                            if (con.Validate(dsOrg))
                            {
                                if (dsOrg.Tables[0].Rows[0]["VAL_EXTERNAL_DOCS_LIMIT"].ToString() != "Unlimited" && dsOrg.Tables[0].Rows[0]["VAL_EXTERNAL_DOCS_LIMIT"].ToString() != "")
                                {
                                    if (Convert.ToInt32(dsOrg.Tables[0].Rows[0]["VAL_EXTERNAL_DOCS_LIMIT"]) > Convert.ToInt32(dsOrgUser.Tables[0].Rows[0]["COUNT"]))
                                    {
                                        result = "Document Limit avaliable";
                                    }
                                    else
                                    {
                                        result = "Document Limit exceeded";
                                    }
                                }
                                else
                                {
                                    result = "Document Limit avaliable";
                                }
                            }
                        }
                    }
                    else
                    {
                        result = "Error Page";

                    }
                }
                else
                {
                    result = "Login Page";
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }


        //get Limit for processed files in organization 
        public string GetOrgJobsProcessedLimit(RegOpsQC fobj)
        {
            string result = string.Empty;
            try
            {
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == fobj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == fobj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == fobj.ROLE_ID)
                    {
                        Connection conn = new Connection(); DataSet dsOrgUser = new DataSet();
                        Int64 UserID = Convert.ToInt64(HttpContext.Current.Session["UserId"]);
                        string[] m_ConnDetails = GetConnectionInfo(UserID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                        conn.connectionstring = m_DummyConn;
                        string m_Query1 = "Select sum(FILES_SIZE) as FILES_SIZE from REGOPS_QC_JOBS where FILES_SIZE is not null";
                        dsOrgUser = conn.GetDataSet(m_Query1, CommandType.Text, ConnectionState.Open);
                        if (conn.Validate(dsOrgUser))
                        {
                            long sizeUser = 0;
                            if (dsOrgUser.Tables[0].Rows[0]["FILES_SIZE"].ToString() != "" && dsOrgUser.Tables[0].Rows[0]["FILES_SIZE"] != null)
                                sizeUser = Convert.ToInt64(dsOrgUser.Tables[0].Rows[0]["FILES_SIZE"]);
                            //for (int k = 0; k < dsOrgUser.Tables[0].Rows.Count; k++)
                            //{
                            //    sizeUser += Convert.ToInt64(dsOrgUser.Tables[0].Rows[k]["FILES_SIZE"]);
                            //}
                            double sizeGBUser = ConvertBytesToMegabytesToGB(sizeUser);
                            Connection con = new Connection(); DataSet dsOrg = new DataSet();
                            con.connectionstring = m_Conn;
                            string m_Query = "SELECT VAL_PROCESSED_FILE_SIZE FROM ORGANIZATIONS WHERE ORGANIZATION_ID=" + fobj.ORGANIZATION_ID + "";
                            dsOrg = con.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                            if (con.Validate(dsOrg))
                            {
                                if (dsOrg.Tables[0].Rows[0]["VAL_PROCESSED_FILE_SIZE"].ToString() != "Unlimited" && dsOrg.Tables[0].Rows[0]["VAL_PROCESSED_FILE_SIZE"].ToString() != "")
                                {
                                    if (Convert.ToInt32(dsOrg.Tables[0].Rows[0]["VAL_PROCESSED_FILE_SIZE"]) >= sizeGBUser)
                                    {
                                        result = "Processed Document Limit avaliable";
                                    }
                                    else
                                    {
                                        result = "Processed Document Limit exceeded";
                                    }
                                }
                                else
                                {
                                    result = "Processed Document Limit avaliable";
                                }
                            }
                        }
                    }
                    else
                    {
                        result = "Error Page";
                    }
                }
                else
                {
                    result = "Login Page";
                }
                return result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        double ConvertBytesToMegabytes(double bytes)
        {
            return (bytes / 1024f) / 1024f;
        }

        double ConvertBytesToMegabytesToGB(double bytes)
        {
            double s = (bytes / 1024f) / 1024f;
            return s / 1024.0;
        }


        /// <summary>
        /// Call Download pdf validation report
        /// added by Nagesh on 18-Jan-2021
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public string[] DownloadPageBYPdfReport(RegOpsQC tpObj)
        {
            string[] filename = null;
            try
            {
                if (tpObj.File_Type == "HTML")
                {
                    filename = GeneratePageValidationReportHtml(tpObj);

                }
                else
                {
                    filename = GeneratePageValidationReportPdf(tpObj);
                }
                return filename;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }


        /// <summary>
        /// Download validation report based on user selection in Analysis page for selected columns
        /// Added by Nagesh on 18-jan-2021
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public string[] GenerateValidationReportPdf(RegOpsQC tpObj)
        {
            string filename = string.Empty;
            string[] resdata = null;
            try
            {

                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                DataSet ds1 = new DataSet();
                string validationPlan = string.Empty;
                validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                string WordTemplateName = string.Empty;
                WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
                var temp = tpObj.ISAttachPREDICTTemplate;
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                string query = string.Empty;
                query = " select mlib.Library_Value as Country,sty.TEMPLATE_NAME, rs.country_id,case when rsd.severity_level=1 then 'High' when rsd.severity_level=2 then 'Medium' when rsd.severity_level=3 then 'Low' when rsd.severity_level=4 then 'Warning' when rsd.severity_level=5 then 'NA' else '' end as severity_level,rsc.COLOR,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID,rp.PROJECT_TITLE, b.JOB_ID,b.JOB_TITLE,b.JOB_TYPE, b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,a.QC_RESULT,replace(replace(a.comments,'<span style=''font-family:symbol''>',''),'</span>','') as COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
                 "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                 "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
                 "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
                 " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime,pr.PREFERENCE_NAME,c.COMPOSITE_CHECK " +
                 " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                con1.Close();
                var sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] excelflag = sobj.Split(',');
                TimeZone zone = TimeZone.CurrentTimeZone;
                string standard = string.Concat(System.Text.RegularExpressions.Regex
                  .Matches(zone.StandardName, "[A-Z]")
                  .OfType<System.Text.RegularExpressions.Match>()
                  .Select(match => match.Value));
                if (standard == "CUT")
                    standard = "UTC";
                if (conn.Validate(ds))
                {
                    DataTable dtnw = ds.Tables[0].Clone();
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        // appending folder and filename
                        if (dr["FOLDER_NAME"].ToString() != "")
                        {
                            if (dr["FILE_NAME"].ToString() != "")
                            {
                                dr["FILE_NAME"] = dr["FOLDER_NAME"].ToString() + "\\" + dr["FILE_NAME"].ToString();
                            }
                            else
                            {
                                dr["FILE_NAME"] = dr["FOLDER_NAME"].ToString();
                            }

                        }
                        if (dr["CHECK_PARAMETER"].ToString() != "" && (dr["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || dr["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || dr["Validation"].ToString() == "Exception Font Family" || dr["Validation"].ToString() == "Valid Version(s)"))
                            dr["CHECK_PARAMETER"] = dr["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");

                        if (dr["ParentCheck"].ToString() != "")
                        {
                            dr["Validation"] = dr["ParentCheck"].ToString() + "-> " + dr["VALIDATION"].ToString();
                        }
                        else
                        {
                            dr["Validation"] = dr["VALIDATION"].ToString();
                        }
                        //replacing span tags with empty
                        var s = dr["Comments"].ToString().Replace(" <span style='font-family:symbol'>", " ");
                        var s1 = s.Replace("</span>", "");
                        dr["Comments"] = s1.ToString();

                        if (!(dr["ParentCheck"].ToString() == "" && dr["COMPOSITE_CHECK"].ToString() == "0"))
                            dtnw.ImportRow(dr);
                    }

                    DataTable dt1 = ds.Tables[0];
                    ds.Tables.Remove(dt1);
                    ds.Tables.Add(dtnw);

                    filename = ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "-" + "Validation Analysis.pdf";
                    Aspose.Cells.Workbook workbook = new Aspose.Cells.Workbook();
                    // Obtaining the reference of the worksheet
                    Aspose.Cells.Worksheet worksheet = workbook.Worksheets[0];
                    worksheet.PageSetup.PaperSize = Aspose.Cells.PaperSizeType.PaperA4;
                    worksheet.IsGridlinesVisible = false;
                    Aspose.Cells.Cells cells = worksheet.Cells;
                    cells.SetColumnWidth(0, 24);
                    cells.SetColumnWidth(1, 22);
                    if (tpObj.Job_Type != "QC")
                        cells.SetColumnWidth(2, 21);
                    else
                        cells.SetColumnWidth(2, 26);
                    if (tpObj.Job_Type != "QC")
                        cells.SetColumnWidth(3, 12);
                    else
                        cells.SetColumnWidth(3, 11);
                    cells.SetColumnWidth(4, 6);
                    cells.SetColumnWidth(5, 7);
                    if (tpObj.Job_Type != "QC")
                    {
                        cells.SetColumnWidth(6, 5);
                        cells.SetColumnWidth(7, 30);
                    }
                    else
                        cells.SetColumnWidth(6, 31);

                    cells.Merge(0, 0, 1, 8);
                    cells.Merge(1, 0, 1, 1);
                    worksheet.Cells["A1"].PutValue("Validation Analysis");

                    Aspose.Cells.Style style = worksheet.Cells["A1"].GetStyle();
                    Aspose.Cells.Font font = style.Font;
                    font.Name = "Calibri";
                    font.Size = 14;
                    font.Color = System.Drawing.Color.Black;
                    font.IsBold = true;
                    font.Underline = Aspose.Cells.FontUnderlineType.Single;
                    style.VerticalAlignment = Aspose.Cells.TextAlignmentType.Center;
                    style.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                    cells["A1"].SetStyle(style);


                    worksheet.Cells["A3"].PutValue("Summary");
                    Aspose.Cells.Style style4 = worksheet.Cells["A3"].GetStyle();
                    Aspose.Cells.Font font4 = style4.Font;
                    font4.Underline = Aspose.Cells.FontUnderlineType.Single;
                    font4.Name = "Calibri";
                    font4.Size = 12;
                    font4.Color = System.Drawing.Color.Blue;
                    font4.Underline = Aspose.Cells.FontUnderlineType.Single;
                    style4.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                    style4.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                    cells["A3"].SetStyle(style4);
                    tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                    tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                    TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                    tpObj.ProcessTime = elapsed.ToString();
                    // If Attach word template permission is given then only we have to display World Template (styles) field
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {

                        worksheet.Cells["A5"].PutValue("Job ID"); worksheet.Cells["B5"].PutValue(ds.Tables[0].Rows[0]["JOB_ID"].ToString());
                        worksheet.Cells["A6"].PutValue("Job Title"); worksheet.Cells["B6"].PutValue(ds.Tables[0].Rows[0]["JOB_TITLE"].ToString());
                        worksheet.Cells["A7"].PutValue("Job Type"); worksheet.Cells["B7"].PutValue(ds.Tables[0].Rows[0]["JOB_TYPE"].ToString());
                        worksheet.Cells["A8"].PutValue("Country"); worksheet.Cells["B8"].PutValue(ds.Tables[0].Rows[0]["Country"].ToString());
                        worksheet.Cells["A9"].PutValue("Validation Plan(s)"); worksheet.Cells["B9"].PutValue(validationPlan);
                        worksheet.Cells["A10"].PutValue("World Template (styles)"); worksheet.Cells["B10"].PutValue(WordTemplateName);
                        worksheet.Cells["A11"].PutValue("Description"); worksheet.Cells["B11"].PutValue(ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString());
                        worksheet.Cells["A12"].PutValue("Project ID"); worksheet.Cells["B12"].PutValue(ds.Tables[0].Rows[0]["PROJECT_ID"].ToString());
                        worksheet.Cells["A13"].PutValue("Project Title"); worksheet.Cells["B13"].PutValue(ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString());
                        worksheet.Cells["A14"].PutValue("Total Files Executed"); worksheet.Cells["B14"].PutValue(ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString());
                        worksheet.Cells["A15"].PutValue("Total Pages Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString());
                        if (tpObj.Job_Type != "Publishing")
                        {
                            worksheet.Cells["A16"].PutValue("Total Checks Executed"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Passed Checks"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A18"].PutValue("Failed Checks"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());
                        }
                        else
                        {
                            worksheet.Cells["A16"].PutValue("Total Rules Executed"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Passed Rules"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A18"].PutValue("Failed Rules"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                worksheet.Cells["A19"].PutValue("Fixed Checks"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());
                            }
                            else
                            {
                                worksheet.Cells["A19"].PutValue("Fixed Rules"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());
                            }
                            worksheet.Cells["A20"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B20"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A21"].PutValue("Created By"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A22"].PutValue("Created Date"); worksheet.Cells["B22"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B22");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }
                        else
                        {
                            worksheet.Cells["A19"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B19"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A20"].PutValue("Created By"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A21"].PutValue("Created Date"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B21");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }

                    }

                    else
                    {
                        worksheet.Cells["A5"].PutValue("Job ID"); worksheet.Cells["B5"].PutValue(ds.Tables[0].Rows[0]["JOB_ID"].ToString());
                        worksheet.Cells["A6"].PutValue("Job Title"); worksheet.Cells["B6"].PutValue(ds.Tables[0].Rows[0]["JOB_TITLE"].ToString());
                        worksheet.Cells["A7"].PutValue("Job Type"); worksheet.Cells["B7"].PutValue(ds.Tables[0].Rows[0]["JOB_TYPE"].ToString());
                        worksheet.Cells["A8"].PutValue("Country"); worksheet.Cells["B8"].PutValue(ds.Tables[0].Rows[0]["Country"].ToString());
                        worksheet.Cells["A9"].PutValue("Validation Plan(s)"); worksheet.Cells["B9"].PutValue(validationPlan);
                        worksheet.Cells["A10"].PutValue("Description"); worksheet.Cells["B10"].PutValue(ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString());
                        worksheet.Cells["A11"].PutValue("Project ID"); worksheet.Cells["B11"].PutValue(ds.Tables[0].Rows[0]["PROJECT_ID"].ToString());
                        worksheet.Cells["A12"].PutValue("Project Title"); worksheet.Cells["B12"].PutValue(ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString());
                        worksheet.Cells["A13"].PutValue("Total Files Executed"); worksheet.Cells["B13"].PutValue(ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString());
                        worksheet.Cells["A14"].PutValue("Total Pages Executed"); worksheet.Cells["B14"].PutValue(ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString());
                        if (tpObj.Job_Type != "Publishing")
                        {
                            worksheet.Cells["A15"].PutValue("Total Checks Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A16"].PutValue("Passed Checks"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Failed Checks"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        else
                        {
                            worksheet.Cells["A15"].PutValue("Total Rules Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A16"].PutValue("Passed Rules"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Failed Rules"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                worksheet.Cells["A18"].PutValue("Fixed Checks"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());

                            }
                            else
                            {
                                worksheet.Cells["A18"].PutValue("Fixed Rules"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());

                            }
                            worksheet.Cells["A19"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B19"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A20"].PutValue("Created By"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A21"].PutValue("Created Date"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B21");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }
                        else
                        {
                            worksheet.Cells["A18"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B18"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A19"].PutValue("Created By"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A20"].PutValue("Created Date"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B20");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);

                        }

                    }
                    worksheet.Name = "Validation Analysis";
                    Aspose.Cells.Style style5 = null;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            cells.Merge(25, 0, 1, 1);
                            worksheet.Cells["A25"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A25"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A25"].SetStyle(style5);
                        }
                        else
                        {
                            cells.Merge(24, 0, 1, 1);
                            worksheet.Cells["A24"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A24"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A24"].SetStyle(style5);
                        }
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            cells.Merge(24, 0, 1, 1);
                            worksheet.Cells["A24"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A24"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A24"].SetStyle(style5);
                        }
                        else
                        {
                            cells.Merge(23, 0, 1, 1);
                            worksheet.Cells["A23"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A23"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A23"].SetStyle(style5);
                        }
                    }

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        //for (int k = 0; k < ds.Tables[0].Rows.Count; k++)
                        //{
                        //    if (ds.Tables[0].Rows[k]["FOLDER_NAME"].ToString() != "")
                        //    {
                        //        ds.Tables[0].Rows[k]["FILE_NAME"] = ds.Tables[0].Rows[k]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[k]["FILE_NAME"].ToString();
                        //    }
                        //    if (ds.Tables[0].Rows[k]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[k]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[k]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[k]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[k]["Validation"].ToString() == "PDF version"))
                        //        ds.Tables[0].Rows[k]["CHECK_PARAMETER"] = ds.Tables[0].Rows[k]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");

                        //}

                    }
                    ds.AcceptChanges();
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    DataView dv = new DataView(ds.Tables[0]);
                    string column = string.Empty;
                    char result = 'A';
                    char fix = 'A';
                    char num = 'A';
                    char severityNum = 'A';

                    int severityColoumNum = 0;
                    int severityColoumNum1 = 0;
                    foreach (var s in excelflag)
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            if (s == "QC_RESULT")
                            {
                                result = num;
                            }
                            else if (s == "Fixed")
                            {
                                fix = num;
                            }
                            else if (s == "severity_level")
                            {
                                severityNum = num;
                                severityColoumNum1 = severityColoumNum;
                            }
                            num++;
                            severityColoumNum++;
                        }
                        else
                        {
                            if (s == "QC_RESULT")
                            {
                                result = num;
                            }
                            else if (s == "severity_level")
                            {
                                fix = num;
                                severityNum = num;
                            }
                            num++;

                        }

                    }
                    dt = dv.ToTable(false, excelflag);
                    if (tpObj.Job_Type == "QC+AutoFix")
                    {
                        foreach (var t in excelflag)
                        {
                            if (t == "FILE_NAME")
                            {
                                dt.Columns[t].ColumnName = "File Name";
                            }
                            if (t == "PREFERENCE_NAME")
                            {
                                dt.Columns[t].ColumnName = "Plan Name";
                            }
                            if (t == "Validation")
                            {
                                dt.Columns[t].ColumnName = "Check";
                            }
                            if (t == "CHECK_PARAMETER")
                            {
                                dt.Columns[t].ColumnName = "Parameters";
                            }
                            if (t == "QC_RESULT")
                            {
                                dt.Columns[t].ColumnName = "Result";
                            }
                            if (t == "severity_level")
                            {
                                dt.Columns[t].ColumnName = "Severity";
                            }
                            if (t == "Fixed")
                            {
                                dt.Columns[t].ColumnName = "Fixed";
                            }
                            if (t == "Comments")
                            {
                                dt.Columns[t].ColumnName = "Comments";
                            }
                        }
                    }
                    else if (tpObj.Job_Type == "Publishing")
                    {
                        foreach (var t in excelflag)
                        {
                            if (t == "FILE_NAME")
                            {
                                dt.Columns[t].ColumnName = "File Name";
                            }
                            if (t == "PREFERENCE_NAME")
                            {
                                dt.Columns[t].ColumnName = "Plan Name";
                            }
                            if (t == "Validation")
                            {
                                dt.Columns[t].ColumnName = "Publishing Rule";
                            }
                            if (t == "CHECK_PARAMETER")
                            {
                                dt.Columns[t].ColumnName = "Parameters";
                            }
                            if (t == "QC_RESULT")
                            {
                                dt.Columns[t].ColumnName = "Result";
                            }
                            if (t == "severity_level")
                            {
                                dt.Columns[t].ColumnName = "Severity";
                            }
                            if (t == "Fixed")
                            {
                                dt.Columns[t].ColumnName = "Fixed";
                            }
                            if (t == "Comments")
                            {
                                dt.Columns[t].ColumnName = "Comments";
                            }
                        }
                    }
                    else
                    {
                        foreach (var t in excelflag)
                        {
                            if (t == "FILE_NAME")
                            {
                                dt.Columns[t].ColumnName = "File Name";
                            }
                            if (t == "PREFERENCE_NAME")
                            {
                                dt.Columns[t].ColumnName = "Plan Name";
                            }
                            if (t == "Validation")
                            {
                                dt.Columns[t].ColumnName = "Check";
                            }
                            if (t == "CHECK_PARAMETER")
                            {
                                dt.Columns[t].ColumnName = "Parameters";
                            }
                            if (t == "QC_RESULT")
                            {
                                dt.Columns[t].ColumnName = "Result";
                            }
                            if (t == "severity_level")
                            {
                                dt.Columns[t].ColumnName = "Severity";
                            }
                            if (t == "Comments")
                            {
                                dt.Columns[t].ColumnName = "Comments";
                            }
                        }
                    }

                    dt.AcceptChanges();
                    Aspose.Cells.Range range2 = null;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A27");
                            range2 = cells.CreateRange("A27", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                        else
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A26");
                            range2 = cells.CreateRange("A26", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A26");
                            range2 = cells.CreateRange("A26", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                        else
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A25");
                            range2 = cells.CreateRange("A25", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                    }

                    Aspose.Cells.Style st2 = workbook.CreateStyle();
                    st2.IsTextWrapped = true;
                    st2.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                    Aspose.Cells.StyleFlag flg2 = new Aspose.Cells.StyleFlag();
                    flg2.Borders = true;
                    flg2.WrapText = true;


                    Aspose.Cells.Range rng6 = null;
                    num = --num;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                            rng6 = cells.CreateRange("A27:" + num + "27");
                        else
                            rng6 = cells.CreateRange("A26:" + num + "26");
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                            rng6 = cells.CreateRange("A26:" + num + "26");
                        else
                            rng6 = cells.CreateRange("A25:" + num + "25");
                    }

                    Aspose.Cells.Style st6 = workbook.CreateStyle();
                    Aspose.Cells.Font font2 = st6.Font;
                    st6.Pattern = Aspose.Cells.BackgroundType.Solid;
                    st6.ForegroundColor = System.Drawing.Color.LightGray;
                    rng6.SetStyle(st6);
                    Aspose.Cells.StyleFlag flag6 = new Aspose.Cells.StyleFlag();
                    flag6.Alignments = true;
                    foreach (var s in excelflag)
                    {
                        if (s == "QC_RESULT")
                        {
                            int r = 24;
                            if (tpObj.ISAttachPREDICTTemplate == "1")
                            {
                                if (tpObj.Job_Type != "QC")
                                    r = 27;
                                else
                                    r = 26;
                            }
                            else
                            {
                                if (tpObj.Job_Type != "QC")
                                    r = 26;
                                else
                                    r = 25;
                            }
                            for (int k = 0; k < dt.Rows.Count; k++)
                            {
                                int t = r;
                                r++;
                                string resval = dt.Rows[k]["Result"].ToString();
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "QC_RESULT" || s == "Fixed")
                                    {
                                        if (resval == "Failed" && dt.Rows[k]["Fixed"].ToString().ToLower() != "yes")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#f77676c2");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);
                                        }
                                        if (dt.Rows[k]["Fixed"].ToString().ToLower().Equals("yes"))
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[fix.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#66ff66");
                                            styleres.ForegroundColor = color;
                                            cells[fix.ToString() + r].SetStyle(styleres);
                                        }
                                        else if (resval == "Error")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#cceeff");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);
                                        }
                                    }
                                }
                                else
                                {
                                    if (s == "QC_RESULT")
                                    {
                                        if (resval == "Failed")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#f77676c2");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);
                                        }

                                        else if (resval == "Error")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#cceeff");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);

                                        }
                                    }

                                }

                            }
                        }
                    }
                    rng6.ApplyStyle(st6, flag6);
                    range2.ApplyStyle(st2, flg2);
                    Aspose.Cells.PdfSaveOptions saveOptions = new Aspose.Cells.PdfSaveOptions();
                    saveOptions.OptimizationType = Aspose.Cells.Rendering.PdfOptimizationType.MinimumSize;
                    saveOptions.OutputBlankPageWhenNothingToPrint = true;
                    saveOptions.CheckFontCompatibility = true;
                    saveOptions.AllColumnsInOnePagePerSheet = true;
                    worksheet.IsRowColumnHeadersVisible = true;
                    worksheet.PageSetup.Orientation = Aspose.Cells.PageOrientationType.Landscape;
                    worksheet.AutoFitRows();
                    Guid mainId;
                    mainId = Guid.NewGuid();
                    string desPath = m_DownloadFolderPathQC + mainId;
                    Directory.CreateDirectory(desPath);
                    workbook.Save(desPath + "\\" + filename);
                    Aspose.Pdf.Document pdfdoc = new Aspose.Pdf.Document(desPath + "\\" + filename);
                    if (pdfdoc.Pages.Count != 0)
                    {
                        foreach (var page in pdfdoc.Pages)
                        {
                            if (page.IsBlank(0.01))
                            {
                                pdfdoc.Pages.Delete(page.Number);
                            }
                        }
                    }
                    pdfdoc.Save(desPath + "\\" + filename);
                    resdata = new string[2];
                    resdata[0] = desPath;
                    resdata[1] = filename;
                }
                return resdata;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string[] GenerateValidationReportManagePdf(RegOpsQC tpObj)
        {
            string filename = string.Empty;
            string[] resdata = null;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();

                string validationPlan = string.Empty;
                string WordTemplateName = string.Empty;
                validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                string query = string.Empty;
                query = " select mlib.Library_Value as Country,TEMPLATE_NAME, rs.country_id,case when rsd.severity_level=1 then 'High' when rsd.severity_level=2 then 'Medium' when rsd.severity_level=3 then 'Low' when rsd.severity_level=4 then 'Warning' when rsd.severity_level=5 then 'NA' else '' end as severity_level,rsc.COLOR,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE, c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
                 "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                 "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
                 "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
                 " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime,pr.PREFERENCE_NAME, b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_TYPE,rp.PROJECT_TITLE,c.COMPOSITE_CHECK " +
                 " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.WORD_TEMPLATE_ID and b.ATTACH_WORD_TEMPLATE=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                tpObj.ProcessTime = elapsed.ToString();
                con1.Close();

                TimeZone zone = TimeZone.CurrentTimeZone;
                string standard = string.Concat(System.Text.RegularExpressions.Regex
                  .Matches(zone.StandardName, "[A-Z]")
                  .OfType<System.Text.RegularExpressions.Match>()
                  .Select(match => match.Value));
                if (standard == "CUT")
                    standard = "UTC";
                if (conn.Validate(ds))
                {
                    DataTable dtnw = ds.Tables[0].Clone();
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        // appending folder and filename
                        if (dr["FOLDER_NAME"].ToString() != "")
                        {
                            if (dr["FILE_NAME"].ToString() != "")
                            {
                                dr["FILE_NAME"] = dr["FOLDER_NAME"].ToString() + "\\" + dr["FILE_NAME"].ToString();
                            }
                            else
                            {
                                dr["FILE_NAME"] = dr["FOLDER_NAME"].ToString();
                            }

                        }
                        if (dr["CHECK_PARAMETER"].ToString() != "" && (dr["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || dr["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || dr["Validation"].ToString() == "Exception Font Family" || dr["Validation"].ToString() == "Valid Version(s)"))
                            dr["CHECK_PARAMETER"] = dr["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");

                        if (dr["ParentCheck"].ToString() != "")
                        {
                            dr["Validation"] = dr["ParentCheck"].ToString() + "-> " + dr["VALIDATION"].ToString();
                        }
                        else
                        {
                            dr["Validation"] = dr["VALIDATION"].ToString();
                        }
                        //replacing span tags with empty
                        var s = dr["Comments"].ToString().Replace(" <span style='font-family:symbol'>", " ");
                        var sobj = s.Replace("</span>", "");
                        dr["Comments"] = sobj.ToString();

                        if (!(dr["ParentCheck"].ToString() == "" && dr["COMPOSITE_CHECK"].ToString() == "0"))
                            dtnw.ImportRow(dr);
                    }

                    DataTable dt1 = ds.Tables[0];
                    ds.Tables.Remove(dt1);
                    ds.Tables.Add(dtnw);
                    filename = ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "-" + "Validation Analysis.pdf";
                    Aspose.Cells.Workbook workbook = new Aspose.Cells.Workbook();
                    // Obtaining the reference of the worksheet
                    Aspose.Cells.Worksheet worksheet = workbook.Worksheets[0];
                    worksheet.PageSetup.PaperSize = Aspose.Cells.PaperSizeType.PaperA4;
                    worksheet.IsGridlinesVisible = false;

                    Aspose.Cells.Cells cells = worksheet.Cells;

                    cells.SetColumnWidth(0, 24);
                    cells.SetColumnWidth(1, 22);
                    if (tpObj.Job_Type != "QC")
                        cells.SetColumnWidth(2, 21);
                    else
                        cells.SetColumnWidth(2, 26);
                    if (tpObj.Job_Type != "QC")
                        cells.SetColumnWidth(3, 12);
                    else
                        cells.SetColumnWidth(3, 11);
                    cells.SetColumnWidth(4, 6);
                    cells.SetColumnWidth(5, 7);
                    if (tpObj.Job_Type != "QC")
                    {
                        cells.SetColumnWidth(6, 5);
                        cells.SetColumnWidth(7, 30);
                    }
                    else
                        cells.SetColumnWidth(6, 31);


                    cells.Merge(0, 0, 1, 8);
                    cells.Merge(1, 0, 1, 1);
                    worksheet.Cells["A1"].PutValue("Validation Analysis");

                    Aspose.Cells.Style style = worksheet.Cells["A1"].GetStyle();
                    Aspose.Cells.Font font = style.Font;
                    font.Name = "Calibri";
                    font.Size = 14;
                    font.Color = System.Drawing.Color.Black;
                    font.IsBold = true;
                    font.Underline = Aspose.Cells.FontUnderlineType.Single;
                    style.VerticalAlignment = Aspose.Cells.TextAlignmentType.Center;
                    style.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                    cells["A1"].SetStyle(style);


                    worksheet.Cells["A3"].PutValue("Summary");
                    Aspose.Cells.Style style4 = worksheet.Cells["A3"].GetStyle();
                    Aspose.Cells.Font font4 = style4.Font;
                    font4.Underline = Aspose.Cells.FontUnderlineType.Single;
                    font4.Name = "Calibri";
                    font4.Size = 12;
                    font4.Color = System.Drawing.Color.Blue;
                    font4.Underline = Aspose.Cells.FontUnderlineType.Single;
                    style4.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                    style4.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                    cells["A3"].SetStyle(style4);

                    // If Attach word template permission is given then only we have to display World Template (styles) field
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        worksheet.Cells["A5"].PutValue("Job ID"); worksheet.Cells["B5"].PutValue(ds.Tables[0].Rows[0]["JOB_ID"].ToString());
                        worksheet.Cells["A6"].PutValue("Job Title"); worksheet.Cells["B6"].PutValue(ds.Tables[0].Rows[0]["JOB_TITLE"].ToString());
                        worksheet.Cells["A7"].PutValue("Job Type"); worksheet.Cells["B7"].PutValue(ds.Tables[0].Rows[0]["JOB_TYPE"].ToString());
                        worksheet.Cells["A8"].PutValue("Country"); worksheet.Cells["B8"].PutValue(ds.Tables[0].Rows[0]["Country"].ToString());
                        worksheet.Cells["A9"].PutValue("Validation Plan(s)"); worksheet.Cells["B9"].PutValue(validationPlan);
                        worksheet.Cells["A10"].PutValue("World Template (styles)"); worksheet.Cells["B10"].PutValue(WordTemplateName);
                        worksheet.Cells["A11"].PutValue("Description"); worksheet.Cells["B11"].PutValue(ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString());
                        worksheet.Cells["A12"].PutValue("Project ID"); worksheet.Cells["B12"].PutValue(ds.Tables[0].Rows[0]["PROJECT_ID"].ToString());
                        worksheet.Cells["A13"].PutValue("Project Title"); worksheet.Cells["B13"].PutValue(ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString());
                        worksheet.Cells["A14"].PutValue("Total Files Executed"); worksheet.Cells["B14"].PutValue(ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString());
                        worksheet.Cells["A15"].PutValue("Total Pages Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString());
                        if (tpObj.Job_Type != "Publishing")
                        {
                            worksheet.Cells["A16"].PutValue("Total Checks Executed"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Passed Checks"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A18"].PutValue("Failed Checks"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        else
                        {
                            worksheet.Cells["A16"].PutValue("Total Rules Executed"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Passed Rules"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A18"].PutValue("Failed Rules"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }

                        if (tpObj.Job_Type != "QC")
                        {

                            if (tpObj.Job_Type != "Publishing")
                            {
                                worksheet.Cells["A19"].PutValue("Fixed Checks"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());
                            }
                            else
                            {
                                worksheet.Cells["A19"].PutValue("Fixed Rules"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());

                            }
                            worksheet.Cells["A20"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B20"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A21"].PutValue("Created By"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A22"].PutValue("Created Date"); worksheet.Cells["B22"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "  " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B22");
                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }
                        else
                        {
                            worksheet.Cells["A19"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B19"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A20"].PutValue("Created By"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A21"].PutValue("Created Date"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B21");
                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }

                    }
                    else
                    {
                        worksheet.Cells["A5"].PutValue("Job ID"); worksheet.Cells["B5"].PutValue(ds.Tables[0].Rows[0]["JOB_ID"].ToString());
                        worksheet.Cells["A6"].PutValue("Job Title"); worksheet.Cells["B6"].PutValue(ds.Tables[0].Rows[0]["JOB_TITLE"].ToString());
                        worksheet.Cells["A7"].PutValue("Job Type"); worksheet.Cells["B7"].PutValue(ds.Tables[0].Rows[0]["JOB_TYPE"].ToString());
                        worksheet.Cells["A8"].PutValue("Country"); worksheet.Cells["B8"].PutValue(ds.Tables[0].Rows[0]["Country"].ToString());
                        worksheet.Cells["A9"].PutValue("Validation Plan(s)"); worksheet.Cells["B9"].PutValue(validationPlan);
                        worksheet.Cells["A10"].PutValue("Description"); worksheet.Cells["B10"].PutValue(ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString());
                        worksheet.Cells["A11"].PutValue("Project ID"); worksheet.Cells["B11"].PutValue(ds.Tables[0].Rows[0]["PROJECT_ID"].ToString());
                        worksheet.Cells["A12"].PutValue("Project Title"); worksheet.Cells["B12"].PutValue(ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString());
                        worksheet.Cells["A13"].PutValue("Total Files Executed"); worksheet.Cells["B13"].PutValue(ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString());
                        worksheet.Cells["A14"].PutValue("Total Pages Executed"); worksheet.Cells["B14"].PutValue(ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString());
                        if (tpObj.Job_Type != "Publishing")
                        {
                            worksheet.Cells["A15"].PutValue("Total Checks Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A16"].PutValue("Passed Checks"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Failed Checks"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        else
                        {
                            worksheet.Cells["A15"].PutValue("Total Rules Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A16"].PutValue("Passed Rules"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Failed Rules"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                worksheet.Cells["A18"].PutValue("Fixed Checks"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());
                            }
                            else
                            {
                                worksheet.Cells["A18"].PutValue("Fixed Rules"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());

                            }
                            worksheet.Cells["A19"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B19"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A20"].PutValue("Created By"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A21"].PutValue("Created Date"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B21");
                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }
                        else
                        {
                            worksheet.Cells["A18"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B18"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A19"].PutValue("Created By"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A20"].PutValue("Created Date"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B20");
                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }

                    }

                    // Setting the name of the newly added worksheet
                    worksheet.Name = "Validation Analysis";
                    Aspose.Cells.Style style5 = null;

                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            cells.Merge(25, 0, 1, 1);
                            worksheet.Cells["A25"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A25"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A25"].SetStyle(style5);
                        }
                        else
                        {
                            cells.Merge(24, 0, 1, 1);
                            worksheet.Cells["A24"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A24"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;

                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;

                            cells["A24"].SetStyle(style5);
                        }
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            cells.Merge(24, 0, 1, 1);
                            worksheet.Cells["A24"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A24"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A24"].SetStyle(style5);
                        }
                        else
                        {
                            cells.Merge(23, 0, 1, 1);
                            worksheet.Cells["A23"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A23"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;

                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;

                            cells["A23"].SetStyle(style5);
                        }
                    }

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        if (ds.Tables[0].Columns.Count > 0)
                        {
                            if (tpObj.Job_Type == "QC+AutoFix")
                            {
                                for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
                                {
                                    if (i == 16)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "File Name";
                                    }
                                    if (i == 27)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Plan Name";
                                    }
                                    else if (i == 13)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Check";
                                    }
                                    else if (i == 5)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Parameters";
                                    }
                                    else if (i == 14)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Result";
                                    }
                                    else if (i == 3)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Severity";
                                    }
                                    else if (i == 7)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Fixed";
                                    }
                                    else if (i == 15)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Comments";

                                    }
                                }
                            }
                            else if (tpObj.Job_Type == "Publishing")
                            {
                                for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
                                {
                                    if (i == 16)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "File Name";
                                    }
                                    if (i == 27)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Plan Name";
                                    }
                                    else if (i == 13)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Publishing Rule";
                                    }
                                    else if (i == 5)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Parameters";
                                    }
                                    else if (i == 14)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Result";
                                    }
                                    else if (i == 3)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Severity";
                                    }
                                    else if (i == 7)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Fixed";
                                    }
                                    else if (i == 15)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Comments";

                                    }
                                }

                            }
                            else
                            {
                                for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
                                {
                                    if (i == 16)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "File Name";
                                    }
                                    if (i == 27)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Plan Name";
                                    }
                                    else if (i == 13)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Check";
                                    }
                                    else if (i == 5)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Parameters";
                                    }
                                    else if (i == 14)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Result";
                                    }
                                    else if (i == 3)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Severity";
                                    }
                                    else if (i == 15)
                                    {
                                        ds.Tables[0].Columns[i].ColumnName = "Comments";

                                    }
                                }

                            }

                        }
                    }


                    ds.AcceptChanges();
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    dt.Columns.Remove("COUNTRY"); dt.Columns.Remove("TEMPLATE_NAME");
                    dt.Columns.Remove("COUNTRY_ID");
                    dt.Columns.Remove("COLOR"); dt.Columns.Remove("QC_TYPE");
                    if (tpObj.Job_Type == "QC")
                    {
                        dt.Columns.Remove("FIXED");
                    }
                    dt.Columns.Remove("PROJECT_ID"); dt.Columns.Remove("JOB_ID");
                    dt.Columns.Remove("JOB_TITLE");
                    dt.Columns.Remove("JOB_DESCRIPTION");
                    dt.Columns.Remove("CREATED_DATE");
                    dt.Columns.Remove("FOLDER_NAME");
                    dt.Columns.Remove("NO_OF_FILES"); dt.Columns.Remove("NO_OF_PAGES");
                    dt.Columns.Remove("PARENTCHECK"); dt.Columns.Remove("USERNAME");
                    dt.Columns.Remove("TOTALCHECKLIST"); dt.Columns.Remove("PASSCHECKLIST");
                    dt.Columns.Remove("FAILCHECKLIST");
                    dt.Columns.Remove("FIXCHECKLIST");
                    dt.Columns.Remove("PROCESSTIME");
                    dt.Columns.Remove("JOB_START_TIME");
                    dt.Columns.Remove("JOB_END_TIME");
                    dt.Columns.Remove("JOB_TYPE");
                    dt.Columns.Remove("PROJECT_TITLE");
                    dt.Columns.Remove("COMPOSITE_CHECK");



                    dt.Columns["File Name"].SetOrdinal(0);
                    dt.Columns["Plan Name"].SetOrdinal(1);
                    if (tpObj.Job_Type != "Publishing")
                    {
                        dt.Columns["Check"].SetOrdinal(2);
                    }
                    else
                    {
                        dt.Columns["Publishing Rule"].SetOrdinal(2);
                    }
                    dt.Columns["Parameters"].SetOrdinal(3);
                    dt.Columns["Result"].SetOrdinal(4);
                    dt.Columns["Severity"].SetOrdinal(5);
                    if (tpObj.Job_Type != "QC")
                    {
                        dt.Columns["Fixed"].SetOrdinal(6);
                        dt.Columns["Comments"].SetOrdinal(7);
                    }
                    else
                    {
                        dt.Columns["Comments"].SetOrdinal(6);
                    }


                    dt.AcceptChanges();

                    Aspose.Cells.Range range2 = null;


                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A27");
                            range2 = cells.CreateRange("A27", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                        else
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A26");
                            range2 = cells.CreateRange("A26", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A26");
                            range2 = cells.CreateRange("A26", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                        else
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A25");
                            range2 = cells.CreateRange("A25", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                    }


                    Aspose.Cells.Style st2 = workbook.CreateStyle();
                    st2.IsTextWrapped = true;
                    st2.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                    Aspose.Cells.StyleFlag flg2 = new Aspose.Cells.StyleFlag();
                    flg2.Borders = true;
                    flg2.WrapText = true;
                    flg2.VerticalAlignment = true;

                    Aspose.Cells.Range rng6 = null;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                            rng6 = cells.CreateRange("A27:H27");
                        else
                            rng6 = cells.CreateRange("A26:G26");
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                            rng6 = cells.CreateRange("A26:H26");
                        else
                            rng6 = cells.CreateRange("A25:G25");
                    }

                    Aspose.Cells.Style st6 = workbook.CreateStyle();
                    Aspose.Cells.Font font2 = st6.Font;

                    st6.Pattern = Aspose.Cells.BackgroundType.Solid;
                    st6.ForegroundColor = System.Drawing.Color.LightGray;
                    rng6.SetStyle(st6);
                    Aspose.Cells.StyleFlag flag6 = new Aspose.Cells.StyleFlag();
                    flag6.Alignments = true;

                    //st6.ForegroundColor = System.Drawing.Color.DarkGray;
                    int r = 24;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                            r = 27;
                        else
                            r = 26;
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                            r = 26;
                        else
                            r = 25;
                    }
                    for (int k = 0; k < dt.Rows.Count; k++)
                    {
                        r++;
                        string resval = dt.Rows[k]["Result"].ToString();
                        if (tpObj.Job_Type != "QC")
                        {
                            if (resval == "Failed")
                            {
                                if (dt.Rows[k]["FIXED"].ToString().ToLower() != "yes")
                                {

                                    Aspose.Cells.Style styleres = worksheet.Cells["E" + r].GetStyle();
                                    styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                    var color = HexToColor("#f77676c2");
                                    styleres.ForegroundColor = color;
                                    cells["E" + r].SetStyle(styleres);
                                }
                            }
                            if (dt.Rows[k]["FIXED"].ToString().ToLower().Equals("yes"))
                            {
                                Aspose.Cells.Style styleres = worksheet.Cells["G" + r].GetStyle();
                                styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                var color = HexToColor("#66ff66");
                                styleres.ForegroundColor = color;
                                cells["G" + r].SetStyle(styleres);
                            }
                            else if (resval == "Error")
                            {
                                Aspose.Cells.Style styleres = worksheet.Cells["E" + r].GetStyle();
                                styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                var color = HexToColor("#cceeff");
                                styleres.ForegroundColor = color;
                                cells["E" + r].SetStyle(styleres);
                            }
                        }
                        else
                        {
                            if (resval == "Failed")
                            {

                                Aspose.Cells.Style styleres = worksheet.Cells["E" + r].GetStyle();
                                styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                var color = HexToColor("#f77676c2");
                                styleres.ForegroundColor = color;
                                cells["E" + r].SetStyle(styleres);
                            }
                            else if (resval == "Error")
                            {
                                Aspose.Cells.Style styleres = worksheet.Cells["E" + r].GetStyle();
                                styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                var color = HexToColor("#cceeff");
                                styleres.ForegroundColor = color;
                                cells["E" + r].SetStyle(styleres);
                            }
                        }

                    }
                    rng6.ApplyStyle(st6, flag6);
                    range2.ApplyStyle(st2, flg2);


                    Aspose.Cells.PdfSaveOptions saveOptions = new Aspose.Cells.PdfSaveOptions();
                    saveOptions.OptimizationType = Aspose.Cells.Rendering.PdfOptimizationType.MinimumSize;
                    saveOptions.OutputBlankPageWhenNothingToPrint = true;
                    saveOptions.CheckFontCompatibility = true;
                    saveOptions.RefreshChartCache = true;
                    saveOptions.SortExternalNames = true;
                    saveOptions.AllColumnsInOnePagePerSheet = true;
                    saveOptions.IsFontSubstitutionCharGranularity = true;
                    worksheet.PageSetup.Orientation = Aspose.Cells.PageOrientationType.Landscape;
                    worksheet.AutoFitRows();
                    Guid mainId;
                    mainId = Guid.NewGuid();
                    string desPath = m_DownloadFolderPathQC + "\\" + mainId;
                    Directory.CreateDirectory(desPath);
                    workbook.Save(desPath + "\\" + filename);
                    Aspose.Pdf.Document pdfdoc = new Aspose.Pdf.Document(desPath + "\\" + filename);
                    if (pdfdoc.Pages.Count != 0)
                    {
                        foreach (var page in pdfdoc.Pages)
                        {
                            if (page.IsBlank(0.01))
                            {
                                pdfdoc.Pages.Delete(page.Number);
                            }
                        }
                    }
                    pdfdoc.Save(desPath + "\\" + filename);
                    resdata = new string[2];
                    resdata[0] = desPath;
                    resdata[1] = filename;
                    return resdata;
                }
                return resdata;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<ValidationPlan> GetActiveValidationPlans(ValidationPlan tpObj)
        {
            try
            {
                List<ValidationPlan> tpLst = new List<ValidationPlan>();
                ValidationPlan RegOpsQC = new ValidationPlan();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    if (Convert.ToInt64(HttpContext.Current.Session["UserId"]) == tpObj.UserID && Convert.ToInt64(HttpContext.Current.Session["OrgId"]) == tpObj.ORGANIZATION_ID && Convert.ToInt64(HttpContext.Current.Session["RoleID"]) == tpObj.ROLE_ID)
                    {

                        string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());

                        Connection conn = new Connection();
                        conn.connectionstring = m_DummyConn;
                        DataSet ds = new DataSet();
                        OracleConnection con1 = new OracleConnection();
                        con1.ConnectionString = m_DummyConn;
                        OracleCommand cmd = new OracleCommand();
                        con1.Open();
                        OracleDataAdapter da;
                        string query = string.Empty;
                        query = "select a.ID,a.PREFERENCE_NAME,a.CREATED_DATE,a.DESCRIPTION as Validation_Description,a.CATEGORY,a.WORD_TEMPLATE_ID,a.File_Format,a.validation_plan_type,case when a.STATUS=1 then 'Active' else 'Inactive' end as Status, b.FIRST_NAME || ' '|| b.LAST_NAME AS Created_By, COUNT(c.ID) as ChecksCount,ml.library_value as Regops_output_type from REGOPS_QC_PREFERENCES a left join  USERS b on a.CREATED_ID=b.USER_ID left join REGOPS_QC_PREFERENCE_DETAILS c on a.ID = c.QC_PREFERENCES_ID left join MASTER_LIBRARY ml on ml.LIBRARY_ID=a.OUTPUT_TYPE where a.validation_plan_type=:PlanType AND a.CATEGORY=:Category and a.STATUS=1 GROUP BY a.ID,PREFERENCE_NAME,a.CREATED_DATE,DESCRIPTION,a.CATEGORY,a.WORD_TEMPLATE_ID,File_Format,validation_plan_type,a.Status,FIRST_NAME,LAST_NAME,LIBRARY_VALUE ORDER BY a.CREATED_DATE DESC";
                        cmd = new OracleCommand(query, con1);
                        cmd.Parameters.Add(new OracleParameter("PlanType", tpObj.Validation_Plan_Type));
                        cmd.Parameters.Add(new OracleParameter("Category", tpObj.Category));
                        da = new OracleDataAdapter(cmd);
                        da.Fill(ds);
                        con1.Close();
                        if (conn.Validate(ds))
                        {
                            tpLst = new DataTable2List().DataTableToList<ValidationPlan>(ds.Tables[0]);
                        }
                        return tpLst;
                    }
                    RegOpsQC = new ValidationPlan();
                    RegOpsQC.sessionCheck = "Error Page";
                    tpLst.Add(RegOpsQC);
                    return tpLst;
                }
                RegOpsQC = new ValidationPlan();
                RegOpsQC.sessionCheck = "Login Page";
                tpLst.Add(RegOpsQC);
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }

        }

        public string UpdatePlanStatus(RegOpsQC robj)
        {
            string m_res = string.Empty;
            OracleConnection con = new OracleConnection();
            OracleTransaction trans;
            string[] m_ConnDetails = GetConnectionInfo(robj.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            con.ConnectionString = m_DummyConn;
            con.Open();
            trans = con.BeginTransaction(IsolationLevel.ReadCommitted);
            try
            {
                Int64 Status = 0;
                if (robj.Status != "" && robj.Status != null)
                {
                    if (("Active").ToUpper().Contains(robj.Status.ToUpper()))
                    {
                        Status = 1;
                    }
                    else if (("Inactive").ToUpper().Contains(robj.Status.ToUpper()))
                    {
                        Status = 0;
                    }
                }
                DateTime UpdateDate = DateTime.Now;
                String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");
                cmd = new OracleCommand("UPDATE REGOPS_QC_PREFERENCES SET STATUS=:STATUS,UPDATED_ID=:UPDATED_ID,UPDATED_DATE=:UPDATED_DATE WHERE ID=:ID", con);
                cmd.Parameters.Add("STATUS", Status);
                cmd.Parameters.Add("UPDATED_ID", robj.Created_ID);
                cmd.Parameters.Add("UPDATED_DATE", Date);
                cmd.Parameters.Add("ID", robj.ID);
                int result = cmd.ExecuteNonQuery();
                trans.Commit();
                con.Close();
                if (result > 0)
                    m_res = "Success";
                else
                    m_res = "Failed";
                return m_res;
            }

            catch (Exception ex)
            {
                trans.Rollback();
                ErrorLogger.Error(ex);
                return "";
            }
        }

        public string DeleteValidationPlan(RegOpsQC robj)
        {
            string result = string.Empty;
            int res = 0;
            Connection conn = new Connection();
            OracleConnection con = new OracleConnection();
            string[] m_ConnDetails = GetConnectionInfo(robj.Created_ID).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            con.ConnectionString = m_DummyConn;
            con.Open();
            OracleTransaction trans = con.BeginTransaction(IsolationLevel.ReadCommitted);
            try
            {

                DataSet ds = new DataSet();
                ds = conn.GetDataSet("select count(*) as jobsexists from REGOPS_JOB_PLANS where PREFERENCE_ID=" + robj.ID, CommandType.Text, ConnectionState.Open);
                Int64 jobscount = Convert.ToInt64(ds.Tables[0].Rows[0]["jobsexists"]);
                if (jobscount != 0)
                {
                    result = "Jobs Exists";
                }
                else
                {
                    cmd = new OracleCommand("DELETE FROM REGOPS_QC_PREFERENCE_DETAILS WHERE QC_PREFERENCES_ID =:ID", con);
                    cmd.Parameters.Add("ID", robj.ID);
                    cmd.Transaction = trans;
                    res = cmd.ExecuteNonQuery();
                    cmd = new OracleCommand("DELETE FROM REGOPS_QC_PREFERENCES WHERE ID =:ID", con);
                    cmd.Parameters.Add("ID", robj.ID);
                    cmd.Transaction = trans;
                    res = cmd.ExecuteNonQuery();
                    trans.Commit();
                    con.Close();
                    if (res > 0)
                        result = "Success";
                    else
                        result = "Failed";
                }
                return result;
            }
            catch (Exception ex)
            {
                trans.Rollback();
                ErrorLogger.Error(ex);
                return "";
            }
        }
        public string[] GeneratePageValidationReportHtml(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            string[] resdata = null;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                string validationPlan = string.Empty;
                validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                string WordTemplateName = string.Empty;
                WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
                var temp = tpObj.ISAttachPREDICTTemplate;
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                string query = string.Empty;
                query = " select mlib.Library_Value as Country,sty.TEMPLATE_NAME, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,a.PAGE_NUMBER,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID,rp.PROJECT_TITLE, b.JOB_ID,b.JOB_TITLE, b.JOB_TYPE,b.JOB_START_TIME,b.JOB_END_TIME,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.COMPOSITE_CHECK,c.LIBRARY_VALUE as Validation,a.PARENT_CHECK_ID,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
            "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
            "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
            "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID) as fixChecklist," +
            " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
            " from REGOPS_QC_PAGE_VALIDATION_DET a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by  a.FILE_NAME,rjp.PLAN_ORDER,a.PAGE_NUMBER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                tpObj.ProcessTime = elapsed.ToString();
                con1.Close();
                var Sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] ColumnFlag = Sobj.Split(',');
                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<head>");
                    sb.AppendLine("<title style='align='center'>");
                    sb.AppendLine("Page-");
                    sb.AppendLine(Guid.NewGuid().ToString());
                    sb.AppendLine("</title>");
                    sb.AppendLine("</head>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<div class='WordSection1'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Analysis</u></b></p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<tbody><tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("</tr>");


                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Type</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TYPE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (temp == "1")
                    {
                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Word Template (styles)</span></p>");
                        sb.AppendLine(" </td>");

                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + WordTemplateName + "</span></p>");
                        sb.AppendLine(" </td>");



                        sb.AppendLine(" </tr>");
                    }
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (tpObj.Job_Type != "Publishing")
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        if (tpObj.Job_Type != "QC")
                        {
                            sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                        }
                    }
                    else
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Rules Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                    }

                    //Process Time
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time(HH:MM:SS)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + tpObj.ProcessTime + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created By
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created Date
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    TimeZone zone = TimeZone.CurrentTimeZone;
                    string standard = string.Concat(System.Text.RegularExpressions.Regex
                      .Matches(zone.StandardName, "[A-Z]")
                      .OfType<System.Text.RegularExpressions.Match>()
                      .Select(match => match.Value));
                    if (standard == "CUT")
                        standard = "UTC";
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine("</tbody></table>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");

                    foreach (var sob in ColumnFlag)
                    {
                        if (sob == "FILE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "PREFERENCE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "PAGE_NUMBER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Page Number");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "Validation")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                        if (sob == "CHECK_PARAMETER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "QC_RESULT")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "severity_level")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (sob == "Fixed")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }

                        if (sob == "Comments")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine(" </td>");
                        }
                    }
                    sb.AppendLine("</tr>");

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (!(ds.Tables[0].Rows[i]["PARENT_CHECK_ID"].ToString() == "" && ds.Tables[0].Rows[i]["COMPOSITE_CHECK"].ToString() == "0"))
                        {
                            string checkParameter = string.Empty;
                            if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                            else
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                            string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                            string bg_color = "white";
                            string fixedbg_color = "white";
                            string sev_level = "";
                            string color = "black";
                            if (qcStatus.ToLower().Equals("failed"))
                            {
                                bg_color = "#f77676c2";
                            }
                            else if (qcStatus.ToLower().Equals("error"))
                            {
                                bg_color = "#cceeff";
                            }
                            if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                            {
                                fixedbg_color = "#66ff66";
                            }

                            if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                            {
                                sev_level = "High";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                            {
                                sev_level = "Medium";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                            {
                                sev_level = "Low";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                            {
                                sev_level = "Warning";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                            {
                                sev_level = "NA";
                            }
                            string Validation = "";
                            if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                            {
                                Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            else
                            {
                                Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            foreach (var sobj in ColumnFlag)
                            {
                                if (sobj == "FILE_NAME")
                                {
                                    sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");

                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                    {
                                        if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        }
                                        else
                                        {
                                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "PREFERENCE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "PAGE_NUMBER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "Validation")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + Validation + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "CHECK_PARAMETER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "QC_RESULT")
                                {
                                    if (bg_color.Contains("#"))
                                    {
                                        if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                        {
                                            var color12 = HexToColor(bg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                        }
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "severity_level")
                                {
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    if (sev_level != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (sobj == "Fixed")
                                    {
                                        if (fixedbg_color.Contains("#"))
                                        {
                                            var color12 = HexToColor(fixedbg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                                        }
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["Fixed"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                                if (sobj == "Comments")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                            }
                            sb.AppendLine("</tr>");
                        }
                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</div>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                }
                Guid mainId;
                mainId = Guid.NewGuid();

                string desPath = m_DownloadFolderPathQC + "\\" + mainId;
                Directory.CreateDirectory(desPath);
                File.WriteAllText(desPath + "\\" + tpObj.Job_ID + "-Validation Analysis.html", sb.ToString(), Encoding.UTF8);
                resdata = new string[2];
                resdata[0] = desPath;
                resdata[1] = tpObj.Job_ID + "-Validation Analysis.html";
                return resdata;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// Download validation report based on user selection in Analysis page for selected columns ByPage        
        /// </summary>  
        public string[] GeneratePageValidationReportPdf(RegOpsQC tpObj)
        {
            string filename = string.Empty;
            string[] resdata = null;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                DataSet ds1 = new DataSet();
                string validationPlan = string.Empty;
                string query = string.Empty;
                validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                string WordTemplateName = string.Empty;
                WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
                var Sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] ColumnFlag = Sobj.Split(',');
                var temp = tpObj.ISAttachPREDICTTemplate;
                OracleConnection con1 = new OracleConnection();
                con1.ConnectionString = m_DummyConn;
                OracleCommand cmd = new OracleCommand();
                con1.Open();
                OracleDataAdapter da;
                query = " select mlib.Library_Value as Country,sty.TEMPLATE_NAME, rs.country_id,case when rsd.severity_level=1 then 'High' when rsd.severity_level=2 then 'Medium' when rsd.severity_level=3 then 'Low' when rsd.severity_level = 4 then 'Warning' when rsd.severity_level = 5 then 'NA' else '' end as severity_level, rsc.COLOR,case when a.PAGE_NUMBER = 0 then null else a.PAGE_NUMBER end as PAGE_NUMBER,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER, a.QC_TYPE,case when a.IS_FIXED = 1 then 'Yes' else '' end as Fixed, rp.PROJECT_ID, rp.PROJECT_TITLE,b.JOB_ID, b.JOB_TITLE,b.JOB_TYPE, b.JOB_START_TIME,b.JOB_END_TIME, b.JOB_DESCRIPTION, TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation, a.QC_RESULT, replace(replace(a.comments,'<span style=''font-family:symbol''>',''),'</span>','') as COMMENTS, a.FILE_NAME, a.FOLDER_NAME, b.NO_OF_FILES, b.NO_OF_PAGES, lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID) as TOTALCHECKLIST, " +
                 "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                 "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
                 "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID =:JOB_ID) as fixChecklist," +
                 " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime,pr.PREFERENCE_NAME,c.COMPOSITE_CHECK " +
                 " from REGOPS_QC_PAGE_VALIDATION_DET a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.word_template_id and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,a.PAGE_NUMBER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                tpObj.ProcessTime = elapsed.ToString();
                con1.Close();

                TimeZone zone = TimeZone.CurrentTimeZone;
                string standard = string.Concat(System.Text.RegularExpressions.Regex
                  .Matches(zone.StandardName, "[A-Z]")
                  .OfType<System.Text.RegularExpressions.Match>()
                  .Select(match => match.Value));
                if (standard == "CUT")
                    standard = "UTC";
                if (conn.Validate(ds))
                {
                    DataTable dtnw = ds.Tables[0].Clone();
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        // appending folder and filename
                        if (dr["FOLDER_NAME"].ToString() != "")
                        {
                            if (dr["FILE_NAME"].ToString() != "")
                            {
                                dr["FILE_NAME"] = dr["FOLDER_NAME"].ToString() + "\\" + dr["FILE_NAME"].ToString();
                            }
                            else
                            {
                                dr["FILE_NAME"] = dr["FOLDER_NAME"].ToString();
                            }

                        }
                        if (dr["CHECK_PARAMETER"].ToString() != "" && (dr["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || dr["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || dr["Validation"].ToString() == "Exception Font Family" || dr["Validation"].ToString() == "Valid Version(s)"))
                            dr["CHECK_PARAMETER"] = dr["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");

                        if (dr["ParentCheck"].ToString() != "")
                        {
                            dr["Validation"] = dr["ParentCheck"].ToString() + "-> " + dr["VALIDATION"].ToString();
                        }
                        else
                        {
                            dr["Validation"] = dr["VALIDATION"].ToString();
                        }
                        //replacing span tags with empty
                        var s = dr["Comments"].ToString().Replace(" <span style='font-family:symbol'>", " ");
                        var sobj = s.Replace("</span>", "");
                        dr["Comments"] = sobj.ToString();

                        if (!(dr["ParentCheck"].ToString() == "" && dr["COMPOSITE_CHECK"].ToString() == "0"))
                            dtnw.ImportRow(dr);
                    }

                    DataTable dt1 = ds.Tables[0];
                    ds.Tables.Remove(dt1);
                    ds.Tables.Add(dtnw);

                    filename = ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "-" + "Validation Analysis.pdf";
                    Aspose.Cells.Workbook workbook = new Aspose.Cells.Workbook();
                    // Obtaining the reference of the worksheet
                    Aspose.Cells.Worksheet worksheet = workbook.Worksheets[0];
                    worksheet.PageSetup.PaperSize = Aspose.Cells.PaperSizeType.PaperA4;
                    worksheet.IsGridlinesVisible = false;
                    Aspose.Cells.Cells cells = worksheet.Cells;
                    cells.SetColumnWidth(0, 24);
                    cells.SetColumnWidth(1, 22);
                    cells.SetColumnWidth(2, 6);
                    if (tpObj.Job_Type != "QC")
                        cells.SetColumnWidth(3, 16);
                    else
                        cells.SetColumnWidth(3, 20);
                    cells.SetColumnWidth(4, 6);
                    cells.SetColumnWidth(5, 7);
                    cells.SetColumnWidth(6, 7);
                    if (tpObj.Job_Type != "QC")
                    {
                        cells.SetColumnWidth(7, 5);
                        cells.SetColumnWidth(8, 27);
                    }
                    else
                        cells.SetColumnWidth(7, 30);


                    cells.Merge(0, 0, 1, 9);
                    cells.Merge(1, 0, 1, 1);
                    worksheet.Cells["A1"].PutValue("Validation Analysis");

                    Aspose.Cells.Style style = worksheet.Cells["A1"].GetStyle();
                    Aspose.Cells.Font font = style.Font;
                    font.Name = "Calibri";
                    font.Size = 14;
                    font.Color = System.Drawing.Color.Black;
                    font.IsBold = true;
                    font.Underline = Aspose.Cells.FontUnderlineType.Single;
                    style.VerticalAlignment = Aspose.Cells.TextAlignmentType.Center;
                    style.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                    cells["A1"].SetStyle(style);

                    worksheet.Cells["A3"].PutValue("Summary");
                    Aspose.Cells.Style style4 = worksheet.Cells["A3"].GetStyle();
                    Aspose.Cells.Font font4 = style4.Font;
                    font4.Underline = Aspose.Cells.FontUnderlineType.Single;
                    font4.Name = "Calibri";
                    font4.Size = 12;
                    font4.Color = System.Drawing.Color.Blue;
                    font4.Underline = Aspose.Cells.FontUnderlineType.Single;
                    style4.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                    style4.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                    cells["A3"].SetStyle(style4);
                    // If Attach word template permission is given then only we have to display World Template (styles) field
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        worksheet.Cells["A5"].PutValue("Job ID"); worksheet.Cells["B5"].PutValue(ds.Tables[0].Rows[0]["JOB_ID"].ToString());
                        worksheet.Cells["A6"].PutValue("Job Title"); worksheet.Cells["B6"].PutValue(ds.Tables[0].Rows[0]["JOB_TITLE"].ToString());
                        worksheet.Cells["A7"].PutValue("Job Type"); worksheet.Cells["B7"].PutValue(ds.Tables[0].Rows[0]["JOB_TYPE"].ToString());
                        worksheet.Cells["A8"].PutValue("Country"); worksheet.Cells["B8"].PutValue(ds.Tables[0].Rows[0]["Country"].ToString());
                        worksheet.Cells["A9"].PutValue("Validation Plan(s)"); worksheet.Cells["B9"].PutValue(validationPlan);
                        worksheet.Cells["A10"].PutValue("World Template (styles)"); worksheet.Cells["B10"].PutValue(WordTemplateName);
                        worksheet.Cells["A11"].PutValue("Description"); worksheet.Cells["B11"].PutValue(ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString());
                        worksheet.Cells["A12"].PutValue("Project ID"); worksheet.Cells["B12"].PutValue(ds.Tables[0].Rows[0]["PROJECT_ID"].ToString());
                        worksheet.Cells["A13"].PutValue("Project Title"); worksheet.Cells["B13"].PutValue(ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString());
                        worksheet.Cells["A14"].PutValue("Total Files Executed"); worksheet.Cells["B14"].PutValue(ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString());
                        worksheet.Cells["A15"].PutValue("Total Pages Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString());
                        if (tpObj.Job_Type != "Publishing")
                        {
                            worksheet.Cells["A16"].PutValue("Total Checks Executed"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Passed Checks"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A18"].PutValue("Failed Checks"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        else
                        {
                            worksheet.Cells["A16"].PutValue("Total Rules Executed"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Passed Rules"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A18"].PutValue("Failed Rules"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                worksheet.Cells["A19"].PutValue("Fixed Checks"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());
                            }
                            else
                            {
                                worksheet.Cells["A19"].PutValue("Fixed Rules"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());

                            }
                            worksheet.Cells["A20"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B20"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A21"].PutValue("Created By"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A22"].PutValue("Created Date"); worksheet.Cells["B22"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B22");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }
                        else
                        {
                            worksheet.Cells["A19"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B19"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A20"].PutValue("Created By"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A21"].PutValue("Created Date"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B21");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }

                    }
                    else
                    {
                        worksheet.Cells["A5"].PutValue("Job ID"); worksheet.Cells["B5"].PutValue(ds.Tables[0].Rows[0]["JOB_ID"].ToString());
                        worksheet.Cells["A6"].PutValue("Job Title"); worksheet.Cells["B6"].PutValue(ds.Tables[0].Rows[0]["JOB_TITLE"].ToString());
                        worksheet.Cells["A7"].PutValue("Job Type"); worksheet.Cells["B7"].PutValue(ds.Tables[0].Rows[0]["JOB_TYPE"].ToString());
                        worksheet.Cells["A8"].PutValue("Country"); worksheet.Cells["B8"].PutValue(ds.Tables[0].Rows[0]["Country"].ToString());
                        worksheet.Cells["A9"].PutValue("Validation Plan(s)"); worksheet.Cells["B9"].PutValue(validationPlan);
                        worksheet.Cells["A10"].PutValue("Description"); worksheet.Cells["B10"].PutValue(ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString());
                        worksheet.Cells["A11"].PutValue("Project ID"); worksheet.Cells["B11"].PutValue(ds.Tables[0].Rows[0]["PROJECT_ID"].ToString());
                        worksheet.Cells["A12"].PutValue("Project Title"); worksheet.Cells["B12"].PutValue(ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString());
                        worksheet.Cells["A13"].PutValue("Total Files Executed"); worksheet.Cells["B13"].PutValue(ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString());
                        worksheet.Cells["A14"].PutValue("Total Pages Executed"); worksheet.Cells["B14"].PutValue(ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString());
                        if (tpObj.Job_Type != "Publishing")
                        {
                            worksheet.Cells["A15"].PutValue("Total Checks Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A16"].PutValue("Passed Checks"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Failed Checks"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        else
                        {
                            worksheet.Cells["A15"].PutValue("Total Rules Executed"); worksheet.Cells["B15"].PutValue(ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString());
                            worksheet.Cells["A16"].PutValue("Passed Rules"); worksheet.Cells["B16"].PutValue(ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString());
                            worksheet.Cells["A17"].PutValue("Failed Rules"); worksheet.Cells["B17"].PutValue(ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString());

                        }
                        if (tpObj.Job_Type != "QC")
                        {
                            if (tpObj.Job_Type != "Publishing")
                            {
                                worksheet.Cells["A18"].PutValue("Fixed Checks"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());
                            }
                            else
                            {
                                worksheet.Cells["A18"].PutValue("Fixed Rules"); worksheet.Cells["B18"].PutValue(ds.Tables[0].Rows[0]["fixChecklist"].ToString());

                            }
                            worksheet.Cells["A19"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B19"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A20"].PutValue("Created By"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A21"].PutValue("Created Date"); worksheet.Cells["B21"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B21");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }
                        else
                        {
                            worksheet.Cells["A18"].PutValue("Process Time(HH:MM:SS)"); worksheet.Cells["B18"].PutValue(tpObj.ProcessTime);
                            worksheet.Cells["A19"].PutValue("Created By"); worksheet.Cells["B19"].PutValue(ds.Tables[0].Rows[0]["USERNAME"].ToString());
                            worksheet.Cells["A20"].PutValue("Created Date"); worksheet.Cells["B20"].PutValue(ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + " " + standard);
                            Aspose.Cells.Range range1 = cells.CreateRange("A5", "B20");

                            Aspose.Cells.Style stl = workbook.CreateStyle();
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                            stl.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                            stl.IsTextWrapped = true;
                            Aspose.Cells.StyleFlag flg = new Aspose.Cells.StyleFlag();
                            flg.Borders = true;
                            flg.WrapText = true;
                            range1.ApplyStyle(stl, flg);
                        }

                    }

                    // Setting the name of the newly added worksheet                                      

                    worksheet.Name = "Validation Analysis";
                    Aspose.Cells.Style style5 = null;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            cells.Merge(25, 0, 1, 1);
                            worksheet.Cells["A25"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A25"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A25"].SetStyle(style5);
                        }
                        else
                        {
                            cells.Merge(24, 0, 1, 1);
                            worksheet.Cells["A24"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A24"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A24"].SetStyle(style5);
                        }
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            cells.Merge(24, 0, 1, 1);
                            worksheet.Cells["A24"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A24"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A24"].SetStyle(style5);
                        }
                        else
                        {
                            cells.Merge(23, 0, 1, 1);
                            worksheet.Cells["A23"].PutValue("Validation Details");
                            style5 = worksheet.Cells["A23"].GetStyle();
                            Aspose.Cells.Font font5 = style5.Font;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            font5.Name = "Calibri";
                            font5.Size = 12;
                            font5.Color = System.Drawing.Color.Blue;
                            font5.Underline = Aspose.Cells.FontUnderlineType.Single;
                            style5.VerticalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            style5.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Left;
                            cells["A23"].SetStyle(style5);
                        }
                    }

                    ds.AcceptChanges();
                    DataTable dt = new DataTable();
                    dt = ds.Tables[0];
                    DataView dv = new DataView(ds.Tables[0]);
                    string column = string.Empty;
                    char result = 'A';
                    char fix = 'A';
                    char num = 'A';
                    foreach (var s in ColumnFlag)
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            if (s == "QC_RESULT")
                            {
                                result = num;
                            }
                            else if (s == "Fixed")
                            {
                                fix = num;
                            }
                            num++;
                        }
                        else
                        {
                            if (s == "QC_RESULT")
                            {
                                result = num;
                            }
                            else if (s == "severity_level")
                            {
                                fix = num;
                            }
                            num++;
                        }

                    }

                    dt = dv.ToTable(false, ColumnFlag);

                    foreach (var t in ColumnFlag)
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            if (t == "FILE_NAME")
                            {
                                dt.Columns[t].ColumnName = "File Name";
                            }
                            if (t == "PREFERENCE_NAME")
                            {
                                dt.Columns[t].ColumnName = "Plan Name";
                            }
                            if (t == "PAGE_NUMBER")
                            {
                                dt.Columns[t].ColumnName = "Page Number";
                            }
                            if (t == "Validation")
                            {
                                if (tpObj.Job_Type == "Publishing")
                                {
                                    dt.Columns[t].ColumnName = "Publishing Rule";
                                }
                                else
                                {
                                    dt.Columns[t].ColumnName = "Check";
                                }

                            }
                            if (t == "CHECK_PARAMETER")
                            {
                                dt.Columns[t].ColumnName = "Parameters";
                            }
                            if (t == "QC_RESULT")
                            {
                                dt.Columns[t].ColumnName = "Result";
                            }
                            if (t == "severity_level")
                            {
                                dt.Columns[t].ColumnName = "Severity";
                            }
                            if (t == "Fixed")
                            {
                                dt.Columns[t].ColumnName = "Fixed";
                            }
                            if (t == "Comments")
                            {
                                dt.Columns[t].ColumnName = "Comments";
                            }
                        }
                        else
                        {
                            if (t == "FILE_NAME")
                            {
                                dt.Columns[t].ColumnName = "File Name";
                            }
                            if (t == "PREFERENCE_NAME")
                            {
                                dt.Columns[t].ColumnName = "Plan Name";
                            }
                            if (t == "PAGE_NUMBER")
                            {
                                dt.Columns[t].ColumnName = "Page Number";
                            }
                            if (t == "Validation")
                            {
                                dt.Columns[t].ColumnName = "Check";
                            }
                            if (t == "CHECK_PARAMETER")
                            {
                                dt.Columns[t].ColumnName = "Parameters";
                            }
                            if (t == "QC_RESULT")
                            {
                                dt.Columns[t].ColumnName = "Result";
                            }
                            if (t == "severity_level")
                            {
                                dt.Columns[t].ColumnName = "Severity";
                            }
                            if (t == "Comments")
                            {
                                dt.Columns[t].ColumnName = "Comments";
                            }
                        }

                    }

                    dt.AcceptChanges();
                    Aspose.Cells.Range range2 = null;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A27");
                            range2 = cells.CreateRange("A27", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                        else
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A26");
                            range2 = cells.CreateRange("A26", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A26");
                            range2 = cells.CreateRange("A26", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                        else
                        {
                            worksheet.Cells.ImportDataTable(dt, true, "A25");
                            range2 = cells.CreateRange("A25", Aspose.Cells.CellsHelper.CellIndexToName(cells.MaxDataRow, cells.MaxDataColumn));
                        }
                    }

                    Aspose.Cells.Style st2 = workbook.CreateStyle();
                    st2.IsTextWrapped = true;
                    st2.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.TopBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.LeftBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.BottomBorder].Color = System.Drawing.Color.Black;
                    st2.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                    st2.Borders[Aspose.Cells.BorderType.RightBorder].Color = System.Drawing.Color.Black;
                    Aspose.Cells.StyleFlag flg2 = new Aspose.Cells.StyleFlag();
                    flg2.Borders = true;
                    flg2.WrapText = true;

                    Aspose.Cells.Range rng6 = null;
                    num = --num;
                    if (tpObj.ISAttachPREDICTTemplate == "1")
                    {
                        if (tpObj.Job_Type != "QC")
                            rng6 = cells.CreateRange("A27:" + num + "27");
                        else
                            rng6 = cells.CreateRange("A26:" + num + "26");
                    }
                    else
                    {
                        if (tpObj.Job_Type != "QC")
                            rng6 = cells.CreateRange("A26:" + num + "26");
                        else
                            rng6 = cells.CreateRange("A25:" + num + "25");
                    }

                    Aspose.Cells.Style st6 = workbook.CreateStyle();
                    Aspose.Cells.Font font2 = st6.Font;
                    st6.Pattern = Aspose.Cells.BackgroundType.Solid;
                    st6.ForegroundColor = System.Drawing.Color.LightGray;
                    rng6.SetStyle(st6);
                    Aspose.Cells.StyleFlag flag6 = new Aspose.Cells.StyleFlag();
                    flag6.Alignments = true;
                    foreach (var s in ColumnFlag)
                    {
                        if (s == "QC_RESULT")
                        {
                            int r = 24;
                            if (tpObj.ISAttachPREDICTTemplate == "1")
                            {
                                if (tpObj.Job_Type != "QC")
                                    r = 27;
                                else
                                    r = 26;
                            }
                            else
                            {
                                if (tpObj.Job_Type != "QC")
                                    r = 26;
                                else
                                    r = 25;
                            }
                            for (int k = 0; k < dt.Rows.Count; k++)
                            {
                                int t = r;
                                r++;
                                string resval = dt.Rows[k]["Result"].ToString();

                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "QC_RESULT" || s == "Fixed")
                                    {
                                        if (resval == "Failed" && dt.Rows[k]["Fixed"].ToString().ToLower() != "yes")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#f77676c2");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);
                                        }
                                        if (dt.Rows[k]["Fixed"].ToString().ToLower().Equals("yes"))
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[fix.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#66ff66");
                                            styleres.ForegroundColor = color;
                                            cells[fix.ToString() + r].SetStyle(styleres);
                                        }
                                        else if (resval == "Error")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#cceeff");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);
                                        }
                                    }
                                }
                                else
                                {
                                    if (s == "QC_RESULT")
                                    {
                                        if (resval == "Failed")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#f77676c2");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);
                                        }

                                        else if (resval == "Error")
                                        {
                                            Aspose.Cells.Style styleres = worksheet.Cells[result.ToString() + r].GetStyle();
                                            styleres.Pattern = Aspose.Cells.BackgroundType.Solid;
                                            var color = HexToColor("#cceeff");
                                            styleres.ForegroundColor = color;
                                            cells[result.ToString() + r].SetStyle(styleres);

                                        }
                                    }
                                }
                            }
                        }
                    }
                    rng6.ApplyStyle(st6, flag6);
                    range2.ApplyStyle(st2, flg2);

                    Aspose.Cells.PdfSaveOptions saveOptions = new Aspose.Cells.PdfSaveOptions();
                    saveOptions.OptimizationType = Aspose.Cells.Rendering.PdfOptimizationType.MinimumSize;
                    saveOptions.OutputBlankPageWhenNothingToPrint = true;
                    saveOptions.CheckFontCompatibility = true;
                    saveOptions.AllColumnsInOnePagePerSheet = true;
                    worksheet.IsRowColumnHeadersVisible = true;
                    worksheet.PageSetup.Orientation = Aspose.Cells.PageOrientationType.Landscape;
                    worksheet.AutoFitRows();
                    Guid mainId;
                    mainId = Guid.NewGuid();
                    string desPath = m_DownloadFolderPathQC + mainId;
                    Directory.CreateDirectory(desPath);
                    workbook.Save(desPath + "\\" + filename);
                    Aspose.Pdf.Document pdfdoc = new Aspose.Pdf.Document(desPath + "\\" + filename);
                    if (pdfdoc.Pages.Count != 0)
                    {
                        foreach (var page in pdfdoc.Pages)
                        {
                            if (page.IsBlank(0.01))
                            {
                                pdfdoc.Pages.Delete(page.Number);
                            }
                        }
                    }
                    pdfdoc.Save(desPath + "\\" + filename);
                    resdata = new string[2];
                    resdata[0] = desPath;
                    resdata[1] = filename;
                }
                return resdata;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public List<RegOpsQC> GetValidationDetailsByPage(RegOpsQC tpObj)
        {
            try
            {
                List<RegOpsQC> tpLst = new List<RegOpsQC>();
                RegOpsQC RegOpsQC = new RegOpsQC();
                if (HttpContext.Current.Session["UserId"] != null)
                {
                    Connection conn = new Connection();
                    string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                    m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                    m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                    conn.connectionstring = m_DummyConn;
                    string query = string.Empty;

                    query = "SELECT reg.PARENT_CHECK_ID,rjp.PLAN_ORDER,REG.PAGE_NUMBER,L.CHECK_ORDER, rs.country_id,rsd.severity_level,rsc.COLOR,REG.QC_TYPE as Fix,REG.CHECK_PARAMETER, FOLDER_NAME,FILE_NAME,reg.ID,reg.CHECKLIST_ID,L.LIBRARY_VALUE,L.COMPOSITE_CHECK,COMMENTS,QC_RESULT,REG.CHECK_START_TIME,REG.CHECK_END_TIME,L1.LIBRARY_VALUE as ParentCheck,case when IS_FIXED=1 then 'Yes' else '' end as IS_FIXED,pr.PREFERENCE_NAME,pr.ID as Plan_ID FROM REGOPS_QC_PAGE_VALIDATION_DET REG INNER JOIN CHECKS_LIBRARY L ON L.LIBRARY_ID = REG.CHECKLIST_ID left join CHECKS_LIBRARY L1 on L1.LIBRARY_ID = REG.PARENT_CHECK_ID left join REGOPS_QC_JOBS qcjob on qcjob.ID = REG.JOB_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=qcjob.ID and rjp.PREFERENCE_ID=REG.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=REG.PREFERENCE_ID left join REGOPS_SEVERITY rs on qcjob.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = REG.CHECKLIST_ID and REG.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL WHERE REG.JOB_ID = " + tpObj.ID + " and pr.ID in (" + tpObj.JobPlan_ID + ") order by FILE_NAME,rjp.PLAN_ORDER,REG.PAGE_NUMBER,L.CHECK_ORDER";
                    RegOpsQC tObj1 = null; DataTable dt = new DataTable();
                    DataSet ds = new DataSet();
                    ds = conn.GetDataSet(query, CommandType.Text, ConnectionState.Open);
                    if (conn.Validate(ds))
                    {
                        dt = ds.Tables[0];
                        if (dt.Rows.Count != 0)
                        {
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                int flag = 0;
                                List<RegOpsQC> subLst = new List<RegOpsQC>();

                                DateTime dt1 = Convert.ToDateTime(dt.Rows[i]["CHECK_END_TIME"].ToString());
                                DateTime dt2 = Convert.ToDateTime(dt.Rows[i]["CHECK_START_TIME"].ToString());
                                TimeSpan timeSpan = dt1 - dt2;

                                tObj1 = new RegOpsQC();

                                tObj1.Folder_Name = dt.Rows[i]["FOLDER_NAME"].ToString();
                                tObj1.Pagenumber = Convert.ToInt32(dt.Rows[i]["PAGE_NUMBER"].ToString());
                                if (dt.Rows[i]["PARENT_CHECK_ID"].ToString() != "")
                                    tObj1.Check_Name = dt.Rows[i]["ParentCheck"].ToString() + "->" + dt.Rows[i]["LIBRARY_VALUE"].ToString();
                                else if (dt.Rows[i]["COMPOSITE_CHECK"].ToString() == "1")
                                    tObj1.Check_Name = dt.Rows[i]["LIBRARY_VALUE"].ToString();
                                else if (dt.Rows[i]["PARENT_CHECK_ID"].ToString() == "" && dt.Rows[i]["COMPOSITE_CHECK"].ToString() == "0")
                                    flag = 1;
                                if (dt.Rows[i]["CHECK_PARAMETER"].ToString() != "" && (dt.Rows[i]["LIBRARY_VALUE"].ToString() == "Table - List Bullets/List Numbers Font Family" || dt.Rows[i]["LIBRARY_VALUE"].ToString() == "Paragraph - List Bullets/List Numbers Font Family"))
                                {
                                    tObj1.Check_Parameter = dt.Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                                }
                                else
                                {
                                    tObj1.Check_Parameter = dt.Rows[i]["CHECK_PARAMETER"].ToString();
                                }
                                tObj1.QC_Result = dt.Rows[i]["QC_Result"].ToString();
                                if (dt.Rows[i]["Comments"].ToString() != "")
                                {
                                    tObj1.Comments = dt.Rows[i]["Comments"].ToString();
                                }
                                else
                                {
                                    tObj1.Comments = "";
                                }
                                if (tObj1.Folder_Name != "")
                                    if (dt.Rows[i]["File_Name"].ToString() != "" && dt.Rows[i]["File_Name"].ToString() != null)
                                    {
                                        tObj1.File_Name = tObj1.Folder_Name + "\\" + dt.Rows[i]["File_Name"].ToString();
                                    }
                                    else
                                    {
                                        tObj1.File_Name = tObj1.Folder_Name;
                                    }

                                else
                                    tObj1.File_Name = dt.Rows[i]["File_Name"].ToString();
                                tObj1.ProcessTime = timeSpan.ToString();
                                tObj1.Fixed = dt.Rows[i]["Is_Fixed"].ToString();
                                tObj1.Preference_Name = dt.Rows[i]["PREFERENCE_NAME"].ToString();
                                tObj1.Preference_ID = Convert.ToInt64(dt.Rows[i]["Plan_ID"].ToString());
                                if (dt.Rows[i]["COUNTRY_ID"].ToString() != "")
                                    tObj1.Country_ID = Convert.ToInt64(dt.Rows[i]["COUNTRY_ID"].ToString());
                                if (dt.Rows[i]["SEVERITY_LEVEL"].ToString() != "")
                                {
                                    tObj1.Severity_Level = Convert.ToInt64(dt.Rows[i]["SEVERITY_LEVEL"].ToString());
                                    switch (Convert.ToInt64(dt.Rows[i]["SEVERITY_LEVEL"].ToString()))
                                    {
                                        case 1:
                                            tObj1.SeverityLevelStr = "High";
                                            break;
                                        case 2:
                                            tObj1.SeverityLevelStr = "Medium";
                                            break;
                                        case 3:
                                            tObj1.SeverityLevelStr = "Low";
                                            break;
                                        case 4:
                                            tObj1.SeverityLevelStr = "Warning";
                                            break;
                                        case 5:
                                            tObj1.SeverityLevelStr = "NA";
                                            break;
                                    }
                                }

                                tObj1.Color = dt.Rows[i]["COLOR"].ToString();
                                if (flag == 0)
                                    tpLst.Add(tObj1);
                            }
                        }
                        else
                        {
                            RegOpsQC = new RegOpsQC();
                            RegOpsQC.sessionCheck = "Validation report by page number is not available for this Job";
                            tpLst.Add(RegOpsQC);
                        }
                    }
                    else
                    {
                        RegOpsQC = new RegOpsQC();
                        RegOpsQC.sessionCheck = "Validation report by page number is not available for this Job";
                        tpLst.Add(RegOpsQC);
                    }
                }
                else
                {
                    RegOpsQC = new RegOpsQC();
                    RegOpsQC.sessionCheck = "Login Page";
                    tpLst.Add(RegOpsQC);
                }
                return tpLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }

        public string DownloadQCHtmlReportForQC(RegOpsQC tpObj)
        {
            string result = "";
            try
            {
                Guid mainId;
                mainId = Guid.NewGuid();
                string desPath = m_DownloadFolderPathQC;
                result = GenerateValidationReportHtmlForQC(tpObj);
                string Delpath = desPath + "//" + tpObj.Job_ID + "-Validation Analysis.html";

                FileInfo file = new FileInfo(Delpath);
                if (file.Exists)
                {
                    file.Delete();
                }
                File.WriteAllText(desPath + "//" + tpObj.Job_ID + "-Validation Analysis.html", result, Encoding.UTF8);
                return tpObj.Job_ID + "-Validation Analysis.html";
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "";
            }
        }
        public string GenerateValidationReportHtmlForQC(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                string validationPlan = string.Empty;
                validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);

                //ds = conn.GetDataSet("select mlib.Library_Value as Country, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,regexp_replace(regexp_replace(regexp_replace( regexp_replace(A.CHECK_PARAMETER,'\\[',''),'\\]',''),'\"',''),',',', ') AS CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID = " + tpObj.ID + ") as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID + ") as TOTALCHECKLIST," +
                //   "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                //   "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%failed%') as failChecklist," +
                //   "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + ") as fixChecklist," +
                //   " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                //   " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL where a.JOB_ID=" + tpObj.ID + " order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER", CommandType.Text, ConnectionState.Open);
                ds = conn.GetDataSet("select mlib.Library_Value as Country, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,A.CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID = " + tpObj.ID + ") as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID + ") as TOTALCHECKLIST," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%failed%') as failChecklist," +
                "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + ") as fixChecklist," +
                " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL where a.JOB_ID=" + tpObj.ID + " order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<head>");
                    sb.AppendLine("<title style='align='center'>");
                    sb.AppendLine("Page-");
                    sb.AppendLine(Guid.NewGuid().ToString());
                    sb.AppendLine("</title>");
                    sb.AppendLine("</head>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<div class='WordSection1'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Analysis</u></b></p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<tbody><tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("</tr>");


                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    //Passed Checklists
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    //failed Checklists
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (tpObj.Job_Type != "QC")
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                    }
                    //Process Time
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROCESSTIME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created By
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created Date
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    TimeZone zone = TimeZone.CurrentTimeZone;
                    string standard = string.Concat(System.Text.RegularExpressions.Regex
                      .Matches(zone.StandardName, "[A-Z]")
                      .OfType<System.Text.RegularExpressions.Match>()
                      .Select(match => match.Value));
                    if (standard == "CUT")
                        standard = "UTC";
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine("</tbody></table>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");

                    //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    //sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    //sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Folder");
                    //sb.AppendLine("</span></b></p>");
                    //sb.AppendLine("</td>");
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan Name");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation Check");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    if (tpObj.Job_Type != "QC")
                    {
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                        sb.AppendLine("</span></b></p>");
                        sb.AppendLine("</td>");
                    }
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("</tr>");

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string checkParameter = string.Empty;
                        if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family"))
                            checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                        else
                            checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                        string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                        string bg_color = "white";
                        string fixedbg_color = "white";
                        string sev_level = "";
                        string color = "black";
                        if (qcStatus.ToLower().Equals("failed") && !ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                        {
                            bg_color = "#f77676c2";
                        }
                        else if (qcStatus.ToLower().Equals("failed") && ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                        {
                            fixedbg_color = "#66ff66";
                        }
                        else if (qcStatus.ToLower().Equals("error"))
                        {
                            bg_color = "#cceeff";
                        }

                        if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                        {
                            sev_level = "High";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                        {
                            sev_level = "Medium";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                        {
                            sev_level = "Low";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                        {
                            sev_level = "Warning";
                        }
                        else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                        {
                            sev_level = "NA";
                        }
                        string Validation = "";
                        if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                        {
                            Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }
                        else
                        {
                            Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }
                        //string Fix = "";
                        //if (ds.Tables[0].Rows[i]["QC_TYPE"].ToString() != "")
                        //{
                        //    if (Convert.ToInt32(ds.Tables[0].Rows[i]["QC_TYPE"].ToString()) == 0)
                        //    {
                        //        Fix = "No";
                        //    }
                        //    else
                        //    {
                        //        Fix = "Yes";
                        //    }
                        //}
                        sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                        //sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        //sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                        //sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                        {
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "/" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                        }
                        else
                        {
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                        }
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + Validation + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + "</span></p>");
                        sb.AppendLine(" </td>");
                        //sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                        ////sb.AppendLine("border-top:none;padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        //sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + Fix + "</span></p>");
                        //sb.AppendLine(" </td>");
                        if (bg_color.Contains("#"))
                        {
                            var color12 = HexToColor(bg_color);
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                        }
                        else
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + bg_color + ";'>");
                        }
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + ds.Tables[0].Rows[i]["COLOR"].ToString() + ";'>");
                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        //sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + sev_level + "</span></p>");
                        //sb.AppendLine(" </td>");
                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                        if (sev_level != "")
                        {
                            sb.AppendLine("<div>");
                            sb.AppendLine("<div>");
                            sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                            sb.AppendLine("</span>");
                            sb.AppendLine("</div>");
                            sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                            sb.AppendLine("</div>");
                        }
                        else
                        {
                            sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                        }
                        sb.AppendLine(" </td>");
                        if (tpObj.Job_Type != "QC")
                        {
                            if (fixedbg_color.Contains("#"))
                            {
                                var color12 = HexToColor(fixedbg_color);
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                            }

                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["Fixed"].ToString() + "</span></p>");
                            sb.AppendLine("</td>");
                        }
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                        sb.AppendLine("</td>");
                        sb.AppendLine("</tr>");

                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</div>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                    //sb.AppendLine("</table>");
                }
                return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "fail";
            }
        }





        public string DownloadQCXlReport(RegOpsQC tpObj)
        {
            string result = "";
            try
            {
                Guid mainId;
                mainId = Guid.NewGuid();
                string desPath = m_DownloadFolderPathQC;
                if (tpObj.ByType == "By Page")
                {
                    result = GenerateValidationReportXlsByPageForQC(tpObj);
                }
                else
                {
                    result = GenerateValidationReportXl(tpObj);
                }

                File.WriteAllText(desPath + "//" + tpObj.Job_ID + "_" + mainId + ".xls", result, Encoding.UTF8);
                return tpObj.Job_ID + "_" + mainId + ".xls";
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "";
            }
        }

        public string GenerateValidationReportXl(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            DateTime dateTime = DateTime.UtcNow.Date;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                var sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] excelflag = sobj.Split(',');
                ds = conn.GetDataSet("select mlib.Library_Value as Country,TEMPLATE_NAME, rs.country_id,case when rsd.severity_level=1 then 'High' when rsd.severity_level=2 then 'Medium' when rsd.severity_level=3 then 'Low' when rsd.severity_level=4 then 'Warning' when rsd.severity_level=5 then 'NA' else '' end as severity_level,rsc.COLOR,A.CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,a.QC_RESULT,replace(replace(a.comments,'<span style=''font-family:symbol''>',''),'</span>','') as COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID = " + tpObj.ID + ") as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=" + tpObj.ID + ") as TOTALCHECKLIST," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%failed%') as failChecklist," +
                "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + ") as fixChecklist," +
                " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime,pr.PREFERENCE_NAME " +
                " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=b.ATTACH_PREDICTFILE where a.JOB_ID=" + tpObj.ID + " order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<table style='width:100%;border: 1px solid ;border-spacing:0'>");
                    //sb.AppendLine("style='width:581.4pt;margin-left:30.2pt;border-collapse:collapse;mso-yfti-tbllook:");
                    //sb.AppendLine("1184;mso-padding-alt:0in 0in 0in 0in'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:100%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                    foreach (var s in excelflag)
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            if (s == "FILE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s.ToString() == "PREFERENCE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Validation")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "CHECK_PARAMETER")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "QC_RESULT")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "severity_level")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Fixed")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Comments")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                        else
                        {
                            if (s == "FILE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s.ToString() == "PREFERENCE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Validation")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "CHECK_PARAMETER")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "QC_RESULT")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "severity_level")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Comments")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                    }
                    sb.AppendLine("</tr>");
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                        string bg_color = "white";
                        if (qcStatus == "Fixed")
                        {
                            bg_color = "#5DE988";
                            //bg_color = "#E8E866";
                        }
                        else if (qcStatus == "Failed")
                        {
                            bg_color = "#f1b2b2";
                        }
                        else
                        {
                            bg_color = "White";
                        }
                        string color = "black";
                        string type = "0";
                        type = ds.Tables[0].Rows[i]["QC_TYPE"].ToString();
                        if (qcStatus.ToLower().Equals("failed") && type.Equals("1"))
                        {
                            bg_color = "#5DE988";
                            color = "black";
                        }
                        else if (qcStatus.ToLower().Equals("pass"))
                        {
                            color = "black";
                        }
                        else if (qcStatus.ToLower().Equals("failed"))
                        {
                            // bg_color = "#E8E866";
                            color = "black";
                        }
                        string Validation = "";
                        if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                        {
                            Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }
                        else
                        {
                            Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }
                        if (type == "1")
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                            foreach (var s in excelflag)
                            {
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + Validation + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine(" none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                        //sb.AppendLine(" padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        //sb.AppendLine("<div>");
                                        //sb.AppendLine("<span class='circled-number' ng-attr-style='text-align: center;background-color:" + ds.Tables[0].Rows[i]["COLOR"].ToString() + "'></span>");
                                        //sb.AppendLine("</div>");
                                        //sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</p>");
                                        //sb.AppendLine(" </td>");
                                    }
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Comments")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                                else
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + Validation + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine(" none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                        //sb.AppendLine(" padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        //sb.AppendLine("<div>");
                                        //sb.AppendLine("<span class='circled-number' ng-attr-style='text-align: center;background-color:" + ds.Tables[0].Rows[i]["COLOR"].ToString() + "'></span>");
                                        //sb.AppendLine("</div>");
                                        //sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</p>");
                                        //sb.AppendLine(" </td>");
                                    }
                                    if (s == "Comments")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                            }
                            sb.AppendLine("</tr>");
                        }
                        else
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                            foreach (var s in excelflag)
                            {
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + Validation + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine(" none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                        //sb.AppendLine(" padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        //sb.AppendLine("<div>");
                                        //sb.AppendLine("<span class='circled-number' ng-attr-style='text-align: center;background-color:" + ds.Tables[0].Rows[i]["COLOR"].ToString() + "'></span>");
                                        //sb.AppendLine("</div>");
                                        //sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</p>");
                                        //sb.AppendLine(" </td>");
                                    }
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Comments")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                                else
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + Validation + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine(" none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;");
                                        //sb.AppendLine(" padding:0in 5.4pt 0in 5.4pt;height:15.0pt'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        //sb.AppendLine("<div>");
                                        //sb.AppendLine("<span class='circled-number' ng-attr-style='text-align: center;background-color:" + ds.Tables[0].Rows[i]["COLOR"].ToString() + "'></span>");
                                        //sb.AppendLine("</div>");
                                        //sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</p>");
                                        //sb.AppendLine(" </td>");
                                    }
                                    if (s == "Comments")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                            }

                            sb.AppendLine("</tr>");
                        }
                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("<table>");
                    sb.AppendLine("<tr>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated By: </b>" + tpObj.UserName);
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated Date: </b>" + dateTime.ToString("dd/MM/yyyy"));
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                    sb.AppendLine("</table>");
                }
                return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "fail";
            }
        }

        public string GenerateValidationReportXlsByPageForQC(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            DateTime dateTime = DateTime.UtcNow.Date;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                var sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] excelflag = sobj.Split(',');
                ds = conn.GetDataSet("select mlib.Library_Value as Country, rs.country_id,case when rsd.severity_level=1 then 'High' when rsd.severity_level=2 then 'Medium' when rsd.severity_level=3 then 'Low' when rsd.severity_level=4 then 'Warning' when rsd.severity_level=5 then 'NA' else '' end as severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,a.PAGE_NUMBER,A.CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID = " + tpObj.ID + ") as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_Page_validation_det where JOB_ID=" + tpObj.ID + ") as TOTALCHECKLIST," +
              "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%passed%') as passChecklist ," +
              "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%failed%') as failChecklist," +
              "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID = " + tpObj.ID + ") as fixChecklist," +
              " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
              " from REGOPS_QC_Page_validation_det a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL where a.JOB_ID=" + tpObj.ID + " order by a.FILE_NAME,rjp.PLAN_ORDER,a.PAGE_NUMBER,c.CHECK_ORDER", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<table style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:100%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");
                    foreach (var s in excelflag)
                    {
                        if (tpObj.Job_Type != "QC")
                        {
                            if (s == "FILE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s.ToString() == "PREFERENCE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "PAGE_NUMBER")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Validation")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "CHECK_PARAMETER")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "QC_RESULT")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "severity_level")
                            {

                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Fixed")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Comments")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                        else
                        {
                            if (s == "FILE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s.ToString() == "PREFERENCE_NAME")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "PAGE_NUMBER")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }

                            if (s == "Validation")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "CHECK_PARAMETER")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "QC_RESULT")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "severity_level")
                            {

                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                            if (s == "Comments")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:12px'>" + s + "");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                    }
                    sb.AppendLine("</tr>");
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                        string bg_color = "white";
                        if (qcStatus == "Fixed")
                        {
                            bg_color = "#5DE988";
                        }
                        else if (qcStatus == "Failed")
                        {
                            bg_color = "#f1b2b2";
                        }
                        else
                        {
                            bg_color = "White";
                        }
                        string color = "black";

                        string type = "0";
                        type = ds.Tables[0].Rows[i]["QC_TYPE"].ToString();
                        if (type.Equals("1"))
                        {
                            bg_color = "#5DE988";
                            color = "black";
                        }
                        else if (qcStatus.ToLower().Equals("pass"))
                        {
                            color = "black";
                        }
                        else if (qcStatus.ToLower().Equals("failed"))
                        {
                            color = "black";
                        }
                        string Validation = "";
                        if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                        {
                            Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }
                        else
                        {
                            Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                        }

                        if (type == "1")
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                            foreach (var s in excelflag)
                            {
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "PAGE_NUMBER")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        {
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</p>");
                                        }
                                        //else
                                        //{
                                        //    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        //    sb.AppendLine(" line-height:normal'>" + "" + "");
                                        //}
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + Validation + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + bg_color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        ////sb.AppendLine("<div>");
                                        ////sb.AppendLine("<span class='circled-number' ng-attr-style='text-align: center;background-color:" + color + "'></span>");
                                        ////sb.AppendLine("</div>");
                                        //sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</p>");
                                        //sb.AppendLine(" </td>");
                                    }
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }

                                    if (s == "Comments")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                                else
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "PAGE_NUMBER")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        {
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</p>");
                                        }
                                        //else
                                        //{
                                        //    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        //    sb.AppendLine(" line-height:normal'>" + "" + "");
                                        //}
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'>" + Validation + "</p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + bg_color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        ////sb.AppendLine("<div>");
                                        ////sb.AppendLine("<span class='circled-number' ng-attr-style='text-align: center;background-color:" + color + "'></span>");
                                        ////sb.AppendLine("</div>");
                                        //sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</p>");
                                        //sb.AppendLine(" </td>");
                                    }
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Comments")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                            }

                            sb.AppendLine("</tr>");
                        }

                        else
                        {
                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:" + bg_color + "'>");
                            foreach (var s in excelflag)
                            {
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "PAGE_NUMBER")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        {
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</p>");
                                        }
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + Validation + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        //sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</span></p>");
                                        //sb.AppendLine("</td>");
                                    }
                                    if (s == "Fixed")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FIXED"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }

                                    if (s == "COMMENTS")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                                else
                                {
                                    if (s == "FILE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s.ToString() == "PREFERENCE_NAME")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "PAGE_NUMBER")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        {
                                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                            sb.AppendLine(" line-height:normal'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</p>");
                                        }
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "Validation")
                                    {
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + Validation + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "CHECK_PARAMETER")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                    if (s == "QC_RESULT")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                        sb.AppendLine(" </td>");
                                    }
                                    if (s == "severity_level")
                                    {
                                        System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                        sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</div>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine(" </td>");
                                        //sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                        //sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        //sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["SEVERITY_LEVEL"].ToString() + "</span></p>");
                                        //sb.AppendLine("</td>");
                                    }
                                    if (s == "COMMENTS")
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;width:100%'>");
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;width:100%;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:12px'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                            }

                            sb.AppendLine("</tr>");
                        }
                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("<table>");
                    sb.AppendLine("<tr>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated By: </b>" + tpObj.UserName);
                    sb.AppendLine("</td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td></td>");
                    sb.AppendLine("<td style='font-size:12px'><b>Generated Date: </b>" + dateTime.ToString("dd/MM/yyyy"));
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                    //sb.AppendLine("</table>");
                }
                return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "fail";
            }
        }



        public string GeneratePageValidationReportHtmlForQC(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                string validationPlan = string.Empty;
                validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
                var temp = tpObj.ISAttachPREDICTTemplate;

                ds = conn.GetDataSet("select mlib.Library_Value as Country,TEMPLATE_NAME, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,a.PAGE_NUMBER,A.CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID, b.JOB_ID,b.JOB_TITLE,b.JOB_DESCRIPTION,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.COMPOSITE_CHECK,c.LIBRARY_VALUE as Validation,a.PARENT_CHECK_ID,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID = " + tpObj.ID + ") as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID=" + tpObj.ID + ") as TOTALCHECKLIST," +
            "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%passed%') as passChecklist ," +
            "(select Count(*) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID = " + tpObj.ID + " and lower(QC_RESULT) like '%failed%') as failChecklist," +
            "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_PAGE_VALIDATION_DET where JOB_ID = " + tpObj.ID + ") as fixChecklist," +
            " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
            " from REGOPS_QC_PAGE_VALIDATION_DET a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=b.ATTACH_PREDICTFILE where a.JOB_ID=" + tpObj.ID + " order by  a.FILE_NAME,rjp.PLAN_ORDER,a.PAGE_NUMBER,c.CHECK_ORDER", CommandType.Text, ConnectionState.Open);
                var Sobj = JsonConvert.DeserializeObject<string>(tpObj.Selected_Column);
                string[] ColumnFlag = Sobj.Split(',');
                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<head>");
                    sb.AppendLine("<title style='align='center'>");
                    sb.AppendLine("Page-");
                    sb.AppendLine(Guid.NewGuid().ToString());
                    sb.AppendLine("</title>");
                    sb.AppendLine("</head>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<div class='WordSection1'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Analysis</u></b></p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<tbody><tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("</tr>");


                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (temp == "1")
                    {
                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Word Template (styles)</span></p>");
                        sb.AppendLine(" </td>");

                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Template_Name"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");



                        sb.AppendLine(" </tr>");
                    }
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    //Passed Checklists
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    //failed Checklists
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (tpObj.Job_Type != "QC")
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                    }
                    //Process Time
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROCESSTIME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created By
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created Date
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    TimeZone zone = TimeZone.CurrentTimeZone;
                    string standard = string.Concat(System.Text.RegularExpressions.Regex
                      .Matches(zone.StandardName, "[A-Z]")
                      .OfType<System.Text.RegularExpressions.Match>()
                      .Select(match => match.Value));
                    if (standard == "CUT")
                        standard = "UTC";
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine("</tbody></table>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");

                    foreach (var sob in ColumnFlag)
                    {
                        if (sob == "FILE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "PREFERENCE_NAME")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan Name");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "PAGE_NUMBER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Page Number");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "Validation")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Validation Check");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "CHECK_PARAMETER")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "QC_RESULT")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (sob == "severity_level")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine("</td>");
                        }
                        if (tpObj.Job_Type != "QC")
                        {

                            if (sob == "Fixed")
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                                sb.AppendLine("</span></b></p>");
                                sb.AppendLine("</td>");
                            }
                        }
                        if (sob == "Comments")
                        {
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                            sb.AppendLine("</span></b></p>");
                            sb.AppendLine(" </td>");
                        }
                    }
                    sb.AppendLine("</tr>");

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (!(ds.Tables[0].Rows[i]["PARENT_CHECK_ID"].ToString() == "" && ds.Tables[0].Rows[i]["COMPOSITE_CHECK"].ToString() == "0"))
                        {
                            string checkParameter = string.Empty;
                            if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family"))
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                            else
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                            string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                            string bg_color = "white";
                            string fixedbg_color = "white";
                            string sev_level = "";
                            string color = "black";
                            if (qcStatus.ToLower().Equals("failed"))
                            {
                                bg_color = "#f77676c2";
                            }
                            else if (qcStatus.ToLower().Equals("error"))
                            {
                                bg_color = "#cceeff";
                            }
                            if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                            {
                                fixedbg_color = "#66ff66";
                            }

                            if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                            {
                                sev_level = "High";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                            {
                                sev_level = "Medium";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                            {
                                sev_level = "Low";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                            {
                                sev_level = "Warning";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                            {
                                sev_level = "NA";
                            }
                            string Validation = "";
                            if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                            {
                                Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            else
                            {
                                Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            foreach (var sobj in ColumnFlag)
                            {
                                if (sobj == "FILE_NAME")
                                {
                                    sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");

                                    if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                                    {
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "/" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    }
                                    else
                                    {
                                        sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "PREFERENCE_NAME")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "PAGE_NUMBER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    if (Convert.ToInt32(ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString()) != 0)
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PAGE_NUMBER"].ToString() + "</span></p>");
                                    else
                                        sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "Validation")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + Validation + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "CHECK_PARAMETER")
                                {
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "QC_RESULT")
                                {
                                    if (bg_color.Contains("#"))
                                    {
                                        var color12 = HexToColor(bg_color);
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + bg_color + ";'>");
                                    }
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                                    sb.AppendLine(" </td>");
                                }
                                if (sobj == "severity_level")
                                {
                                    System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                                    sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                                    if (sev_level != "")
                                    {
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<div>");
                                        sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                        sb.AppendLine("</span>");
                                        sb.AppendLine("</div>");
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                        sb.AppendLine("</div>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                                    }
                                    sb.AppendLine(" </td>");
                                }
                                if (tpObj.Job_Type != "QC")
                                {
                                    if (sobj == "Fixed")
                                    {
                                        if (fixedbg_color.Contains("#"))
                                        {
                                            var color12 = HexToColor(fixedbg_color);
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                        }
                                        else
                                        {
                                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                                        }
                                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                        sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["Fixed"].ToString() + "</span></p>");
                                        sb.AppendLine("</td>");
                                    }
                                }
                                if (sobj == "Comments")
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                    sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                                    sb.AppendLine("</td>");
                                }
                            }
                            sb.AppendLine("</tr>");
                        }
                    }
                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</div>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                }
                return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "fail";
            }
        }

        // Get Word Styles Templates
        public List<WordStyles> GetWordTemplate(WordStyles WordObj)
        {
            List<WordStyles> libLst = new List<WordStyles>();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(WordObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection conn = new Connection();
                conn.connectionstring = m_DummyConn;
                OracleConnection con = new OracleConnection();
                con.ConnectionString = m_DummyConn;
                OracleCommand cmd;
                OracleDataAdapter da;
                DataSet ds = new DataSet();
                string m_Query = string.Empty;
                string[] createDate;
                m_Query = m_Query + "select rj.Template_ID,rj.VERSION,rj.TEMPLATE_NAME,rj.DESCRIPTION,rj.CREATED_DATE,u.First_NAME || ' ' || u.LAST_NAME as USER_NAME,rj.IS_DEFAULT from Regops_Word_Styles_Metadata rj left join USERS u on rj.CREATED_ID = u.USER_ID where rj.status=1 and ";
                if (WordObj.Template_Name != null && WordObj.Template_Name != "")
                {
                    m_Query = m_Query + "Upper(rj.template_name) Like:TemplateName" + " and";
                }
                if (WordObj.Version != null && WordObj.Version != "")
                {
                    m_Query = m_Query + " rj.VERSION=:Version" + " and";
                }
                if (WordObj.Created_By != null && WordObj.Created_By != "")
                {
                    m_Query = m_Query + " Upper(u.First_NAME)||' '||Upper(u.LAST_NAME) Like:CreatedBy" + " and";
                }
                if (!string.IsNullOrEmpty(WordObj.Create_Date))
                {
                    createDate = WordObj.Create_Date.Split('-');
                    m_Query = m_Query + " SUBSTR(rj.CREATED_DATE, 0,9) BETWEEN(SELECT TO_DATE('" + createDate[0].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND  (SELECT TO_DATE('" + createDate[1].Trim() + "', 'MM/DD/YYYY HH:MI:SS AM') FROM DUAL) AND";

                }
                m_Query = m_Query + " rj.template_name is not null order by rj.template_name,rj.VERSION  desc";
                cmd = new OracleCommand(m_Query, con);
                if (WordObj.Template_Name != null && WordObj.Template_Name != "")
                {
                    cmd.Parameters.Add(new OracleParameter("TemplateName", "%" + WordObj.Template_Name.ToUpper() + "%"));
                }
                if (WordObj.Version != null && WordObj.Version != "")
                {
                    cmd.Parameters.Add(new OracleParameter("Version", WordObj.Version));
                }
                if (WordObj.Created_By != null && WordObj.Created_By != "")
                {
                    cmd.Parameters.Add(new OracleParameter("CreatedBy", "%" + WordObj.Created_By.ToUpper() + "%"));
                }

                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                DataTable dt = new DataTable();
                dt = ds.Tables[0];
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        WordStyles ws = new WordStyles();
                        ws.Template_Name = dt.Rows[i]["Template_Name"].ToString();
                        ws.Version = dt.Rows[i]["VERSION"].ToString();
                        ws.Template_ID = Convert.ToInt64(dt.Rows[i]["TEMPLATE_ID"].ToString());
                        ws.Description = dt.Rows[i]["DESCRIPTION"].ToString();
                        ws.Created_Date = Convert.ToDateTime(ds.Tables[0].Rows[i]["CREATED_DATE"].ToString());
                        ws.Created_By = dt.Rows[i]["USER_NAME"].ToString();
                        if (dt.Rows[i]["IS_DEFAULT"].ToString() != null && dt.Rows[i]["IS_DEFAULT"].ToString() != "")
                        {
                            ws.IsDefault = Convert.ToInt64(dt.Rows[i]["IS_DEFAULT"].ToString());
                        }
                        libLst.Add(ws);
                    }
                }
                return libLst;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return libLst;
            }
        }

        //Get Word Styles for Plan
        public List<WordStyles> GetWordStylesbyTemplateId(WordStyles WordObj)
        {
            List<WordStyles> libLst = new List<WordStyles>();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(WordObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection conn = new Connection();
                conn.connectionstring = m_DummyConn;
                OracleConnection con = new OracleConnection();
                con.ConnectionString = m_DummyConn;
                OracleCommand cmd;
                OracleDataAdapter da;
                DataSet ds = new DataSet();
                string m_Query = string.Empty;
                m_Query = m_Query + "select * from REGOPS_WORD_STYLES  where TEMPLATE_ID =:TemplateID";
                cmd = new OracleCommand(m_Query, con);
                cmd.Parameters.Add(new OracleParameter("TemplateID", WordObj.Template_ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                if (conn.Validate(ds))
                {
                    libLst = new DataTable2List().DataTableToList<WordStyles>(ds.Tables[0]);
                }
                return libLst;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return libLst;
            }
        }


        public string EditHyperLinksPreperences(RegOpsQCPreferences tpObj)
        {
            OracleConnection conn = new OracleConnection();
            string m_result = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                conn.ConnectionString = m_DummyConn;
                conn.Open();
                DateTime UpdateDate = DateTime.Now;
                String Date = UpdateDate.ToString("dd-MMM-yyyy , hh:mm:ss");
                string m_Query1 = string.Empty;
                DataSet validDS = new DataSet();

                validDS = con.GetDataSet("SELECT * FROM REGOPS_HYPERLINK_PREFERENCES WHERE lower(TOOL_RESULT)='" + tpObj.Tool_Result.ToLower() + "' AND CHECK_ID=" + tpObj.Check_ID + " AND HEALTH_AGENCY_ID= " + tpObj.Health_Agency_ID + " and PREF_ID !=" + tpObj.Pref_ID + " ", CommandType.Text, ConnectionState.Open);
                if (con.Validate(validDS))
                {
                    return "Duplicate";
                }
                int m_res1 = con.ExecuteNonQuery("Update REGOPS_HYPERLINK_PREFERENCES set CHECK_ID=" + tpObj.Check_ID + ",TOOL_RESULT='" + tpObj.Tool_Result.ToString() + "',HEALTH_AGENCY_ID=" + tpObj.Health_Agency_ID + ",RESULT_ID=" + tpObj.Result_ID + ",COLOR_CODE=" + tpObj.Color_ID + ",STATUS=" + tpObj.Status + ",UPDATED_ID=" + tpObj.Created_ID + ",UPDATED_DATE='" + Date + "' where PREF_ID=" + tpObj.Pref_ID + "", CommandType.Text, ConnectionState.Open);
                if (m_res1 > 0)
                {
                    m_result = "Success";
                }
                else
                {
                    m_result = "Failed";
                }
                return m_result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return m_result;
            }
        }
        public string EditHyperLinksChecks(RegOpsQCPreferences tpObj)
        {
            string m_result = string.Empty;
            try
            {
                Connection con = new Connection();
                con.connectionstring = m_ConnectionString;
                string m_Query1 = string.Empty;
                int m_res1 = con.ExecuteNonQuery("Update CHECKS_LIBRARY set STATUS=" + tpObj.Status + " where LIBRARY_ID=" + tpObj.Library_ID + "", CommandType.Text, ConnectionState.Open);
                if (m_res1 >= 0)
                {
                    m_result = "Success";
                }
                else
                {
                    m_result = "Failed";
                }
                return m_result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return m_result;
            }
        }
        // Code for GetHyperLinksPreperences
        public List<RegOpsQCPreferences> GetHyperLinksPreperences(RegOpsQCPreferences tpObj)
        {
            List<RegOpsQCPreferences> libLst = new List<RegOpsQCPreferences>();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection conn = new Connection();
                conn.connectionstring = m_DummyConn;

                string m_Query = string.Empty;

                m_Query = "SELECT  r.PREF_ID,r.check_id,r.result_id,r.color_code,r.HEALTH_AGENCY_ID,clib.library_value as Check_Name,c.library_value as Health_Agency,r.tool_result,lib1.library_value as Result,lib2.library_value as Color,lib2.code as ColorHexaCode,r.status FROM REGOPS_HYPERLINK_PREFERENCES  r left join library c on c.library_id=r.HEALTH_AGENCY_ID left join library lib1 on lib1.library_id = r.result_id  left join library lib2 on lib2.library_id=r.color_code left join checks_library clib on clib.library_id = r.check_id  ORDER BY PREF_ID desc";

                DataSet ds = new DataSet();
                ds = conn.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQCPreferences libLst1 = new RegOpsQCPreferences();
                        libLst1.Check_ID = Convert.ToInt64(ds.Tables[0].Rows[i]["check_id"]);
                        libLst1.Pref_ID = Convert.ToInt64(ds.Tables[0].Rows[i]["PREF_ID"]);
                        libLst1.Result_ID = Convert.ToInt64(ds.Tables[0].Rows[i]["result_id"]);
                        libLst1.Health_Agency_ID = Convert.ToInt64(ds.Tables[0].Rows[i]["HEALTH_AGENCY_ID"]);
                        libLst1.Color_ID = ds.Tables[0].Rows[i]["color_code"].ToString();
                        libLst1.Check_Name = ds.Tables[0].Rows[i]["CHECK_NAME"].ToString();
                        libLst1.Health_Agency = ds.Tables[0].Rows[i]["HEALTH_AGENCY"].ToString();
                        libLst1.Tool_Result = ds.Tables[0].Rows[i]["TOOL_RESULT"].ToString();
                        libLst1.Result = ds.Tables[0].Rows[i]["RESULT"].ToString();
                        libLst1.Color_Name = ds.Tables[0].Rows[i]["COLOR"].ToString();
                        libLst1.Color_Code = ds.Tables[0].Rows[i]["COLORHEXACODE"].ToString();
                        libLst1.Status = Convert.ToInt64(ds.Tables[0].Rows[i]["STATUS"]);
                        libLst.Add(libLst1);
                    }
                }
                return libLst;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return libLst;
            }
        }
        //Code for Save HyperLinks Preperences 
        public string AddHyperLinksPreperences(RegOpsQCPreferences tpObj)
        {
            OracleConnection conn = new OracleConnection();
            string m_result = string.Empty;
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection con = new Connection();
                con.connectionstring = m_DummyConn;
                conn.ConnectionString = m_DummyConn;
                conn.Open();
                DateTime UpdateDate = DateTime.Now;
                tpObj.Created_Date = UpdateDate;
                DataSet dsSeq1 = new DataSet();
                DataSet validDS = new DataSet();

                validDS = con.GetDataSet("SELECT * FROM REGOPS_HYPERLINK_PREFERENCES WHERE lower(TOOL_RESULT)='" + tpObj.Tool_Result.ToLower() + "' AND CHECK_ID=" + tpObj.Check_ID + " AND HEALTH_AGENCY_ID= " + tpObj.Health_Agency_ID + " ", CommandType.Text, ConnectionState.Open);
                if (con.Validate(validDS))
                {
                    return "Duplicate";
                }

                dsSeq1 = con.GetDataSet("SELECT REGOPS_LINK_PREFERENCES_SEQ.NEXTVAL FROM DUAL", CommandType.Text, ConnectionState.Open);
                if (con.Validate(dsSeq1))
                {
                    tpObj.Pref_ID = Convert.ToInt64(dsSeq1.Tables[0].Rows[0]["NEXTVAL"].ToString());
                }
                string m_Query1 = string.Empty;
                OracleCommand cmd = null;
                cmd = new OracleCommand("INSERT INTO REGOPS_HYPERLINK_PREFERENCES(PREF_ID,CHECK_ID,TOOL_RESULT,HEALTH_AGENCY_ID,RESULT_ID,COLOR_CODE,STATUS,CREATED_ID,CREATED_DATE,UPDATED_ID,UPDATED_DATE) values(:PREF_ID,:CHECK_ID,:TOOL_RESULT,:HEALTH_AGENCY_ID,:RESULT_ID,:COLOR_CODE,:STATUS,:CREATED_ID,:CREATED_DATE,:UPDATED_ID,:UPDATED_DATE)", conn);
                cmd.Parameters.Add(new OracleParameter("PREF_ID", tpObj.Pref_ID));
                cmd.Parameters.Add(new OracleParameter("CHECK_ID", tpObj.Check_ID));
                cmd.Parameters.Add(new OracleParameter("TOOL_RESULT", tpObj.Tool_Result.ToString()));
                cmd.Parameters.Add(new OracleParameter("HEALTH_AGENCY_ID", tpObj.Health_Agency_ID));
                cmd.Parameters.Add(new OracleParameter("RESULT_ID", tpObj.Result_ID));
                cmd.Parameters.Add(new OracleParameter("COLOR_CODE", tpObj.Color_ID));
                cmd.Parameters.Add(new OracleParameter("STATUS", tpObj.Status));
                cmd.Parameters.Add(new OracleParameter("CREATED_ID", tpObj.Created_ID));
                cmd.Parameters.Add(new OracleParameter("CREATED_DATE", tpObj.Created_Date));
                cmd.Parameters.Add(new OracleParameter("UPDATED_ID", tpObj.Created_ID));
                cmd.Parameters.Add(new OracleParameter("UPDATED_DATE", tpObj.Updated_Date));
                int m_Res1 = cmd.ExecuteNonQuery();
                if (m_Res1 > 0)
                {
                    m_result = "Success";
                }
                else
                {
                    m_result = "Failed";
                }
                return m_result;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return m_result;
            }
        }

        /// <summary>
        /// To get all checks irrespective of status
        /// </summary>
        /// <param name="tpObj"></param>
        /// <returns></returns>
        public List<RegOpsQC> GetHyperLinksChecksAll(RegOpsQC tpObj)
        {
            List<RegOpsQC> libLst = new List<RegOpsQC>();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection conn = new Connection();
                conn.connectionstring = m_DummyConn;

                string m_Query = string.Empty;

                m_Query = m_Query + "SELECT LIBRARY_ID as CheckId,PARENT_KEY,library_value as CheckName,STATUS,HELP_TEXT as Description,check_order FROM CHECKS_LIBRARY WHERE LIBRARY_NAME='" + tpObj.Library_Name.ToUpper() + "'  ORDER BY LIBRARY_VALUE";

                DataSet ds = new DataSet();
                ds = conn.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC libLst1 = new RegOpsQC();
                        libLst1.CheckList_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["CHECKID"]);
                        libLst1.Check_Name = ds.Tables[0].Rows[i]["CHECKNAME"].ToString();
                        if (ds.Tables[0].Rows[i]["check_order"].ToString() != "")
                            libLst1.Check_Order_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["check_order"].ToString());
                        libLst1.Description = ds.Tables[0].Rows[i]["DESCRIPTION"].ToString();
                        libLst1.Status = ds.Tables[0].Rows[i]["Status"].ToString();
                        libLst.Add(libLst1);
                    }
                }
                return libLst;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return libLst;
            }
        }
        // Code for Get HyperLinks Checks
        public List<RegOpsQC> GetHyperLinksChecks(RegOpsQC tpObj)
        {
            List<RegOpsQC> libLst = new List<RegOpsQC>();
            try
            {
                string[] m_ConnDetails = GetConnectionInfo(tpObj.Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                Connection conn = new Connection();
                conn.connectionstring = m_DummyConn;

                string m_Query = string.Empty;

                m_Query = m_Query + "SELECT LIBRARY_ID as CheckId,PARENT_KEY,LIBRARY_VALUE as CheckName,STATUS,HELP_TEXT as Description,check_order FROM CHECKS_LIBRARY WHERE LIBRARY_NAME='" + tpObj.Library_Name.ToUpper() + "'  and status = 1 ORDER BY LIBRARY_VALUE";

                DataSet ds = new DataSet();
                ds = conn.GetDataSet(m_Query, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC libLst1 = new RegOpsQC();
                        libLst1.CheckList_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["CHECKID"]);
                        libLst1.Check_Name = ds.Tables[0].Rows[i]["CHECKNAME"].ToString();
                        if (ds.Tables[0].Rows[i]["check_order"].ToString() != "")
                            libLst1.Check_Order_ID = Convert.ToInt32(ds.Tables[0].Rows[i]["check_order"].ToString());
                        libLst1.Description = ds.Tables[0].Rows[i]["DESCRIPTION"].ToString();
                        libLst1.Status = ds.Tables[0].Rows[i]["Status"].ToString();
                        libLst.Add(libLst1);

                    }

                }
                return libLst;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return libLst;
            }
        }







        /// <summary>
        /// get the Job iD sequecnce to create a unique jobID
        /// </summary>
        /// <param name="createdID"></param>
        /// <returns></returns>
        public string GetJobId(Int64 createdID, string jobid)
        {
            OracleConnection con = new OracleConnection();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = GetConnectionInfo(createdID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;

                //DataSet verify = new DataSet();
                //verify = conn.GetDataSet("SELECT count(1) as Max_Length  FROM REGOPS_QC_JOBS", CommandType.Text, ConnectionState.Open);
                //string jobid;             
                //jobid = verify.Tables[0].Rows[0]["Max_Length"].ToString();
                if (jobid != "0")
                {
                    string val1 = (Convert.ToDecimal(jobid)).ToString();
                    return jobid = "JOB" + val1.PadLeft(4, '0');
                }
                else
                {
                    return jobid = "JOB" + "0001";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return "Error";
            }
            finally
            {
                con.Close();
            }

        }








        public string downloadPUpdatedFiles(RegOpsQC tpObj)
        {
            string result = "";
            StringBuilder sb = new StringBuilder();
            try
            {
                string desPath = string.Empty;
                byte[] byteArray = null;
                Connection conn = new Connection();
                int CreatedID = Convert.ToInt32(HttpContext.Current.Session["UserId"]);
                string[] m_ConnDetails = GetConnectionInfo(CreatedID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet dset = conn.GetDataSet("SELECT FILE_NAME,FILE_CONTENT FROM DCM_FILES WHERE FILE_ID=" + tpObj.file_ID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(dset))
                {
                    tpObj.File_Upload_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                    tpObj.File_Name = dset.Tables[0].Rows[0]["FILE_NAME"].ToString();
                    byteArray = (byte[])dset.Tables[0].Rows[0]["FILE_CONTENT"];
                }
                Guid mainId;
                mainId = Guid.NewGuid();
                string m_SourceFolderPath = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_1\\RegOpsPublishSource\\";
                string folderPath = m_SourceFolderPath + "//" + tpObj.Job_ID + "/Output/";
                string m_DownloadFolderPath = ConfigurationManager.AppSettings["SourceFolderPath"].ToString() + "QCFILESORG_1\\RegOpsPublishFiles\\";
                desPath = m_DownloadFolderPath + tpObj.Job_ID;
                string sourcePath = folderPath;
                string fileName = string.Empty;
                string destFile = string.Empty;
                if (Directory.Exists(folderPath))
                {
                    var filesCount = Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories).Length;
                    if (filesCount > 0)
                    {
                        string[] files = Directory.GetFiles(folderPath);
                        string[] folders = Directory.GetDirectories(folderPath);
                        desPath = folderPath.TrimEnd('\\');
                        if (files.Count() > 1)
                        {
                            if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                            {
                                using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                {
                                    //add directory, give it a name
                                    zip.AddDirectory(desPath);
                                    zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                }
                            }
                            result = tpObj.Job_ID + "_Updated" + ".zip";
                        }
                        else if ((files.Count() == 0 && desPath != "" && folders.Count() > 0) || (folders.Count() > 0 && files.Count() > 0))
                        {
                            if (!File.Exists(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip"))
                            {
                                using (ZipFile zip = new ZipFile(Encoding.UTF8))
                                {
                                    //add directory, give it a name
                                    zip.AddDirectory(desPath);
                                    zip.Save(m_DownloadFolderPathQC + tpObj.Job_ID + "_Updated" + ".zip");
                                }
                            }
                            result = tpObj.Job_ID + "_Updated" + ".zip";
                        }
                        else
                        {
                            FileInfo fi = new FileInfo(files[0]);
                            result = tpObj.Job_ID + "/Output/" + fi.Name;
                        }
                    }
                    return result;
                }
                {
                    return "FileNotExists";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return result;
            }
        }

        public string[] GenerateValidationReportManageHtmlforbatchpOc(RegOpsQC tpObj)
        {
            StringBuilder sb = new StringBuilder();
            Connection conn = new Connection();
            string[] m_ConnDetails = new RegOpsAPIActions().getConnectionInfoByOrgIDForVisu(tpObj.Org_Id).Split('|');
            // string[] m_ConnDetails = GetConnectionInfo(2).Split('|');
            m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
            m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
            conn.connectionstring = m_DummyConn;
            DataSet ds = new DataSet();
            string validationPlan = string.Empty;
            string WordTemplateName = string.Empty;
            validationPlan = GetJobValidationPlan(tpObj.Created_ID, tpObj.ID);
            WordTemplateName = GetWordTemplateNames(tpObj.Created_ID, tpObj.ID);
            var temp = tpObj.ISAttachPREDICTTemplate;
            OracleConnection con1 = new OracleConnection();
            con1.ConnectionString = m_DummyConn;
            OracleCommand cmd = new OracleCommand();
            con1.Open();
            OracleDataAdapter da;
            string query = string.Empty;
            string[] resdata = null;
            try
            {

                query = " select mlib.Library_Value as Country,TEMPLATE_NAME, rs.country_id,rsd.severity_level,rsc.COLOR,pr.PREFERENCE_NAME,pr.ID as Plan_ID,case when c.CHECK_UNITS is not null then A.CHECK_PARAMETER || ' ' || c.CHECK_UNITS else A.CHECK_PARAMETER end as CHECK_PARAMETER,a.QC_TYPE,case when a.IS_FIXED=1 then 'Yes' else '' end as Fixed,rp.PROJECT_ID,rp.PROJECT_TITLE, b.JOB_ID,b.JOB_TITLE,b.JOB_TYPE,b.JOB_DESCRIPTION, b.JOB_START_TIME,b.JOB_END_TIME,TO_CHAR(b.CREATED_DATE, 'YYYY/MM/DD HH:MI:SS AM') as CREATED_DATE,c.LIBRARY_VALUE as Validation,c.COMPOSITE_CHECK,a.PARENT_CHECK_ID,a.QC_RESULT,a.COMMENTS,a.FILE_NAME,a.FOLDER_NAME,b.NO_OF_FILES,b.NO_OF_PAGES,lib.LIBRARY_VALUE as ParentCheck,(select u.First_NAME||' '||u.LAST_NAME as USER_NAME from REGOPS_QC_JOBS rj left join USERS u on rj.CREATED_ID=u.USER_ID  where rj.ID =:ID) as USERNAME,(select Count(QC_RESULT) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID=:JOB_ID) as TOTALCHECKLIST," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%passed%') as passChecklist ," +
                "(select Count(*) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID and lower(QC_RESULT) like '%failed%') as failChecklist," +
                "(select SUM(COALESCE(IS_FIXED,0)) from REGOPS_QC_VALIDATION_DETAILS where JOB_ID =:JOB_ID) as fixChecklist," +
                " extract( hour from JOB_END_TIME-JOB_START_TIME )  || ':' || extract(minute from JOB_END_TIME-JOB_START_TIME ) || ':' || round(extract(second from JOB_END_TIME-JOB_START_TIME ), 0) as ProcessTime " +
                " from REGOPS_QC_VALIDATION_DETAILS a left join REGOPS_QC_JOBS b on a.JOB_ID = b.id left join REGOPS_PROJECTS rp on rp.PROJ_ID=b.PROJ_ID left join REGOPS_JOB_PLANS rjp on rjp.JOB_ID=b.ID and rjp.PREFERENCE_ID=a.PREFERENCE_ID left join REGOPS_QC_PREFERENCES pr on pr.ID=a.PREFERENCE_ID left join MASTER_LIBRARY mlib on mlib.LIBRARY_ID=b.COUNTRY_ID left join CHECKS_LIBRARY c on a.CHECKLIST_ID=c.LIBRARY_ID left join CHECKS_LIBRARY lib on lib.LIBRARY_ID=a.PARENT_CHECK_ID left join REGOPS_SEVERITY rs on b.COUNTRY_ID = rs.COUNTRY_ID left join REGOPS_SEVERITY_DETAILS rsd on rs.ID = rsd.SEVERITY_ID and rsd.CHECKLIST_ID = a.CHECKLIST_ID and a.QC_RESULT = 'Failed' left join REGOPS_SEVERITY_COLOR rsc on rsc.SEVERITY_LEVEL = rsd.SEVERITY_LEVEL left join REGOPS_WORD_STYLES_METADATA sty on sty.TEMPLATE_ID=pr.WORD_TEMPLATE_ID and b.attach_word_template=1 where a.JOB_ID=:JOB_ID order by a.FILE_NAME,rjp.PLAN_ORDER,c.CHECK_ORDER";
                cmd = new OracleCommand(query, con1);
                cmd.Parameters.Add(new OracleParameter("JOB_ID", tpObj.ID));
                cmd.Parameters.Add(new OracleParameter("ID", tpObj.ID));
                da = new OracleDataAdapter(cmd);
                da.Fill(ds);
                tpObj.StartTime = ds.Tables[0].Rows[0]["JOB_START_TIME"].ToString();
                tpObj.EndTime = ds.Tables[0].Rows[0]["JOB_END_TIME"].ToString();
                TimeSpan elapsed = DateTime.Parse(tpObj.EndTime).Subtract(DateTime.Parse(tpObj.StartTime));
                tpObj.ProcessTime = elapsed.ToString();
                con1.Close();

                if (conn.Validate(ds))
                {
                    sb.AppendLine("<html>");
                    sb.AppendLine("<head>");
                    sb.AppendLine("<title style='align='center'>");
                    sb.AppendLine("Page-");
                    sb.AppendLine(Guid.NewGuid().ToString());
                    sb.AppendLine("</title>");
                    sb.AppendLine("</head>");
                    sb.AppendLine("<body>");
                    sb.AppendLine("<div class='WordSection1'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='text-align:center;line-height:normal'><b><u>Validation Analysis</u></b></p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Summary</u></p>");
                    sb.AppendLine("<table style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<tbody><tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("<td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine("</tr>");


                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Job Type</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_TYPE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Country</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["Country"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Validation Plan(s)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + validationPlan + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    if (temp == "1")
                    {
                        sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Word Template (styles)</span></p>");
                        sb.AppendLine(" </td>");

                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + WordTemplateName + "</span></p>");
                        sb.AppendLine(" </td>");

                        sb.AppendLine(" </tr>");
                    }
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Description</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["JOB_DESCRIPTION"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project ID</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_ID"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Project Title</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PROJECT_TITLE"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Files Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_FILES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Pages Executed</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["NO_OF_PAGES"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");
                    if (tpObj.Job_Type != "Publishing")
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Checks Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Checks</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        if (tpObj.Job_Type != "QC")
                        {
                            sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Checks</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                        }
                    }
                    else
                    {
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Total Rules Executed</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["TOTALCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //Passed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Passed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["PASSCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        //failed Checklists
                        sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Failed Rules</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                        sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["FAILCHECKLIST"].ToString() + "</span></p>");
                        sb.AppendLine(" </td>");
                        sb.AppendLine(" </tr>");
                        if (tpObj.Job_Type != "QC")
                        {
                            sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Fixed Rules</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                            sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["fixChecklist"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");
                            sb.AppendLine(" </tr>");
                        }
                    }
                    //Process Time
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Process Time(HH:MM:SS)</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + tpObj.ProcessTime + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created By
                    sb.AppendLine(" <tr style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created By</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["USERNAME"].ToString() + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    //Created Date
                    sb.AppendLine(" <tr style='width:100%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");
                    sb.AppendLine(" normal'><span style='color:black;font-family:Calibri;font-size:medium'>Created Date</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" <td style='width:40%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine(" <p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;line-height:");

                    TimeZone zone = TimeZone.CurrentTimeZone;
                    string standard = string.Concat(System.Text.RegularExpressions.Regex
                      .Matches(zone.StandardName, "[A-Z]")
                      .OfType<System.Text.RegularExpressions.Match>()
                      .Select(match => match.Value));
                    if (standard == "CUT")
                        standard = "UTC";
                    sb.AppendLine("normal'><span style='color:black;font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[0]["CREATED_DATE"].ToString() + "&nbsp;" + standard + "</span></p>");
                    sb.AppendLine(" </td>");
                    sb.AppendLine(" </tr>");

                    sb.AppendLine("</tbody></table>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal'>&nbsp;</p>");
                    sb.AppendLine("<p class='MsoNormal' style='line-height:normal;color:blue'><u>Validation Details</u></p>");

                    sb.AppendLine("<table style='width:80%;border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<thead>");
                    sb.AppendLine("<tr style='width:80%;border: 1px solid ;border-spacing:0;background-color:lightgrey;'>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>File Name");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Plan Name");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    if (tpObj.Job_Type != "Publishing")
                    {
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Check");
                        sb.AppendLine("</span></b></p>");
                        sb.AppendLine("</td>");
                    }
                    else
                    {
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Publishing Rule");
                        sb.AppendLine("</span></b></p>");
                        sb.AppendLine("</td>");
                    }
                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Parameters");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Result");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Severity");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine("</td>");
                    if (tpObj.Job_Type != "QC")
                    {
                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                        sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                        sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Fixed");
                        sb.AppendLine("</span></b></p>");
                        sb.AppendLine("</td>");
                    }

                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                    sb.AppendLine("<p class='MsoNormal' align='center' style='margin-bottom:0in;margin-bottom:.0001pt;");
                    sb.AppendLine("text-align:center;line-height:normal'><b><span style='color:black;font-family:Calibri;font-size:medium'>Comments");
                    sb.AppendLine("</span></b></p>");
                    sb.AppendLine(" </td>");


                    sb.AppendLine("</tr>");

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (!(ds.Tables[0].Rows[i]["PARENT_CHECK_ID"].ToString() == "" && ds.Tables[0].Rows[i]["COMPOSITE_CHECK"].ToString() == "0"))
                        {
                            string checkParameter = string.Empty;
                            if (ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString() != "" && (ds.Tables[0].Rows[i]["Validation"].ToString() == "Table - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Paragraph - List Bullets/List Numbers Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Exception Font Family" || ds.Tables[0].Rows[i]["Validation"].ToString() == "Valid Version(s)"))
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString().Replace("\\[", "").Replace("\\]", "").Replace("\\", "").Replace("\"[", "").Replace("]\"", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace(",", ", ");
                            else
                                checkParameter = ds.Tables[0].Rows[i]["CHECK_PARAMETER"].ToString();
                            string qcStatus = ds.Tables[0].Rows[i]["QC_RESULT"].ToString();
                            string bg_color = "white";
                            string fixedbg_color = "white";
                            string sev_level = "";
                            string color = "black";
                            if (qcStatus.ToLower().Equals("failed"))
                            {
                                bg_color = "#f77676c2";
                            }
                            else if (qcStatus.ToLower().Equals("error"))
                            {
                                bg_color = "#cceeff";
                            }
                            if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower().Equals("yes"))
                            {
                                fixedbg_color = "#66ff66";
                            }
                            if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "1")
                            {
                                sev_level = "High";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "2")
                            {
                                sev_level = "Medium";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "3")
                            {
                                sev_level = "Low";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "4")
                            {
                                sev_level = "Warning";
                            }
                            else if (ds.Tables[0].Rows[i]["severity_level"].ToString() == "5")
                            {
                                sev_level = "NA";
                            }
                            string Validation = "";
                            if (ds.Tables[0].Rows[i]["ParentCheck"].ToString() != "")
                            {
                                Validation = ds.Tables[0].Rows[i]["ParentCheck"].ToString() + "->" + ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }
                            else
                            {
                                Validation = ds.Tables[0].Rows[i]["VALIDATION"].ToString();
                            }

                            sb.AppendLine(" <tr style='width:80%;border: 1px solid ;border-spacing:0;'>");
                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");

                            if (ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() != "")
                            {
                                if (ds.Tables[0].Rows[i]["FILE_NAME"].ToString() != "")
                                {
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "\\" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                                }
                                else
                                {
                                    sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FOLDER_NAME"].ToString() + "</span></p>");
                                }

                            }
                            else
                            {
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["FILE_NAME"].ToString() + "</span></p>");
                            }
                            sb.AppendLine(" </td>");

                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["PREFERENCE_NAME"].ToString() + "</span></p>");
                            sb.AppendLine(" </td>");


                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + Validation + "</span></p>");
                            sb.AppendLine(" </td>");

                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + checkParameter + "</span></p>");
                            sb.AppendLine(" </td>");
                            if (tpObj.Job_Type != "QC")
                            {
                                if (bg_color.Contains("#"))
                                {
                                    if (ds.Tables[0].Rows[i]["FIXED"].ToString().ToLower() != "yes")
                                    {

                                        var color12 = HexToColor(bg_color);
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                    }
                                    else
                                    {
                                        sb.AppendLine("<td style='border: 1px solid ;border-spacing:0;'>");
                                    }
                                }
                                else
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + bg_color + ";'>");
                                }

                            }
                            else
                            {
                                sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + bg_color + ";'>");
                            }
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            if (ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != "" && ds.Tables[0].Rows[i]["QC_RESULT"].ToString() != null)
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["QC_RESULT"].ToString() + "</span></p>");
                            else
                                sb.AppendLine(" line-height:normal'><span style='color:font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                            sb.AppendLine(" </td>");

                            System.Drawing.Color color1 = (System.Drawing.Color)System.Drawing.ColorTranslator.FromHtml(ds.Tables[0].Rows[i]["COLOR"].ToString());
                            sb.AppendLine(" <td style='border: 1px solid ;border-spacing:0'>");
                            if (sev_level != "")
                            {
                                sb.AppendLine("<div>");
                                sb.AppendLine("<div>");
                                sb.AppendLine("<span style='border: 2px solid " + "rgba(" + color1.R + "," + color1.G + "," + color1.B + "," + color1.A + ")" + ";border-radius: 50%;font-size: 1rem;display: flex;justify-content: center;align-items: center;width: 1em;height: 1em;background-color:rgba(" + color1.R + ", " + color1.G + ", " + color1.B + ", " + color1.A + ")'>");
                                sb.AppendLine("</span>");
                                sb.AppendLine("</div>");
                                sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'>" + sev_level + "</div>");
                                sb.AppendLine("</div>");
                            }
                            else
                            {
                                sb.AppendLine("<div style='margin-top: -16px;margin-left: 23px;'></div></div>");
                            }
                            sb.AppendLine(" </td>");
                            if (tpObj.Job_Type != "QC")
                            {
                                if (fixedbg_color.Contains("#"))
                                {
                                    var color12 = HexToColor(fixedbg_color);
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + "rgba(" + color12.R + "," + color12.G + "," + color12.B + "," + color12.A + ")" + ";'>");
                                }
                                else
                                {
                                    sb.AppendLine("<td style='border: 1px solid ;border-spacing:0; background-color:" + fixedbg_color + ";'>");
                                }
                                sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                                sb.AppendLine("line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["Fixed"].ToString() + "</span></p>");
                                sb.AppendLine("</td>");
                            }
                            sb.AppendLine("<td style='border: 1px solid ;border-spacing:0'>");
                            sb.AppendLine("<p class='MsoNormal' style='margin-bottom:0in;margin-bottom:.0001pt;");
                            if (ds.Tables[0].Rows[i]["COMMENTS"].ToString() != "" && ds.Tables[0].Rows[i]["COMMENTS"].ToString() != null)
                                sb.AppendLine(" line-height:normal'><span style='color:" + color + ";font-family:Calibri;font-size:medium'>" + ds.Tables[0].Rows[i]["COMMENTS"].ToString() + "</span></p>");
                            else
                                sb.AppendLine(" line-height:normal'><span style='font-family:Calibri;font-size:medium'>" + "" + "</span></p>");
                            sb.AppendLine(" </td>");
                        }
                        sb.AppendLine("</tr>");
                    }

                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</thead>");
                    sb.AppendLine("</table>");
                    sb.AppendLine("</div>");
                    sb.AppendLine("</body>");
                    sb.AppendLine("</html>");
                }

                Guid mainId;
                mainId = Guid.NewGuid();
                string desPath = m_DownloadFolderPathQC + mainId;
                Directory.CreateDirectory(desPath);
                File.WriteAllText(desPath + "\\" + tpObj.Job_ID + "-Validation Analysis.html", sb.ToString(), Encoding.UTF8);
                resdata = new string[2];
                resdata[0] = desPath;
                resdata[1] = tpObj.Job_ID + "-Validation Analysis.html";
                return resdata;
                //Directory.CreateDirectory(desPath);
                //return sb.ToString();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return null;
            }
        }
    }
}




