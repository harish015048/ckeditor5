using System;
using System.Collections.Generic;
using System.Linq;
using Aspose.Words;
using Aspose.Words.Layout;
using Aspose.Words.Tables;
using Aspose.Words.Fields;
using CMCai.Models;
using System.Configuration;
using Aspose.Words.Drawing;
using System.Text.RegularExpressions;
using Aspose.Words.Lists;
using Aspose.Words.Replacing;
using System.Data;
using System.Globalization;
using System.Drawing;
using Aspose.Words.Notes;
using Aspose.Words.Markup;

namespace CMCai.Actions
{
    public class WordTableActions
    {


        /// <summary>
        /// Tables content alignment - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void AlignTableContent(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            bool TableFlag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            string HoriAlignChkNme = string.Empty;
            string VertAlignChkNme = string.Empty;
            string HoriAlignChkPara = string.Empty;
            string VertiAlignChkPara = String.Empty;
            Int64 HoriAlignChkType = 0;
            Int64 VertiAlignChkType = 0;
            rObj.CHECK_START_TIME = DateTime.Now;
            ChLst = ChLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
            foreach (RegOpsQC chlst in ChLst)
            {
                chlst.Parent_Checklist_ID = rObj.CheckList_ID;
                chlst.JID = rObj.JID;
                chlst.Job_ID = rObj.Job_ID;
                chlst.Folder_Name = rObj.Folder_Name;
                chlst.File_Name = rObj.File_Name;
                chlst.Created_ID = rObj.Created_ID;

                if (chlst.Check_Name == "Horizontal Alignment")
                {
                    HoriAlignChkNme = chlst.Check_Name;
                    HoriAlignChkPara = chlst.Check_Parameter;
                    HoriAlignChkType = chlst.Check_Type;
                }
                else if (chlst.Check_Name == "Vertical Alignment")
                {
                    VertAlignChkNme = chlst.Check_Name;
                    VertiAlignChkPara = chlst.Check_Parameter;
                    VertiAlignChkType = chlst.Check_Type;
                }
            }
            try
            {
                if (HoriAlignChkPara != "" || VertiAlignChkPara != null)
                {
                    CellVerticalAlignment VAlign = CellVerticalAlignment.Center;
                    ParagraphAlignment HAlign = ParagraphAlignment.Center;
                    switch (HoriAlignChkPara)
                    {
                        case "Left":
                            HAlign = ParagraphAlignment.Left;
                            break;
                        case "Center":
                            HAlign = ParagraphAlignment.Center;
                            break;
                        case "Right":
                            HAlign = ParagraphAlignment.Right;
                            break;
                    }
                    switch (VertiAlignChkPara)
                    {
                        case "Top":
                            VAlign = CellVerticalAlignment.Top;
                            break;
                        case "Center":
                            VAlign = CellVerticalAlignment.Center;
                            break;
                        case "Bottom":
                            VAlign = CellVerticalAlignment.Bottom;
                            break;
                    }
                    foreach (Section set in doc.Sections)
                    {
                        foreach (Table tbl in set.GetChildNodes(NodeType.Table, true))
                        {
                            TableFlag = true;
                            tbl.StyleOptions = TableStyleOptions.FirstColumn | TableStyleOptions.RowBands | TableStyleOptions.FirstRow;
                            if (HoriAlignChkPara != "" && VertiAlignChkPara != "")
                            {
                                foreach (Row row in tbl.Rows)
                                {
                                    List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                    if (Captionstyle.Count == 0)
                                    {
                                        foreach (Cell cell in row.Cells)
                                        {
                                            foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                            {
                                                //For vertical alignment
                                                if (cell.CellFormat.VerticalAlignment != VAlign)
                                                {
                                                    flag = true;
                                                    if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                    else if (layout.GetStartPageIndex(pr) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr));
                                                }
                                                //For horizontal alignment
                                                if (pr.ParagraphFormat.Alignment != HAlign)
                                                {
                                                    flag = true;
                                                    if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                    else if (layout.GetStartPageIndex(pr) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (HoriAlignChkPara != "" || VertiAlignChkPara != "")
                            {
                                if (HoriAlignChkPara != "")
                                {
                                    foreach (Row row in tbl.Rows)
                                    {
                                        List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                        if (Captionstyle.Count == 0)
                                        {

                                            foreach (Cell cell in row.Cells)
                                            {
                                                foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                                {
                                                    if (pr.ParagraphFormat.Alignment != HAlign)
                                                    {
                                                        flag = true;
                                                        if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                            lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                        else if (layout.GetStartPageIndex(pr) != 0)
                                                            lst.Add(layout.GetStartPageIndex(pr));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (VertiAlignChkPara != "")
                                {
                                    foreach (Row row in tbl.Rows)
                                    {
                                        List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                        if (Captionstyle.Count == 0)
                                        {

                                            foreach (Cell cell in row.Cells)
                                            {
                                                foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                                {
                                                    if (cell.CellFormat.VerticalAlignment != VAlign)
                                                    {
                                                        flag = true;
                                                        if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                            lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                        else if (layout.GetStartPageIndex(pr) != 0)
                                                            lst.Add(layout.GetStartPageIndex(pr));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (TableFlag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no Tables";
                }
                else if (flag == true)
                {
                    if (lst.Count > 0)
                    {
                        if (VertiAlignChkPara != "" && HoriAlignChkPara != "")
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables  Content  is not in " + VertiAlignChkPara + HoriAlignChkPara + " alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables  Content  is not in " + VertiAlignChkPara + HoriAlignChkPara + " alignment";
                            rObj.PageNumbersLst = lst1;
                        }
                        else if (VertiAlignChkPara != "")
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables  Content  is not in " + VertiAlignChkPara + " alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables  Content  is not in " + VertiAlignChkPara + " alignment";
                            rObj.PageNumbersLst = lst1;
                        }
                        else if (HoriAlignChkPara != "")
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables  Content  is not in " + HoriAlignChkPara + " alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables  Content  is not in " + HoriAlignChkPara + " alignment";
                            rObj.PageNumbersLst = lst1;
                        }
                        else
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables  Content  is not in given alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables  Content  is not in given alignment";
                            rObj.PageNumbersLst = lst1;
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Tables Content is not in given alignment";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Tables content is aligned to given alignment";
                }
                if (HoriAlignChkType == 1 || VertiAlignChkType == 1)
                {
                    rObj.Check_Type = 1;
                }
                else
                {
                    rObj.Check_Type = 0;
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Tables content alignment - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixAlignTableContent(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            bool Fixflag = false;
            bool TableFlag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            string HoriAlignChkNme = string.Empty;
            string VertAlignChkNme = string.Empty;
            string HoriAlignChkPara = string.Empty;
            string VertiAlignChkPara = String.Empty;
            Int64 HoriCheck_Type = 0;
            Int64 VertiCheck_Type = 0;
            ChLst = ChLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
            foreach (RegOpsQC chlst in ChLst)
            {
                chlst.Parent_Checklist_ID = rObj.CheckList_ID;
                chlst.JID = rObj.JID;
                chlst.Job_ID = rObj.Job_ID;
                chlst.Folder_Name = rObj.Folder_Name;
                chlst.File_Name = rObj.File_Name;
                chlst.Created_ID = rObj.Created_ID;
                if (chlst.Check_Name == "Horizontal Alignment")
                {
                    HoriAlignChkNme = chlst.Check_Name;
                    HoriAlignChkPara = chlst.Check_Parameter;
                    HoriCheck_Type = chlst.Check_Type;
                }
                else if (chlst.Check_Name == "Vertical Alignment")
                {
                    VertAlignChkNme = chlst.Check_Name;
                    VertiAlignChkPara = chlst.Check_Parameter;
                    VertiCheck_Type = chlst.Check_Type;
                }
            }
            try
            {
                //doc = new Document(rObj.DestFilePath);
                if (HoriAlignChkPara != "" || VertiAlignChkPara != null)
                {
                    CellVerticalAlignment VAlign = CellVerticalAlignment.Center;
                    ParagraphAlignment HAlign = ParagraphAlignment.Center;
                    switch (HoriAlignChkPara)
                    {
                        case "Left":
                            HAlign = ParagraphAlignment.Left;
                            break;
                        case "Center":
                            HAlign = ParagraphAlignment.Center;
                            break;
                        case "Right":
                            HAlign = ParagraphAlignment.Right;
                            break;
                    }
                    switch (VertiAlignChkPara)
                    {
                        case "Top":
                            VAlign = CellVerticalAlignment.Top;
                            break;
                        case "Center":
                            VAlign = CellVerticalAlignment.Center;
                            break;
                        case "Bottom":
                            VAlign = CellVerticalAlignment.Bottom;
                            break;
                    }
                    foreach (Section set in doc.Sections)
                    {
                        foreach (Table tbl in set.GetChildNodes(NodeType.Table, true))
                        {

                            TableFlag = true;
                            tbl.StyleOptions = TableStyleOptions.FirstColumn | TableStyleOptions.RowBands | TableStyleOptions.FirstRow;
                            if (HoriAlignChkPara != "" && VertiAlignChkPara != "" && HoriCheck_Type == 1 && VertiCheck_Type == 1)
                            {
                                foreach (Row row in tbl.Rows)
                                {
                                    List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                    if (Captionstyle.Count == 0)
                                    {
                                        foreach (Cell cell in row.Cells)
                                        {
                                            foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                            {
                                                if (cell.CellFormat.VerticalAlignment != VAlign)
                                                {
                                                    Fixflag = true;
                                                    cell.CellFormat.VerticalAlignment = VAlign;
                                                }
                                                if (pr.ParagraphFormat.Alignment != HAlign)
                                                {
                                                    Fixflag = true;
                                                    pr.ParagraphFormat.Alignment = HAlign;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (HoriAlignChkPara != "" || VertiAlignChkPara != "")
                            {
                                if (VertiAlignChkPara != "" && VertiCheck_Type == 1)
                                {
                                    foreach (Row row in tbl.Rows)
                                    {
                                        List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                        if (Captionstyle.Count == 0)
                                        {
                                            foreach (Cell cell in row.Cells)
                                            {
                                                foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                                {
                                                    if (cell.CellFormat.VerticalAlignment != VAlign)
                                                    {
                                                        Fixflag = true;
                                                        cell.CellFormat.VerticalAlignment = VAlign;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (HoriAlignChkPara != "" && HoriCheck_Type == 1)
                                {
                                    foreach (Row row in tbl.Rows)
                                    {
                                        List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                        if (Captionstyle.Count == 0)
                                        {

                                            foreach (Cell cell in row.Cells)
                                            {
                                                foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                                {
                                                    if (pr.ParagraphFormat.Alignment != HAlign)
                                                    {
                                                        Fixflag = true;
                                                        pr.ParagraphFormat.Alignment = HAlign;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (TableFlag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no Tables";
                }
                else if (Fixflag == true)
                {
                    if (rObj.Comments != "")
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments += ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                    else
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "Tables Content is aligned to given alignment";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Tables content is in given alignment";
                }
                rObj.FIX_END_TIME = DateTime.Now;
                //doc.Save(rObj.DestFilePath);
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Table AutoFit To Window - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void TableAutoFitToWindow(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (var i = 0; i < tables.Count; i++)
                {
                    Table table = (Table)tables[i];
                    //inner table finding
                    bool isInnerTbl = CheckInnerTable(table);
                    PreferredWidth wid = (PreferredWidth)table.PreferredWidth;
                    Paragraph pr = new Paragraph(doc);

                    if (table.PreviousSibling != null && table.PreviousSibling.NodeType == NodeType.Paragraph)
                    {
                        pr = (Paragraph)table.PreviousSibling;
                    }
                    if (!isInnerTbl && (table.AllowAutoFit != true || wid.Value != 100) && !pr.Range.Text.TrimStart().StartsWith("Figure") && !pr.Range.Text.Contains("SEQ Figure"))
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(table) != 0)
                            lst.Add(layout.GetStartPageIndex(table));

                    }


                }

                //        }
                //    }
                //}
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Tables are in AutoFit To Window";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            string Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables are not in autofit to window in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables are not in autofit to window";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables are not in autofit to window";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Table AutoFit To Window - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTableAutoFitToWindow(RegOpsQC rObj, Document doc)
        {
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (var i = 0; i < tables.Count; i++)
                {
                    Table table = (Table)tables[i];
                    bool isInnerTbl = CheckInnerTable(table);
                    PreferredWidth wid = (PreferredWidth)table.PreferredWidth;
                    Paragraph pr = new Paragraph(doc);

                    if (table.PreviousSibling != null && table.PreviousSibling.NodeType == NodeType.Paragraph)
                    {
                        pr = (Paragraph)table.PreviousSibling;
                    }
                    if (!isInnerTbl && !pr.Range.Text.TrimStart().StartsWith("Figure") && !pr.Range.Text.Contains("SEQ Figure"))
                    {
                        //table.PreferredWidth = PreferredWidth.FromPercent(100);
                        table.AutoFit(AutoFitBehavior.AutoFitToWindow);

                        isFixed = true;
                    }

                    //if (!isInnerTbl && (wid.Value != 100) && !pr.Range.Text.TrimStart().StartsWith("Figure") && !pr.Range.Text.Contains("SEQ Figure"))
                    //{

                    //    if (wid.Value <= 100)
                    //    {

                    //        table.PreferredWidth = PreferredWidth.FromPercent(100);
                    //        table.AutoFit(AutoFitBehavior.AutoFitToWindow);


                    //    }
                    //    else if (wid.Value > 100)
                    //    {
                    //        table.PreferredWidth = PreferredWidth.FromPercent(100);
                    //        table.AutoFit(AutoFitBehavior.AutoFitToWindow);
                    //    }
                    //    isFixed = true;
                    //}
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (isFixed)
                    {
                        rObj.Is_Fixed = 1;

                        rObj.Comments += ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";

                    }
                }
                // doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Table AutoFit To Window - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void EnsureLetteredFootnote(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                
                if(doc.FootnoteOptions.StartNumber != 1)
                {
                    flag = true;
                    if (layout.GetStartPageIndex(doc) != 0)
                        lst.Add(layout.GetStartPageIndex(doc));
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Footnotes are in sequence";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            string Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Footnotes are not in sequence in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Footnotes are not in sequence in: ";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Footnotes are not in sequence in: ";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }



        /// <summary>
        /// Table AutoFit To Window - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixEnsureletteredFootnote(RegOpsQC rObj, Document doc)
        {
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);


                if (doc.FootnoteOptions.StartNumber != 1)
                {
                    isFixed = true;
                    doc.FootnoteOptions.StartNumber = 1;
                }

            
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (isFixed)
                    {
                        rObj.Is_Fixed = 1;

                        rObj.Comments += ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";

                    }
                }
                // doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }



        /// <summary>
        /// Footnotes entered below the image are in given style -check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FigureFootnotesgivenstyle(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                Style ExistingStyle = null;
                ExistingStyle = doc.Styles.Where(x => ((Style)x).Name == rObj.Check_Parameter.ToString() || ((Style)x).StyleIdentifier.ToString() == rObj.Check_Parameter.ToString()).FirstOrDefault<Style>();
                if (ExistingStyle == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Given style is not in the document";
                }
                else
                {
                    foreach (Aspose.Words.Drawing.Shape shape in figures)
                    {
                        if (shape.ParentParagraph != null && shape.ParentParagraph.NextSibling != null)
                        {
                            if (shape.ParentParagraph.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph pr = (Paragraph)shape.ParentNode.NextSibling;
                                while (!pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 10)) && layout.GetStartPageIndex(pr) != 0)
                                {
                                    Paragraph prc = new Paragraph(doc);
                                    if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                    {
                                        prc = (Paragraph)pr.NextSibling;
                                        if (pr.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                        {
                                            flag = true;
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                        if (!prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 10)) && layout.GetStartPageIndex(prc) != 0)
                                        {
                                            pr = prc;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                
                if (figures.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no figures";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Tables are in AutoFit To Window";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            string Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Figures are not in given style: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Figures are not in given style";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Figures are not in given style";
                        }
                    }

                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }



        /// <summary>
        /// Footnotes entered below the image are in given style - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixFigureFootnotesgivenstyle(RegOpsQC rObj, Document doc)
        {
            //string Pagenumber = string.Empty;
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string res = string.Empty;
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Aspose.Words.Drawing.Shape shape in figures)
                {
                    if (shape.ParentParagraph != null && shape.ParentParagraph.NextSibling != null)
                    {
                        if (shape.ParentParagraph.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr = (Paragraph)shape.ParentNode.NextSibling;
                            while (!pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 10)) && layout.GetStartPageIndex(pr) != 0)
                            {
                                Paragraph prc = new Paragraph(doc);
                                if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                {
                                    prc = (Paragraph)pr.NextSibling;
                                    if (pr.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                    {
                                        pr.ParagraphFormat.StyleName = rObj.Check_Parameter;
                                        isFixed = true;
                                    }
                                    if (!prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 10)) && layout.GetStartPageIndex(prc) != 0)
                                    {
                                        pr = prc;
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }

                    }
                }
                if (figures.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no figures";
                }
                else
                {
                    if (isFixed)
                    {
                        //List<int> lstfx = lst.Distinct().ToList();
                        //lstfx.Sort();
                        //Pagenumber = string.Join(", ", lstfx.ToArray());
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                }
                // doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }






        /// <summary>
        /// Table and Figure are manually numbered - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Tableandfiguresmanuallynumbered(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Appendix")).ToList();

                foreach (FieldStart fld in SeqStartLst)
                {
                    if (fld.ParentNode.NextSibling != null)
                    {
                        if (fld.ParentNode.NextSibling.NodeType == NodeType.Table)
                        {

                            Table tbl = (Table)fld.ParentNode.NextSibling;
                            List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                            if (fstart.Count > 0)
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(tbl) != 0)
                                    lst.Add(layout.GetStartPageIndex(tbl));
                            }
                        }
                    }
                }


                List<Node> SeqStartLst1 = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Appendix")).ToList();

                foreach (FieldStart fld in SeqStartLst1)
                {
                    if (fld.ParentNode.NextSibling != null)
                    {
                        if (fld.ParentNode.NextSibling.NodeType == NodeType.Shape || fld.ParentNode.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr = (Paragraph)fld.ParentNode.NextSibling;
                            List<Node> fstart = pr.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE"))).ToList();
                            if (fstart.Count > 0)
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(pr) != 0)
                                    lst.Add(layout.GetStartPageIndex(pr));
                            }
                        }
                    }
                }

                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Tables and Figures contains no sequence number";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            string Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables and Figures contains sequence number in:" + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables and Figures contains sequence number ";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables and Figures contains sequence number";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Table should have outside borders - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void TableShouldhaveborders(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);

                foreach (Table table in tables)
                {

                    foreach (Row row in table.Rows)
                    {
                        if (row.RowFormat.Borders.Top.IsVisible == false || row.RowFormat.Borders.Bottom.IsVisible == false)
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(row) != 0)
                                lst.Add(layout.GetStartPageIndex(row));
                        }
                    }

                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Table borders are present";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables borders width is not correct in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables borders width is not correct";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables borders width is not correct";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Table should have outside borders - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTableShouldhaveborders(RegOpsQC rObj, Document doc)
        {
            //string Pagenumber = string.Empty;
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string res = string.Empty;
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);

                foreach (Table table in tables)
                {

                    foreach (Row row in table.Rows)
                    {
                        if (row.RowFormat.Borders.Top.IsVisible == false || row.RowFormat.Borders.Bottom.IsVisible == false)
                        {

                            table.SetBorder(BorderType.Left, LineStyle.Single, 1.5, Color.Black, true);
                            table.SetBorder(BorderType.Right, LineStyle.Single, 1.5, Color.Black, true);
                            table.SetBorder(BorderType.Top, LineStyle.Single, 1.5, Color.Black, true);
                            table.SetBorder(BorderType.Bottom, LineStyle.Single, 1.5, Color.Black, true);
                            isFixed = true;
                        }
                    }

                }


                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (isFixed)
                    {
                        //List<int> lstfx = lst.Distinct().ToList();
                        //lstfx.Sort();
                        //Pagenumber = string.Join(", ", lstfx.ToArray());
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                }
                // doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Figure Footnote Alignemt-Check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void FigureFootnotesAlignment(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool Tblflag = true;
            bool ftntexist = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                List<int> fnpositionlst = new List<int>();

                NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Aspose.Words.Drawing.Shape shape in figures)
                {
                    if (shape.ParentParagraph != null && shape.ParentParagraph.NextSibling != null)
                    {
                        if (shape.ParentParagraph.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)shape.ParentNode.NextSibling;
                            if (!pr1.Range.Text.StartsWith("\f") && (pr1.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr1.Range.Text.Trim() == "" || (pr1.Runs.Count > 0 && pr1.Runs[0].Font.Size < 10)) && layout.GetStartPageIndex(pr1) != 0)
                            {
                                ftntexist = true;
                                if (rObj.Check_Parameter == "Center")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                    {
                                        if (layout.GetStartPageIndex(pr1) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr1));
                                    }
                                }
                                else if (rObj.Check_Parameter == "Left")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                    {
                                        if (layout.GetStartPageIndex(pr1) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr1));
                                    }
                                }
                                else if (rObj.Check_Parameter == "Right")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                    {
                                        if (layout.GetStartPageIndex(pr1) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr1));
                                    }
                                }
                                else if (rObj.Check_Parameter == "Justify")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                    {
                                        if (layout.GetStartPageIndex(pr1) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr1));
                                    }
                                }
                            }



                        }
                    }
                }




                if (!ftntexist)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no figure Footnotes in document";
                }
                else if (fnpositionlst.Count > 0)
                {
                    List<int> lst1 = fnpositionlst.Distinct().ToList();
                    lst1.Sort();
                    Pagenumber = string.Join(", ", lst1.ToArray());
                    rObj.QC_Result = "Failed";
                    Tblflag = false;
                    rObj.Comments = "Figure Footnotes is not in \"" + rObj.Check_Parameter + "\" : " + Pagenumber;
                    rObj.CommentsWOPageNum = "Figure Paragraphs is not in \"" + rObj.Check_Parameter + "\"";
                    rObj.PageNumbersLst = lst1;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All Figure Footnotes " + rObj.Check_Parameter;
                }

                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Figure Footnote Alignemt-Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void FigureFootnotesAlignmentFix(RegOpsQC rObj, Document doc)
        {

            string res = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;

            try
            {
                //doc = new Document(rObj.DestFilePath);
                bool Figfxflag = true;

                NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Aspose.Words.Drawing.Shape shape in figures)
                {
                    if (shape.ParentParagraph != null && shape.ParentParagraph.NextSibling != null)
                    {
                        if (shape.ParentParagraph.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)shape.ParentNode.NextSibling;

                            if (!pr1.Range.Text.StartsWith("\f") && (pr1.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr1.Range.Text.Trim() == "" || (pr1.Runs.Count > 0 && pr1.Runs[0].Font.Size < 10)))
                            {
                                if (rObj.Check_Parameter == "Center")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                    {
                                        pr1.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        Figfxflag = true;
                                    }
                                }
                                else if (rObj.Check_Parameter == "Left")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                    {
                                        pr1.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                        Figfxflag = true;
                                    }
                                }
                                else if (rObj.Check_Parameter == "Right")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                    {
                                        pr1.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                        Figfxflag = true;
                                    }
                                }
                                else if (rObj.Check_Parameter == "Justify")
                                {
                                    if (pr1.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                    {
                                        pr1.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                        Figfxflag = true;
                                    }
                                }
                            }
                        }
                    }
                }

                if (Figfxflag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    if (rObj.QC_Result == "Failed" && rObj.Check_Type == 1)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". These may be fixed due to some other checks";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". These may be fixed due to some other checks";
                    }
                    else
                    {
                        //chLst[i].QC_Result = "Passed";
                        rObj.Comments = rObj.Comments;
                    }
                }





                rObj.FIX_END_TIME = DateTime.Now;
                //doc.Save(rObj.DestFilePath);

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        public static int GCD(int num, int denom)
        {

            if (denom == 0)
            {
                return num;
            }
            return GCD(denom, num % denom);
        }

        public string fracttodecimal(Double linewidth)
        {
            string fraction = string.Empty;
            String text = (Math.Abs(linewidth)).ToString();
            int integerPlaces = text.IndexOf('.');
            int decimalPlaces = text.Length - integerPlaces - 1;

            if (text.Length == 3 && (text.Length - 1) == '0')
            {
                // decimalPlaces = 0;
                fraction = "0";
            }
            else
            {

                double converted_d = linewidth * Math.Pow(10, decimalPlaces);
                int divisor = GCD((int)converted_d, (int)Math.Pow(10, decimalPlaces));

                fraction = ((converted_d / divisor) + "/" + ((Math.Pow(10, decimalPlaces)) / divisor));
            }
            return fraction;
            //if (linewidth == 0.25)
            //    return "1/4";
            //else if (linewidth == 0.5)
            //    return "1/2";
            //else if (linewidth == 0.75)
            //    return "3/4";
            //else if (linewidth == 1)
            //    return "1";
            //else if (linewidth == 1.5)
            //    return "1 1/2";
            //else if (linewidth == 2.25)
            //    return "2 1/4";
            //else if (linewidth == 3)
            //    return "3";
            //else if (linewidth == 4.5)
            //    return "4 1/2";
            //else if (linewidth == 6)
            //    return "6";

            //else
            //    return "";
        }

        public double reduceFraction(int x, int y)
        {
            double d = 0;
            if (y != 0)
            {
                d = (double)x / (double)y;
            }

            return d;
        }


        ///Table Width as per given parameter-Check
        public void TWidth(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {

                        foreach (Row row in table.Rows)
                        {

                            foreach (Cell cell in row.Cells)
                            {

                                if (rObj.Check_Parameter != null)
                                {
                                    string linewidth = fracttodecimal(cell.CellFormat.Borders.LineWidth);
                                    if (linewidth != null)
                                    {
                                        if (linewidth != rObj.Check_Parameter)
                                        {

                                            flag = true;
                                            if (layout.GetStartPageIndex(cell) != 0)
                                                lst.Add(layout.GetStartPageIndex(cell));
                                        }
                                    }
                                }
                            }
                        }

                    }
                }


                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "No change in Table Width";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables Width is not correct in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables Width is not correct";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables Width is not correct";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        ///Table Width-Fix
        ///
        public void FixTWidth(RegOpsQC rObj, Document doc)
        {
            //string Pagenumber = string.Empty;
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string res = string.Empty;
            bool isFixed = false;
            double val = 0;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {

                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell cell in row.Cells)
                            {

                                if (rObj.Check_Parameter != null)
                                {
                                    string linewidth = fracttodecimal(cell.CellFormat.Borders.LineWidth);
                                    if (linewidth != rObj.Check_Parameter)
                                    {
                                        isFixed = true;
                                        linewidth = rObj.Check_Parameter;
                                        if (rObj.Check_Parameter.ToString().Contains("/"))
                                        {
                                            string[] numbers = rObj.Check_Parameter.Split('/');
                                            if (numbers[0].Contains(" "))
                                            {
                                                string[] numbers1 = numbers[0].Split(' ');
                                                int nbr1 = Convert.ToInt32(numbers1[0].ToString());
                                                int nbr2 = Convert.ToInt32(numbers1[1].ToString());
                                                int nbr3 = Convert.ToInt32(numbers[1].ToString());
                                                val = reduceFraction(nbr2, nbr3);
                                                val = val + nbr1;
                                            }
                                            else
                                            {
                                                int num1 = Convert.ToInt32(numbers[0].ToString());
                                                int num2 = Convert.ToInt32(numbers[1].ToString());
                                                val = reduceFraction(num1, num2);
                                            }
                                            cell.CellFormat.Borders.LineWidth = val;
                                        }
                                        else
                                        {
                                            isFixed = true;
                                            cell.CellFormat.Borders.LineWidth = Convert.ToInt32(rObj.Check_Parameter);
                                        }

                                        //row.RowFormat.Borders.LineWidth = Convert.ToInt32(rObj.Check_Parameter);
                                    }
                                }
                            }
                        }

                    }
                }


                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (isFixed)
                    {
                        //List<int> lstfx = lst.Distinct().ToList();
                        //lstfx.Sort();
                        //Pagenumber = string.Join(", ", lstfx.ToArray());
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                }
                // doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Table row height-check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void TableRowHeight(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {

                        foreach (Row row in table.Rows)
                        {
                            if (row.RowFormat.HeightRule == HeightRule.Exactly || row.RowFormat.HeightRule == HeightRule.AtLeast)
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(row) != 0)
                                    lst.Add(layout.GetStartPageIndex(row));
                            }
                        }

                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "All table(s) row height are unchecked";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Table(s) row height is checked in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Table(s) row height is checked";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Table(s) row height is checked";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Tabke Row Height-Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTableRowHeight(RegOpsQC rObj, Document doc)
        {
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {

                        foreach (Row row in table.Rows)
                        {
                            if (row.RowFormat.HeightRule == HeightRule.Exactly || row.RowFormat.HeightRule == HeightRule.AtLeast)
                            {
                                isFixed = true;
                                row.RowFormat.HeightRule = HeightRule.Auto;
                            }
                        }

                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (isFixed)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Do not Allow row to break across pages-check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void TableRowToBreakAcrossPage(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            if (row.RowFormat.AllowBreakAcrossPages == true)
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(row) != 0)
                                    lst.Add(layout.GetStartPageIndex(row));
                            }
                        }
                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "All table(s) rows are allowed to break across pages";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Table(s) rows are allowed to break across pages in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Table(s) rows are allowed to break across pages";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Table(s) rows are allowed to break across pages";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///Do not Allow row to break across pages-Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void TableRowToBreakAcrossPageFix(RegOpsQC rObj, Document doc)
        {
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            if (row.RowFormat.AllowBreakAcrossPages == true)
                            {
                                isFixed = true;
                                row.RowFormat.AllowBreakAcrossPages = false;
                            }
                        }
                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (isFixed)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        ///No shading should be applied for table cells
        public void NoShading(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstCK = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (var i = 0; i < tables.Count; i++)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell cell in row.Cells)
                            {
                                if (cell.CellFormat.Shading.BackgroundPatternColor.IsEmpty == false)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(cell) != 0)
                                        lst.Add(layout.GetStartPageIndex(cell));



                                }
                            }
                        }
                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Tables cells have no shading";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables cells have shading in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables cells have shading";
                            rObj.PageNumbersLst = lstCK;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables cells have shading";
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        ///No Shading Should be applied for table cells-Fix
        ///
        public void FixNoShading(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string res = string.Empty;
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (var i = 0; i < tables.Count; i++)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell cell in row.Cells)
                            {
                                if (cell.CellFormat.Shading.BackgroundPatternColor.IsEmpty == false)
                                {

                                    cell.CellFormat.Shading.BackgroundPatternColor = Color.Empty;
                                    isFixed = true;

                                }
                            }
                        }
                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (isFixed)
                    {
                        //List<int> lstfx = lst.Distinct().ToList();
                        //lstfx.Sort();
                        //Pagenumber = string.Join(", ", lstfx.ToArray());
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                }
                // doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        ///No Footnote should be placed in the Appendix-Check

        public void Nofootnotesinappendixtitle(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Appendix")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph pr = fld.ParentParagraph;
                    NodeCollection footnotes = pr.GetChildNodes(NodeType.Footnote, true);
                    if (footnotes.Count > 0)
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(footnotes[0]) != 0)
                            lstrp.Add(layout.GetStartPageIndex(footnotes[0]));
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No footnotes in title";
                }
                else
                {
                    List<int> lst2 = lstrp.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Footnotes are in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Footnotes are Present";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        ///No Footnote should be placed in appendix-Fix
        ///
        public void FixNofootnotesinappendixtitle(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;

            string res = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Appendix")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph pr = fld.ParentParagraph;
                    Node[] footnotes = pr.GetChildNodes(NodeType.Footnote, true).ToArray();

                    foreach (Node footnote in footnotes)
                    {
                        footnote.Remove();
                        flag = true;
                    }
                }

                if (flag == true)
                {
                    //rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum += ". Fixed";
                }
                else
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". This may be fixed to \"" + rObj.Check_Parameter + "\" due to other checks";

                }

                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }



        /// <summary>
        /// Vertical alignment in tables for headers - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void AlignTableHeading(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            bool TableFlag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            bool tableseq = false;
            try
            {
                if (rObj.Check_Parameter != "" && rObj.Check_Parameter != null)
                {
                    CellVerticalAlignment VAlign = CellVerticalAlignment.Center;
                    ParagraphAlignment HAlign = ParagraphAlignment.Center;
                    String[] TextAlign = rObj.Check_Parameter.Split(' ');
                    if (TextAlign.Length > 1)
                    {
                        switch (TextAlign[1])
                        {
                            case "Left":
                                HAlign = ParagraphAlignment.Left;
                                break;
                            case "Center":
                                HAlign = ParagraphAlignment.Center;
                                break;
                            case "Right":
                                HAlign = ParagraphAlignment.Right;
                                break;
                        }

                        switch (TextAlign[0])
                        {
                            case "Top":
                                VAlign = CellVerticalAlignment.Top;
                                break;
                            case "Center":
                                VAlign = CellVerticalAlignment.Center;
                                break;
                            case "Bottom":
                                VAlign = CellVerticalAlignment.Bottom;
                                break;
                        }

                    }
                    foreach (Section set in doc.Sections)
                    {
                        foreach (Table tbl in set.GetChildNodes(NodeType.Table, true))
                        {
                            int Rowcount = 0;
                            TableFlag = true;
                            foreach (Row row in tbl.Rows)
                            {
                                Rowcount++;
                                foreach (FieldStart start in row.GetChildNodes(NodeType.FieldStart, true))
                                {
                                    if (start.FieldType == FieldType.FieldSequence && Rowcount == 1)
                                    {
                                        tableseq = true;
                                    }
                                }
                                if (Rowcount == 2 && tableseq == true)
                                {
                                    foreach (Cell cell in row.Cells)
                                    {
                                        foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                        {
                                            if (cell.CellFormat.VerticalAlignment != VAlign)
                                            {
                                                flag = true;
                                                lst.Add(layout.GetStartPageIndex(cell));
                                            }
                                            if (pr.ParagraphFormat.Alignment != HAlign)
                                            {
                                                flag = true;
                                                lst.Add(layout.GetStartPageIndex(cell));
                                            }
                                        }
                                    }
                                }
                            }
                            if (tableseq == false)
                            {
                                foreach (Cell cell in tbl.FirstRow.Cells)
                                {
                                    foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                    {
                                        if (cell.CellFormat.VerticalAlignment != VAlign)
                                        {
                                            flag = true;
                                            lst.Add(layout.GetStartPageIndex(cell));
                                        }
                                        if (pr.ParagraphFormat.Alignment != HAlign)
                                        {
                                            flag = true;
                                            lst.Add(layout.GetStartPageIndex(cell));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (TableFlag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no Tables.";
                }
                else if (flag == true)
                {
                    if (lst.Count > 0)
                    {
                        List<int> lst1 = lst.Distinct().ToList();
                        string Pagenumber = string.Join(", ", lst1.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Tables heading content  is not in " + rObj.Check_Parameter;
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Tables Heading Content is not in" + rObj.Check_Parameter;
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Tables Heading content is aligned to " + rObj.Check_Parameter;
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Vertical alignment in tables for headers - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixAlignTableHeading(RegOpsQC rObj, Document doc)
        {
            rObj.FIX_START_TIME = DateTime.Now;
            bool tableflag = false;
            bool tableseq = false;
            bool FixFlag = false;
            try
            {
                //  doc = new Document(rObj.DestFilePath);
                if (rObj.Check_Parameter != "" && rObj.Check_Parameter != null)
                {
                    CellVerticalAlignment VAlign = CellVerticalAlignment.Center;
                    ParagraphAlignment HAlign = ParagraphAlignment.Center;
                    String[] TextAlign = rObj.Check_Parameter.Split(' ');
                    if (TextAlign.Length > 1)
                    {
                        switch (TextAlign[1])
                        {
                            case "Left":
                                HAlign = ParagraphAlignment.Left;
                                break;
                            case "Center":
                                HAlign = ParagraphAlignment.Center;
                                break;
                            case "Right":
                                HAlign = ParagraphAlignment.Right;
                                break;
                        }
                        switch (TextAlign[0])
                        {
                            case "Top":
                                VAlign = CellVerticalAlignment.Top;
                                break;
                            case "Center":
                                VAlign = CellVerticalAlignment.Center;
                                break;
                            case "Bottom":
                                VAlign = CellVerticalAlignment.Bottom;
                                break;
                        }
                    }
                    foreach (Section set in doc.Sections)
                    {
                        foreach (Table tbl in set.GetChildNodes(NodeType.Table, true))
                        {
                            int Rowcount = 0;
                            tableflag = true;
                            foreach (Row row in tbl.Rows)
                            {
                                Rowcount++;
                                foreach (FieldStart start in row.GetChildNodes(NodeType.FieldStart, true))
                                {
                                    if (start.FieldType == FieldType.FieldSequence && Rowcount == 1)
                                    {
                                        tableseq = true;
                                    }
                                }
                                if (Rowcount == 2 && tableseq == true)
                                {
                                    foreach (Cell cell in row.Cells)
                                    {
                                        foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                        {
                                            if (cell.CellFormat.VerticalAlignment != VAlign)
                                            {
                                                cell.CellFormat.VerticalAlignment = VAlign;
                                                FixFlag = true;
                                            }
                                            if (pr.ParagraphFormat.Alignment != HAlign)
                                            {
                                                pr.ParagraphFormat.Alignment = HAlign;
                                                FixFlag = true;
                                            }
                                        }
                                    }
                                }
                            }
                            if (tableseq == false)
                            {
                                foreach (Cell cell in tbl.FirstRow.Cells)
                                {
                                    foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                    {
                                        if (cell.CellFormat.VerticalAlignment != VAlign)
                                        {
                                            cell.CellFormat.VerticalAlignment = VAlign;
                                            FixFlag = true;
                                        }
                                        if (pr.ParagraphFormat.Alignment != HAlign)
                                        {
                                            pr.ParagraphFormat.Alignment = HAlign;
                                            FixFlag = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (tableflag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Tables not found";
                }
                else if (FixFlag == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments += ". Fixed";
                    rObj.CommentsWOPageNum += ". Fixed";
                }
                else
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = "Tables Heading Content is Fixed to \"" + rObj.Check_Parameter + "\"";
                }
                doc.UpdateFields();
                // doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        /// <summary>
        /// Use numericals for Tables and Figures - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void UsenumericalsforTableandFigures(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            List<int> lst = new List<int>();
            List<int> lstimage = new List<int>();
            string Pagenumber = string.Empty;
            bool TablesCheck = false;
            bool FiguresCheck = false;
            LayoutCollector layout = new LayoutCollector(doc);
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<Node> Tables = doc.GetChildNodes(NodeType.Table, true).ToList();
                if (Tables.Count > 0)
                {
                    TablesCheck = true;
                }
                List<Node> TabFigSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                foreach (Paragraph paragraph in paragraphs)
                {
                    if (((paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().Trim().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && !paragraph.GetText().ToUpper().Contains("ARABIC")) || ((paragraph.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().Trim().ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)) && !paragraph.GetText().ToUpper().Contains("ARABIC")))
                    {
                        if (paragraph.LastChild != null && layout.GetStartPageIndex(paragraph.LastChild) != 0)
                            lst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                        else if (layout.GetStartPageIndex(paragraph) != 0)
                            lst.Add(layout.GetStartPageIndex(paragraph));
                    }
                }
                foreach (FieldStart TableSeqFieldStart in TabFigSeqFieldStarts)
                {
                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    if (((pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().Trim().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && !pr.GetText().ToUpper().Contains("ARABIC")) || ((pr.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || pr.GetText().Trim().ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)) && !pr.GetText().ToUpper().Contains("ARABIC")))
                    {

                        if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                            lst.Add(layout.GetStartPageIndex(pr.LastChild));
                        else if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));
                    }
                }
                List<Node> Shapes = doc.GetChildNodes(NodeType.Shape, true).ToList();
                if (Shapes.Count > 0)
                {
                    FiguresCheck = true;
                }
                foreach (Shape shape in Shapes)
                {
                    if (shape.IsLayoutInCell == true && (shape.ParentParagraph != null && shape.ParentParagraph.IsInCell == true))
                    {
                        if (shape.IsImage == true || shape.HasImage == true)
                        {
                            if (layout.GetStartPageIndex(shape) != 0)
                                lstimage.Add(layout.GetStartPageIndex(shape));
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (lst2.Count > 0 && lstimage.Count == 0)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Numericals not exist for Tables or Figures in: " + Pagenumber;
                }
                else if (TablesCheck == false && FiguresCheck == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no Tables and Figures found in the document.";
                }
                else if (lst2.Count > 0 && lstimage.Count > 0)
                {
                    List<int> lstimage1 = lstimage.Distinct().ToList();
                    lst2.Sort(); lstimage1.Sort();
                    string ImagecellPagenumber = string.Join(", ", lstimage1.ToArray());
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Numericals not exist for Tables or Figures in: " + Pagenumber + "." + "Images found in table cell in: " + ImagecellPagenumber;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Numericals exist for Tables and Figures.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// check Table cross reference - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckTablecrossreference(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<string> lstStr = new List<string>();
                foreach (Bookmark bk in doc.Range.Bookmarks)
                {
                    lstStr.Add(bk.Name.ToUpper());
                }
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph pr in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        foreach (Field field in pr.Range.Fields)
                        {
                            if (field.Type == FieldType.FieldRef)
                            {
                                bool status = false;
                                flag = true;
                                string name = ((Aspose.Words.Fields.FieldRef)field).BookmarkName.ToString();
                                if (lstStr.Contains(name.ToUpper()))
                                {
                                    status = true;
                                }
                                if (status == false)
                                {
                                    if (layout.GetStartPageIndex(field.Start) != 0)
                                        lst.Add(layout.GetStartPageIndex(field.Start));
                                }
                            }
                            if (field.Type == FieldType.FieldHyperlink)
                            {
                                bool status = false;
                                FieldHyperlink hyperlink = (FieldHyperlink)field;
                                if (hyperlink.SubAddress != null && hyperlink.Address == null)
                                {
                                    string name = ((Aspose.Words.Fields.FieldHyperlink)field).SubAddress.ToString().ToUpper();
                                    flag = true;
                                    List<string> match = lstStr.Where(x => x.Contains(name)).ToList();
                                    if (match.Count > 0)
                                        status = true;
                                    //if (lstStr.Contains(name.ToUpper())) 
                                    //{
                                    //    status = true;
                                    //}
                                    if (status == false)
                                    {
                                        if (layout.GetStartPageIndex(field.Start) != 0)
                                            lst.Add(layout.GetStartPageIndex(field.Start));
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no cross references and hyperlinks found in the document.";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Invalid Cross References/hyperlinks exist in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Invalid cross references/hyperlinks exist";
                        rObj.PageNumbersLst = lst2;
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "All References and hyperlinks have Destination.";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// check Table cross reference - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixcheckTablecrossreference(RegOpsQC rObj, Document doc)
        {
            bool flag = false;
            bool IsFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //  doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lstfx = new List<int>();
                List<string> lstStr = new List<string>();
                foreach (Bookmark bk in doc.Range.Bookmarks)
                {
                    if (bk.Text != "")
                        lstStr.Add(bk.Name);
                }
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph pr in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        foreach (Field field in pr.Range.Fields)
                        {
                            if (field.Type == FieldType.FieldRef)
                            {
                                flag = true;
                                bool status = false;
                                string name = ((Aspose.Words.Fields.FieldRef)field).BookmarkName.ToString();
                                if (lstStr.Contains(name))
                                {
                                    status = true;
                                }
                                if (status == false)
                                {
                                    field.Remove();
                                    IsFixed = true;
                                }
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "There are No table cross references.";
                }
                else
                {
                    if (IsFixed)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments += " .Text for these is Removed";
                        rObj.CommentsWOPageNum += ". Text for these is Removed.";
                    }
                }
                //  doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Check all references destination - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckReferencesAreAtRightDestination(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<string[]> lstStr = new List<string[]>();
                List<string> lstStrtxt = new List<string>();
                List<object> objlst = new List<object>();
                string[] strArray;
                //Code for getting all the bookmarks and its list item numbers exist in the document.
                foreach (Bookmark bk in doc.Range.Bookmarks)
                {
                    strArray = new string[2];
                    BookmarkStart bks = (BookmarkStart)bk.BookmarkStart;
                    if (bk.BookmarkStart.ParentNode != null && bk.BookmarkStart.ParentNode.NodeType == NodeType.Paragraph)
                    {
                        Paragraph pr1 = (Paragraph)bk.BookmarkStart.ParentNode;
                        string listla = pr1.ListLabel.LabelString.ToString();
                        if (bk.Name != "" && !bk.Name.ToUpper().StartsWith("_TOC"))
                        {
                            strArray[0] = bk.Name;
                            strArray[1] = listla.TrimEnd('.');
                            objlst.Add(strArray);
                        }
                    }
                }
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph pr in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        string name = string.Empty;
                        string hyperlinkname = string.Empty;
                        foreach (Field field in pr.Range.Fields)
                        {
                            flag = true;
                            bool status = false;
                            bool bookmarkExist = false;
                            if (field.Type == FieldType.FieldHyperlink)
                            {
                                FieldHyperlink hyperlink = (FieldHyperlink)field;
                                Regex regexData = new Regex(@"(^SECTION\s\d|^SECTION\s\[A-Za-z])", RegexOptions.IgnoreCase);
                                if (hyperlink.SubAddress != null && regexData.IsMatch(hyperlink.DisplayResult) && !hyperlink.SubAddress.ToUpper().StartsWith("_TOC"))
                                {
                                    Regex regexData1 = new Regex(@"(^SECTION\s|^SECTION\s)", RegexOptions.IgnoreCase);
                                    Match m = regexData1.Match(hyperlink.DisplayResult);
                                    string ab = hyperlink.DisplayResult.Replace(m.Value.ToString(), " ").TrimEnd(')').TrimEnd('.').Trim();
                                    foreach (string[] strary in objlst)
                                    {
                                        if (hyperlink.SubAddress == strary[0].ToString())
                                        {
                                            bookmarkExist = true;
                                            if (ab == strary[1])
                                            {
                                                status = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (status == false && bookmarkExist)
                                    {
                                        if (layout.GetStartPageIndex(field.Start) != 0)
                                            lst.Add(layout.GetStartPageIndex(field.Start));
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No cross references exist.";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        string Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "References which are not to right destination exist in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "References are not at right destination";
                        rObj.PageNumbersLst = lst2;
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";

                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Check all references destination - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixCheckReferencesAreAtRightDestination(RegOpsQC rObj, Document doc)
        {
            bool flag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                //   doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<string[]> lstStr = new List<string[]>();
                List<string> lstStrtxt = new List<string>();
                List<object> objlst = new List<object>();
                string[] strArray = new string[2];
                foreach (Bookmark bk in doc.Range.Bookmarks)
                {
                    strArray = new string[2];
                    BookmarkStart bks = (BookmarkStart)bk.BookmarkStart;
                    if (bk.BookmarkStart.ParentNode != null && bk.BookmarkStart.ParentNode.NodeType == NodeType.Paragraph)
                    {
                        Paragraph pr1 = (Paragraph)bk.BookmarkStart.ParentNode;
                        string listla = pr1.ListLabel.LabelString.ToString();
                        if (bk.Name != "" && !bk.Name.ToUpper().StartsWith("_TOC"))
                        {
                            strArray[0] = bk.Name;
                            strArray[1] = listla.TrimEnd('.');
                            objlst.Add(strArray);
                        }
                    }
                }
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph pr in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        string name = string.Empty;
                        string hyperlinkname = string.Empty;
                        foreach (Field field in pr.Range.Fields)
                        {
                            flag = true;
                            bool status = false;
                            if (field.Type == FieldType.FieldHyperlink)
                            {
                                FieldHyperlink hyperlink = (FieldHyperlink)field;
                                Regex regexData = new Regex(@"(^SECTION\s\d|^SECTION\s\[A-Za-z])", RegexOptions.IgnoreCase);
                                if (hyperlink.SubAddress != null && regexData.IsMatch(hyperlink.DisplayResult) && !hyperlink.SubAddress.ToUpper().StartsWith("_TOC"))
                                {
                                    Regex regexData1 = new Regex(@"(^SECTION\s|^SECTION\s)", RegexOptions.IgnoreCase);
                                    Match m = regexData1.Match(hyperlink.DisplayResult);
                                    string ab = hyperlink.DisplayResult.Replace(m.Value.ToString(), " ").TrimEnd(')').Trim();
                                    //string a = m.Value;
                                    foreach (string[] strary in objlst)
                                    {
                                        if ((hyperlink.SubAddress == strary[0].ToString() && ab == strary[1]))
                                        {
                                            status = true;
                                            break;
                                        }
                                    }
                                    if (status == false)
                                    {
                                        field.Unlink();
                                        FixFlag = true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";

                }
                else
                {
                    if (FixFlag == true)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments += ". Fixed";
                        rObj.CommentsWOPageNum += ". Fixed.";
                    }
                }
                // doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Move Table title and caption into caption row - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public static bool Checkmovetablecaptionintocaptionrow(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool Allsubchecks = false;
            bool fixFlag = false;
            bool Notfixflag = false;
            bool Notusercaptinflag = false;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            List<int> pgnumlst = new List<int>();
            chLst[k].CHECK_START_TIME = DateTime.Now;
            List<int> Notusercaptinlst = new List<int>();
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                //doc.Save(rObj.DestFilePath);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence && !((FieldStart)x).ParentParagraph.IsInCell && ((FieldStart)x).ParentParagraph.NextSibling != null).ToList();
                List<Node> paragraphsLst = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).IsInCell && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                foreach (Paragraph paragraph in paragraphsLst)
                {
                    bool CanFix = true;
                    Paragraph pr = paragraph;
                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                    if (Fieldseq.Count == 0 && (pr.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && pr.NextSibling != null)
                    {
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table)
                            {
                                Table tbl = (Table)pr.NextSibling;
                                List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                                if (paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                                {
                                    if ((paragraph.Runs.Count > 0 && paragraph.Runs[0].Font.Bold == true) || (paragraph.Runs.Count > 1 && paragraph.Runs[1].Font.Bold == true))
                                    {
                                        if (!paragraph.NextSibling.GetText().Contains("SEQ Table") && (paragraph.GetText().ToUpper().StartsWith("TABLE") && !paragraph.GetText().Contains("SEQ Table")) && !paragraph.GetText().Contains(" V.3: "))
                                        {
                                            if (fstart.Count == 0)
                                            {
                                                if (layout.GetStartPageIndex(paragraph) != 0)
                                                {
                                                    fixFlag = true;
                                                    CanFix = true;
                                                    if (paragraph.LastChild != null)
                                                    {
                                                        lst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                    }
                                                    else
                                                    {
                                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                                    }
                                                }
                                                break;
                                            }
                                            else
                                            {
                                                CanFix = false;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            Notusercaptinflag = true;
                                        }
                                    }
                                    else
                                    {
                                        CanFix = true;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (fstart.Count == 0)
                                    {
                                        if (layout.GetStartPageIndex(paragraph) != 0)
                                        {
                                            fixFlag = true;
                                            CanFix = true;
                                            if (paragraph.LastChild != null)
                                            {
                                                lst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                            }
                                            else
                                            {
                                                lst.Add(layout.GetStartPageIndex(paragraph));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                            }

                                        }
                                        break;
                                    }
                                    else
                                    {
                                        CanFix = false;
                                        break;
                                    }
                                }
                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                CanFix = false;
                                pr = (Paragraph)pr.NextSibling;
                            }
                            else
                            {
                                CanFix = false;
                                break;
                            }
                        }
                        if (!CanFix)
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0 && !Notusercaptinflag)
                            {
                                Notfixflag = true;
                                if (paragraph.LastChild != null)
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                }
                                else
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                }

                            }
                        }
                    }
                }
                foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                {
                    bool CanFix = true;
                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    if (pr.GetText().TrimStart().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                    {
                        CanFix = false;
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table)) // condition
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table || pr.NextSibling.NodeType == NodeType.BookmarkEnd)
                            {
                                if (pr.NextSibling.NodeType == NodeType.BookmarkEnd)
                                {
                                    if (pr.NextSibling.NextSibling.NodeType == NodeType.Table)
                                    {
                                        Table tbl = (Table)pr.NextSibling.NextSibling;
                                        List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                                        if (fstart.Count == 0)
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                            {
                                                fixFlag = true;
                                                CanFix = true;
                                                if (pr.LastChild != null)
                                                {
                                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                    pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                }
                                                else
                                                {
                                                    lst.Add(layout.GetStartPageIndex(pr));
                                                    pgnumlst.Add(layout.GetStartPageIndex(pr));
                                                }
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            CanFix = false;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    if (pr.NextSibling.NodeType == NodeType.Table)
                                    {
                                        Table tbl = (Table)pr.NextSibling;
                                        List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                                        if (fstart.Count == 0)
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                            {
                                                fixFlag = true;
                                                CanFix = true;
                                                if (pr.LastChild != null)
                                                {
                                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                    pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                }
                                                else
                                                {
                                                    lst.Add(layout.GetStartPageIndex(pr));
                                                    pgnumlst.Add(layout.GetStartPageIndex(pr));
                                                }
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            CanFix = false;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                CanFix = false;
                                pr = (Paragraph)pr.NextSibling;
                            }
                            else
                            {
                                CanFix = false;
                                break;
                            }
                        }
                        if (!CanFix)
                        {
                            if (layout.GetStartPageIndex(pr) != 0 && !Notusercaptinflag)
                            {
                                Notfixflag = true;
                                if (pr.LastChild != null)
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                }
                                else
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(pr));
                                    pgnumlst.Add(layout.GetStartPageIndex(pr));
                                }

                            }
                        }
                    }
                    else
                    {
                        if (layout.GetStartPageIndex(pr) != 0)
                        {
                            Notfixflag = true;
                            if (pr.LastChild != null)
                            {
                                Notusercaptinlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                            }
                            else
                            {
                                Notusercaptinlst.Add(layout.GetStartPageIndex(pr));
                                pgnumlst.Add(layout.GetStartPageIndex(pr));
                            }

                        }
                    }
                }
                if (tables.Count == 0)
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "There are no tables in the document";
                }
                else if (TableSeqFieldStarts.Count == 0 && paragraphsLst.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No table captions found";
                }
                else if (lst.Count == 0 && Notusercaptinlst.Count == 0)
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "All table captions are in right position";
                }
                else if (fixFlag || Notfixflag)
                {
                    Allsubchecks = true;
                    chLst[k].QC_Result = "Failed";
                    List<int> lst2 = Notusercaptinlst.Distinct().ToList();
                    if (lst2.Count > 0 && !Notusercaptinflag)
                    {
                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        chLst[k].Comments = "Table captions are not in right position in: " + pagenumber + ". These cannot be fixed";
                    }
                    List<int> lst3 = lst.Distinct().ToList();
                    if (lst3.Count > 0)
                    {
                        lst3.Sort();
                        pagenumber = string.Join(", ", lst3.ToArray());
                        if (lst2.Count > 0)
                            chLst[k].Comments = chLst[k].Comments + " and Table captions are not in right position in: " + pagenumber;
                        else
                            chLst[k].Comments = "Table captions are not in right position in: " + pagenumber;
                    }

                    // added for page number report
                    List<PageNumberReport> pglst = new List<PageNumberReport>();
                    List<int> pgnumlstsrt = pgnumlst.Distinct().ToList();
                    pgnumlstsrt.Sort();
                    int fixedflag = 0;
                    int notfixedflag = 0;
                    string pgcomments = string.Empty;
                    for (int i = 0; i < pgnumlstsrt.Count; i++)
                    {
                        fixedflag = 0;
                        notfixedflag = 0;
                        PageNumberReport pgObj = new PageNumberReport();
                        pgObj.PageNumber = Convert.ToInt32(pgnumlstsrt[i]);

                        if (lst2.Contains(pgnumlstsrt[i]))
                            notfixedflag = 1;
                        if (lst3.Contains(pgnumlstsrt[i]))
                            fixedflag = 1;

                        if (notfixedflag == 1 && fixedflag == 1)
                        {
                            pgObj.Comments = "Few table captions are not in right position and cannot be fixed. Few table captions are not in right position";
                            pglst.Add(pgObj);
                        }
                        else if (notfixedflag == 1)
                        {
                            pgObj.Comments = "Table captions are not in right position. These cannot be fixed";
                            pglst.Add(pgObj);
                        }
                        else if (fixedflag == 1)
                        {
                            pgObj.Comments = "Table captions are not in right position";
                            pglst.Add(pgObj);
                        }
                    }
                    if (pgnumlstsrt != null && pgnumlstsrt.Count > 0)
                        chLst[k].CommentsPageNumLst = pglst;
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "All table captions are in right position";
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubchecks;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubchecks;
        }

        /// <summary>
        /// Move Table title and caption into caption row - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Fixmovetablecaptionintocaptionrow(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool FixFlag = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                DocumentBuilder builder = new DocumentBuilder(doc);
                //code to get caption paragraphs from the document.
                List<Node> paragraphsLst = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL") && !((Paragraph)x).IsInCell).ToList();
                //doc.TrackRevisions = true;
                //doc.StartTrackRevisions(" ");
                foreach (Paragraph paragraph in paragraphsLst)
                {
                    Paragraph pr = paragraph;
                    string rer = pr.Range.Text;
                    List<Node> Fieldseq = pr.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                    if (Fieldseq.Count == 0 && pr.NextSibling != null && (pr.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().Trim().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)))
                    {
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table)
                            {
                                Table tbl = (Table)pr.NextSibling;
                                List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                                if (fstart.Count == 0)
                                {
                                    if (paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                                    {
                                        if ((paragraph.Runs.Count > 0 && paragraph.Runs[0].Font.Bold == true) || (paragraph.Runs.Count > 1 && paragraph.Runs[1].Font.Bold == true))
                                        {
                                            if (paragraph.PreviousSibling != null && paragraph.PreviousSibling.NodeType == NodeType.Table)
                                            {//code to add enter key between two tables before moving into caption row
                                                Paragraph par = new Paragraph(doc);
                                                paragraph.ParentNode.InsertBefore(par, paragraph);
                                            }
                                            if (paragraph.Range.Text.Contains(ControlChar.PageBreakChar) || paragraph.Range.Text.Contains(ControlChar.PageBreak))
                                            { //code to add page break when there is a page break before caption row.
                                                DocumentBuilder builder1 = new DocumentBuilder(doc);
                                                Paragraph par = new Paragraph(doc);
                                                paragraph.ParentNode.InsertBefore(par, paragraph);
                                                builder1.MoveTo(par);
                                                builder1.InsertBreak(BreakType.PageBreak);
                                            }
                                            Row clonedRow = (Row)tbl.Rows[0].Clone(true);
                                            clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                            int count = clonedRow.Cells.Count();
                                            double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                            for (int i = 1; i < count; i++)
                                            {
                                                clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                                NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                            }
                                            tbl.Rows.Insert(0, clonedRow);
                                            Row rw = tbl.FirstRow;
                                            foreach (Cell cel in rw)
                                            {
                                                cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Top.LineWidth = 0;
                                                cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Left.LineWidth = 0;
                                                cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Right.LineWidth = 0;
                                                // cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.Single;
                                                // cel.CellFormat.Borders.Bottom.LineWidth = 1;
                                            }
                                            tbl.FirstRow.FirstCell.RemoveAllChildren();
                                            tbl.FirstRow.FirstCell.EnsureMinimum();
                                            tbl.FirstRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                            tbl.FirstRow.FirstCell.Paragraphs.Add(paragraph);
                                            tbl.FirstRow.FirstCell.Paragraphs[0].Remove();
                                            //if (tbl.AllowAutoFit != true)
                                            //  tbl.FirstRow.FirstCell.CellFormat.Width = NewCellWidth;
                                            tbl.FirstRow.FirstCell.CellFormat.WrapText = true;
                                            tbl.FirstRow.RowFormat.HeightRule = HeightRule.Auto;
                                            tbl.FirstRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                            tbl.FirstRow.RowFormat.HeadingFormat = true;
                                            //tbl.PreviousSibling.Remove();

                                            FixFlag = true;
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if (paragraph.PreviousSibling != null && paragraph.PreviousSibling.NodeType == NodeType.Table)
                                        {
                                            //code to add enter key between two tables before moving into table
                                            Paragraph par = new Paragraph(doc);
                                            paragraph.ParentNode.InsertBefore(par, paragraph);
                                        }
                                        if (paragraph.Range.Text.Contains(ControlChar.PageBreakChar) || paragraph.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            //code to add page break when there is a page break before caption row.
                                            DocumentBuilder builder1 = new DocumentBuilder(doc);
                                            Paragraph par = new Paragraph(doc);
                                            paragraph.ParentNode.InsertBefore(par, paragraph);
                                            builder1.MoveTo(par);
                                            builder1.InsertBreak(BreakType.PageBreak);
                                        }
                                        Row clonedRow = (Row)tbl.Rows[0].Clone(true);
                                        clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                        int count = clonedRow.Cells.Count();
                                        double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                        for (int i = 1; i < count; i++)
                                        {
                                            clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                            NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                        }
                                        tbl.Rows.Insert(0, clonedRow);
                                        Row rw = tbl.FirstRow;
                                        foreach (Cell cel in rw)
                                        {
                                            cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Top.LineWidth = 0;
                                            cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Left.LineWidth = 0;
                                            cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Right.LineWidth = 0;
                                            // cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.Single;
                                            // cel.CellFormat.Borders.Bottom.LineWidth = 1;
                                        }
                                        tbl.FirstRow.FirstCell.RemoveAllChildren();
                                        tbl.FirstRow.FirstCell.EnsureMinimum();
                                        tbl.FirstRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                        tbl.FirstRow.FirstCell.Paragraphs.Add(paragraph);
                                        tbl.FirstRow.FirstCell.Paragraphs[0].Remove();
                                        // if (tbl.AllowAutoFit != true)
                                        //tbl.FirstRow.FirstCell.CellFormat.Width = NewCellWidth;
                                        tbl.FirstRow.FirstCell.CellFormat.WrapText = true;
                                        tbl.FirstRow.RowFormat.HeightRule = HeightRule.Auto;
                                        tbl.FirstRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                        tbl.FirstRow.RowFormat.HeadingFormat = true;
                                        // tbl.PreviousSibling.Remove();
                                        FixFlag = true;
                                        break;
                                    }
                                }
                                else
                                    break;
                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                pr = (Paragraph)pr.NextSibling;
                            else
                                break;
                        }
                    }
                }
                //code to get sequencefield code paragraphs
                List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                {
                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    Paragraph pr1 = TableSeqFieldStart.ParentParagraph;
                    if ((pr.Range.Text.TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.Range.Text.TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && pr.GetText().TrimStart().ToUpper().Contains("SEQ TABLE") && !pr.IsInCell && TableSeqFieldStart.ParentParagraph.NextSibling != null)
                    {
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table || pr.NextSibling.NodeType == NodeType.BookmarkEnd)
                            {
                                if (pr.NextSibling.NodeType == NodeType.Table)
                                {
                                    Table tbl = (Table)pr.NextSibling;
                                    List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                                    if (fstart.Count == 0)
                                    {
                                        if (pr.PreviousSibling != null && pr.PreviousSibling.NodeType == NodeType.Table)
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            pr.ParentNode.InsertBefore(par, pr);
                                        }
                                        if (pr.Range.Text.Contains(ControlChar.PageBreakChar) || pr.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            DocumentBuilder builder1 = new DocumentBuilder(doc);
                                            Paragraph par = new Paragraph(doc);
                                            pr.ParentNode.InsertBefore(par, pr);
                                            builder1.MoveTo(par);
                                            builder1.InsertBreak(BreakType.PageBreak);
                                        }
                                        Row clonedRow = (Row)tbl.Rows[0].Clone(true);
                                        clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                        int count = clonedRow.Cells.Count();
                                        double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                        for (int i = 1; i < count; i++)
                                        {
                                            clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                            NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                        }
                                        tbl.Rows.Insert(0, clonedRow);
                                        Row rw = tbl.FirstRow;
                                        foreach (Cell cel in rw)
                                        {
                                            cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Top.LineWidth = 0;
                                            cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Left.LineWidth = 0;
                                            cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Right.LineWidth = 0;
                                            //cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.Single;
                                            //cel.CellFormat.Borders.Bottom.LineWidth = 1;
                                        }
                                        tbl.FirstRow.FirstCell.RemoveAllChildren();
                                        tbl.FirstRow.FirstCell.EnsureMinimum();
                                        tbl.FirstRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                        tbl.FirstRow.FirstCell.Paragraphs.Add(pr1);
                                        tbl.FirstRow.FirstCell.Paragraphs[0].Remove();
                                        //if (tbl.AllowAutoFit != true)
                                        //  tbl.FirstRow.FirstCell.CellFormat.Width = NewCellWidth;  
                                        tbl.FirstRow.FirstCell.CellFormat.WrapText = true;
                                        tbl.FirstRow.RowFormat.HeightRule = HeightRule.Auto;
                                        tbl.FirstRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                        tbl.FirstRow.RowFormat.HeadingFormat = true;
                                        FixFlag = true;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (pr.NextSibling.NextSibling.GetType().FullName == "Aspose.Words.Tables.Table")
                                    {
                                        Table tbl = (Table)pr.NextSibling.NextSibling;
                                        List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                                        if (fstart.Count == 0)
                                        {
                                            if (pr.PreviousSibling != null && pr.PreviousSibling.NodeType == NodeType.Table)
                                            {
                                                Paragraph par = new Paragraph(doc);
                                                pr.ParentNode.InsertBefore(par, pr);
                                            }
                                            if (pr.Range.Text.Contains(ControlChar.PageBreakChar) || pr.Range.Text.Contains(ControlChar.PageBreak))
                                            {
                                                DocumentBuilder builder1 = new DocumentBuilder(doc);
                                                Paragraph par = new Paragraph(doc);
                                                pr.ParentNode.InsertBefore(par, pr);
                                                builder1.MoveTo(par);
                                                builder1.InsertBreak(BreakType.PageBreak);
                                            }
                                            Row clonedRow = (Row)tbl.Rows[0].Clone(true);
                                            clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                            int count = clonedRow.Cells.Count();
                                            double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                            for (int i = 1; i < count; i++)
                                            {
                                                clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                                NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                            }
                                            tbl.Rows.Insert(0, clonedRow);
                                            Row rw = tbl.FirstRow;
                                            foreach (Cell cel in rw)
                                            {
                                                cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Top.LineWidth = 0;
                                                cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Left.LineWidth = 0;
                                                cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Right.LineWidth = 0;
                                                //cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.Single;
                                                //cel.CellFormat.Borders.Bottom.LineWidth = 1;
                                            }
                                            tbl.FirstRow.FirstCell.RemoveAllChildren();
                                            tbl.FirstRow.FirstCell.EnsureMinimum();
                                            tbl.FirstRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                            tbl.FirstRow.FirstCell.Paragraphs.Add(pr1);
                                            tbl.FirstRow.FirstCell.Paragraphs[0].Remove();
                                            //if (tbl.AllowAutoFit != true)
                                            //  tbl.FirstRow.FirstCell.CellFormat.Width = NewCellWidth;  
                                            tbl.FirstRow.FirstCell.CellFormat.WrapText = true;
                                            tbl.FirstRow.RowFormat.HeightRule = HeightRule.Auto;
                                            tbl.FirstRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                            tbl.FirstRow.RowFormat.HeadingFormat = true;
                                            FixFlag = true;
                                            break;
                                        }
                                    }
                                }

                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                pr = (Paragraph)pr.NextSibling;
                            else
                                break;
                        }
                    }
                }
                if (FixFlag)
                {
                    chLst[k].Is_Fixed = 1;
                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                    if (chLst[k].CommentsPageNumLst!=null && chLst[k].CommentsPageNumLst.Count>0)
                    {
                        foreach (var pg in chLst[k].CommentsPageNumLst)
                        {
                            pg.Comments = pg.Comments + ". Fixed";
                        }
                    }
                    
                }
                //doc.Save(rObj.DestFilePath);
                chLst[k].CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Move Table Footnote into footer row - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public static bool AddFooterrow(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool Allsubchecks = false;
            bool flag = false;
            bool fixflag = false;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                LayoutCollector layout = new LayoutCollector(doc);
                //table next paragraph with size below 12
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && (((Table)x).NextSibling.NodeType == NodeType.Paragraph || ((Table)x).NextSibling.NodeType == NodeType.BookmarkStart || ((Table)x).NextSibling.NodeType == NodeType.BookmarkEnd)).ToList();
                foreach (Table tbl in tablesList)
                {
                    Node node = tbl.NextSibling;
                    while (node.NodeType == NodeType.BookmarkStart || node.NodeType == NodeType.BookmarkEnd || node.NodeType == NodeType.Paragraph)
                    {
                        flag = false;
                        if (node.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr = (Paragraph)node;
                            if (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.Range.Text.Trim() == "" || pr.Runs.Count > 0))
                            {
                                if (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") && pr.Range.Text.Trim() != "")
                                {
                                    flag = true;
                                    fixflag = true;
                                    if (pr.LastChild != null)
                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    else
                                        lst.Add(layout.GetStartPageIndex(pr));
                                }
                                else if (pr.Range.Text.Trim() != "")
                                {
                                    foreach (Run rn in pr.Runs)
                                    {
                                        // condition added to ignore superscript, * and soft return(\v) and text size should be lessthan 12
                                        if ((!rn.Font.Superscript && !rn.Font.Subscript && rn.Text != "*" && rn.Text != "\v") && rn.Font.Size < 12)
                                        {
                                            flag = true;
                                            fixflag = true;
                                            if (pr.LastChild != null)
                                                lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                            else
                                                lst.Add(layout.GetStartPageIndex(pr));
                                            break;
                                        }
                                    }
                                }
                                if ((flag == true || pr.Range.Text.Trim() == "") && node.NextSibling != null && (node.NextSibling.NodeType == NodeType.BookmarkEnd || node.NextSibling.NodeType == NodeType.BookmarkStart || node.NextSibling.NodeType == NodeType.Paragraph))
                                    node = node.NextSibling;
                                else
                                    break;
                            }
                            else if (node.NextSibling != null && (node.NextSibling.NodeType == NodeType.BookmarkEnd || node.NextSibling.NodeType == NodeType.BookmarkStart || node.NextSibling.NodeType == NodeType.Paragraph))
                                node = node.NextSibling;
                            else
                                break;
                        }
                        else if (node.NextSibling != null && (node.NodeType == NodeType.BookmarkEnd || node.NodeType == NodeType.BookmarkStart))
                        {
                            node = node.NextSibling;
                        }
                        else
                            break;
                    }
                    //   Paragraph pr = (Paragraph)tbl.NextSibling;
                    ////   while (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])) && layout.GetStartPageIndex(pr) != 0)
                    //       while (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || pr.Runs.Count > 0))
                    //       {
                    //           Paragraph prc = new Paragraph(doc);
                    //           if (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE"))
                    //           {
                    //               flag = true;
                    //               if (pr.LastChild != null)
                    //                   lst.Add(layout.GetStartPageIndex(pr.LastChild));
                    //               else
                    //                   lst.Add(layout.GetStartPageIndex(pr));
                    //           }
                    //           else if (pr.Range.Text.Trim() != "")
                    //           {
                    //               foreach (Run rn in pr.Runs)
                    //               {
                    //                   // condition added to ignore superscript, * and soft return(\v) and text size should be lessthan 12
                    //                   if ((!rn.Font.Superscript && !rn.Font.Subscript && rn.Text != "*" && rn.Text != "\v") && rn.Font.Size < 12)
                    //                   {
                    //                       flag = true;
                    //                       if (pr.LastChild != null)
                    //                           lst.Add(layout.GetStartPageIndex(pr.LastChild));
                    //                       else
                    //                           lst.Add(layout.GetStartPageIndex(pr));
                    //                       break;
                    //                   }
                    //               }
                    //           }
                    //           if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                    //           {
                    //               prc = (Paragraph)pr.NextSibling;
                    //               pr = prc;
                    //           }
                    //           else
                    //               break;
                    //       }
                }


                if (tables.Count == 0)
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "There are no tables in the document";
                }
                else if (!fixflag)
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "All table Footnotes are in right position";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        Allsubchecks = true;
                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        chLst[k].QC_Result = "Failed";
                        chLst[k].Comments = "Table Footnotes are not in right position in: " + pagenumber;
                        chLst[k].CommentsWOPageNum = "Table Footnotes are not in right position";
                        chLst[k].PageNumbersLst = lst2;
                    }
                    else
                    {
                        chLst[k].QC_Result = "Passed";
                        //chLst[k].Comments = "All table footnotes are in right position";
                    }
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubchecks;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubchecks;
        }

        public static bool AddFooterrowbk(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool Allsubchecks = false;
            bool flag = false;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            List<Run> lst1 = new List<Run>();
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                NodeCollection paragraphs1 = doc.GetChildNodes(NodeType.Paragraph, true);
                foreach (Paragraph pr in paragraphs1)
                {
                    if (!pr.IsInCell)
                    {
                        foreach (Run rn in pr.Runs)
                        {
                            if (rn.Font.Superscript || rn.Text == "*")
                            {
                                lst1.Add(rn);

                            }
                        }
                    }

                }
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                LayoutCollector layout = new LayoutCollector(doc);
                //table next paragraph with size below 12
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                foreach (Table tbl in tablesList)
                {
                    Paragraph pr = (Paragraph)tbl.NextSibling;
                    while (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])) && layout.GetStartPageIndex(pr) != 0)
                    {
                        Paragraph prc = new Paragraph(doc);
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            prc = (Paragraph)pr.NextSibling;
                            if (pr.Range.Text.Trim() != "")
                            {
                                flag = true;
                                if (pr.LastChild != null)
                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                else
                                    lst.Add(layout.GetStartPageIndex(pr));
                            }
                            pr = prc;
                        }
                        else
                        {
                            if (pr.Range.Text.Trim() != "")
                            {
                                flag = true;
                                if (pr.LastChild != null)
                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                else
                                    lst.Add(layout.GetStartPageIndex(pr));
                            }
                            break;
                        }
                    }
                }
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") && !((Paragraph)x).IsInCell && ((Paragraph)x).PreviousSibling != null && ((Paragraph)x).PreviousSibling.NodeType == NodeType.Table).ToList();
                foreach (Paragraph prlst in paragraphs)
                {
                    Paragraph pr = prlst;
                    while (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])) && layout.GetStartPageIndex(pr) != 0)
                    {
                        Paragraph prc = new Paragraph(doc);
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            prc = (Paragraph)pr.NextSibling;
                            if (pr.Range.Text.Trim() != "")
                            {
                                flag = true;
                                if (pr.LastChild != null)
                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                else
                                    lst.Add(layout.GetStartPageIndex(pr));
                            }
                            pr = prc;
                        }
                        else
                        {
                            if (pr.Range.Text.Trim() != "")
                            {
                                flag = true;
                                if (pr.LastChild != null)
                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                else
                                    lst.Add(layout.GetStartPageIndex(pr));
                            }
                            break;
                        }
                    }
                }
                if (tables.Count == 0)
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "There are no tables in the document";
                }
                else if (!flag)
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "All table Footnotes are in right position";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        Allsubchecks = true;
                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        chLst[k].QC_Result = "Failed";
                        chLst[k].Comments = "Table Footnotes are in: " + pagenumber;
                        chLst[k].CommentsWOPageNum = "Table Footnotes are not in right position";
                        chLst[k].PageNumbersLst = lst2;
                    }
                    else
                    {
                        chLst[k].QC_Result = "Passed";
                        chLst[k].Comments = "All table footnotes are in right position";
                    }
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubchecks;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubchecks;
        }

        /// <summary>
        /// Move Table title and caption into caption row - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixAddFooterrow(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool FixFlag = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            bool fontflag = false;
            bool fontflag1 = false;
            try
            {
                //doc = new Document(rObj.DestFilePath);

                List<Node> tableslst = doc.GetChildNodes(NodeType.Table, true).Where(x => x.NextSibling != null && (x.NextSibling.NodeType == NodeType.Paragraph || x.NextSibling.NodeType == NodeType.BookmarkStart || x.NextSibling.NodeType == NodeType.BookmarkEnd)).ToList();
                foreach (Table tbl in tableslst)
                {
                    Node node = tbl.NextSibling;
                    List<Paragraph> prlst = new List<Paragraph>();
                    bool Addfootrow = false;
                    List<Paragraph> prlst1 = new List<Paragraph>();
                    //added to handle bookmarks
                    while (node.NodeType == NodeType.BookmarkStart || node.NodeType == NodeType.BookmarkEnd || node.NodeType == NodeType.Paragraph)
                    {
                        if (node.NodeType == NodeType.Paragraph)
                        {
                            fontflag = false;
                            fontflag1 = false;
                            Paragraph pr = (Paragraph)node;
                            foreach (Run rn in pr.Runs)
                            {
                                // condition added to ignore superscript, * and soft return(\v) and text size should be lessthan 12
                                if ((!rn.Font.Superscript && rn.Text != "*" && rn.Text != "\v") && rn.Font.Size < 12)
                                {
                                    fontflag = true;
                                    break;
                                }
                            }
                            //Adding field footnote to existing table footnote rows.
                            if (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && ((tbl.LastRow.FirstCell.FirstParagraph != null && tbl.LastRow.Cells.Count == 1 && tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE"))))
                            {
                                if (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && fontflag == true))
                                {
                                    Paragraph prc = new Paragraph(doc);
                                    if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Table && pr.Range.Text.Trim() != "")
                                    {
                                        Paragraph par = new Paragraph(doc);
                                        pr.ParentNode.InsertAfter(par, pr);
                                    }
                                    if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                    {
                                        prlst.Add(pr);
                                        prc = (Paragraph)pr.NextSibling;
                                        foreach (Run rn in prc.Runs)
                                        {
                                            // condition added to ignore superscript, * and soft return(\v) and text size should be lessthan 12
                                            if ((!rn.Font.Superscript && !rn.Font.Subscript && rn.Text != "*" && rn.Text != "\v") && rn.Font.Size < 12)
                                            {
                                                fontflag1 = true;
                                                break;
                                            }
                                        }
                                        if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && fontflag1 == true))))
                                        {
                                            if (prlst.Count > 0)
                                            {
                                                bool isChildadded = false;
                                                foreach (Paragraph prL in prlst)
                                                {
                                                    FixFlag = true;
                                                    tbl.LastRow.FirstCell.AppendChild(prL);
                                                    isChildadded = true;
                                                }
                                                if (isChildadded)
                                                {
                                                    prlst.RemoveRange(0, prlst.Count);
                                                }
                                            }
                                        }
                                        pr = prc;
                                        node = prc;
                                    }
                                    else if (node.NextSibling != null && (node.NextSibling.NodeType == NodeType.BookmarkStart || node.NextSibling.NodeType == NodeType.BookmarkEnd))
                                    {
                                        prlst.Add(pr);
                                        node = node.NextSibling;
                                    }
                                    else
                                    {
                                        foreach (Run rn in prc.Runs)
                                        {
                                            // condition added to ignore superscript, * and soft return(\v) and text size should be lessthan 12
                                            if ((!rn.Font.Superscript && !rn.Font.Subscript && rn.Text != "*" && rn.Text != "\v") && rn.Font.Size < 12)
                                            {
                                                fontflag1 = true;
                                                break;
                                            }
                                        }
                                        if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && fontflag1 == true))))
                                        {
                                            FixFlag = true;
                                            tbl.LastRow.FirstCell.AppendChild(pr);
                                        }
                                        if (node.NextSibling != null && (node.NextSibling.NodeType == NodeType.BookmarkEnd || node.NextSibling.NodeType == NodeType.BookmarkStart || node.NextSibling.NodeType == NodeType.Paragraph))
                                            node = node.NextSibling;
                                        else
                                            break;
                                    }
                                }
                                else
                                    break;
                            }
                            //Below code for moving footnote into the table footnote row(Considering only footnote style or font size below 12)
                            else if (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && fontflag == true)))
                            {
                                Paragraph prc = new Paragraph(doc);
                                if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Table && pr.Range.Text.Trim() != "")
                                {
                                    Paragraph par = new Paragraph(doc);
                                    pr.ParentNode.InsertAfter(par, pr);
                                }
                                if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                {
                                    prlst1.Add(pr);
                                    prc = (Paragraph)pr.NextSibling;
                                    foreach (Run rn in prc.Runs)
                                    {
                                        // condition added to ignore superscript, * and soft return(\v) and text size should be lessthan 12
                                        if ((!rn.Font.Superscript && !rn.Font.Subscript && rn.Text != "*" && rn.Text != "\v") && rn.Font.Size < 12)
                                        {
                                            fontflag1 = true;
                                            break;
                                        }
                                    }
                                    if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && fontflag1 == true))))
                                    {
                                        if (Addfootrow)
                                        {
                                            //Code to move footnote paragraphs to footer row which is added in below code.
                                            if (prlst1.Count > 0)
                                            {
                                                bool isChildadded = false;
                                                foreach (Paragraph prL in prlst1)
                                                {
                                                    FixFlag = true;
                                                    tbl.LastRow.FirstCell.AppendChild(prL);
                                                    isChildadded = true;
                                                }
                                                if (isChildadded)
                                                {
                                                    prlst1.RemoveRange(0, prlst1.Count);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //Code to add footer row to the table to add first footnote paragraph
                                            Addfootrow = true;
                                            Row clonedRow = (Row)tbl.Rows[tbl.Rows.Count - 1].Clone(true);
                                            clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                            int count = clonedRow.Cells.Count();
                                            double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                            string type = clonedRow.Cells[0].CellFormat.PreferredWidth.Type.ToString();
                                            for (int i = 1; i < count; i++)
                                            {
                                                clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                                NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                            }
                                            FixFlag = true;
                                            tbl.Rows.Insert(tbl.Rows.Count, clonedRow);
                                            Row rw = tbl.LastRow;
                                            foreach (Cell cel in rw)
                                            {
                                                cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Bottom.LineWidth = 0;
                                                cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Left.LineWidth = 0;
                                                cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Right.LineWidth = 0;
                                            }
                                            tbl.LastRow.FirstCell.RemoveAllChildren();
                                            tbl.LastRow.FirstCell.EnsureMinimum();
                                            tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                            if (prlst1.Count > 0)
                                            {
                                                bool isChildadded = false;
                                                foreach (Paragraph prL in prlst1)
                                                {
                                                    FixFlag = true;
                                                    tbl.LastRow.FirstCell.AppendChild(prL);
                                                    isChildadded = true;
                                                }
                                                if (isChildadded)
                                                {
                                                    prlst1.RemoveRange(0, prlst1.Count);
                                                }
                                            }
                                            tbl.LastRow.FirstCell.Paragraphs[0].Remove();
                                            tbl.LastRow.FirstCell.CellFormat.WrapText = true;
                                            tbl.LastRow.RowFormat.HeightRule = HeightRule.Auto;
                                            tbl.LastRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                        }
                                    }
                                    pr = prc;
                                    node = prc;
                                }
                                else if (node.NextSibling != null && (node.NextSibling.NodeType == NodeType.BookmarkStart || node.NextSibling.NodeType == NodeType.BookmarkEnd))
                                {
                                    prlst1.Add(pr);
                                    node = node.NextSibling;
                                }
                                else
                                {
                                    foreach (Run rn in prc.Runs)
                                    {
                                        // condition added to ignore superscript, * and soft return(\v) and text size should be lessthan 12
                                        if ((!rn.Font.Superscript && !rn.Font.Subscript && rn.Text != "*" && rn.Text != "\v") && rn.Font.Size < 12)
                                        {
                                            fontflag1 = true;
                                            break;
                                        }
                                    }
                                    if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && fontflag1 == true))))
                                    {
                                        if (Addfootrow)
                                        {
                                            tbl.LastRow.FirstCell.AppendChild(pr);
                                        }
                                        else
                                        {
                                            Addfootrow = true;
                                            Row clonedRow = (Row)tbl.Rows[tbl.Rows.Count - 1].Clone(true);
                                            clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                            int count = clonedRow.Cells.Count();
                                            double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                            string type = clonedRow.Cells[0].CellFormat.PreferredWidth.Type.ToString();
                                            for (int i = 1; i < count; i++)
                                            {
                                                clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                                NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                            }
                                            FixFlag = true;
                                            tbl.Rows.Insert(tbl.Rows.Count, clonedRow);
                                            Row rw = tbl.LastRow;
                                            foreach (Cell cel in rw)
                                            {
                                                cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Bottom.LineWidth = 0;
                                                cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Left.LineWidth = 0;
                                                cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Right.LineWidth = 0;
                                            }
                                            tbl.LastRow.FirstCell.RemoveAllChildren();
                                            tbl.LastRow.FirstCell.EnsureMinimum();
                                            tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                            tbl.LastRow.FirstCell.Paragraphs.Add(pr);
                                            tbl.LastRow.FirstCell.Paragraphs[0].Remove();
                                            tbl.LastRow.FirstCell.CellFormat.WrapText = true;
                                            tbl.LastRow.RowFormat.HeightRule = HeightRule.Auto;
                                            tbl.LastRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                        }
                                    }
                                    if (node.NextSibling != null && (node.NextSibling.NodeType == NodeType.BookmarkEnd || node.NextSibling.NodeType == NodeType.BookmarkStart || node.NextSibling.NodeType == NodeType.Paragraph))
                                        node = node.NextSibling;
                                    else
                                        break;
                                }
                            }
                            else
                                break;
                        }
                        else if (node.NextSibling != null && node.NodeType == NodeType.BookmarkEnd || node.NodeType == NodeType.BookmarkStart)
                        {
                            node = node.NextSibling;
                        }
                        else
                            break;
                    }

                }
                if (FixFlag)
                {
                    chLst[k].Is_Fixed = 1;
                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                    chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "All table footnotes are in right position";
                }
                //doc.Save(rObj.DestFilePath);
                chLst[k].CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixAddFooterrowbk(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool FixFlag = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                doc = new Document(rObj.DestFilePath);

                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);




                List<Run> lst1 = new List<Run>();
                NodeCollection paragraphs1 = doc.GetChildNodes(NodeType.Paragraph, true);
                foreach (Paragraph pr in paragraphs1)
                {
                    foreach (Run rn in pr.Runs)
                    {
                        if (!pr.IsInCell)
                        {
                            if (rn.Font.Superscript || rn.Text == "*")
                            {
                                lst1.Add(rn);
                            }
                        }
                    }
                }

                List<Node> tableslst = doc.GetChildNodes(NodeType.Table, true).Where(x => x.NextSibling != null && x.NextSibling.NodeType == NodeType.Paragraph).ToList();

                foreach (Table tbl in tableslst)
                {
                    Paragraph pr = (Paragraph)tbl.NextSibling;


                    if (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && ((tbl.LastRow.FirstCell.FirstParagraph != null && tbl.LastRow.Cells.Count == 1 && tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE"))))
                    {
                        //Adding field footnote to existing table footnote rows.
                        List<Paragraph> prlst = new List<Paragraph>();
                        while (!pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])))
                        {
                            Paragraph prc = new Paragraph(doc);
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Table && pr.Range.Text.Trim() != "")
                            {
                                Paragraph par = new Paragraph(doc);
                                pr.ParentNode.InsertAfter(par, pr);
                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                prlst.Add(pr);
                                prc = (Paragraph)pr.NextSibling;
                                if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0]))))
                                {
                                    if (prlst.Count > 0)
                                    {
                                        bool isChildadded = false;
                                        foreach (Paragraph prL in prlst)
                                        {
                                            FixFlag = true;
                                            tbl.LastRow.FirstCell.AppendChild(prL);
                                            isChildadded = true;
                                        }
                                        if (isChildadded)
                                        {
                                            prlst.RemoveRange(0, prlst.Count);
                                        }
                                    }
                                }
                                pr = prc;
                            }
                            else
                            {
                                if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0]))))
                                {
                                    FixFlag = true;
                                    tbl.LastRow.FirstCell.AppendChild(pr);
                                }
                                break;
                            }
                        }
                    }
                    else if (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])))
                    {

                        //Below code for moving footnote into the table footnote row(Considering only footnote style or font size below 12)
                        bool Addfootrow = false;
                        List<Paragraph> prlst = new List<Paragraph>();
                        while (!pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])))
                        {
                            Paragraph prc = new Paragraph(doc);
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Table && pr.Range.Text.Trim() != "")
                            {
                                Paragraph par = new Paragraph(doc);
                                pr.ParentNode.InsertAfter(par, pr);
                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                prlst.Add(pr);
                                prc = (Paragraph)pr.NextSibling;
                                if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0]))))
                                {
                                    if (Addfootrow)
                                    {
                                        //Code to move footnote paragraphs to footer row which is added in below code.
                                        if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0]))))
                                        {
                                            if (prlst.Count > 0)
                                            {
                                                bool isChildadded = false;
                                                foreach (Paragraph prL in prlst)
                                                {
                                                    FixFlag = true;
                                                    tbl.LastRow.FirstCell.AppendChild(prL);
                                                    isChildadded = true;
                                                }
                                                if (isChildadded)
                                                {
                                                    prlst.RemoveRange(0, prlst.Count);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {

                                        //Code to add footer row to the table to add first footnote paragraph
                                        Addfootrow = true;
                                        Row clonedRow = (Row)tbl.Rows[tbl.Rows.Count - 1].Clone(true);
                                        clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                        int count = clonedRow.Cells.Count();
                                        double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                        string type = clonedRow.Cells[0].CellFormat.PreferredWidth.Type.ToString();
                                        for (int i = 1; i < count; i++)
                                        {
                                            clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                            NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                        }
                                        FixFlag = true;
                                        tbl.Rows.Insert(tbl.Rows.Count, clonedRow);
                                        Row rw = tbl.LastRow;
                                        foreach (Cell cel in rw)
                                        {
                                            cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Bottom.LineWidth = 0;
                                            cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Left.LineWidth = 0;
                                            cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Right.LineWidth = 0;
                                            //cel.CellFormat.Borders.Top.LineStyle = LineStyle.Single;
                                            //cel.CellFormat.Borders.Top.LineWidth = 1;
                                        }
                                        tbl.LastRow.FirstCell.RemoveAllChildren();
                                        tbl.LastRow.FirstCell.EnsureMinimum();
                                        tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                        if (prlst.Count > 0)
                                        {
                                            bool isChildadded = false;
                                            foreach (Paragraph prL in prlst)
                                            {
                                                FixFlag = true;
                                                tbl.LastRow.FirstCell.AppendChild(prL);
                                                isChildadded = true;
                                            }
                                            if (isChildadded)
                                            {
                                                prlst.RemoveRange(0, prlst.Count);
                                            }
                                        }
                                        tbl.LastRow.FirstCell.Paragraphs[0].Remove();
                                        //  if (tbl.AllowAutoFit != true)
                                        //   tbl.LastRow.FirstCell.CellFormat.Width = NewCellWidth;
                                        tbl.LastRow.FirstCell.CellFormat.WrapText = true;
                                        tbl.LastRow.RowFormat.HeightRule = HeightRule.Auto;
                                        tbl.LastRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                    }
                                }
                                pr = prc;
                            }
                            else
                            {
                                if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0]))))
                                {
                                    if (Addfootrow)
                                    {
                                        if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (prc.Runs.Count > 0 && prc.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0]))))
                                        {
                                            tbl.LastRow.FirstCell.AppendChild(pr);
                                        }
                                    }
                                    else
                                    {

                                        Addfootrow = true;
                                        Row clonedRow = (Row)tbl.Rows[tbl.Rows.Count - 1].Clone(true);
                                        clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                        int count = clonedRow.Cells.Count();
                                        double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                        string type = clonedRow.Cells[0].CellFormat.PreferredWidth.Type.ToString();
                                        for (int i = 1; i < count; i++)
                                        {
                                            clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                            NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                        }
                                        FixFlag = true;
                                        tbl.Rows.Insert(tbl.Rows.Count, clonedRow);
                                        Row rw = tbl.LastRow;
                                        foreach (Cell cel in rw)
                                        {
                                            cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Bottom.LineWidth = 0;
                                            cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Left.LineWidth = 0;
                                            cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Right.LineWidth = 0;
                                            //cel.CellFormat.Borders.Top.LineStyle = LineStyle.Single;
                                            //cel.CellFormat.Borders.Top.LineWidth = 1;
                                        }
                                        tbl.LastRow.FirstCell.RemoveAllChildren();
                                        tbl.LastRow.FirstCell.EnsureMinimum();
                                        tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                        tbl.LastRow.FirstCell.Paragraphs.Add(pr);
                                        tbl.LastRow.FirstCell.Paragraphs[0].Remove();
                                        // if (tbl.AllowAutoFit != true)
                                        //  tbl.LastRow.FirstCell.CellFormat.Width = NewCellWidth;
                                        tbl.LastRow.FirstCell.CellFormat.WrapText = true;
                                        tbl.LastRow.RowFormat.HeightRule = HeightRule.Auto;
                                        tbl.LastRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
                if (FixFlag)
                {
                    //chLst[k].QC_Result = "Fixed";
                    chLst[k].Is_Fixed = 1;
                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                    chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "All table footnotes are in right position";
                }
                doc.Save(rObj.DestFilePath);
                chLst[k].CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }

        public void CheckMoveFootnoteInTable(RegOpsQC rObj, Document doc)
        {
            Style Captionstyles = null;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool Allsubchecks = false;
            bool flag = false;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            List<Run> lst1 = new List<Run>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter).FirstOrDefault();
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Given style is not in the document";
                }
                else
                {
                    NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                    LayoutCollector layout = new LayoutCollector(doc);
                    //table next paragraph with size below 12
                    List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                    foreach (Table tbl in tablesList)
                    {
                        Paragraph pr = (Paragraph)tbl.NextSibling;
                        while (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter) || pr.Range.Text.Trim() == "") && layout.GetStartPageIndex(pr) != 0)
                        {
                            Paragraph prc = new Paragraph(doc);
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                prc = (Paragraph)pr.NextSibling;
                                if (pr.Range.Text.Trim() != "")
                                {
                                    flag = true;
                                    if (pr.LastChild != null)
                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    else
                                        lst.Add(layout.GetStartPageIndex(pr));
                                }
                                pr = prc;
                            }
                            else
                            {
                                if (pr.Range.Text.Trim() != "")
                                {
                                    flag = true;
                                    if (pr.LastChild != null)
                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    else
                                        lst.Add(layout.GetStartPageIndex(pr));
                                }
                                break;
                            }
                        }
                    }
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.Contains(rObj.Check_Parameter) && !((Paragraph)x).IsInCell && ((Paragraph)x).PreviousSibling != null && ((Paragraph)x).PreviousSibling.NodeType == NodeType.Table).ToList();
                    foreach (Paragraph prlst in paragraphs)
                    {
                        Paragraph pr = prlst;
                        while (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter) || pr.Range.Text.Trim() == "") && layout.GetStartPageIndex(pr) != 0)
                        {
                            Paragraph prc = new Paragraph(doc);
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                prc = (Paragraph)pr.NextSibling;
                                if (pr.Range.Text.Trim() != "")
                                {
                                    flag = true;
                                    if (pr.LastChild != null)
                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    else
                                        lst.Add(layout.GetStartPageIndex(pr));
                                }
                                pr = prc;
                            }
                            else
                            {
                                if (pr.Range.Text.Trim() != "")
                                {
                                    flag = true;
                                    if (pr.LastChild != null)
                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    else
                                        lst.Add(layout.GetStartPageIndex(pr));
                                }
                                break;
                            }
                        }
                    }
                    if (tables.Count == 0)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "There are no tables in the document";
                    }
                    else if (!flag)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "All table Footnotes are in Correct position";
                    }
                    else
                    {
                        List<int> lst2 = lst.Distinct().ToList();
                        if (lst2.Count > 0)
                        {
                            Allsubchecks = true;
                            lst2.Sort();
                            pagenumber = string.Join(", ", lst2.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Table Footnotes are in: " + pagenumber;
                            rObj.CommentsWOPageNum = "Table Footnotes are not in Correct position";
                            rObj.PageNumbersLst = lst2;
                        }
                        else
                        {
                            rObj.QC_Result = "Passed";
                            //rObj.Comments = "All table footnotes are in right position";
                        }
                    }
                }
                
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixMoveFootnoteInTable(RegOpsQC rObj, Document doc)
        {
            Style Captionstyles = null;
            bool FixFlag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter).FirstOrDefault();
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Given style is not in the document";
                }
                else
                {
                    List<Node> tableslst = doc.GetChildNodes(NodeType.Table, true).Where(x => x.NextSibling != null && x.NextSibling.NodeType == NodeType.Paragraph).ToList();

                    foreach (Table tbl in tableslst)
                    {
                        Paragraph pr = (Paragraph)tbl.NextSibling;


                        if (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && ((tbl.LastRow.FirstCell.FirstParagraph != null && tbl.LastRow.Cells.Count == 1 && tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter))))
                        {
                            //Adding field footnote to existing table footnote rows.
                            List<Paragraph> prlst = new List<Paragraph>();
                            while (!pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter) || pr.Range.Text.Trim() == ""))
                            {
                                Paragraph prc = new Paragraph(doc);
                                if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Table && pr.Range.Text.Trim() != "")
                                {
                                    Paragraph par = new Paragraph(doc);
                                    pr.ParentNode.InsertAfter(par, pr);
                                }
                                if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                {
                                    prlst.Add(pr);
                                    prc = (Paragraph)pr.NextSibling;
                                    if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter))))
                                    {
                                        if (prlst.Count > 0)
                                        {
                                            bool isChildadded = false;
                                            foreach (Paragraph prL in prlst)
                                            {
                                                tbl.LastRow.FirstCell.AppendChild(prL);
                                                FixFlag = true;
                                                isChildadded = true;
                                            }
                                            if (isChildadded)
                                            {
                                                prlst.RemoveRange(0, prlst.Count);
                                            }
                                        }
                                    }
                                    pr = prc;
                                }
                                else
                                {
                                    if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter))))
                                    {
                                        tbl.LastRow.FirstCell.AppendChild(pr);
                                        FixFlag = true;
                                    }
                                    break;
                                }
                            }
                        }
                        else if (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter) || pr.Range.Text.Trim() == ""))
                        {

                            //Below code for moving footnote into the table footnote row(Considering only footnote style or font size below 12)
                            bool Addfootrow = false;
                            List<Paragraph> prlst = new List<Paragraph>();
                            while (!pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter) || pr.Range.Text.Trim() == ""))
                            {
                                Paragraph prc = new Paragraph(doc);
                                if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Table && pr.Range.Text.Trim() != "")
                                {
                                    Paragraph par = new Paragraph(doc);
                                    pr.ParentNode.InsertAfter(par, pr);
                                }
                                if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                {
                                    prlst.Add(pr);
                                    prc = (Paragraph)pr.NextSibling;
                                    if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter))))
                                    {
                                        if (Addfootrow)
                                        {
                                            //Code to move footnote paragraphs to footer row which is added in below code.
                                            if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter))))
                                            {
                                                if (prlst.Count > 0)
                                                {
                                                    bool isChildadded = false;
                                                    foreach (Paragraph prL in prlst)
                                                    {
                                                        tbl.LastRow.FirstCell.AppendChild(prL);
                                                        isChildadded = true;
                                                        FixFlag = true;
                                                    }
                                                    if (isChildadded)
                                                    {
                                                        prlst.RemoveRange(0, prlst.Count);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {

                                            //Code to add footer row to the table to add first footnote paragraph
                                            Addfootrow = true;
                                            Row clonedRow = (Row)tbl.Rows[tbl.Rows.Count - 1].Clone(true);
                                            clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                            int count = clonedRow.Cells.Count();
                                            double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                            string type = clonedRow.Cells[0].CellFormat.PreferredWidth.Type.ToString();
                                            for (int i = 1; i < count; i++)
                                            {
                                                clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                                NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                            }
                                            FixFlag = true;
                                            tbl.Rows.Insert(tbl.Rows.Count, clonedRow);
                                            Row rw = tbl.LastRow;
                                            foreach (Cell cel in rw)
                                            {
                                                cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Bottom.LineWidth = 0;
                                                cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Left.LineWidth = 0;
                                                cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Right.LineWidth = 0;
                                                //cel.CellFormat.Borders.Top.LineStyle = LineStyle.Single;
                                                //cel.CellFormat.Borders.Top.LineWidth = 1;
                                            }
                                            tbl.LastRow.FirstCell.RemoveAllChildren();
                                            tbl.LastRow.FirstCell.EnsureMinimum();
                                            tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                            if (prlst.Count > 0)
                                            {
                                                bool isChildadded = false;
                                                foreach (Paragraph prL in prlst)
                                                {
                                                    tbl.LastRow.FirstCell.AppendChild(prL);
                                                    isChildadded = true;
                                                    FixFlag = true;
                                                }
                                                if (isChildadded)
                                                {
                                                    prlst.RemoveRange(0, prlst.Count);
                                                }
                                            }
                                            tbl.LastRow.FirstCell.Paragraphs[0].Remove();
                                            //  if (tbl.AllowAutoFit != true)
                                            //   tbl.LastRow.FirstCell.CellFormat.Width = NewCellWidth;
                                            tbl.LastRow.FirstCell.CellFormat.WrapText = true;
                                            tbl.LastRow.RowFormat.HeightRule = HeightRule.Auto;
                                            tbl.LastRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                        }
                                    }
                                    pr = prc;
                                }
                                else
                                {
                                    if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter))))
                                    {
                                        if (Addfootrow)
                                        {
                                            if (pr.Range.Text.Trim() != "" || (pr.Range.Text.Trim() == "" && !prc.Range.Text.StartsWith("\f") && (prc.ParagraphFormat.StyleName.Contains(rObj.Check_Parameter))))
                                            {
                                                tbl.LastRow.FirstCell.AppendChild(pr);
                                            }
                                        }
                                        else
                                        {

                                            Addfootrow = true;
                                            Row clonedRow = (Row)tbl.Rows[tbl.Rows.Count - 1].Clone(true);
                                            clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                            int count = clonedRow.Cells.Count();
                                            double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                            string type = clonedRow.Cells[0].CellFormat.PreferredWidth.Type.ToString();
                                            for (int i = 1; i < count; i++)
                                            {
                                                clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                                NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                            }
                                            FixFlag = true;
                                            tbl.Rows.Insert(tbl.Rows.Count, clonedRow);
                                            Row rw = tbl.LastRow;
                                            foreach (Cell cel in rw)
                                            {
                                                cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Bottom.LineWidth = 0;
                                                cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Left.LineWidth = 0;
                                                cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                                cel.CellFormat.Borders.Right.LineWidth = 0;
                                                //cel.CellFormat.Borders.Top.LineStyle = LineStyle.Single;
                                                //cel.CellFormat.Borders.Top.LineWidth = 1;
                                            }
                                            tbl.LastRow.FirstCell.RemoveAllChildren();
                                            tbl.LastRow.FirstCell.EnsureMinimum();
                                            tbl.LastRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                            tbl.LastRow.FirstCell.Paragraphs.Add(pr);
                                            tbl.LastRow.FirstCell.Paragraphs[0].Remove();
                                            // if (tbl.AllowAutoFit != true)
                                            //  tbl.LastRow.FirstCell.CellFormat.Width = NewCellWidth;
                                            tbl.LastRow.FirstCell.CellFormat.WrapText = true;
                                            tbl.LastRow.RowFormat.HeightRule = HeightRule.Auto;
                                            tbl.LastRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (FixFlag)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                  
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public static bool TblFootnotefont(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool Allsubchecks = false;
            bool flag = false;
            string Pagenumber = string.Empty;
            List<int> lst = new List<int>();
            List<Run> lst1 = new List<Run>();
            List<int> fslst = new List<int>();
            bool FontSizeFlag = false;
            bool allSubChkFlag = false;
            List<string> ExceptionLst = new List<string>();
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                LayoutCollector layout = new LayoutCollector(doc);
                //table next paragraph with size below 12
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                foreach (Table tbl in tablesList)
                {
                    //doc.UpdateListLabels();

                    //Row lastRow = doc.FirstSection.Body.Tables[2].LastRow;
                    Row rw = tbl.LastRow;
                    foreach (Cell cell in rw.Cells)
                    {
                        foreach (Paragraph pr in cell.Paragraphs)
                        {
                            while (pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12)) && layout.GetStartPageIndex(pr) != 0)
                            {
                                //Paragraph prc = new Paragraph(doc);
                                if (pr.NodeType == NodeType.Paragraph)
                                {
                                    //prc = (Paragraph)pr.NextSibling;
                                    if (pr.Range.Text.Trim() != "")
                                    {
                                        if (pr.LastChild != null)

                                            if (chLst[k].Check_Parameter != null)
                                            {
                                                foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                                {

                                                    if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                                    {
                                                        fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                        FontSizeFlag = true;
                                                        allSubChkFlag = true;

                                                    }
                                                }
                                                //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                                //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                                //{
                                                //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                                //    {
                                                //        fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                //        FontSizeFlag = true;
                                                //        allSubChkFlag = true;
                                                //    }
                                                //    //else
                                                //    //    fslst.Add(layout.GetStartPageIndex(pr));

                                                //}
                                            }

                                    }
                                    break;
                                }
                                else
                                {
                                    if (pr.Range.Text.Trim() != "")
                                    {
                                        if (pr.LastChild != null)

                                            flag = true;
                                        if (chLst[k].Check_Parameter != null)
                                        {

                                            foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                            {

                                                if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                                {
                                                    fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                    FontSizeFlag = true;
                                                    allSubChkFlag = true;

                                                }
                                            }
                                            //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                            //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                            //{
                                            //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                            //    {
                                            //        fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                            //        FontSizeFlag = true;
                                            //        allSubChkFlag = true;
                                            //    }
                                            //    //else
                                            //    //    fslst.Add(layout.GetStartPageIndex(pr));

                                            //}
                                        }

                                    }
                                    break;
                                }
                            }
                        }
                        break;
                    }


                }



                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") && !((Paragraph)x).IsInCell && ((Paragraph)x).PreviousSibling != null && ((Paragraph)x).PreviousSibling.NodeType == NodeType.Table).ToList();
                foreach (Paragraph prlst in paragraphs)
                {
                    Paragraph pr = prlst;
                    while (!pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12)) && layout.GetStartPageIndex(pr) != 0)
                    {
                        //Paragraph prc = new Paragraph(doc);
                        if (pr.NodeType == NodeType.Paragraph)
                        {
                            //prc = (Paragraph)pr.NextSibling;
                            if (pr.Range.Text.Trim() != "")
                            {
                                if (pr.LastChild != null)

                                    flag = true;
                                if (chLst[k].Check_Parameter != null)
                                {


                                    foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                    {

                                        if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                        {
                                            fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                            FontSizeFlag = true;
                                            allSubChkFlag = true;

                                        }
                                    }
                                    //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                    //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                    //{
                                    //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                    //    {
                                    //        fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    //        FontSizeFlag = true;
                                    //        allSubChkFlag = true;
                                    //    }
                                    //    //else
                                    //    //    fslst.Add(layout.GetStartPageIndex(pr));

                                    //}
                                }

                            }
                            break;

                        }
                        else
                        {
                            if (pr.Range.Text.Trim() != "")
                            {
                                flag = true;
                                if (pr.LastChild != null)

                                    flag = true;
                                if (chLst[k].Check_Parameter != null)
                                {

                                    foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                    {

                                        if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                        {
                                            fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                            FontSizeFlag = true;
                                            allSubChkFlag = true;

                                        }
                                    }
                                    //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                    //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                    //{
                                    //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                    //    {
                                    //        fslst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    //        FontSizeFlag = true;
                                    //        allSubChkFlag = true;
                                    //    }
                                    //    //else
                                    //    //    fslst.Add(layout.GetStartPageIndex(pr));

                                    //}
                                }

                            }
                            break;
                        }
                    }
                }



                if (FontSizeFlag == true)
                {
                    if (fslst.Count > 0)
                    {
                        Allsubchecks = true;
                        List<int> lst2 = fslst.Distinct().ToList();
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        chLst[k].QC_Result = "Failed";
                        chLst[k].Comments = "Footnote font size is not in \"" + chLst[k].Check_Parameter + "\" in: " + Pagenumber;

                        chLst[k].CommentsWOPageNum = "Footnote font size is not in \"" + chLst[k].Check_Parameter + "\"";
                        chLst[k].PageNumbersLst = lst2;

                    }

                    else
                    {
                        chLst[k].QC_Result = "Failed";
                        chLst[k].Comments = "Footnote font size is not in \"" + chLst[k].Check_Parameter + "\"";
                    }
                }
                else if (!flag)
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "There is no Footnote in document";
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "Footnote font size is in " + chLst[k].Check_Parameter;
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;


                return Allsubchecks;
            }


            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubchecks;
        }


        public void FixTablefoootnote(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {

            bool flag = false;
            string Pagenumber = string.Empty;
            List<int> lst = new List<int>();
            List<Run> lst1 = new List<Run>();
            List<int> fslst = new List<int>();
            bool FontSizeFlagFix = false;
            string fontsizeRes = string.Empty;
            List<string> ExceptionLst = new List<string>();

            fontsizeRes = chLst[k].Comments;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);

                //table next paragraph with size below 12
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                foreach (Table tbl in tablesList)
                {
                    //doc.UpdateListLabels();

                    //Row lastRow = doc.FirstSection.Body.Tables[2].LastRow;
                    Row rw = tbl.LastRow;
                    foreach (Cell cell in rw.Cells)
                    {
                        foreach (Paragraph pr in cell.Paragraphs)
                        {
                            while (pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])))
                            {
                                //Paragraph prc = new Paragraph(doc);
                                if (pr.NodeType == NodeType.Paragraph)
                                {
                                    //prc = (Paragraph)pr.NextSibling;
                                    if (pr.Range.Text.Trim() != "")
                                    {
                                        flag = true;
                                        if (pr.LastChild != null)

                                            flag = true;
                                        if (chLst[k].Check_Parameter != null)
                                        {
                                            foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                            {

                                                if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                                {
                                                    run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                                    FontSizeFlagFix = true;

                                                }
                                            }
                                            //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                            //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                            //{
                                            //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                            //    {
                                            //        run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            //        FontSizeFlagFix = true;

                                            //    }
                                            //    //else
                                            //    //    run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());

                                            //}
                                        }

                                    }
                                    break;
                                }
                                else
                                {
                                    if (pr.Range.Text.Trim() != "")
                                    {
                                        flag = true;
                                        if (pr.LastChild != null)

                                            flag = true;
                                        if (chLst[k].Check_Parameter != null)
                                        {

                                            foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                            {

                                                if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                                {
                                                    run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                                    FontSizeFlagFix = true;

                                                }
                                            }
                                            //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                            //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                            //{
                                            //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                            //    {
                                            //        run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            //        FontSizeFlagFix = true;
                                            //    }
                                            //    //else
                                            //    //    run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            //    //FontSizeFlagFix = true;
                                            //}

                                        }

                                    }
                                    break;
                                }
                            }
                        }
                    }
                }


                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") && !((Paragraph)x).IsInCell && ((Paragraph)x).PreviousSibling != null && ((Paragraph)x).PreviousSibling.NodeType == NodeType.Table).ToList();
                foreach (Paragraph prlst in paragraphs)
                {
                    Paragraph pr = prlst;
                    while (!pr.Range.Text.StartsWith("\f") || !pr.IsInCell && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12) || lst1.Contains(pr.Runs[0])))
                    {
                        //Paragraph prc = new Paragraph(doc);
                        if (pr.NodeType == NodeType.Paragraph)
                        {
                            //prc = (Paragraph)pr.NextSibling;
                            if (pr.Range.Text.Trim() != "")
                            {
                                flag = true;
                                if (pr.LastChild != null)

                                    flag = true;
                                if (chLst[k].Check_Parameter != null)
                                {

                                    foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                    {

                                        if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                        {
                                            run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                            FontSizeFlagFix = true;

                                        }
                                    }
                                    //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                    //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                    //{
                                    //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                    //    {
                                    //        run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                    //        FontSizeFlagFix = true;
                                    //    }
                                    //    //else
                                    //    //    run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                    //    //FontSizeFlagFix = true;
                                    //}
                                }

                            }
                            break;
                        }
                        else
                        {
                            if (pr.Range.Text.Trim() != "")
                            {
                                flag = true;
                                if (pr.LastChild != null)

                                    flag = true;
                                if (chLst[k].Check_Parameter != null)
                                {

                                    foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                    {

                                        if (run.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                        {
                                            run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                            FontSizeFlagFix = true;

                                        }
                                    }
                                    //List<Node> run1 = pr.GetChildNodes(NodeType.Run, false).ToList();
                                    //foreach (Run run in run1.Where(r => r.ParentNode.NodeType != NodeType.Footnote).ToList())
                                    //{
                                    //    if (Convert.ToDouble(run.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()))
                                    //    {
                                    //        run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                    //        FontSizeFlagFix = true;
                                    //    }
                                    //    //else
                                    //    //    run.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                    //    //FontSizeFlagFix = true;
                                    //}
                                }

                            }
                            break;
                        }
                    }
                }






                if (FontSizeFlagFix == true)
                {

                    //chLst[k].QC_Result = "Fixed";
                    chLst[k].Is_Fixed = 1;
                    //doc.StopTrackRevisions();

                    chLst[k].Comments = fontsizeRes + ". Fixed";
                    chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";

                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "Footnote font size is in " + chLst[k].Check_Parameter.ToString();
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
            }



            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                chLst[k].Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            if (flag == false)
            {
                for (int a = 0; a < chLst.Count; a++)
                {
                    if (chLst[a].Check_Name == "Font Size")
                    {
                        chLst[a].QC_Result = "Passed";
                        chLst[a].Comments = "There is no Footnote.";
                    }
                }
            }
            //doc.Save(rObj.DestFilePath);
            rObj.CHECK_END_TIME = DateTime.Now;

        }

        /// <summary>
        /// Table Captions - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void TableCaptionFonts(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool allSubChkFlag = false;
            string Align = string.Empty;
            string status = string.Empty;
            bool TblCaptionFlag = false;
            bool TblFootnoteflag = false;
            bool TblFootnotefontflag = false;
            Int64 tblstylchtype = 0;
            Int64 tblsizechk = 0;
            Int64 tblfntfmlychk = 0;
            Int64 movetablecapchk = 0;
            Int64 movefootnotechk = 0;
            Int64 tablefootnotechk = 0;
            bool CheckType = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
            for (int i = 0; i < chLst.Count; i++)
            {
                if (chLst[i].Check_Name == "Move Table title and caption into caption row")
                    movetablecapchk = chLst[i].Check_Type;
                if (chLst[i].Check_Name == "Move footnote to table footer row")
                    movefootnotechk = chLst[i].Check_Type;
                if (chLst[i].Check_Name == "Font size for table footnote")
                    tablefootnotechk = chLst[i].Check_Type;
            }
            if (tblfntfmlychk == 0 && tblstylchtype == 0 && tblsizechk == 0 && movetablecapchk == 0 && movefootnotechk == 0 && tablefootnotechk == 0)
            {
                for (int j = 0; j < chLst.Count; j++)
                {
                    if (chLst[j].Check_Name == "Table captions style")
                        chLst[j].Check_Type = 0;
                }
            }
            try
            {
                // to get sub check lists
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        if (chLst[k].Check_Type == 1)
                            CheckType = true;
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;
                        bool Tblflag = false;
                        if (chLst[k].Check_Name == "Move Table title and caption into caption row" && TblCaptionFlag == false)
                        {
                            Tblflag = Checkmovetablecaptionintocaptionrow(rObj, doc, chLst, k);
                            TblCaptionFlag = true;
                            if (Tblflag == true)
                            {
                                allSubChkFlag = true;
                            }
                        }
                        else if (chLst[k].Check_Name == "Move footnote to table footer row" && TblFootnoteflag == false)
                        {
                            Tblflag = AddFooterrow(rObj, doc, chLst, k);
                            TblFootnoteflag = true;
                            if (Tblflag == true)
                            {
                                allSubChkFlag = true;
                            }
                        }
                        else if (chLst[k].Check_Name == "Font size for table footnote" && TblFootnotefontflag == false)
                        {
                            Tblflag = TblFootnotefont(rObj, doc, chLst, k);
                            TblFootnotefontflag = true;
                            if (Tblflag == true)
                            {
                                allSubChkFlag = true;
                            }
                        }
                    }
                }
                LayoutCollector layout = new LayoutCollector(doc);
                // to get sub check list
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (CheckType == false)
                    rObj.Check_Type = 0;
                if (tables.Count == 0)
                {
                    for (int a = 0; a < chLst.Count; a++)
                    {
                        chLst[a].QC_Result = "Passed";
                        chLst[a].Comments = "There are no tables in the document";
                    }
                }
                if (allSubChkFlag == true && rObj.Job_Type != "QC")
                {
                    rObj.QC_Result = "Failed";
                }
                if (TblCaptionFlag == false && allSubChkFlag == false)
                {
                    for (int a = 0; a < chLst.Count; a++)
                    {
                        chLst[a].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[a].JID = rObj.JID;
                        chLst[a].Job_ID = rObj.Job_ID;
                        chLst[a].Folder_Name = rObj.Folder_Name;
                        chLst[a].File_Name = rObj.File_Name;
                        chLst[a].Created_ID = rObj.Created_ID;
                        chLst[a].QC_Result = "Failed";
                        chLst[a].Comments = "Table captions and footnotes not found";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }

        /// <summary>
        /// Table Captions - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTableCaptionFonts(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {

            string Pagenumber = string.Empty;
            bool flag = false;
            string Align = string.Empty;
            string status = string.Empty;
            bool TblCaptionflag = false;
            bool TblFootnoteflag = false;
            bool TblFootnotefontflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                // to get sub check lists
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;
                        if (chLst[k].QC_Result != "Passed" && chLst[k].Check_Name == "Move Table title and caption into caption row" && TblCaptionflag == false && chLst[k].Check_Type == 1)
                        {
                            Fixmovetablecaptionintocaptionrow(rObj, doc, chLst, k);
                            TblCaptionflag = true;
                            flag = true;
                        }
                        else if (chLst[k].QC_Result != "Passed" && chLst[k].Check_Name == "Move footnote to table footer row" && TblFootnoteflag == false && chLst[k].Check_Type == 1)
                        {
                            FixAddFooterrow(rObj, doc, chLst, k);
                            TblFootnoteflag = true;
                            flag = true;
                        }
                        else if (chLst[k].QC_Result != "Passed" && chLst[k].Check_Name == "Font size for table footnote" && TblFootnotefontflag == false && chLst[k].Check_Type == 1)
                        {
                            FixTablefoootnote(rObj, doc, chLst, k);
                            TblFootnotefontflag = true;
                            flag = true;
                        }
                    }
                }
                // doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (flag == false)
                {
                    for (int a = 0; a < chLst.Count; a++)
                    {
                        chLst[a].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[a].JID = rObj.JID;
                        chLst[a].Job_ID = rObj.Job_ID;
                        chLst[a].Folder_Name = rObj.Folder_Name;
                        chLst[a].File_Name = rObj.File_Name;
                        chLst[a].Created_ID = rObj.Created_ID;
                        chLst[a].QC_Result = "Passed";
                        chLst[a].Comments = "No change in table captions";
                    }
                }

                doc.UpdateTableLayout();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }
        /// <summary>
        /// Add caption style
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public static bool Addcaptionstyle(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            bool Allsubchecks = false;

            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                //Inner Table Code open
                List<Node> childtbllst = new List<Node>();
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in lsttbles)
                {
                    List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                    childtbllst.AddRange(existlst);
                }
                //Inner Table Code Close
                List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE"))).ToList();
                List<Node> paragraphsLst = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true) && (((Paragraph)x).ParagraphFormat.StyleIdentifier != StyleIdentifier.Caption)) || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL").ToList();
                foreach (Paragraph paragraph in paragraphsLst)
                {
                    List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE"))).ToList();
                    if (CheckInTblExist.Count == 0 && Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)))
                    {
                        if (((paragraph.GetText().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().StartsWith("Table" + ControlChar.SpaceChar)) && (paragraph.Runs[0].Font.Bold == true)) || paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                        {
                            //if (paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                            //{
                            if (paragraph.Runs[0].Font.Bold == true || (paragraph.Runs.Count > 1 && paragraph.Runs[1].Font.Bold == true))
                            {
                                if (layout.GetStartPageIndex(paragraph) != 0)
                                {
                                    if (paragraph.IsInCell)
                                    {
                                        Cell cell = (Cell)paragraph.ParentNode;
                                        if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                        {
                                            lstrp.Add(layout.GetStartPageIndex(paragraph));
                                        }
                                    }
                                    else if (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))
                                    {
                                        if (paragraph.LastChild != null)
                                            lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                        else
                                            lstrp.Add(layout.GetStartPageIndex(paragraph));
                                    }
                                    else
                                    {
                                        Paragraph pr = paragraph;
                                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                        {
                                            if (pr.NextSibling.NodeType == NodeType.Table)
                                            {
                                                if (paragraph.LastChild != null)
                                                    lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                else
                                                    lstrp.Add(layout.GetStartPageIndex(paragraph));
                                                break;
                                            }
                                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                pr = (Paragraph)pr.NextSibling;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                }

                            }
                        }
                        else
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph));
                                    }
                                }
                                else if (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))
                                {
                                    if (paragraph.LastChild != null)
                                        lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                    else
                                        lstrp.Add(layout.GetStartPageIndex(paragraph));
                                }
                                else
                                {
                                    Paragraph pr = paragraph;
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            if (paragraph.LastChild != null)
                                                lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                            else
                                                lstrp.Add(layout.GetStartPageIndex(paragraph));
                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                {
                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == pr.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == pr.Range.Text).ToList();
                    if ((pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)) && CheckInTblExist.Count == 0 && pr.ParagraphFormat.StyleIdentifier != StyleIdentifier.Caption)
                    {
                        if (layout.GetStartPageIndex(pr) != 0)
                        {
                            if (pr.LastChild != null)
                                lstrp.Add(layout.GetStartPageIndex(pr.LastChild));
                            else
                                lstrp.Add(layout.GetStartPageIndex(pr));
                        }
                    }
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (lst4.Count > 0)
                {
                    Allsubchecks = true;
                    lst4.Sort();
                    pagenumber = string.Join(", ", lst4.ToArray());
                    chLst[k].QC_Result = "Failed";
                    chLst[k].Comments = "Missing caption style in: " + pagenumber;
                    chLst[k].CommentsWOPageNum = "Missing caption style";
                    chLst[k].PageNumbersLst = lst4;
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "No missing caption styles";
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubchecks;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubchecks;
        }
        /// <summary>
        /// Fix caption style
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Fixcaptionstyle(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool Fixcaption = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            Style Captionstyles = null;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.StyleIdentifier.ToString() == rObj.Check_Parameter.ToString()).FirstOrDefault();
                if (Captionstyles == null)
                {
                    chLst[k].QC_Result = "Passed";
                    chLst[k].Comments = "File doesn't has Caption style";
                }
                else
                {
                    //Inner Table Code open
                    List<Node> childtbllst = new List<Node>();
                    NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                    foreach (Table tbl in lsttbles)
                    {
                        List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                        childtbllst.AddRange(existlst);
                    }
                    //Inner Table Code Close
                    List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL").ToList();
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && ((((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true) && (((Paragraph)x).ParagraphFormat.StyleIdentifier != StyleIdentifier.Caption)) || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL"))).ToList();

                    foreach (Paragraph paragraph in paragraphs)
                    {
                        List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE"))).ToList();
                        if (CheckInTblExist.Count == 0 && Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)))
                        {
                            if (((paragraph.GetText().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().StartsWith("Table" + ControlChar.SpaceChar)) && (paragraph.Runs[0].Font.Bold == true)) || paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                            {
                                //if (paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                                //{
                                if (paragraph.Runs[0].Font.Bold == true || (paragraph.Runs.Count > 1 && paragraph.Runs[1].Font.Bold == true))
                                {
                                    if (paragraph.IsInCell)
                                    {
                                        Cell cell = (Cell)paragraph.ParentNode;
                                        if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                        {
                                            Fixcaption = true;
                                            paragraph.ParagraphFormat.Style = Captionstyles;
                                        }
                                    }
                                    else if (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))
                                    {
                                        Fixcaption = true;
                                        paragraph.ParagraphFormat.Style = Captionstyles;

                                    }
                                    else
                                    {
                                        Paragraph pr = paragraph;
                                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                        {
                                            if (pr.NextSibling.NodeType == NodeType.Table)
                                            {
                                                Fixcaption = true;
                                                paragraph.ParagraphFormat.Style = Captionstyles;

                                                break;
                                            }
                                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                pr = (Paragraph)pr.NextSibling;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                    {
                                        Fixcaption = true;
                                        paragraph.ParagraphFormat.Style = Captionstyles;

                                    }
                                }
                                else if (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))
                                {
                                    Fixcaption = true;
                                    paragraph.ParagraphFormat.Style = Captionstyles;

                                }
                                else
                                {
                                    Paragraph pr = paragraph;
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            Fixcaption = true;
                                            paragraph.ParagraphFormat.Style = Captionstyles;

                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                    {
                        if (TableSeqFieldStart.ParentParagraph.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr = (Paragraph)TableSeqFieldStart.ParentParagraph;
                            List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == pr.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == pr.Range.Text).ToList();
                            if ((pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)) && CheckInTblExist.Count == 0 && (TableSeqFieldStart.GetField().GetFieldCode().Contains("SEQ Table") || TableSeqFieldStart.GetField().GetFieldCode().Contains("SEQ Figure")) && pr.ParagraphFormat.StyleIdentifier != StyleIdentifier.Caption)
                            {
                                Fixcaption = true;
                                pr.ParagraphFormat.Style = Captionstyles;

                            }
                        }
                    }
                    if (Fixcaption)
                    {
                        //chLst[k].QC_Result = "Fixed";
                        chLst[k].Is_Fixed = 1;
                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                        chLst[k].CommentsWOPageNum += ". Fixed";

                    }
                    else
                    {
                        if (chLst[k].QC_Result == "Failed")
                        {
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = chLst[k].Comments + ". These cannot be fixed";
                        }
                    }
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
                //doc.Save(rObj.DestFilePath);
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Check field code style
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public static bool AddSequencenumber(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            bool Allsubcheck = false;
            List<int> lstrp = new List<int>();

            List<int> lst = new List<int>();

            List<int> lstrinvalid = new List<int>();
            List<int> pgnumlst = new List<int>();
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                // this code is to check seqtable and Seqfigure format are equal or not with given document .
                foreach (Field field in doc.Range.Fields)
                {
                    if (field.Type == FieldType.FieldSequence && field.GetFieldCode().ToUpper().Contains("FIGURE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Figure \\* ARABIC")
                    {
                        lstrinvalid.Add(layout.GetStartPageIndex(field.Start));
                        pgnumlst.Add(layout.GetStartPageIndex(field.Start));
                    }
                    else if (field.Type == FieldType.FieldSequence && field.GetFieldCode().ToUpper().Contains("TABLE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Table \\* ARABIC")
                    {
                        lstrinvalid.Add(layout.GetStartPageIndex(field.Start));
                        pgnumlst.Add(layout.GetStartPageIndex(field.Start));
                    }
                    else if (field.Type == FieldType.FieldSequence && field.Start.ParentParagraph.GetText().ToUpper().StartsWith("TABLE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Table \\* ARABIC")
                    {
                        lstrinvalid.Add(layout.GetStartPageIndex(field.Start));
                        pgnumlst.Add(layout.GetStartPageIndex(field.Start));
                    }
                    else if (field.Type == FieldType.FieldSequence && field.Start.ParentParagraph.GetText().ToUpper().StartsWith("FIGURE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Figure \\* ARABIC")
                    {
                        lstrinvalid.Add(layout.GetStartPageIndex(field.Start));
                        pgnumlst.Add(layout.GetStartPageIndex(field.Start));
                    }
                    else if (field.Type == FieldType.FieldStyleRef || field.Type == FieldType.FieldAutoNum)
                    {
                        lstrinvalid.Add(layout.GetStartPageIndex(field.Start));
                        pgnumlst.Add(layout.GetStartPageIndex(field.Start));
                    }
                }
                List<Node> SeqFields = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => !((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("(CONTINUED)") && ((FieldStart)x).FieldType == FieldType.FieldSequence && !((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().Contains("ARABIC") && (((FieldStart)x).ParentParagraph.GetText().Contains("SEQ Table") || ((FieldStart)x).ParentParagraph.GetText().Contains("SEQ Figure"))).ToList();

                foreach (FieldStart fld in SeqFields)
                {
                    if (layout.GetStartPageIndex(fld.ParentParagraph) != 0)
                    {
                        lst.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                        pgnumlst.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                    }

                }

                //Inner Table Code open
                List<Node> childtbllst = new List<Node>();
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in lsttbles)
                {
                    List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                    childtbllst.AddRange(existlst);
                }
                //Inner Table Code Close
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                foreach (Paragraph paragraph in paragraphs)
                {
                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE"))).ToList();

                    List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                    if (CheckInTblExist.Count == 0 && Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)))
                    {
                        if (paragraph.IsInCell && (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)))
                        {
                            continue;
                        }
                        if (((paragraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (paragraph.Runs[0].Font.Bold == true)) || ((paragraph.GetText().TrimStart().StartsWith("Figure" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().TrimStart().StartsWith("Figure" + ControlChar.SpaceChar)) && (paragraph.Runs[0].Font.Bold == true)) || ((paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL") && paragraph.Runs[0].Font.Bold == true) || paragraph.ParagraphFormat.StyleName.ToUpper() == "CAPTION" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption)
                        {
                            //if (paragraph.Runs[0].Font.Bold == true || (paragraph.Runs.Count > 1 && paragraph.Runs[1].Font.Bold == true))
                            //{
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    }
                                }
                                else if (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))
                                {
                                    if (paragraph.LastChild != null)
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                    }
                                    else
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    }
                                }
                                else
                                {
                                    Paragraph pr = paragraph;
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            if (paragraph.LastChild != null)
                                            {
                                                lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                            }
                                            else
                                            {
                                                lstrp.Add(layout.GetStartPageIndex(paragraph));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                            }
                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            //}
                        }
                        else
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph));

                                    }
                                }
                                else if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)) && paragraph.Runs[0].Font.Bold == true)
                                {
                                    if (paragraph.LastChild != null)
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                    }
                                    else
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    }
                                }
                                else
                                {
                                    Paragraph pr = paragraph;
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            if (paragraph.LastChild != null)
                                            {
                                                lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                            }
                                            else
                                            {
                                                lstrp.Add(layout.GetStartPageIndex(paragraph));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                            }
                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
                List<int> lst2 = lst.Distinct().ToList();
                if (lst2.Count > 0)
                {
                    lst2.Sort();
                    pagenumber = string.Join(", ", lst2.ToArray());
                    chLst[k].Comments = "Numericals not exist for Tables or Figures in: " + pagenumber;
                }
                List<int> lst3 = lstrinvalid.Distinct().ToList();
                if (lst3.Count > 0)
                {
                    Allsubcheck = true;
                    lst3.Sort();
                    pagenumber = string.Join(", ", lst3.ToArray());
                    chLst[k].QC_Result = "Failed";
                    if (lst2.Count > 0)
                        chLst[k].Comments = chLst[k].Comments + " and invalid field code exists in: " + pagenumber;
                    else
                        chLst[k].Comments = "Invalid field code exist in: " + pagenumber;
                    chLst[k].Comments = chLst[k].Comments.TrimEnd('.');
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (lst4.Count > 0)
                {
                    Allsubcheck = true;
                    lst4.Sort();
                    pagenumber = string.Join(", ", lst4.ToArray());
                    chLst[k].QC_Result = "Failed";
                    if (lst2.Count > 0 || lst3.Count > 0)
                        chLst[k].Comments = chLst[k].Comments + " and Missing sequence number in: " + pagenumber;
                    else
                        chLst[k].Comments = "Missing sequence number in: " + pagenumber;
                    chLst[k].Comments = chLst[k].Comments.TrimEnd('.');
                }

                else if (chLst[k].QC_Result != "Failed")
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "No missing sequence numbers.";
                }

                // added for page number report
                List<PageNumberReport> pglst = new List<PageNumberReport>();
                List<int> pgnumlstsrt = pgnumlst.Distinct().ToList();
                pgnumlstsrt.Sort();
                int numericalsflag = 0;
                int seqflag = 0;
                int Invalfldcodeflag = 0;
                for (int i = 0; i < pgnumlstsrt.Count; i++)
                {
                    numericalsflag = 0;
                    seqflag = 0;
                    Invalfldcodeflag = 0;
                    PageNumberReport pgObj = new PageNumberReport();
                    pgObj.PageNumber = Convert.ToInt32(pgnumlstsrt[i]);
                    //for (int j = 0; j < lst2.Count; j++)
                    //{
                    //    if (lst2[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        numericalsflag = 1;
                    //    }
                    //}
                    //for (int j = 0; j < lst3.Count; j++)
                    //{
                    //    if (lst3[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        Invalfldcodeflag = 1;
                    //    }
                    //}
                    //for (int j = 0; j < lst4.Count; j++)
                    //{
                    //    if (lst4[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        seqflag = 1;
                    //    }
                    //}

                    if (lst2.Contains(pgnumlstsrt[i]))
                        numericalsflag = 1;
                    if (lst3.Contains(pgnumlstsrt[i]))
                        Invalfldcodeflag = 1;
                    if (lst4.Contains(pgnumlstsrt[i]))
                        seqflag = 1;

                    if (numericalsflag == 1 && seqflag == 1 && Invalfldcodeflag == 1)
                    {
                        pgObj.Comments = "Numericals not exist, missing sequence number and invalid field code exists in sequence number for Tables or Figures";
                        pglst.Add(pgObj);
                    }
                    else if (numericalsflag == 1 && seqflag == 1)
                    {
                        pgObj.Comments = "Numericals not exist and missing sequence number for Tables or Figures";
                        pglst.Add(pgObj);
                    }
                    else if (numericalsflag == 1 && Invalfldcodeflag == 1)
                    {
                        pgObj.Comments = "Numericals not exist and invalid field code exists in sequence number for Tables or Figures";
                        pglst.Add(pgObj);
                    }
                    else if (seqflag == 1 && Invalfldcodeflag == 1)
                    {
                        pgObj.Comments = "Missing sequence number and invalid field code exists in sequence number for Tables or Figures";
                        pglst.Add(pgObj);
                    }
                    else if (numericalsflag == 1)
                    {
                        pgObj.Comments = "Numericals not exist for Tables or Figures";
                        pglst.Add(pgObj);
                    }
                    else if (seqflag == 1)
                    {
                        pgObj.Comments = "Missing sequence number";
                        pglst.Add(pgObj);
                    }
                    else if (Invalfldcodeflag == 1)
                    {
                        pgObj.Comments = "Invalid FieldCode exists in sequence number";
                        pglst.Add(pgObj);
                    }
                }
                if (pgnumlstsrt != null && pgnumlstsrt.Count > 0)
                    chLst[k].CommentsPageNumLst = pglst;

                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubcheck;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubcheck;
        }
        /// <summary>
        /// Fix field code style
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        ///

        public void FixSequencenumber(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool Fixcaption = false;
            string HeaderCaptionfrmt = string.Empty;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                List<RegOpsQC> chLst1 = new List<RegOpsQC>();
                chLst1 = chLst.Where(x => x.Check_Name.ToString() == "Missing prefix").ToList();//Code to check missing prefix check fix.

                //Below code to get first heading1 list item value.

                List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                if (HeadingPara.Count > 0 && ((Paragraph)HeadingPara[0]).IsListItem == true)
                {
                    HeaderCaptionfrmt = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.NumberFormat;
                    string startat = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.StartAt.ToString();
                    if (HeaderCaptionfrmt != "")
                        HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\0", startat);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt.ToCharArray().ElementAt(HeaderCaptionfrmt.Length - 1) == '.')
                {
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Remove(HeaderCaptionfrmt.Length - 1);
                }
                //Paragraph STYLEREF or Non-SEQ Table or Non-SEQ Figure Fields Exists 
                //fnrun.Text.Any(ch => Char.IsNumber(ch))     

                foreach (Field field in doc.Range.Fields)
                {
                    if (field.Type == FieldType.FieldSequence && field.GetFieldCode().ToUpper().Contains("FIGURE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Figure \\* ARABIC")
                    {
                        Run r = ((Run)field.Start.NextSibling);
                        while (r.NextSibling.NodeType == NodeType.Run)
                            r.NextSibling.Remove();
                        r.Text = " SEQ Figure \\* ARABIC ";
                        Fixcaption = true;
                    }
                    else if (field.Type == FieldType.FieldSequence && field.GetFieldCode().ToUpper().Contains("TABLE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Table \\* ARABIC")
                    {
                        Run r = ((Run)field.Start.NextSibling);
                        while (r.NextSibling.NodeType == NodeType.Run)
                            r.NextSibling.Remove();
                        r.Text = " SEQ Table \\* ARABIC ";
                        Fixcaption = true;
                    }
                    else if (field.Type == FieldType.FieldSequence && field.Start.ParentParagraph.GetText().ToUpper().StartsWith("TABLE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Table \\* ARABIC")
                    {
                        Run r = ((Run)field.Start.NextSibling);
                        while (r.NextSibling.NodeType == NodeType.Run)
                            r.NextSibling.Remove();
                        r.Text = " SEQ Table \\* ARABIC ";
                        Fixcaption = true;
                    }
                    else if (field.Type == FieldType.FieldSequence && field.Start.ParentParagraph.GetText().ToUpper().StartsWith("FIGURE") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUED)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONTINUE)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CONT.)") && !field.Start.ParentParagraph.GetText().ToUpper().Contains("(CON'T)") && field.GetFieldCode().Trim() != "SEQ Figure \\* ARABIC")
                    {

                        Run r = ((Run)field.Start.NextSibling);
                        while (r.NextSibling.NodeType == NodeType.Run)
                            r.NextSibling.Remove();
                        r.Text = " SEQ Figure \\* ARABIC ";
                        Fixcaption = true;
                    }
                    else if (field.Type == FieldType.FieldStyleRef || field.Type == FieldType.FieldAutoNum)
                    {
                        field.Remove();
                    }
                }
                //List<Node> FieldSeqFixFigure = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).Range.Text.ToUpper().StartsWith("FIGURE") && !((Paragraph)x).GetText().ToUpper().Contains("SEQ FIGURE")).ToList();
                //Inner Table Code open
                List<Node> childtbllst = new List<Node>();
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in lsttbles)
                {
                    List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                    childtbllst.AddRange(existlst);
                }
                //Inner Table Code Close
                //code to get caption paragraphs
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && ((((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL"))).ToList();
                foreach (Paragraph paragraph in paragraphs)
                {
                    ///////////Table and numeric letters should be space like: 'Table 3' not 'Table3' Pfizer Issue 2740
                    if (paragraph.Runs.Count > 1)
                    {
                        if ((paragraph.GetText().StartsWith("Table") && paragraph.Runs[0].Text == "Table" && paragraph.Runs[1].Text.Any(ch => Char.IsNumber(ch))))
                        {
                            Run newRun = new Run(doc, " ");
                            paragraph.InsertAfter(newRun, paragraph.Runs[0]);
                            Fixcaption = true;
                        }
                        else if ((paragraph.GetText().StartsWith("Figure") && paragraph.Runs[0].Text == "Figure" && paragraph.Runs[1].Text.Any(ch => Char.IsNumber(ch))))
                        {
                            Run newRun = new Run(doc, " ");
                            paragraph.InsertAfter(newRun, paragraph.Runs[0]);
                            Fixcaption = true;
                        }
                    }
                    FindReplaceOptions options = new FindReplaceOptions();
                    options.MatchCase = true;
                    options.FindWholeWordsOnly = false;
                    options.Direction = FindReplaceDirection.Forward;
                    List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();

                    if (CheckInTblExist.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)))
                    {
                        Paragraph pr = (Paragraph)paragraph;
                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("FIGURE"))).ToList(); //changed line
                        List<Node> Fieldseq_ = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE_") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE_"))).ToList();// changed line
                        if (Fieldseq.Count == 0)   //&& Fieldseq_.Count == 0 && FieldSeqFixFigure.Count == 0) /// changed line
                        {
                            if (((paragraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (paragraph.Runs[0].Font.Bold == true)) || ((paragraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || paragraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || paragraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL") && paragraph.Runs[0].Font.Bold == true) || paragraph.ParagraphFormat.StyleName.ToUpper() == "CAPTION" || paragraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption)
                            {
                                //if (paragraph.Runs[0].Font.Bold == true || (paragraph.Runs.Count > 1 && paragraph.Runs[1].Font.Bold == true))
                                //{
                                string my_StringNm = string.Empty;
                                string ReplceStr = pr.GetText().TrimStart();
                                string a = pr.GetText().TrimStart();
                                my_StringNm = a.Substring(0, 7);
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                    {
                                        if (my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                                        {
                                            Fixcaption = AddTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                        }
                                    }
                                }
                                else if (!paragraph.IsInCell)
                                {
                                    if (my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                                    {
                                        Paragraph pr1 = paragraph;
                                        while (pr1.NextSibling != null && (pr1.NextSibling.Range.Text.Trim() == "" || pr1.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr1.NextSibling.NodeType == NodeType.Table))
                                        {
                                            if (pr1.NextSibling.NodeType == NodeType.Table)
                                            {
                                                Fixcaption = AddTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                                break;
                                            }
                                            if (pr1.NextSibling != null && pr1.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                pr1 = (Paragraph)pr1.NextSibling;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (!paragraph.IsInCell && (my_StringNm.ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)))
                                {
                                    int Nonbrkspace = 0;
                                    if (my_StringNm.Contains("Figure" + ControlChar.SpaceChar))
                                    {
                                        pr.Range.Replace("Figure" + ControlChar.SpaceChar, "Figure" + ControlChar.NonBreakingSpaceChar, options);
                                        a = pr.GetText().TrimStart();
                                    }
                                    for (int i = 0; i < a.Length; i++)
                                    {
                                        if (a[i] == ControlChar.NonBreakingSpaceChar)
                                            Nonbrkspace++;
                                        if (a[i] == ControlChar.SpaceChar || Nonbrkspace > 1 || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                                        {
                                            my_StringNm = a.Substring(0, i);
                                            if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                                                pr.Range.Replace(my_StringNm, "Figure" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                                            else
                                                pr.Range.Replace(my_StringNm, "Figure" + ControlChar.NonBreakingSpaceChar, options);

                                            List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Figure")).ToList();
                                            if (rnslist.Count > 0)
                                            {
                                                Run rn = (Run)rnslist[0];
                                                Run newRun = new Run(doc, ".");
                                                if (pr.Runs.Count > 1)
                                                    pr.InsertBefore(newRun, pr.Runs[1]);
                                                else
                                                    pr.InsertAfter(newRun, rn);
                                                if (rn.Range.Text.Contains("Figure"))
                                                {
                                                    pr.InsertField("SEQ Figure \\* ARABIC", rn, true);
                                                    Fixcaption = true;
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                                // }
                            }
                            else
                            {
                                string my_StringNm = string.Empty;
                                string a = pr.GetText().TrimStart();
                                string ReplceStr = pr.GetText().TrimStart();
                                my_StringNm = a.Substring(0, 7);// changed line
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                    {
                                        if (my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                                        {
                                            Fixcaption = AddTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                        }
                                    }
                                }
                                else if (!paragraph.IsInCell)
                                {
                                    if (my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                                    {
                                        Paragraph pr1 = paragraph;
                                        while (pr1.NextSibling != null && (pr1.NextSibling.Range.Text.Trim() == "" || pr1.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr1.NextSibling.NodeType == NodeType.Table))
                                        {
                                            if (pr1.NextSibling.NodeType == NodeType.Table)
                                            {
                                                Fixcaption = AddTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                                break;
                                            }
                                            if (pr1.NextSibling != null && pr1.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                pr1 = (Paragraph)pr1.NextSibling;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (!paragraph.IsInCell && paragraph.Runs[0].Font.Bold == true && (my_StringNm.ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)))
                                {
                                    int Nonbrkspace = 0;
                                    if (my_StringNm.Contains("Figure" + ControlChar.SpaceChar))
                                    {
                                        pr.Range.Replace("Figure" + ControlChar.SpaceChar, "Figure" + ControlChar.NonBreakingSpaceChar, options);
                                        a = pr.GetText().TrimStart();
                                    }
                                    for (int i = 0; i < a.Length; i++)
                                    {
                                        if (a[i] == ControlChar.NonBreakingSpaceChar)
                                            Nonbrkspace++;
                                        if (a[i] == ControlChar.SpaceChar || Nonbrkspace > 1 || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                                        {
                                            my_StringNm = a.Substring(0, i);
                                            if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                                                pr.Range.Replace(my_StringNm, "Figure" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                                            else if (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)
                                                pr.Range.Replace(my_StringNm, "Figure" + ControlChar.NonBreakingSpaceChar, options);
                                            List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Figure")).ToList();
                                            if (rnslist.Count > 0)
                                            {
                                                Run rn = (Run)rnslist[0];
                                                Run newRun = new Run(doc, ".");
                                                if (pr.Runs.Count > 1)
                                                    pr.InsertBefore(newRun, pr.Runs[1]);
                                                else
                                                    pr.InsertAfter(newRun, rn);
                                                if (rn.Range.Text.Contains("Figure"))
                                                {
                                                    pr.InsertField("SEQ Figure \\* ARABIC", rn, true);
                                                    Fixcaption = true;
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        else if (Fieldseq_.Count > 0)
                        {
                            foreach (Run fnTrun in paragraph.GetChildNodes(NodeType.Run, true).ToList())
                            {
                                //List<string> seqtbl = new List<string>();
                                //seqtbl.Add(fnTrun.Text);
                                if (fnTrun.Text.Contains("SEQ Table_"))
                                {
                                    paragraph.Range.Replace(fnTrun.Text, " SEQ Table \\* ARABIC ", options);
                                    Fixcaption = true;
                                }
                                else if (fnTrun.Text.Contains("SEQ Figure_"))
                                {
                                    paragraph.Range.Replace(fnTrun.Text, " SEQ Figure \\* ARABIC ", options);
                                    Fixcaption = true;
                                }
                            }
                        }
                    }
                }
                if (Fixcaption)
                {
                    chLst[k].Is_Fixed = 1;
                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                    if (chLst[k].CommentsPageNumLst != null)
                    {
                        foreach (var pg in chLst[k].CommentsPageNumLst)
                        {
                            pg.Comments = pg.Comments + ". Fixed";
                        }
                    }

                }
                else
                {
                    if (chLst[k].QC_Result == "Failed")
                    {
                        chLst[k].QC_Result = "Failed";
                        chLst[k].Comments = chLst[k].Comments + ". These cannot be fixed";
                        if (chLst[k].CommentsPageNumLst != null)
                        {
                            foreach (var pg in chLst[k].CommentsPageNumLst)
                            {
                                pg.Comments = pg.Comments + ". These cannot be fixed";
                            }
                        }

                    }
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
                doc.UpdateFields();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }

        public static bool AddTableFieldcode(string a, Paragraph pr, string my_StringNm, string HeaderCaptionfrmt, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixcaption = false;
            my_StringNm = a.Substring(0, 6);

            if (my_StringNm.Contains("Table" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Table" + ControlChar.SpaceChar, "Table" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                //below condition to check the exact location to add sequence filed code 
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    //code to replace Table+Hardspace+prefix+hyphen
                    if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                        pr.Range.Replace(my_StringNm, "Table" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                    //else if (!my_StringNm.ToUpper().Contains("TABLE P.") && my_StringNm.Substring(my_StringNm.Length - 1) != ".")
                    //{
                    else
                        pr.Range.Replace(my_StringNm, "Table" + ControlChar.NonBreakingSpaceChar, options);
                    //}
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Table")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, ".");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Table"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Table \\* ARABIC", rn, true);
                            Fixcaption = true;
                        }
                    }
                    break;
                }
            }
            return Fixcaption;
        }

        public static bool AddSummaryTableFieldcode(string a, Paragraph pr, string my_StringNm, string HeaderCaptionfrmt, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixcaption = false;
            my_StringNm = a.Substring(0, 14);

            if (my_StringNm.Contains("Summary" + ControlChar.SpaceChar + "Table" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Summary" + ControlChar.SpaceChar + "Table" + ControlChar.SpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.SpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Summary" + ControlChar.SpaceChar + "Table" + ControlChar.NonBreakingSpaceChar))
            {
                pr.Range.Replace("Summary" + ControlChar.SpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    //code to replace Table+Hardspace+prefix+hyphen
                    if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                        pr.Range.Replace(my_StringNm, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                    //else if (!my_StringNm.ToUpper().Contains("TABLE P.") && my_StringNm.Substring(my_Stringnm.Length - 1) != ".")
                    //{
                    else
                        pr.Range.Replace(my_StringNm, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Summary Table")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, ".");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Summary Table"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Summary_Table \\* ARABIC", rn, true);
                            Fixcaption = true;
                        }
                    }
                    break;
                }
            }

            return Fixcaption;
        }

        public static bool AddTextTableFieldcode(string a, Paragraph pr, string my_StringNm, string HeaderCaptionfrmt, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixcaption = false;
            my_StringNm = a.Substring(0, 11);

            if (my_StringNm.Contains("Text" + ControlChar.SpaceChar + "Table" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Text" + ControlChar.SpaceChar + "Table" + ControlChar.SpaceChar, "Text" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Text" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Text" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.SpaceChar, "Text" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Text" + ControlChar.SpaceChar + "Table" + ControlChar.NonBreakingSpaceChar))
            {
                pr.Range.Replace("Text" + ControlChar.SpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, "Text" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    //code to replace Table+Hardspace+prefix+hyphen
                    if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                        pr.Range.Replace(my_StringNm, "Text" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                    //else if (!my_StringNm.ToUpper().Contains("TABLE P.") && my_StringNm.Substring(my_Stringnm.Length - 1) != ".")
                    //{
                    else
                        pr.Range.Replace(my_StringNm, "Text" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, options);
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Text Table")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, ".");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Text Table"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Text_Table \\* ARABIC", rn, true);
                            Fixcaption = true;
                        }
                    }
                    break;
                }
            }

            return Fixcaption;
        }

        //when use library values use Invalid Table FieldCodes Method
        //Get Invalid Table FieldCodes from Library 
        //public List<string> GetLibrarTableInvalidFieldCodes(Int64 Created_ID)
        //{
        //    List<string> TableInvalidFieldCodes = null;
        //    try
        //    {
        //        Connection conn = new Connection();
        //        string[] m_ConnDetails = getConnectionInfo(Created_ID).Split('|');
        //        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
        //        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
        //        conn.connectionstring = m_DummyConn;
        //        DataSet ds = new DataSet();
        //        ds = conn.GetDataSet("Select LIBRARY_VALUE from LIBRARY where LIBRARY_NAME = 'QC_Table_Invalid_FieldCodes'", CommandType.Text, ConnectionState.Open);
        //        if (ds.Tables[0].Rows.Count > 0)
        //        {
        //            TableInvalidFieldCodes = new List<string>();
        //            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        //            {
        //                TableInvalidFieldCodes.Add(ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString());
        //            }
        //        }
        //        return TableInvalidFieldCodes;
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogger.Error(ex);
        //        return TableInvalidFieldCodes;
        //    }
        //}

        //when use library values use Invalid Figure FieldCodes Method
        //Get Invalid Figure FieldCodes from Library 
        //public List<string> GetLibrarFigureInvalidFieldCodes(Int64 Created_ID)
        //{
        //    List<string> FigureInvalidFieldCodes = null;
        //    try
        //    {
        //        Connection conn = new Connection();
        //        string[] m_ConnDetails = getConnectionInfo(Created_ID).Split('|');
        //        m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
        //        m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
        //        conn.connectionstring = m_DummyConn;
        //        DataSet ds = new DataSet();
        //        ds = conn.GetDataSet("Select LIBRARY_VALUE from LIBRARY where LIBRARY_NAME = 'QC_Figure_Invalid_FieldCodes'", CommandType.Text, ConnectionState.Open);
        //        if (ds.Tables[0].Rows.Count > 0)
        //        {
        //            FigureInvalidFieldCodes = new List<string>();
        //            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        //            {
        //                FigureInvalidFieldCodes.Add(ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString());
        //            }
        //        }
        //        return FigureInvalidFieldCodes;
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogger.Error(ex);
        //        return FigureInvalidFieldCodes;
        //    }
        //}
        /// <summary>
        /// Check remove border lines
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        /// <param name="k"></param>
        /// <returns></returns>
        public static bool CheckRemovetableborderlines(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstbrd = new List<int>();
            bool Allsubcheck = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (int y = 0; y < tables.Count; y++)
                {
                    Table table = (Table)tables[y];
                    bool isInnerTbl = CheckInnerTable(table);
                    Row rw = table.FirstRow;
                    Row lw = table.LastRow;
                    //below code to get caption paragraphs
                    List<Node> Captionstyle = rw.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> fields = rw.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    if (!isInnerTbl && (fields.Count > 0 || Captionstyle.Count > 0))
                    {
                        foreach (Cell cel in rw.Cells)
                        {
                            if (cel.CellFormat.Borders.Top.LineStyle != LineStyle.None || cel.CellFormat.Borders.Top.LineWidth != 0 || cel.CellFormat.Borders.Left.LineStyle != LineStyle.None || cel.CellFormat.Borders.Left.LineWidth != 0 || cel.CellFormat.Borders.Right.LineStyle != LineStyle.None || cel.CellFormat.Borders.Right.LineWidth != 0)
                            {
                                if (Captionstyle.Count > 0)
                                {
                                    if (cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                                    {
                                        if (cel.FirstParagraph.Runs[0].Font.Bold == true || (cel.FirstParagraph.Runs.Count > 1 && cel.FirstParagraph.Runs[1].Font.Bold == true))
                                        {
                                            if (layout.GetStartPageIndex(table) != 0)
                                                lstbrd.Add(layout.GetStartPageIndex(table));
                                        }
                                    }
                                    else
                                    {
                                        if (layout.GetStartPageIndex(table) != 0)
                                            lstbrd.Add(layout.GetStartPageIndex(table));
                                    }
                                }
                                if (fields.Count > 0)
                                {
                                    if (layout.GetStartPageIndex(table) != 0)
                                        lstbrd.Add(layout.GetStartPageIndex(table));
                                }
                            }
                        }
                    }
                    if (!isInnerTbl && lw.Cells.Count == 1)
                    {
                        NodeCollection prs = lw.GetChildNodes(NodeType.Paragraph, true);
                        Paragraph pr = (Paragraph)prs[0];
                        if (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") && (lw.Cells[0].CellFormat.Borders.Bottom.LineStyle != LineStyle.None || lw.Cells[0].CellFormat.Borders.Bottom.LineWidth != 0 || lw.Cells[0].CellFormat.Borders.Left.LineStyle != LineStyle.None || lw.Cells[0].CellFormat.Borders.Left.LineWidth != 0 || lw.Cells[0].CellFormat.Borders.Right.LineStyle != LineStyle.None || lw.Cells[0].CellFormat.Borders.Right.LineWidth != 0))
                        {
                            if (layout.GetStartPageIndex(table) != 0)
                                lstbrd.Add(layout.GetStartPageIndex(table));
                        }
                    }
                }
                List<int> lst2 = lstbrd.Distinct().ToList();
                if (lst2.Count > 0)
                {
                    Allsubcheck = true;
                    lst2.Sort();
                    pagenumber = string.Join(", ", lst2.ToArray());
                    chLst[k].QC_Result = "Failed";
                    chLst[k].Comments = "Border lines exist in: " + pagenumber;
                    chLst[k].CommentsWOPageNum = "Border lines exist";
                    chLst[k].PageNumbersLst = lst2;
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "No change in table border lines";
                }
                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubcheck;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubcheck;
        }

        /// <summary>
        /// Check repeat header row
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public static bool Checkrepeatheader(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            List<int> lstrpWrap = new List<int>();
            bool Allsubchecks = false;
            List<int> pgnumlst = new List<int>();
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {

                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (int y = 0; y < tables.Count; y++)
                {
                    Table table = (Table)tables[y];
                    bool isInnerTbl = CheckInnerTable(table);
                    Row rw = table.FirstRow;
                    //Below code to get caption paragraphs
                    List<Node> Captionstyle = rw.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> fields = rw.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    if (!isInnerTbl && (Captionstyle.Count > 0 || fields.Count > 0) && rw.RowFormat.HeadingFormat != true)
                    {
                        if (Captionstyle.Count > 0)
                        {
                            Cell cel = rw.FirstCell;
                            if (cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                            {
                                if ((cel.FirstParagraph.Runs.Count > 0 && cel.FirstParagraph.Runs[0].Font.Bold == true) || (cel.FirstParagraph.Runs.Count > 1 && cel.FirstParagraph.Runs[1].Font.Bold == true))
                                {
                                    if (layout.GetStartPageIndex(table) != 0)
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(table));
                                        pgnumlst.Add(layout.GetStartPageIndex(table));
                                    }
                                }
                            }
                            else
                            {
                                if (layout.GetStartPageIndex(table) != 0)
                                {
                                    lstrp.Add(layout.GetStartPageIndex(table));
                                    pgnumlst.Add(layout.GetStartPageIndex(table));
                                }
                            }
                        }
                        if (fields.Count > 0)
                        {
                            if (layout.GetStartPageIndex(table) != 0)
                            {
                                lstrp.Add(layout.GetStartPageIndex(table));
                                pgnumlst.Add(layout.GetStartPageIndex(table));
                            }

                        }
                    } //Reason for not Fixed Table repeatheader, in Table property TextWrapping is Around
                    //else if (table.TextWrapping == TextWrapping.Around)
                    //{
                    //    if (layout.GetStartPageIndex(table) != 0)
                    //    {
                    //        lstrpWrap.Add(layout.GetStartPageIndex(table));
                    //    }

                    //}
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                List<int> lst5 = lstrpWrap.Distinct().ToList();
                if (lst4.Count > 0)
                {
                    Allsubchecks = true;
                    lst4.Sort();
                    pagenumber = string.Join(", ", lst4.ToArray());
                    chLst[k].QC_Result = "Failed";
                    chLst[k].Comments = "Table caption row not set as repeated row in: " + pagenumber;
                }
                else if (lst5.Count > 0)
                {
                    Allsubchecks = true;
                    lst5.Sort();
                    pagenumber = string.Join(", ", lst5.ToArray());
                    chLst[k].QC_Result = "Failed";
                    chLst[k].Comments = "Table Text Wrapping Around found in: " + pagenumber;
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "All table captions exist repeated header";
                }

                // added for page number report
                List<PageNumberReport> pglst = new List<PageNumberReport>();
                List<int> pgnumlstsrt = pgnumlst.Distinct().ToList();
                pgnumlstsrt.Sort();
                int flag = 0;
                int wrapflag = 0;
                string pgcomments = string.Empty;
                for (int i = 0; i < pgnumlstsrt.Count; i++)
                {
                    flag = 0;
                    wrapflag = 0;
                    PageNumberReport pgObj = new PageNumberReport();
                    pgObj.PageNumber = Convert.ToInt32(pgnumlstsrt[i]);

                    //for (int j = 0; j < lst4.Count; j++)
                    //{
                    //    if (lst4[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        flag = 1;
                    //    }
                    //}
                    //for (int j = 0; j < lst5.Count; j++)
                    //{
                    //    if (lst5[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        wrapflag = 1;
                    //    }
                    //}

                    if (lst4.Contains(pgnumlstsrt[i]))
                        flag = 1;
                    if (lst5.Contains(pgnumlstsrt[i]))
                        wrapflag = 1;

                    if (flag == 1 && wrapflag == 1)
                    {
                        pgObj.Comments = "Table caption row not set as repeated row and Text Wrapping Around found for some tables";
                        pglst.Add(pgObj);
                    }
                    else if (flag == 1)
                    {
                        pgObj.Comments = "Table caption row not set as repeated row";
                        pglst.Add(pgObj);
                    }
                    else if (wrapflag == 1)
                    {
                        pgObj.Comments = "Table Text Wrapping Around found";
                        pglst.Add(pgObj);
                    }
                }
                if (pgnumlstsrt != null && pgnumlstsrt.Count > 0)
                    chLst[k].CommentsPageNumLst = pglst;

                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubchecks;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubchecks;
        }

        /// <summary>
        /// Check repeat header row
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public static bool Checkprefix(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            string Coments = string.Empty;
            List<int> lstord = new List<int>();
            List<int> tblSeqFigure = new List<int>();
            List<int> fgrSeqTable = new List<int>();
            List<int> pgnumlst = new List<int>();
            bool Allsubchecks = false;
            string HeaderCaptionfrmt = string.Empty;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                //Below code for to get first heading1 list item
                List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                if (HeadingPara.Count > 0 && ((Paragraph)HeadingPara[0]).IsListItem == true)
                {
                    HeaderCaptionfrmt = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.NumberFormat;
                    string startat = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.StartAt.ToString();
                    if (HeaderCaptionfrmt != "")
                        HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\0", startat);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt.ToCharArray().ElementAt(HeaderCaptionfrmt.Length - 1) == '.')
                {
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Remove(HeaderCaptionfrmt.Length - 1);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Any(ch => Char.IsNumber(ch)) || HeaderCaptionfrmt.Contains(".")))
                {
                    //Inner Table Code open 
                    List<Node> childtbllst = new List<Node>();
                    NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                    foreach (Table tbl in lsttbles)
                    {
                        List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                        childtbllst.AddRange(existlst);
                    }
                    //Inner Table Code Close
                    //Below code for to check table captions with figure field code and figure captions with table field code.
                    List<Node> tblSeqFigureStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table") && (((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))).ToList();
                    foreach (FieldStart fld in tblSeqFigureStartLst)
                    {
                        Paragraph pr = fld.ParentParagraph;
                        if (layout.GetStartPageIndex(pr) != 0)
                        {
                            tblSeqFigure.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                            pgnumlst.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                        }
                    }
                    List<Node> fgrSeqTableStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure") && (((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))).ToList();
                    foreach (FieldStart fld in fgrSeqTableStartLst)
                    {
                        Paragraph pr = fld.ParentParagraph;
                        if (layout.GetStartPageIndex(pr) != 0)
                        {
                            fgrSeqTable.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                            pgnumlst.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                        }
                    }
                    List<Node> SeqFields = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => /*!((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("(CONTINUED)") &&*/ ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure"))).ToList();
                    foreach (FieldStart fld in SeqFields)
                    {
                        Paragraph pr = fld.ParentParagraph;
                        if (!pr.IsInCell && (pr.GetText().TrimStart().StartsWith("Figure" + ControlChar.SpaceChar) || pr.GetText().TrimStart().StartsWith("Figure" + ControlChar.NonBreakingSpaceChar)) && pr.GetText().Contains("SEQ Figure"))
                        {
                            string Str = string.Empty;
                            string Strvalu = pr.GetText().TrimStart();
                            int Lastindex = Strvalu.IndexOf(" SEQ Figure");
                            if (Lastindex == -1)
                                Lastindex = Strvalu.IndexOf("SEQ Figure");
                            Str = Strvalu.Substring(0, Lastindex);
                            Str = Str.Replace("Figure", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                            if (HeaderCaptionfrmt != Str && layout.GetStartPageIndex(pr) != 0)
                            {
                                lstord.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                                pgnumlst.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                            }
                        }
                        List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == pr.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == pr.Range.Text).ToList();
                        if (CheckInTblExist.Count == 0 && (pr.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || pr.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar)) && pr.GetText().Contains("SEQ Table"))
                        {
                            string Str = string.Empty;
                            string Strvalu = pr.GetText().TrimStart();
                            int Lastindex = Strvalu.IndexOf(" SEQ Table");
                            if (Lastindex == -1)
                                Lastindex = Strvalu.IndexOf("SEQ Table");
                            Str = Strvalu.Substring(0, Lastindex);
                            Str = Str.Replace("Table", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                            if (HeaderCaptionfrmt != Str && layout.GetStartPageIndex(pr) != 0 && pr.IsInCell)
                            {
                                Cell cell = (Cell)pr.ParentNode;
                                if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                {
                                    lstord.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                                }
                            }
                            else if (HeaderCaptionfrmt != Str && layout.GetStartPageIndex(pr) != 0)
                            {
                                lstord.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                                pgnumlst.Add(layout.GetStartPageIndex(fld.ParentParagraph));
                            }

                        }
                    }
                }
                List<int> lstFgr = tblSeqFigure.Distinct().ToList();
                if (lstFgr.Count > 0)
                {
                    Allsubchecks = true;
                    lstFgr.Sort();
                    pagenumber = string.Join(", ", lstFgr.ToArray());
                    chLst[k].QC_Result = "Failed";
                    chLst[k].Comments = "Figure caption has table field code in: " + pagenumber;
                }
                List<int> lstTbl = fgrSeqTable.Distinct().ToList();
                if (lstTbl.Count > 0)
                {
                    Allsubchecks = true;
                    lstTbl.Sort();
                    pagenumber = string.Join(", ", lstTbl.ToArray());
                    chLst[k].QC_Result = "Failed";
                    if (lstFgr.Count > 0)
                        chLst[k].Comments = chLst[k].Comments + ". Table caption has figure field code in: " + pagenumber;
                    else
                        chLst[k].Comments = "Table caption has figure field code in: " + pagenumber;
                }
                List<int> lst3 = lstord.Distinct().ToList();
                if (lst3.Count > 0)
                {
                    Allsubchecks = true;
                    lst3.Sort();
                    //Pfizer Check Issue:2323,708 Merged missing prefix page num from Missig seq number or missig style.
                    //for (int i = 0; i < chLst.Count; i++)
                    //{
                    //    if ((chLst[i].Check_Name == "Missing sequence number" && chLst[i].QC_Result == "Failed" && chLst[i].Is_Fixed == 0) || (chLst[i].Check_Name == "Missing caption style" && chLst[i].QC_Result == "Failed"))
                    //    {
                    //        Coments = chLst[i].Comments;
                    //        break;
                    //    }
                    //}
                    //if (Coments.Any(ch => Char.IsNumber(ch)))
                    //{
                    //    Coments = Coments.Substring(Coments.LastIndexOf(": "));
                    //    Coments = Coments.Replace(":", "");
                    //    string[] pgnums = Coments.Split(',');
                    //    foreach (string cmts in pgnums)
                    //    {
                    //        if (cmts != "" && cmts != ".")
                    //            lst3.Add(Convert.ToInt32(cmts));
                    //    }
                    //    lst3 = lst3.Distinct().ToList();
                    //    lst3.Sort();
                    //}
                    // If Missing sequence number and Missing caption style are Failed
                    for (int i = 0; i < chLst.Count; i++)
                    {
                        if ((chLst[i].Check_Name == "Missing sequence number" && chLst[i].QC_Result == "Failed") || (chLst[i].Check_Name == "Missing caption style" && chLst[i].QC_Result == "Failed"))
                        {
                            Coments = chLst[i].Comments;
                            //break;
                            if (Coments.Any(ch => Char.IsNumber(ch)))
                            {
                                Coments = Coments.Substring(Coments.LastIndexOf(": "));
                                Coments = Coments.Replace(":", "");
                                string[] pgnums = Coments.Split(',');
                                foreach (string cmts in pgnums)
                                {
                                    if (cmts != "" || cmts != "." || cmts != " ")
                                        lst3.Add(Convert.ToInt32(cmts.TrimStart()));
                                }
                                lst3 = lst3.Distinct().ToList();
                                lst3.Sort();
                            }
                        }
                    }
                    pagenumber = string.Join(", ", lst3.ToArray());
                    chLst[k].QC_Result = "Failed";
                    if (lstFgr.Count > 0 || lstTbl.Count > 0)
                        chLst[k].Comments = chLst[k].Comments + " Caption format not in: " + pagenumber;
                    else
                        chLst[k].Comments = "Caption format not in: " + pagenumber;
                }
                else if (chLst[k].QC_Result != "Failed")
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = chLst[k].Comments + " No change in Caption format";
                }
                // added for page number report
                List<PageNumberReport> pglst = new List<PageNumberReport>();
                List<int> pgnumlstsrt = pgnumlst.Distinct().ToList();
                pgnumlstsrt.Sort();
                int tblflag = 0;
                int fgrflag = 0;
                int ordflag = 0;
                string pgcomments = string.Empty;
                for (int i = 0; i < pgnumlstsrt.Count; i++)
                {
                    tblflag = 0;
                    fgrflag = 0;
                    ordflag = 0;
                    PageNumberReport pgObj = new PageNumberReport();
                    pgObj.PageNumber = Convert.ToInt32(pgnumlstsrt[i]);

                    if (lstFgr.Contains(pgnumlstsrt[i]))
                        fgrflag = 1;
                    if (lstTbl.Contains(pgnumlstsrt[i]))
                        tblflag = 1;
                    if (lst3.Contains(pgnumlstsrt[i]))
                        ordflag = 1;

                    //for (int j = 0; j < lstFgr.Count; j++)
                    //{
                    //    if (lstFgr[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        fgrflag = 1;
                    //    }
                    //}
                    //for (int j = 0; j < lstTbl.Count; j++)
                    //{
                    //    if (lstTbl[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        tblflag = 1;
                    //    }
                    //}
                    //for (int j = 0; j < lst3.Count; j++)
                    //{
                    //    if (lst3[j].Equals(pgnumlstsrt[i]))
                    //    {
                    //        ordflag = 1;
                    //    }
                    //}
                    if (fgrflag == 1 && tblflag == 1 && ordflag == 1)
                    {
                        pgObj.Comments = "Incorrect table caption - has 'Figure' in field code, Incorrect figure caption - has 'Table' in field code, and Caption format is not correct - Invalid field code";
                        pglst.Add(pgObj);
                    }
                    else if (fgrflag == 1 && tblflag == 1)
                    {
                        pgObj.Comments = "Incorrect table caption - has 'Figure' in field code and Incorrect figure caption - has 'Table' in field code";
                        pglst.Add(pgObj);
                    }
                    else if (fgrflag == 1 && ordflag == 1)
                    {
                        pgObj.Comments = "Incorrect figure caption - has 'Table' in field code and Caption format is not correct - Invalid field code";
                        pglst.Add(pgObj);
                    }
                    else if (tblflag == 1 && ordflag == 1)
                    {
                        pgObj.Comments = "Incorrect table caption - has 'Figure' in field code and Caption format is not correct - Invalid field code";
                        pglst.Add(pgObj);
                    }
                    else if (fgrflag == 1)
                    {
                        pgObj.Comments = "Incorrect figure caption - has 'Table' in field code";
                        pglst.Add(pgObj);
                    }
                    else if (tblflag == 1)
                    {
                        pgObj.Comments = "Incorrect table caption - has 'Figure' in field code";
                        pglst.Add(pgObj);
                    }
                    else if (ordflag == 1)
                    {
                        pgObj.Comments = "Caption format is not correct - Invalid field code";
                        pglst.Add(pgObj);
                    }

                }
                if (pgnumlstsrt != null && pgnumlstsrt.Count > 0)
                    chLst[k].CommentsPageNumLst = pglst;

                chLst[k].CHECK_END_TIME = DateTime.Now;
                return Allsubchecks;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
            return Allsubchecks;
        }

        /// <summary>
        /// Fix remove border lines
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Fixremoveborderlines(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool Fixflag = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (int y = 0; y < tables.Count; y++)
                {
                    Table table = (Table)tables[y];
                    bool isInnerTbl = CheckInnerTable(table);
                    Row rw = table.FirstRow;
                    Row lw = table.LastRow;
                    //Getting caption paragraphs
                    List<Node> CaptionStyle = rw.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    //Getting sequence paragraphs
                    List<Node> fields = rw.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    if (!isInnerTbl && (fields.Count > 0 || CaptionStyle.Count > 0))
                    {
                        //Cell cel = rw.Cells[0];
                        foreach (Cell cel in rw.Cells)
                        {
                            if (cel.CellFormat.Borders.Top.LineStyle != LineStyle.None || cel.CellFormat.Borders.Top.LineWidth != 0 || cel.CellFormat.Borders.Left.LineStyle != LineStyle.None || cel.CellFormat.Borders.Left.LineWidth != 0 || cel.CellFormat.Borders.Right.LineStyle != LineStyle.None || cel.CellFormat.Borders.Right.LineWidth != 0)
                            {
                                if (CaptionStyle.Count > 0)
                                {
                                    if (cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                                    {
                                        if (cel.FirstParagraph.Runs[0].Font.Bold == true || (cel.FirstParagraph.Runs.Count > 1 && cel.FirstParagraph.Runs[1].Font.Bold == true))
                                        {
                                            //code remove border lines
                                            Fixflag = true;
                                            cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Top.LineWidth = 0;
                                            cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Left.LineWidth = 0;
                                            cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Right.LineWidth = 0;
                                        }
                                    }
                                    else
                                    {
                                        Fixflag = true;
                                        cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                        cel.CellFormat.Borders.Top.LineWidth = 0;
                                        cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                        cel.CellFormat.Borders.Left.LineWidth = 0;
                                        cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                        cel.CellFormat.Borders.Right.LineWidth = 0;
                                    }
                                }
                                if (fields.Count > 0)
                                {
                                    Fixflag = true;
                                    cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                    cel.CellFormat.Borders.Top.LineWidth = 0;
                                    cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                    cel.CellFormat.Borders.Left.LineWidth = 0;
                                    cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                    cel.CellFormat.Borders.Right.LineWidth = 0;
                                }
                            }
                        }
                    }
                    if (!isInnerTbl && lw.Cells.Count == 1)
                    {
                        NodeCollection prs = lw.GetChildNodes(NodeType.Paragraph, true);
                        Paragraph pr = (Paragraph)prs[0];
                        Cell cel = lw.Cells[0];
                        if (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") && (cel.CellFormat.Borders.Bottom.LineStyle != LineStyle.None || cel.CellFormat.Borders.Bottom.LineWidth != 0 || cel.CellFormat.Borders.Left.LineStyle != LineStyle.None || cel.CellFormat.Borders.Left.LineWidth != 0 || cel.CellFormat.Borders.Right.LineStyle != LineStyle.None || cel.CellFormat.Borders.Right.LineWidth != 0))
                        {
                            Fixflag = true;
                            cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.None;
                            cel.CellFormat.Borders.Bottom.LineWidth = 0;
                            cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                            cel.CellFormat.Borders.Left.LineWidth = 0;
                            cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                            cel.CellFormat.Borders.Right.LineWidth = 0;
                        }
                    }
                }
                if (Fixflag)
                {
                    chLst[k].Is_Fixed = 1;
                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                    chLst[k].CommentsWOPageNum += ". Fixed";
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "No change in border lines";
                }
                //doc.Save(rObj.DestFilePath);
                chLst[k].CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Fix repeat header
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Fixrepeatheader(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool Fixflag = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (int y = 0; y < tables.Count; y++)
                {
                    Table table = (Table)tables[y];
                    bool isInnerTbl = CheckInnerTable(table);
                    Row rw = table.FirstRow;
                    //Code to get caption style paragraphs
                    List<Node> CaptionStyle = rw.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    //Code to get sequence field paragraphs
                    List<Node> fields = rw.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    if (!isInnerTbl && (CaptionStyle.Count > 0 || fields.Count > 0) && rw.RowFormat.HeadingFormat != true)
                    {
                        if (CaptionStyle.Count > 0)
                        {
                            Cell cel = rw.FirstCell;
                            if (cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || cel.FirstParagraph.ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || cel.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == "NORMAL")
                            {
                                if ((cel.FirstParagraph.Runs.Count > 0 && cel.FirstParagraph.Runs[0].Font.Bold == true) || (cel.FirstParagraph.Runs.Count > 1 && cel.FirstParagraph.Runs[1].Font.Bold == true))
                                {
                                    Fixflag = true;
                                    rw.RowFormat.HeadingFormat = true;//Adding repeat header row
                                }
                            }
                            else
                            {
                                Fixflag = true;
                                rw.RowFormat.HeadingFormat = true;
                            }
                        }
                        if (fields.Count > 0)
                        {
                            Fixflag = true;
                            rw.RowFormat.HeadingFormat = true;
                        }
                    }
                }
                if (Fixflag)
                {
                    chLst[k].Is_Fixed = 1;
                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                    foreach (var pg in chLst[k].CommentsPageNumLst)
                    {
                        pg.Comments = pg.Comments + ". Fixed";
                    }
                }
                else
                {
                    chLst[k].QC_Result = "Passed";
                    //chLst[k].Comments = "All table captions exist repeated header";
                }
                //doc.Save(rObj.DestFilePath);
                chLst[k].CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Fix prefix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Fixprefix(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst, int k)
        {
            bool Fixflag = false;
            chLst[k].CHECK_START_TIME = DateTime.Now;
            string HeaderCaptionfrmt = string.Empty;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                //Below code for getting list of first heading1
                List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                if (HeadingPara.Count > 0 && ((Paragraph)HeadingPara[0]).IsListItem == true)
                {
                    HeaderCaptionfrmt = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.NumberFormat;
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\u0001", "");
                    string startat = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.StartAt.ToString();
                    if (HeaderCaptionfrmt != "")
                        HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\0", startat);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt.ToCharArray().ElementAt(HeaderCaptionfrmt.Length - 1) == '.')
                {
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Remove(HeaderCaptionfrmt.Length - 1);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Any(ch => Char.IsNumber(ch)) || HeaderCaptionfrmt.Contains(".")))
                {
                    //Inner Table Code open                 
                    List<Node> childtbllst = new List<Node>();
                    NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                    foreach (Table tbl in lsttbles)
                    {
                        List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                        childtbllst.AddRange(existlst);
                    }
                    //Inner Table Code Close
                    //Code to get sequence filed codes paragraphs
                    List<Node> seqfields = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => /*!((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("(CONTINUED)") &&*/ ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure"))).ToList();
                    foreach (FieldStart fld in seqfields)
                    {
                        FindReplaceOptions options = new FindReplaceOptions();
                        options.MatchCase = true;
                        options.FindWholeWordsOnly = true;
                        options.Direction = FindReplaceDirection.Forward;
                        Paragraph pr = fld.ParentParagraph;
                        if (!pr.IsInCell && (pr.GetText().TrimStart().StartsWith("Figure" + ControlChar.SpaceChar) || pr.GetText().TrimStart().StartsWith("Figure" + ControlChar.NonBreakingSpaceChar)) && pr.GetText().Contains("SEQ Figure"))
                        {

                            string Str = string.Empty;
                            string Str1 = string.Empty;
                            string Strvalu = pr.GetText().TrimStart();
                            int Lastindex = Strvalu.IndexOf(" SEQ Figure");
                            if (Lastindex == -1)
                                Lastindex = Strvalu.IndexOf("SEQ Figure");
                            Str1 = Str = Strvalu.Substring(0, Lastindex);
                            Str1 = Str1.Replace("Figure", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                            if (HeaderCaptionfrmt != Str1)
                            {//Adding prefix for figure captions code
                                Fixflag = true;
                                pr.Range.Replace(Str, "Figure" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar);
                                pr.Range.Replace("SEQ Figure" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, "SEQ Figure");
                                pr.Range.Replace("SEQFigure" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, "SEQ Figure");
                                pr.Range.Replace("SEQ Figure\\", "SEQ Figure \\");
                                pr.Range.Replace("SEQ Figure" + ControlChar.NonBreakingSpaceChar + "" + "\\", "SEQ Figure \\");
                            }
                        }
                        List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == pr.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == pr.Range.Text).ToList();
                        if (CheckInTblExist.Count == 0 && (pr.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || pr.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar)) && pr.GetText().Contains("SEQ Table"))
                        {
                            if (pr.IsInCell)
                            {
                                Cell cell = (Cell)pr.ParentNode;
                                if (cell.ParentRow.IsFirstRow || cell.IsFirstCell)
                                {

                                    string Str = string.Empty;
                                    string Str1 = string.Empty;
                                    string Strvalu = pr.GetText().TrimStart();
                                    int Lastindex = Strvalu.IndexOf(" SEQ Table");
                                    if (Lastindex == -1)
                                        Lastindex = Strvalu.IndexOf("SEQ Table");
                                    Str1 = Str = Strvalu.Substring(0, Lastindex);
                                    Str1 = Str1.Replace("Table", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                                    if (HeaderCaptionfrmt != Str1)
                                    {//Adding prefix to table captions
                                        Fixflag = true;
                                        pr.Range.Replace(Str, "Table" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar);
                                        pr.Range.Replace("SEQ Table" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, "SEQ Table");
                                        pr.Range.Replace("SEQTable" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, "SEQ Table");
                                        pr.Range.Replace("SEQ Table\\", "SEQ Table \\");
                                        pr.Range.Replace("SEQ Table" + ControlChar.NonBreakingSpaceChar + "" + "\\", "SEQ Table \\");
                                    }
                                }
                            }
                            else
                            {

                                string Str = string.Empty;
                                string Str1 = string.Empty;
                                string Strvalu = pr.GetText().TrimStart();
                                int Lastindex = Strvalu.IndexOf(" SEQ Table");
                                if (Lastindex == -1)
                                    Lastindex = Strvalu.IndexOf("SEQ Table");
                                Str1 = Str = Strvalu.Substring(0, Lastindex);
                                Str1 = Str1.Replace("Table", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                                if (HeaderCaptionfrmt != Str1)
                                {
                                    Fixflag = true;
                                    pr.Range.Replace(Str, "Table" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar);
                                    pr.Range.Replace("SEQ Table" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, "SEQ Table");
                                    pr.Range.Replace("SEQTable" + ControlChar.NonBreakingSpaceChar + "" + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, "SEQ Table");
                                    pr.Range.Replace("SEQ Table\\", "SEQ Table \\");
                                    pr.Range.Replace("SEQ Table" + ControlChar.NonBreakingSpaceChar + "" + "\\", "SEQ Table \\");
                                }
                            }
                        }
                    }
                }
                if (Fixflag)
                {
                    //chLst[k].QC_Result = "Fixed";
                    chLst[k].Is_Fixed = 1;
                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                    foreach (var pg in chLst[k].CommentsPageNumLst)
                    {
                        pg.Comments = pg.Comments + ". Fixed";
                    }
                }
                else
                {
                    if (chLst[k].Comments.Contains("Figure caption has table field code") || chLst[k].Comments.Contains("Table caption has figure field code"))
                    {
                        chLst[k].QC_Result = "Failed";
                    }
                    else
                    {
                        chLst[k].QC_Result = "Passed";
                        //chLst[k].Comments = "No change in Caption format";
                    }
                }
                doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                chLst[k].CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                chLst[k].QC_Result = "Error";
                chLst[k].Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// check the entire page captions - check 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>       
        public void Checkentirepagecaptions(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool allSubChkFlag = false;
            bool CheckType = false;
            rObj.CHECK_END_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    NodeCollection lsttables = doc.GetChildNodes(NodeType.Table, true);
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        if (chLst[k].Check_Type == 1)
                            CheckType = true;
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;
                        bool Tblflag = false;
                        if (chLst[k].Check_Name == "Repeat header row")
                        {
                            if (lsttables.Count == 0)
                            {
                                chLst[k].QC_Result = "Passed";
                                chLst[k].Comments = "Tables not exist";
                            }
                            else
                            {
                                Tblflag = Checkrepeatheader(rObj, doc, chLst, k);
                                if (Tblflag)
                                    allSubChkFlag = true;
                            }
                        }
                        else if (chLst[k].Check_Name == "Remove border lines")
                        {
                            if (lsttables.Count == 0)
                            {
                                chLst[k].QC_Result = "Passed";
                                chLst[k].Comments = "Tables not exist";
                            }
                            else
                            {
                                Tblflag = CheckRemovetableborderlines(rObj, doc, chLst, k);
                                if (Tblflag == true)
                                    allSubChkFlag = true;
                            }
                        }
                        else if (chLst[k].Check_Name == "Missing prefix")
                        {
                            Tblflag = Checkprefix(rObj, doc, chLst, k);
                            if (Tblflag == true)
                                allSubChkFlag = true;
                        }
                        else if (chLst[k].Check_Name == "Missing caption style")
                        {
                            Tblflag = Addcaptionstyle(rObj, doc, chLst, k);
                            if (Tblflag == true)
                                allSubChkFlag = true;
                        }
                        else if (chLst[k].Check_Name == "Missing sequence number")
                        {
                            Tblflag = AddSequencenumber(rObj, doc, chLst, k);
                            if (Tblflag == true)
                                allSubChkFlag = true;
                        }
                    }
                    if (!CheckType)
                        for (int j = 0; j < chLst.Count; j++)
                        {
                            if (chLst[j].Check_Name == "Check entire page captions")
                                chLst[j].Check_Type = 0;
                        }
                }
                if (!CheckType)
                    rObj.Check_Type = 0;
                if (allSubChkFlag && rObj.Job_Type != "QC")
                    rObj.QC_Result = "Failed";

                rObj.CHECK_START_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }

        /// <summary>
        /// check the table captions - check 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>  
        //ChecktableCaption 
        public void ChecktableCaption(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                if (chLst.Count > 0)
                {
                    List<int> fnfamlylst = new List<int>();
                    List<int> fnsizelst = new List<int>();
                    List<int> fnstylelst = new List<int>();
                    List<int> fnpositionlst = new List<int>();
                    List<int> fnspacingaftlst = new List<int>();
                    bool Tblflag = true;

                    List<Node> SeqFieldStartsTable = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Table")).ToList();

                    for (int i = 0; i < chLst.Count; i++)
                    {
                        chLst[i].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[i].JID = rObj.JID;
                        chLst[i].Job_ID = rObj.Job_ID;
                        chLst[i].Folder_Name = rObj.Folder_Name;
                        chLst[i].File_Name = rObj.File_Name;
                        chLst[i].Created_ID = rObj.Created_ID;

                        foreach (FieldStart TableSeqFieldStart in SeqFieldStartsTable)
                        {
                            Paragraph pr = (Paragraph)TableSeqFieldStart.ParentParagraph;

                            if (chLst[i].Check_Name == "Font Family")
                            {
                                foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, true).ToList())
                                {
                                    if (fnrun.Font.Name != chLst[i].Check_Parameter)
                                    {
                                        if (layout.GetStartPageIndex(fnrun) != 0)
                                            fnfamlylst.Add(layout.GetStartPageIndex(fnrun));
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Font Size")
                            {
                                foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, true).ToList())
                                {
                                    if (fnrun.Font.Size != Convert.ToDouble(chLst[i].Check_Parameter))
                                    {
                                        if (
                                            layout.GetStartPageIndex(fnrun) != 0)
                                            fnsizelst.Add(layout.GetStartPageIndex(fnrun));
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Font Style")
                            {
                                foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, true).ToList())
                                {
                                    if (chLst[i].Check_Parameter == "Bold")
                                    {
                                        if (fnrun.Font.Bold != true || fnrun.Font.Italic == true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Italic")
                                    {
                                        if (fnrun.Font.Italic != true || fnrun.Font.Bold == true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Bold Italic")
                                    {
                                        if (fnrun.Font.Bold != true || fnrun.Font.Italic != true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Regular")
                                    {
                                        if (fnrun.Font.Bold == true || fnrun.Font.Italic == true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Position")
                            {
                                if (chLst[i].Check_Parameter == "Center")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                                else if (chLst[i].Check_Parameter == "Left")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                                else if (chLst[i].Check_Parameter == "Right")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                                else if (chLst[i].Check_Parameter == "Justify")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Spacing after")
                            {
                                if (pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[i].Check_Parameter))
                                {
                                    if (layout.GetStartPageIndex(pr) != 0)
                                        fnspacingaftlst.Add(layout.GetStartPageIndex(pr));
                                }

                            }
                        } //foreach TblSeq count end
                        if (chLst[i].Check_Name == "Font Family")
                        {
                            if (SeqFieldStartsTable.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no table captions in document";
                            }
                            else if (fnfamlylst.Count > 0)
                            {
                                List<int> lst1 = fnfamlylst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Table Caption Paragraphs  " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font family.
                        else if (chLst[i].Check_Name == "Font Size")
                        {
                            if (SeqFieldStartsTable.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no table captions in document";
                            }
                            else if (fnsizelst.Count > 0)
                            {
                                List<int> lst1 = fnsizelst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Table Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font Size.
                        else if (chLst[i].Check_Name == "Font Style")
                        {
                            if (SeqFieldStartsTable.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no table captions in document";
                            }
                            else if (fnstylelst.Count > 0)
                            {
                                List<int> lst1 = fnstylelst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Table Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font Style.
                        else if (chLst[i].Check_Name == "Position")
                        {
                            if (SeqFieldStartsTable.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no table captions in document";
                            }
                            else if (fnpositionlst.Count > 0)
                            {
                                List<int> lst1 = fnpositionlst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Table Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font Position.
                        else if (chLst[i].Check_Name == "Spacing after")
                        {
                            if (SeqFieldStartsTable.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no table captions in document";
                            }
                            else if (fnspacingaftlst.Count > 0)
                            {
                                List<int> lst1 = fnspacingaftlst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Table Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Table Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter + "";
                            }
                        }  //End Comments for Font Spacing after.


                    } //chLst count end

                    if (Tblflag == false && rObj.Job_Type != "QC")
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Document contains one or more selected Sub Checks need to be Fixed in the document";
                    }
                    rObj.CHECK_END_TIME = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// check the figure captions - check 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>  
        //CheckfigureCaption 
        public void CheckfigureCaption(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;

            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                if (chLst.Count > 0)
                {
                    List<int> fnfamlylst = new List<int>();
                    List<int> fnsizelst = new List<int>();
                    List<int> fnstylelst = new List<int>();
                    List<int> fnpositionlst = new List<int>();
                    List<int> fnspacingaftlst = new List<int>();
                    bool Tblflag = true;

                    List<Node> SeqFieldStartsFigure = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Figure") || ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Text_Figure") || ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Summary_Figure")).ToList();

                    for (int i = 0; i < chLst.Count; i++)
                    {
                        chLst[i].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[i].JID = rObj.JID;
                        chLst[i].Job_ID = rObj.Job_ID;
                        chLst[i].Folder_Name = rObj.Folder_Name;
                        chLst[i].File_Name = rObj.File_Name;
                        chLst[i].Created_ID = rObj.Created_ID;

                        foreach (FieldStart FigureSeqFieldStart in SeqFieldStartsFigure)
                        {
                            Paragraph pr = (Paragraph)FigureSeqFieldStart.ParentParagraph;

                            if (chLst[i].Check_Name == "Font Family")
                            {
                                foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, true).ToList())
                                {
                                    if (fnrun.Font.Name != chLst[i].Check_Parameter)
                                    {
                                        if (layout.GetStartPageIndex(fnrun) != 0)
                                            fnfamlylst.Add(layout.GetStartPageIndex(fnrun));
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Font Size")
                            {
                                foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, true).ToList())
                                {
                                    if (fnrun.Font.Size != Convert.ToDouble(chLst[i].Check_Parameter))
                                    {
                                        if (layout.GetStartPageIndex(fnrun) != 0)
                                            fnsizelst.Add(layout.GetStartPageIndex(fnrun));
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Font Style")
                            {
                                foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, true).ToList())
                                {
                                    if (chLst[i].Check_Parameter == "Bold")
                                    {
                                        if (fnrun.Font.Bold != true || fnrun.Font.Italic == true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Italic")
                                    {
                                        if (fnrun.Font.Italic != true || fnrun.Font.Bold == true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Bold Italic")
                                    {
                                        if (fnrun.Font.Bold != true || fnrun.Font.Italic != true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Regular")
                                    {
                                        if (fnrun.Font.Bold == true || fnrun.Font.Italic == true)
                                        {
                                            if (layout.GetStartPageIndex(fnrun) != 0)
                                                fnstylelst.Add(layout.GetStartPageIndex(fnrun));
                                        }
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Position")
                            {
                                if (chLst[i].Check_Parameter == "Center")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                                else if (chLst[i].Check_Parameter == "Left")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                                else if (chLst[i].Check_Parameter == "Right")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                                else if (chLst[i].Check_Parameter == "Justify")
                                {
                                    if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            fnpositionlst.Add(layout.GetStartPageIndex(pr));
                                    }
                                }
                            }
                            else if (chLst[i].Check_Name == "Spacing after")
                            {
                                if (pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[i].Check_Parameter))
                                {
                                    if (layout.GetStartPageIndex(pr) != 0)
                                        fnspacingaftlst.Add(layout.GetStartPageIndex(pr));
                                }

                            }
                        } //foreach FigSeq count end
                        if (chLst[i].Check_Name == "Font Family")
                        {
                            if (SeqFieldStartsFigure.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no figure captions in document";
                            }
                            else if (fnfamlylst.Count > 0)
                            {
                                List<int> lst1 = fnfamlylst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Figure Caption Paragraphs  " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font family.
                        else if (chLst[i].Check_Name == "Font Size")
                        {
                            if (SeqFieldStartsFigure.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no figure captions in document";
                            }
                            else if (fnsizelst.Count > 0)
                            {
                                List<int> lst1 = fnsizelst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Figure Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font Size.
                        else if (chLst[i].Check_Name == "Font Style")
                        {
                            if (SeqFieldStartsFigure.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no figure captions in document";
                            }
                            else if (fnstylelst.Count > 0)
                            {
                                List<int> lst1 = fnstylelst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Figure Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font Style.
                        else if (chLst[i].Check_Name == "Position")
                        {
                            if (SeqFieldStartsFigure.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no figure captions in document";
                            }
                            else if (fnpositionlst.Count > 0)
                            {
                                List<int> lst1 = fnpositionlst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Figure Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter;
                            }
                        }
                        //End Comments for Font Position.
                        else if (chLst[i].Check_Name == "Spacing after")
                        {
                            if (SeqFieldStartsFigure.Count <= 0)
                            {
                                chLst[i].QC_Result = "Passed";
                                chLst[i].Comments = "There are no figure captions in document";
                            }
                            else if (fnspacingaftlst.Count > 0)
                            {
                                List<int> lst1 = fnspacingaftlst.Distinct().ToList();
                                lst1.Sort();
                                Pagenumber = string.Join(", ", lst1.ToArray());
                                chLst[i].QC_Result = "Failed";
                                Tblflag = false;
                                chLst[i].Comments = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in \"" + chLst[i].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[i].CommentsWOPageNum = "Figure Caption Paragraphs " + chLst[i].Check_Name + " is not in\" " + chLst[i].Check_Parameter + "\"";
                                chLst[i].PageNumbersLst = lst1;
                            }
                            else
                            {
                                chLst[i].QC_Result = "Passed";
                                //chLst[i].Comments = "All Figure Caption Paragraphs " + chLst[i].Check_Name + " is in " + chLst[i].Check_Parameter + "";
                            }
                        }  //End Comments for Font Spacing after.


                    } //chLst count end

                    if (Tblflag == false && rObj.Job_Type != "QC")
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Document contains one or more selected Sub Checks need to be Fixed in the document";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// fix the table captions - fix 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>  

        public void FixtableCaption(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            //doc = new Document(rObj.DestFilePath);
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    bool Tblfxflag = true;

                    List<Node> SeqFieldStartsTable = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Table")).ToList();
                    if (SeqFieldStartsTable.Count != 0)
                        for (int i = 0; i < chLst.Count; i++)
                        {
                            Tblfxflag = true;
                            chLst[i].Parent_Checklist_ID = rObj.CheckList_ID;
                            chLst[i].JID = rObj.JID;
                            chLst[i].Job_ID = rObj.Job_ID;
                            chLst[i].Folder_Name = rObj.Folder_Name;
                            chLst[i].File_Name = rObj.File_Name;
                            chLst[i].Created_ID = rObj.Created_ID;

                            foreach (FieldStart TableSeqFieldStart in SeqFieldStartsTable)
                            {
                                Paragraph pr = (Paragraph)TableSeqFieldStart.ParentParagraph;

                                if (chLst[i].Check_Name == "Font Family" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, false).ToList())
                                    {
                                        if (fnrun.Font.Name != chLst[i].Check_Parameter)
                                        {
                                            Tblfxflag = false;
                                            fnrun.Font.Name = chLst[i].Check_Parameter;
                                        }
                                    }
                                }
                                else if (chLst[i].Check_Name == "Font Size" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, false).ToList())
                                    {
                                        if (fnrun.Font.Size != Convert.ToDouble(chLst[i].Check_Parameter))
                                        {
                                            Tblfxflag = false;
                                            fnrun.Font.Size = Convert.ToDouble(chLst[i].Check_Parameter);
                                        }
                                    }
                                }
                                else if (chLst[i].Check_Name == "Font Style" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, false).ToList())
                                    {
                                        if (chLst[i].Check_Parameter == "Bold")
                                        {
                                            if (fnrun.Font.Italic)
                                            {
                                                Tblfxflag = false;
                                                fnrun.Font.Italic = false;
                                            }

                                            if (!fnrun.Font.Bold)
                                            {
                                                Tblfxflag = false;
                                                fnrun.Font.Bold = true;
                                            }
                                        }
                                        else if (chLst[i].Check_Parameter == "Italic")
                                        {
                                            if (fnrun.Font.Bold)
                                            {
                                                Tblfxflag = false;
                                                fnrun.Font.Bold = false;
                                            }
                                            if (!fnrun.Font.Italic)
                                            {
                                                fnrun.Font.Italic = true;
                                                Tblfxflag = false;
                                            }
                                        }
                                        else if (chLst[i].Check_Parameter == "Bold Italic")
                                        {
                                            if (!fnrun.Font.Italic)
                                            {
                                                Tblfxflag = false;
                                                fnrun.Font.Italic = true;
                                            }
                                            if (!fnrun.Font.Bold)
                                            {
                                                Tblfxflag = false;
                                                fnrun.Font.Bold = true;
                                            }
                                        }
                                        else if (chLst[i].Check_Parameter == "Regular")
                                        {
                                            if (fnrun.Font.Bold)
                                            {
                                                fnrun.Font.Bold = false;
                                                Tblfxflag = false;
                                            }
                                            if (fnrun.Font.Italic)
                                            {
                                                fnrun.Font.Italic = false;
                                                Tblfxflag = false;
                                            }
                                        }

                                    }
                                }
                                else if (chLst[i].Check_Name == "Position" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    if (chLst[i].Check_Parameter == "Center")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            Tblfxflag = false;
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Left")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            Tblfxflag = false;
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Right")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            Tblfxflag = false;
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Justify")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                            Tblfxflag = false;
                                        }
                                    }
                                }
                                else if (chLst[i].Check_Name == "Spacing after" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    if (pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[i].Check_Parameter))
                                    {
                                        pr.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[i].Check_Parameter);
                                        Tblfxflag = false;
                                    }
                                }

                            }
                            if (!Tblfxflag)
                            {
                                chLst[i].Is_Fixed = 1;
                                chLst[i].Comments = chLst[i].Comments + ". Fixed";
                                chLst[i].CommentsWOPageNum = chLst[i].CommentsWOPageNum + ". Fixed";
                            }
                            else
                            {
                                if (chLst[i].QC_Result == "Failed" && chLst[i].Check_Type == 1)
                                {
                                    chLst[i].Is_Fixed = 1;
                                    chLst[i].Comments = chLst[i].Comments + " These may be fixed due to some other checks";
                                    chLst[i].CommentsWOPageNum = chLst[i].CommentsWOPageNum + ". These may be fixed due to some other checks";
                                }
                                else
                                {
                                    //chLst[i].QC_Result = "Passed";
                                    chLst[i].Comments = chLst[i].Comments;
                                }
                            }

                        }
                    doc.UpdateFields();
                    //doc.Save(rObj.DestFilePath);
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }

        /// <summary>
        /// fix the figure captions - fix 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>  

        public void FixfigureCaption(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            //doc = new Document(rObj.DestFilePath);
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    bool Figfxflag = true;

                    List<Node> SeqFieldStartsFigure = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Figure") || ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Text_Figure") || ((FieldStart)x).GetField().GetFieldCode().Contains("SEQ Summary_Figure")).ToList();
                    if (SeqFieldStartsFigure.Count != 0)
                        for (int i = 0; i < chLst.Count; i++)
                        {
                            Figfxflag = true;
                            chLst[i].Parent_Checklist_ID = rObj.CheckList_ID;
                            chLst[i].JID = rObj.JID;
                            chLst[i].Job_ID = rObj.Job_ID;
                            chLst[i].Folder_Name = rObj.Folder_Name;
                            chLst[i].File_Name = rObj.File_Name;
                            chLst[i].Created_ID = rObj.Created_ID;
                            foreach (FieldStart FigureSeqFieldStart in SeqFieldStartsFigure)
                            {
                                Paragraph pr = (Paragraph)FigureSeqFieldStart.ParentParagraph;

                                if (chLst[i].Check_Name == "Font Family" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, false).ToList())
                                    {
                                        if (fnrun.Font.Name != chLst[i].Check_Parameter)
                                        {
                                            Figfxflag = false;
                                            fnrun.Font.Name = chLst[i].Check_Parameter;
                                        }
                                    }
                                }
                                else if (chLst[i].Check_Name == "Font Size" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, false).ToList())
                                    {
                                        if (fnrun.Font.Size != Convert.ToDouble(chLst[i].Check_Parameter))
                                        {
                                            Figfxflag = false;
                                            fnrun.Font.Size = Convert.ToDouble(chLst[i].Check_Parameter);
                                        }
                                    }
                                }
                                else if (chLst[i].Check_Name == "Font Style" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    foreach (Run fnrun in pr.GetChildNodes(NodeType.Run, false).ToList())
                                    {
                                        if (chLst[i].Check_Parameter == "Bold")
                                        {
                                            if (fnrun.Font.Italic)
                                            {
                                                Figfxflag = false;
                                                fnrun.Font.Italic = false;
                                            }

                                            if (!fnrun.Font.Bold)
                                            {
                                                Figfxflag = false;
                                                fnrun.Font.Bold = true;
                                            }
                                        }
                                        else if (chLst[i].Check_Parameter == "Italic")
                                        {
                                            if (fnrun.Font.Bold)
                                            {
                                                Figfxflag = false;
                                                fnrun.Font.Bold = false;
                                            }
                                            if (!fnrun.Font.Italic)
                                            {
                                                fnrun.Font.Italic = true;
                                                Figfxflag = false;
                                            }
                                        }
                                        else if (chLst[i].Check_Parameter == "Bold Italic")
                                        {
                                            if (!fnrun.Font.Italic)
                                            {
                                                Figfxflag = false;
                                                fnrun.Font.Italic = true;
                                            }
                                            if (!fnrun.Font.Bold)
                                            {
                                                Figfxflag = false;
                                                fnrun.Font.Bold = true;
                                            }
                                        }
                                        else if (chLst[i].Check_Parameter == "Regular")
                                        {
                                            if (fnrun.Font.Bold)
                                            {
                                                fnrun.Font.Bold = false;
                                                Figfxflag = false;
                                            }
                                            if (fnrun.Font.Italic)
                                            {
                                                fnrun.Font.Italic = false;
                                                Figfxflag = false;
                                            }
                                        }

                                    }
                                }
                                else if (chLst[i].Check_Name == "Position" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    if (chLst[i].Check_Parameter == "Center")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            Figfxflag = false;
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Left")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            Figfxflag = false;
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Right")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            Figfxflag = false;
                                        }
                                    }
                                    else if (chLst[i].Check_Parameter == "Justify")
                                    {
                                        if (pr.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                        {
                                            pr.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                            Figfxflag = false;
                                        }
                                    }
                                }
                                else if (chLst[i].Check_Name == "Spacing after" && chLst[i].QC_Result != "Passed" && chLst[i].Check_Type == 1)
                                {
                                    if (pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[i].Check_Parameter))
                                    {
                                        pr.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[i].Check_Parameter);
                                        Figfxflag = false;
                                    }
                                }

                            }
                            if (!Figfxflag)
                            {
                                chLst[i].Is_Fixed = 1;
                                chLst[i].Comments = chLst[i].Comments + ". Fixed";
                                chLst[i].CommentsWOPageNum = chLst[i].CommentsWOPageNum + ". Fixed";
                            }
                            else
                            {
                                if (chLst[i].QC_Result == "Failed" && chLst[i].Check_Type == 1)
                                {
                                    chLst[i].Is_Fixed = 1;
                                    chLst[i].Comments = chLst[i].Comments + " These may be fixed due to some other checks";
                                    chLst[i].CommentsWOPageNum = chLst[i].CommentsWOPageNum + ". These may be fixed due to some other checks";
                                }
                                else
                                {
                                    //chLst[i].QC_Result = "Passed";
                                    chLst[i].Comments = chLst[i].Comments;
                                }
                            }

                        }
                    rObj.FIX_END_TIME = DateTime.Now;
                    doc.UpdateFields();
                    //doc.Save(rObj.DestFilePath);
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }

        public void FixCheckentirepagecaptions(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;


                        if (chLst[k].Check_Name == "Repeat header row" && chLst[k].QC_Result != "Passed" && chLst[k].Check_Type == 1)
                            Fixrepeatheader(rObj, doc, chLst, k);
                        else if (chLst[k].Check_Name == "Remove border lines" && chLst[k].QC_Result != "Passed" && chLst[k].Check_Type == 1)
                            Fixremoveborderlines(rObj, doc, chLst, k);
                        else if (chLst[k].Check_Name == "Missing prefix" && chLst[k].QC_Result != "Passed" && chLst[k].Check_Type == 1)
                            Fixprefix(rObj, doc, chLst, k);
                        else if (chLst[k].Check_Name == "Missing caption style" && chLst[k].QC_Result != "Passed" && chLst[k].Check_Type == 1)
                            Fixcaptionstyle(rObj, doc, chLst, k);
                        else if (chLst[k].Check_Name == "Missing sequence number" && chLst[k].QC_Result != "Passed" && chLst[k].Check_Type == 1)
                            FixSequencenumber(rObj, doc, chLst, k);

                    }
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }


        /// <summary>
        /// Check Multiple field codes
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckMultipleSequence(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> TablesList = doc.GetChildNodes(NodeType.Table, true).ToList();
                foreach (Table tbl in TablesList)
                {
                    List<Node> SeqList = tbl.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                    if (SeqList.Count > 1 && layout.GetStartPageIndex(tbl) != 0)
                    {
                        if (tbl.LastChild != null)
                            lstrp.Add(layout.GetStartPageIndex(tbl.LastChild));
                        else
                            lstrp.Add(layout.GetStartPageIndex(tbl));
                    }
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (TablesList.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (lst4.Count > 0)
                {
                    lst4.Sort();
                    pagenumber = string.Join(", ", lst4.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table contains more than one sequence number in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Table contains more than one sequence number";
                    rObj.PageNumbersLst = lst4;
                }
                else
                {
                    if (rObj.QC_Result != "Failed")
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Tables not contains more than one sequence number";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Table and figure title format
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void TableandFigureformat(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> TablesList = doc.GetChildNodes(NodeType.Table, true).ToList();
                DocumentBuilder builder = new DocumentBuilder(doc);
                List<FieldSeq> seqFields = doc.Range.Fields.Where(f => f.Type == FieldType.FieldSequence).Cast<FieldSeq>().Where(f => f.SequenceIdentifier == "Table" || f.SequenceIdentifier == "Text_Table" || f.SequenceIdentifier == "Figure" || f.SequenceIdentifier == "Text_Figure").ToList();
                foreach (FieldSeq f in seqFields)
                {
                    Paragraph p = f.Start.ParentParagraph;
                    if ((!p.Range.Text.Contains("SEQ Table \\*alphabetic \\s 1") && !p.Range.Text.Contains("STYLEREF 1 \\s")) || (!p.Range.Text.Contains("SEQ Text_Table \\*alphabetic \\s 1") && !p.Range.Text.Contains("STYLEREF 1 \\s")) || (!p.Range.Text.Contains("SEQ Text_Figure \\*alphabetic \\s 1") && !p.Range.Text.Contains("STYLEREF 1 \\s")) || (!p.Range.Text.Contains("SEQ Figure \\*alphabetic \\s 1") && !p.Range.Text.Contains("STYLEREF 1 \\s")))
                    {
                        if (layout.GetStartPageIndex(p) != 0)
                            lstrp.Add(layout.GetStartPageIndex(p));
                    }
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (seqFields.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables or figures in the document";
                }
                else if (lst4.Count > 0)
                {
                    lst4.Sort();
                    pagenumber = string.Join(", ", lst4.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table or figure titles not in correct format in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Table or figure titles not correct format";
                    rObj.PageNumbersLst = lst4;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Table or figure titles are  in correct format";

                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Table and figure title format
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTableandFigureformat(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            bool Fixflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                string HeaderCaptionfrmt = string.Empty;
                List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                if (HeadingPara.Count > 0 && ((Paragraph)HeadingPara[0]).IsListItem == true)
                {
                    HeaderCaptionfrmt = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.NumberFormat;
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\u0001", "");
                    string startat = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.StartAt.ToString();
                    if (HeaderCaptionfrmt != "")
                        HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\0", startat);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt.ToCharArray().ElementAt(HeaderCaptionfrmt.Length - 1) == '.')
                {
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Remove(HeaderCaptionfrmt.Length - 1);
                }

                DocumentBuilder builder = new DocumentBuilder(doc);
                List<FieldSeq> seqFields = doc.Range.Fields.Where(f => f.Type == FieldType.FieldSequence).Cast<FieldSeq>().Where(f => f.SequenceIdentifier == "Table").ToList();
                foreach (FieldSeq f in seqFields)
                {
                    Paragraph pr = f.Start.ParentParagraph;

                    string Str = string.Empty;
                    string Str1 = string.Empty;
                    string Strvalu = pr.GetText().TrimStart();
                    int Lastindex = Strvalu.IndexOf(" SEQ Table");
                    if (Lastindex == -1)
                        Lastindex = Strvalu.IndexOf("SEQ Table");
                    Str1 = Str = Strvalu.Substring(0, Lastindex);
                    Str1 = Str1.Replace("Table", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                    if (HeaderCaptionfrmt != "")
                    {
                        if (pr.Range.Text.Contains("\t"))
                            pr.Range.Replace("\t", " ");
                        if (pr.Range.Text.Contains(":"))
                            pr.Range.Replace(":", " ");

                        pr.Range.Replace(Str, "Table\t");
                        builder.MoveToField(f, true);
                        builder.InsertField(@"STYLEREF 1 \s");
                        builder.Write(".");
                        builder.InsertField(@" SEQ Table \*alphabetic \s 1 ");
                        Fixflag = true;
                        f.Remove();

                    }
                }
                List<FieldSeq> FigseqFields = doc.Range.Fields.Where(f => f.Type == FieldType.FieldSequence).Cast<FieldSeq>().Where(f => f.SequenceIdentifier == "Figure").ToList();
                foreach (FieldSeq f in FigseqFields)
                {
                    Paragraph pr = f.Start.ParentParagraph;

                    string Str = string.Empty;
                    string Str1 = string.Empty;
                    string Strvalu = pr.GetText().TrimStart();
                    int Lastindex = Strvalu.IndexOf(" SEQ Figure");
                    if (Lastindex == -1)
                        Lastindex = Strvalu.IndexOf("SEQ Figure");
                    Str1 = Str = Strvalu.Substring(0, Lastindex);
                    Str1 = Str1.Replace("Figure", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                    if (HeaderCaptionfrmt != "")
                    {
                        if (pr.Range.Text.Contains("\t"))
                            pr.Range.Replace("\t", " ");
                        if (pr.Range.Text.Contains(":"))
                            pr.Range.Replace(":", " ");

                        pr.Range.Replace(Str, "Figure\t");
                        builder.MoveToField(f, true);
                        builder.InsertField(@"STYLEREF 1 \s");
                        builder.Write(".");
                        builder.InsertField(@" SEQ Figure \*alphabetic \s 1 ");
                        Fixflag = true;
                        f.Remove();

                    }
                }
                List<FieldSeq> seqFields1 = doc.Range.Fields.Where(f => f.Type == FieldType.FieldSequence).Cast<FieldSeq>().Where(f => f.SequenceIdentifier == "Text_Table").ToList();
                foreach (FieldSeq f in seqFields1)
                {
                    Paragraph pr = f.Start.ParentParagraph;

                    string Str = string.Empty;
                    string Str1 = string.Empty;
                    string Strvalu = pr.GetText().TrimStart();
                    int Lastindex = Strvalu.IndexOf(" SEQ Text_Table");
                    if (Lastindex == -1)
                        Lastindex = Strvalu.IndexOf("SEQ Text_Table");
                    Str1 = Str = Strvalu.Substring(0, Lastindex);
                    Str1 = Str1.Replace("Text_Table", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                    if (HeaderCaptionfrmt != "")
                    {
                        if (pr.Range.Text.Contains("\t"))
                            pr.Range.Replace("\t", " ");
                        if (pr.Range.Text.Contains(":"))
                            pr.Range.Replace(":", " ");

                        pr.Range.Replace(Str, "Text_Table\t");
                        builder.MoveToField(f, true);
                        builder.InsertField(@"STYLEREF 1 \s");
                        builder.Write(".");
                        builder.InsertField(@" SEQ Text_Table \*alphabetic \s 1 ");
                        Fixflag = true;
                        f.Remove();

                    }
                }
                List<FieldSeq> FigseqFields1 = doc.Range.Fields.Where(f => f.Type == FieldType.FieldSequence).Cast<FieldSeq>().Where(f => f.SequenceIdentifier == "Text_Figure").ToList();
                foreach (FieldSeq f in FigseqFields1)
                {
                    Paragraph pr = f.Start.ParentParagraph;

                    string Str = string.Empty;
                    string Str1 = string.Empty;
                    string Strvalu = pr.GetText().TrimStart();
                    int Lastindex = Strvalu.IndexOf(" SEQ Text_Figure");
                    if (Lastindex == -1)
                        Lastindex = Strvalu.IndexOf("SEQ Text_Figure");
                    Str1 = Str = Strvalu.Substring(0, Lastindex);
                    Str1 = Str1.Replace("Text_Figure", "").Replace(" ", "").Replace("-", "").Replace(ControlChar.NonBreakingSpace, "").Replace(ControlChar.NonBreakingHyphenChar.ToString(), "");
                    if (HeaderCaptionfrmt != "")
                    {
                        if (pr.Range.Text.Contains("\t"))
                            pr.Range.Replace("\t", " ");
                        if (pr.Range.Text.Contains(":"))
                            pr.Range.Replace(":", " ");

                        pr.Range.Replace(Str, "Text_Figure\t");
                        builder.MoveToField(f, true);
                        builder.InsertField(@"STYLEREF 1 \s");
                        builder.Write(".");
                        builder.InsertField(@" SEQ Text_Figure \*alphabetic \s 1 ");
                        Fixflag = true;
                        f.Remove();

                    }
                }

                doc.UpdateFields();
                if (Fixflag == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = rObj.Comments + ". These cannot be fixed";

                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Set "keep with next" for cross-page tables--Added by Nagesh on 11-Nov-2020
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void KeepWithNextOnTables(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table tabl in doc.GetChildNodes(NodeType.Table, true))
                    {
                        bool isInnerTbl = CheckInnerTable(tabl);//Code for Inner Table check
                        Paragraph prPre = new Paragraph(doc);
                        if (tabl.PreviousSibling != null && tabl.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            //Code to check whether this table has figure sequence or not
                            prPre = (Paragraph)tabl.PreviousSibling;
                        }
                        if (!isInnerTbl && !prPre.Range.Text.TrimStart().StartsWith("Figure") && !prPre.Range.Text.Contains("SEQ Figure"))
                        {
                            foreach (Paragraph pr in tabl.GetChildNodes(NodeType.Paragraph, true))
                            {
                                if (pr.ParagraphFormat.KeepWithNext != true)
                                {
                                    if (layout.GetStartPageIndex(tabl) != 0)
                                        lst.Add(layout.GetStartPageIndex(tabl));
                                }
                            }
                        }
                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (lst.Count > 0)
                {
                    List<int> lst1 = lst.Distinct().ToList();
                    lst1.Sort();
                    string pagenum = string.Join(", ", lst1.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Tables are not keep with next mode in: " + pagenum;
                    rObj.CommentsWOPageNum = "Tables are not keep with next mode";
                    rObj.PageNumbersLst = lst1;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Tables are keep with next mode only";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Fix Set "keep with next" for cross-page tables--Added by Nagesh on 11-Nov-2020
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixKeepWithNextOnTables(RegOpsQC rObj, Document doc)
        {
            bool FixStyleFlag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                // doc = new Document(rObj.DestFilePath);
                foreach (Table tabl in doc.GetChildNodes(NodeType.Table, true))
                {
                    bool isInnerTbl = CheckInnerTable(tabl);//Code for inner table Checking
                    Paragraph prPre = new Paragraph(doc);
                    if (tabl.PreviousSibling != null && tabl.PreviousSibling.NodeType == NodeType.Paragraph)
                    {
                        //Code to check whether this table has figure sequence or not
                        prPre = (Paragraph)tabl.PreviousSibling;
                    }
                    if (!isInnerTbl && !prPre.Range.Text.TrimStart().StartsWith("Figure") && !prPre.Range.Text.Contains("SEQ Figure"))
                    {
                        foreach (Paragraph pr in tabl.GetChildNodes(NodeType.Paragraph, true))
                        {
                            if (pr.ParagraphFormat.KeepWithNext != true)
                            {
                                pr.ParagraphFormat.KeepWithNext = true;
                                FixStyleFlag = true;
                            }
                        }
                    }
                }
                if (FixStyleFlag == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments += ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Tables are in keepwithnext style only";
                }
                rObj.FIX_END_TIME = DateTime.Now;
                //doc.Save(rObj.DestFilePath);
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }
        /// <summary>
        /// Check Single Cell caption row
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        /// <param name="k"></param>
        /// <returns></returns>
        public void CheckSingleCellCaptionrow(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (int y = 0; y < tables.Count; y++)
                {
                    Table table = (Table)tables[y];
                    bool isInnerTbl = CheckInnerTable(table);
                    Row rw = table.FirstRow;
                    List<Node> Captionstyle = rw.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> fields = rw.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    if ((Captionstyle.Count > 0 || fields.Count > 0) && rw.Cells.Count > 1 && !isInnerTbl)
                    {

                        if (layout.GetStartPageIndex(table) != 0)
                            lstrp.Add(layout.GetStartPageIndex(table));
                    }
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (lst4.Count > 0)
                {
                    lst4.Sort();
                    pagenumber = string.Join(", ", lst4.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Single cell not in Table Caption row in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Single cell not in Table Caption row";
                    rObj.PageNumbersLst = lst4;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All table caption rows has single cell only";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Fix Single Cell caption row
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        /// <param name="k"></param>
        public void FixSingleCellCaptionrow(RegOpsQC rObj, Document doc)
        {
            bool Fixflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (int y = 0; y < tables.Count; y++)
                {
                    Table table = (Table)tables[y];
                    Row rw = table.FirstRow;
                    bool isInnerTbl = CheckInnerTable(table);
                    List<Node> CaptionStyle = rw.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> fields = rw.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
                    if ((CaptionStyle.Count > 0 || fields.Count > 0) && rw.Cells.Count > 1 && !isInnerTbl)
                    {
                        rw.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                        int count = rw.Cells.Count();
                        double NewCellWidth = rw.Cells[0].CellFormat.Width;
                        string type = rw.Cells[0].CellFormat.PreferredWidth.Type.ToString();
                        for (int i = 1; i < count; i++)
                        {
                            foreach (Node child in rw.Cells[i].ChildNodes)
                            {
                                if (child.Range.Text.Trim() != "\a")
                                    rw.Cells[i - 1].AppendChild(child);
                            }
                            rw.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                            NewCellWidth += rw.Cells[i].CellFormat.Width;
                        }
                        // if (table.AllowAutoFit != true)
                        //  table.FirstRow.FirstCell.CellFormat.Width = NewCellWidth;
                        table.FirstRow.FirstCell.CellFormat.WrapText = true;
                        NodeCollection nodelst = table.FirstRow.GetChildNodes(NodeType.Paragraph, true);
                        foreach (Paragraph child in nodelst)
                        {
                            if (child.Range.Text == "\r" || child.Range.Text == "\a")
                                child.Remove();
                        }
                        Fixflag = true;
                    }
                }
                if (Fixflag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments += ". Fixed.";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All table caption rows has single cell only.";
                }
                doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///Verify caption style name
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Verifycaptionstylename(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            List<int> lstFontnames = new List<int>();
            List<int> lstFontsizes = new List<int>();
            List<int> lstFontbolds = new List<int>();
            List<int> lstFontitalics = new List<int>();
            List<int> lstSpacebefore = new List<int>();
            List<int> lstSpaceafter = new List<int>();
            List<int> lstLinespacing = new List<int>();
            List<int> lstAlignment = new List<int>();
            List<int> lstStylename = new List<int>();
            List<int> lstShading = new List<int>();
            List<int> pgnumlst = new List<int>();
            string FontnameComment = string.Empty;
            string FontSizeComment = string.Empty;
            string FontBoldComment = string.Empty;
            string SpacebeforeComment = string.Empty;
            string SpaceafterComment = string.Empty;
            string LinespacingComment = string.Empty;
            string AlignmentComment = string.Empty;
            string StylenameComment = string.Empty;
            string HeaderCaptionfrmt = string.Empty;
            string ShadingComment = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            Style ExistingStyle = null;
            try
            {
                ExistingStyle = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == rObj.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();
                //  RegOpsQC Predictstyles = new WordParagraphActions().GetPredictstyles(rObj.Created_ID, rObj.Check_Parameter);
                if (ExistingStyle != null)
                {
                    //doc = new Document(rObj.DestFilePath);
                    LayoutCollector layout = new LayoutCollector(doc);
                    List<Node> childtbllst = new List<Node>();
                    NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                    FontnameComment = "font name should be '" + ExistingStyle.Font.Name + "' but not found in: ";
                    FontSizeComment = "font size should be '" + ExistingStyle.Font.Size + "' but not found in: ";
                    FontBoldComment = "font bold should be '" + ExistingStyle.Font.Bold + "' but not found in: ";
                    if (ExistingStyle.ParagraphFormat != null)
                    {
                        SpacebeforeComment = "space before should be '" + ExistingStyle.ParagraphFormat.SpaceBefore + "' but not found in: ";
                        SpaceafterComment = "space after should be '" + ExistingStyle.ParagraphFormat.SpaceAfter + "' but not found in: ";
                        LinespacingComment = "line spacing should be '" + ExistingStyle.ParagraphFormat.LineSpacing + "' but not found in: ";
                        AlignmentComment = "alignment should be '" + ExistingStyle.ParagraphFormat.Alignment + "' but not found in: ";
                        //StylenameComment = " style name should be '" + ExistingStyle.Stylename + "' not found in page numbers :";
                        ShadingComment = "shading should be '" + ExistingStyle.ParagraphFormat.Shading + "' but not found in: ";
                    }
                    //Inner Table Code open
                    foreach (Table tbl in lsttbles)
                    {
                        List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                        childtbllst.AddRange(existlst);
                    }
                    //Inner Table Code Close              
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == rObj.Check_Parameter.ToUpper() || ((Paragraph)x).ParagraphFormat.StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToUpper())) && (((Paragraph)x).Range.Text.Contains("SEQ Table") || ((Paragraph)x).Range.Text.Contains("SEQ Figure"))).ToList();
                    foreach (Paragraph paragraph in paragraphs)
                    {
                        bool InnerFigure = false;
                        bool CheckShadingflag = false;
                        if (paragraph.IsInCell)
                        {     //Bolow code to check shadding to the table cell.                       
                            Cell cell = (Cell)paragraph.ParentNode;
                            if ((cell.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == rObj.Check_Parameter.ToUpper() || cell.FirstParagraph.ParagraphFormat.StyleIdentifier.ToString() == rObj.Check_Parameter.ToUpper()) && (cell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || cell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar)) && cell.CellFormat.Shading.BackgroundPatternColor.Name.ToString() != ExistingStyle.ParagraphFormat.Shading.BackgroundPatternColor.Name)
                            {
                                CheckShadingflag = true;
                            }
                        }
                        if (paragraph.Range.Text.Contains("SEQ Figure") && paragraph.IsInCell)
                        {
                            InnerFigure = true;
                        }
                        List<Node> FontsBoldLst = new List<Node>();
                        List<Node> FontsSizeLst = new List<Node>();
                        List<Node> FontNamesLst = new List<Node>();
                        List<Node> FontsItalicLst = new List<Node>();
                        List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                        //Below code to get predict styles not matching page numbers.
                        if (CheckInTblExist.Count == 0 && !InnerFigure)
                        {
                            if (ExistingStyle.Font != null)
                            {
                                FontsBoldLst = paragraph.GetChildNodes(NodeType.Run, false).Where(x => ((Run)x).Font.Bold != Convert.ToBoolean(ExistingStyle.Font.Bold)).ToList();
                                if (layout.GetStartPageIndex(paragraph) != 0 && !lstFontbolds.Contains(layout.GetStartPageIndex(paragraph)) && FontsBoldLst.Count > 0)
                                {
                                    lstFontbolds.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    FontBoldComment = FontBoldComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                    rObj.QC_Result = "Failed";
                                }
                                FontsSizeLst = paragraph.GetChildNodes(NodeType.Run, false).Where(x => ((Run)x).Font.Size != Convert.ToDouble(ExistingStyle.Font.Size)).ToList();
                                if (layout.GetStartPageIndex(paragraph) != 0 && !lstFontsizes.Contains(layout.GetStartPageIndex(paragraph)) && FontsSizeLst.Count > 0)
                                {
                                    lstFontsizes.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    FontSizeComment = FontSizeComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                    rObj.QC_Result = "Failed";
                                }
                                FontNamesLst = paragraph.GetChildNodes(NodeType.Run, false).Where(x => ((Run)x).Font.Name != ExistingStyle.Font.Name).ToList();
                                if (FontNamesLst.Count > 0)
                                {
                                    FontNamesLst = FontNamesLst.Where(x => ((Run)x).Font.Name.ToUpper() != "SYMBOL").ToList();
                                }
                                if (layout.GetStartPageIndex(paragraph) != 0 && !lstFontnames.Contains(layout.GetStartPageIndex(paragraph)) && FontNamesLst.Count > 0)
                                {
                                    lstFontnames.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    FontnameComment = FontnameComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                    rObj.QC_Result = "Failed";
                                }
                            }
                            if (ExistingStyle.ParagraphFormat != null)
                            {
                                if (CheckShadingflag || (layout.GetStartPageIndex(paragraph) != 0 && ExistingStyle.ParagraphFormat.Shading != null && paragraph.ParagraphFormat.Shading.BackgroundPatternColor.Name.ToString() != ExistingStyle.ParagraphFormat.Shading.BackgroundPatternColor.Name))
                                {
                                    if (!lstShading.Contains(layout.GetStartPageIndex(paragraph)))
                                    {
                                        lstShading.Add(layout.GetStartPageIndex(paragraph));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                        ShadingComment = ShadingComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                        rObj.QC_Result = "Failed";
                                    }
                                }
                                if (layout.GetStartPageIndex(paragraph) != 0 && !lstSpaceafter.Contains(layout.GetStartPageIndex(paragraph)) && Convert.ToString(ExistingStyle.ParagraphFormat.SpaceAfter) != null && paragraph.ParagraphFormat.SpaceAfter != Convert.ToDouble(ExistingStyle.ParagraphFormat.SpaceAfter))
                                {
                                    lstSpaceafter.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    SpaceafterComment = SpaceafterComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                    rObj.QC_Result = "Failed";
                                }
                                if (layout.GetStartPageIndex(paragraph) != 0 && !lstSpacebefore.Contains(layout.GetStartPageIndex(paragraph)) && Convert.ToString(ExistingStyle.ParagraphFormat.SpaceBefore) != null && paragraph.ParagraphFormat.SpaceBefore != Convert.ToDouble(ExistingStyle.ParagraphFormat.SpaceBefore))
                                {
                                    lstSpacebefore.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    SpacebeforeComment = SpacebeforeComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                    rObj.QC_Result = "Failed";
                                }
                                if (layout.GetStartPageIndex(paragraph) != 0 && !lstLinespacing.Contains(layout.GetStartPageIndex(paragraph)) && Convert.ToString(ExistingStyle.ParagraphFormat.LineSpacing) != null && paragraph.ParagraphFormat.LineSpacing != Convert.ToDouble(ExistingStyle.ParagraphFormat.LineSpacing))
                                {
                                    lstLinespacing.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    LinespacingComment = LinespacingComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                    rObj.QC_Result = "Failed";
                                }
                                if (layout.GetStartPageIndex(paragraph) != 0 && !lstAlignment.Contains(layout.GetStartPageIndex(paragraph)) && Convert.ToString(ExistingStyle.ParagraphFormat.Alignment) != null && Convert.ToString(paragraph.ParagraphFormat.Alignment) != Convert.ToString(ExistingStyle.ParagraphFormat.Alignment))
                                {
                                    lstAlignment.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    AlignmentComment = AlignmentComment + layout.GetStartPageIndex(paragraph).ToString() + ", ";
                                    rObj.QC_Result = "Failed";
                                }
                            }
                            else
                            {
                                rObj.QC_Result = "Failed";
                                rObj.Comments = "Properties are not present for this style";
                            }
                        }
                    }
                    if (rObj.QC_Result == "Failed")
                    {
                        rObj.Comments = "As per given style sheet ";
                        if (lstFontnames.Count > 0)
                            rObj.Comments += FontnameComment;
                        if (lstFontbolds.Count > 0)
                            rObj.Comments += FontBoldComment;
                        if (lstFontsizes.Count > 0)
                            rObj.Comments += FontSizeComment;
                        if (lstSpacebefore.Count > 0)
                            rObj.Comments += SpacebeforeComment;
                        if (lstSpaceafter.Count > 0)
                            rObj.Comments += SpaceafterComment;
                        if (lstAlignment.Count > 0)
                            rObj.Comments += AlignmentComment;
                        if (lstLinespacing.Count > 0)
                            rObj.Comments += LinespacingComment;
                        if (lstShading.Count > 0)
                            rObj.Comments += ShadingComment;
                        rObj.Comments = rObj.Comments.TrimEnd().TrimEnd(',');
                        rObj.Comments += ".";


                        // added for page number report
                        List<PageNumberReport> pglst = new List<PageNumberReport>();
                        List<int> pgnumlstsrt = pgnumlst.Distinct().ToList();
                        pgnumlstsrt.Sort();
                        string comments = string.Empty;
                        bool fontname = false; bool fontbold = false; bool fontsize = false; bool spacebefore = false; bool spaceafter = false;
                        bool alignment = false; bool linespacing = false; bool shading = false;
                        string pgcomments = string.Empty;
                        for (int i = 0; i < pgnumlstsrt.Count; i++)
                        {
                            fontname = false; fontbold = false; fontsize = false; spacebefore = false; spaceafter = false;
                            alignment = false; linespacing = false; shading = false;
                            PageNumberReport pgObj = new PageNumberReport();
                            pgObj.PageNumber = Convert.ToInt32(pgnumlstsrt[i]);

                            if (lstFontnames.Contains(pgnumlstsrt[i]))
                                fontname = true;
                            if (lstFontbolds.Contains(pgnumlstsrt[i]))
                                fontbold = true;
                            if (lstFontsizes.Contains(pgnumlstsrt[i]))
                                fontsize = true;
                            if (lstSpacebefore.Contains(pgnumlstsrt[i]))
                                spacebefore = true;
                            if (lstSpaceafter.Contains(pgnumlstsrt[i]))
                                spaceafter = true;
                            if (lstAlignment.Contains(pgnumlstsrt[i]))
                                alignment = true;
                            if (lstLinespacing.Contains(pgnumlstsrt[i]))
                                linespacing = true;
                            if (lstShading.Contains(pgnumlstsrt[i]))
                                shading = true;

                            //for (int j = 0; j < lstFontnames.Count; j++)
                            //{
                            //    if (lstFontnames[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        fontname = true;
                            //    }
                            //}
                            //for (int j = 0; j < lstFontbolds.Count; j++)
                            //{
                            //    if (lstFontbolds[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        fontbold = true;
                            //    }
                            //}
                            //for (int j = 0; j < lstFontsizes.Count; j++)
                            //{
                            //    if (lstFontsizes[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        fontsize = true;
                            //    }
                            //}
                            //for (int j = 0; j < lstSpacebefore.Count; j++)
                            //{
                            //    if (lstSpacebefore[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        spacebefore = true;
                            //    }
                            //}
                            //for (int j = 0; j < lstSpaceafter.Count; j++)
                            //{
                            //    if (lstSpaceafter[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        spaceafter = true;
                            //    }
                            //}
                            //for (int j = 0; j < lstAlignment.Count; j++)
                            //{
                            //    if (lstAlignment[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        alignment = true;
                            //    }
                            //}
                            //for (int j = 0; j < lstLinespacing.Count; j++)
                            //{
                            //    if (lstLinespacing[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        linespacing = true;
                            //    }
                            //}
                            //for (int j = 0; j < lstShading.Count; j++)
                            //{
                            //    if (lstShading[j].Equals(pgnumlstsrt[i]))
                            //    {
                            //        shading = true;
                            //    }
                            //}
                            comments = "Expected style(s) not found - ";
                            if (fontname == true)
                                comments = comments + "Font name: " + ExistingStyle.Font.Name + ", ";
                            if (fontsize == true)
                                comments = comments + "Font size: " + ExistingStyle.Font.Size + ", ";
                            if (fontbold == true)
                                comments = comments + "Font bold: " + ExistingStyle.Font.Bold + ", ";
                            if (spacebefore == true)
                                comments = comments + "Space before: " + ExistingStyle.ParagraphFormat.SpaceBefore + ", ";
                            if (spaceafter == true)
                                comments = comments + "Space after: " + ExistingStyle.ParagraphFormat.SpaceAfter + ", ";
                            if (linespacing == true)
                                comments = comments + "Line spacing: " + ExistingStyle.ParagraphFormat.LineSpacing + ", ";
                            if (alignment == true)
                                comments = comments + "Alignment: " + ExistingStyle.ParagraphFormat.Alignment + ", ";
                            if (shading == true)
                                comments = comments + "Shading: " + ExistingStyle.ParagraphFormat.Shading + ", ";

                            comments = comments.TrimEnd(' ').TrimEnd(',');
                            pgObj.Comments = comments;
                            pglst.Add(pgObj);
                        }
                        rObj.CommentsPageNumLst = pglst;
                    }
                    else
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        //rObj.Comments = "No change in existing " + rObj.Check_Parameter + " styles";
                    }
                }
                else
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "\"" + rObj.Check_Parameter + "\" style not in DOcument or not in given style sheet";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Fix caption style
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Fixverifiedcaptionstylename(RegOpsQC rObj, Document doc)
        {
            bool Fixcaption = false;
            rObj.FIX_START_TIME = DateTime.Now;
            Style Captionstyles = null;
            //doc = new Document(rObj.DestFilePath);
            try
            {
                if (!rObj.Comments.Contains("style not in File or not in given style sheet"))
                {
                    //RegOpsQC Predictstyles = new WordParagraphActions().GetPredictstyles(rObj.Created_ID, rObj.Check_Parameter);
                    //doc = new Document(rObj.DestFilePath);
                    Captionstyles = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == rObj.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();   
                    if (Captionstyles == null)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "File does not contain " + rObj.Check_Parameter + " style.";
                    }
                    else
                    {
                        //Inner Table Code open
                        List<Node> childtbllst = new List<Node>();
                        NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                        foreach (Table tbl in lsttbles)
                        {
                            List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                            childtbllst.AddRange(existlst);
                        }
                        //Inner Table Code Close
                        List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == rObj.Check_Parameter.ToUpper() || ((Paragraph)x).ParagraphFormat.StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToUpper())) && (((Paragraph)x).Range.Text.Contains("SEQ Table") || ((Paragraph)x).Range.Text.Contains("SEQ Figure"))).ToList();
                        foreach (Paragraph paragraph in paragraphs)
                        {
                            bool InnerFigure = false;
                            if (paragraph.IsInCell)
                            {
                                Cell cell = (Cell)paragraph.ParentNode;
                                if ((cell.FirstParagraph.ParagraphFormat.StyleName.ToUpper() == rObj.Check_Parameter.ToUpper() || cell.FirstParagraph.ParagraphFormat.StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToUpper()) && (cell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || cell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar)) && cell.CellFormat.Shading.BackgroundPatternColor.Name.ToString() != Captionstyles.ParagraphFormat.Shading.BackgroundPatternColor.Name)
                                {
                                    Fixcaption = true;
                                    cell.CellFormat.Shading.BackgroundPatternColor = System.Drawing.Color.Empty;
                                }
                            }
                            if (paragraph.Range.Text.Contains("SEQ Figure") && paragraph.IsInCell)
                            {
                                InnerFigure = true;
                            }
                            List<Node> FontsBoldLst = new List<Node>();
                            List<Node> FontsSizeLst = new List<Node>();
                            List<Node> FontNamesLst = new List<Node>();
                            List<Node> FontsItalicLst = new List<Node>();
                            List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                            if (CheckInTblExist.Count == 0 && !InnerFigure)
                            {
                                if (Convert.ToString(Captionstyles.Font.Bold) != null && Convert.ToString(Captionstyles.Font.Bold) != "")
                                {
                                    FontsBoldLst = paragraph.GetChildNodes(NodeType.Run, false).Where(x => ((Run)x).Font.Bold != Convert.ToBoolean(Captionstyles.Font.Bold)).ToList();
                                    if (FontsBoldLst.Count > 0)
                                    {
                                        foreach (Run fnrun in paragraph.GetChildNodes(NodeType.Run, false).ToList())
                                        {
                                            if (fnrun.Font.Bold != Convert.ToBoolean(Captionstyles.Font.Bold))
                                            {
                                                Fixcaption = true;
                                                fnrun.Font.Bold = Convert.ToBoolean(Captionstyles.Font.Bold);
                                            }
                                        }
                                    }
                                }
                                if (Convert.ToString(Captionstyles.Font.Size) != null && Captionstyles.Font.Size.ToString() != "")
                                {
                                    FontsSizeLst = paragraph.GetChildNodes(NodeType.Run, false).Where(x => ((Run)x).Font.Size != Convert.ToDouble(Captionstyles.Font.Size)).ToList();
                                    if (FontsSizeLst.Count > 0)
                                    {
                                        foreach (Run fnrun in paragraph.GetChildNodes(NodeType.Run, false).ToList())
                                        {
                                            Fixcaption = true;
                                            fnrun.Font.Size = Convert.ToDouble(Captionstyles.Font.Size);
                                        }
                                    }
                                }
                                if (Captionstyles.Font.Name != null && Captionstyles.Font.Name != "")
                                {
                                    FontNamesLst = paragraph.GetChildNodes(NodeType.Run, false).Where(x => ((Run)x).Font.Name != Captionstyles.Font.Name).ToList();
                                    if (FontNamesLst.Count > 0)
                                    {
                                        FontNamesLst = FontNamesLst.Where(x => ((Run)x).Font.Name.ToUpper() != "SYMBOL").ToList();
                                    }
                                    if (FontNamesLst.Count > 0)
                                    {
                                        foreach (Run fnrun in paragraph.GetChildNodes(NodeType.Run, false).ToList())
                                        {
                                            if (fnrun.Font.Name.ToUpper() != "SYMBOL")
                                            {
                                                Fixcaption = true;
                                                fnrun.Font.Name = Captionstyles.Font.Name;
                                            }
                                        }
                                    }
                                }
                                if (Captionstyles.ParagraphFormat != null)
                                {
                                    if (Convert.ToString(Captionstyles.ParagraphFormat.Shading.BackgroundPatternColor) != "" && Captionstyles.ParagraphFormat.Shading.BackgroundPatternColor != null && Convert.ToString(paragraph.ParagraphFormat.Shading.BackgroundPatternColor.Name) != Convert.ToString(Captionstyles.ParagraphFormat.Shading.BackgroundPatternColor.Name))
                                    {
                                        Fixcaption = true;
                                        paragraph.ParagraphFormat.Shading.BackgroundPatternColor = System.Drawing.Color.Empty;
                                    }
                                    if (Convert.ToString(Captionstyles.ParagraphFormat.SpaceAfter) != "" && Convert.ToString(Captionstyles.ParagraphFormat.SpaceAfter) != null && Convert.ToDouble(paragraph.ParagraphFormat.SpaceAfter) != Convert.ToDouble(Captionstyles.ParagraphFormat.SpaceAfter))
                                    {
                                        Fixcaption = true;
                                        paragraph.ParagraphFormat.SpaceAfter = Convert.ToDouble(Captionstyles.ParagraphFormat.SpaceAfter);
                                    }
                                    if (Convert.ToString(Captionstyles.ParagraphFormat.SpaceBefore) != "" && Convert.ToString(Captionstyles.ParagraphFormat.SpaceAfter) != null && paragraph.ParagraphFormat.SpaceBefore != Convert.ToDouble(Captionstyles.ParagraphFormat.SpaceBefore))
                                    {
                                        Fixcaption = true;
                                        paragraph.ParagraphFormat.SpaceBefore = Convert.ToDouble(Captionstyles.ParagraphFormat.SpaceBefore);
                                    }
                                    if (Convert.ToString(Captionstyles.ParagraphFormat.LineSpacing) != "" && Convert.ToString(Captionstyles.ParagraphFormat.LineSpacing) != null && paragraph.ParagraphFormat.LineSpacing != Convert.ToDouble(Captionstyles.ParagraphFormat.LineSpacing))
                                    {
                                        Fixcaption = true;
                                        paragraph.ParagraphFormat.LineSpacing = Convert.ToDouble(Captionstyles.ParagraphFormat.LineSpacing);
                                    }
                                    if (Convert.ToString(Captionstyles.ParagraphFormat.Alignment) != "" && Convert.ToString(Captionstyles.ParagraphFormat.Alignment) != null && Convert.ToString(paragraph.ParagraphFormat.Alignment) != Convert.ToString(Captionstyles.ParagraphFormat.Alignment))
                                    {
                                        Fixcaption = true;
                                        if (Convert.ToString(Captionstyles.ParagraphFormat.Alignment) == "Left")
                                            paragraph.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                        else if (Convert.ToString(Captionstyles.ParagraphFormat.Alignment) == "Right")
                                            paragraph.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                        else
                                            paragraph.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                    }
                                }
                            }
                        }
                        if (rObj.Comments.Contains("No change in existing") && Fixcaption)
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Is_Fixed = 1;
                            rObj.Comments = "Caption styles are applied for paragraphs converted into caption style in 'Missing caption style' or 'Missing sequence number' check";
                            if (rObj.CommentsPageNumLst != null)
                            {
                                foreach (var pg in rObj.CommentsPageNumLst)
                                {
                                    pg.Comments = pg.Comments + "Caption styles are applied for paragraphs converted into caption style in 'Missing caption style' or 'Missing sequence number' check";
                                }
                            }
                        }
                        else if (rObj.Comments.Contains("No change in existing") && !Fixcaption)
                        {
                            rObj.QC_Result = "Passed";
                        }
                        else if (Fixcaption)
                        {
                            rObj.Is_Fixed = 1;
                            rObj.Comments += " Fixed. Along with them caption styles may be applied for paragraphs converted into caption style in 'Missing caption style' or 'Missing sequence number' check";
                            if (rObj.CommentsPageNumLst != null)
                            {
                                foreach (var pg in rObj.CommentsPageNumLst)
                                {
                                    pg.Comments = pg.Comments + " Fixed. Along with them caption styles may be applied for paragraphs converted into caption style in 'Missing caption style' or 'Missing sequence number' check";
                                }
                            }
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments += " These cannot be fixed";
                            //foreach (var pg in rObj.CommentsPageNumLst)
                            //{
                            //    pg.Comments += "These cannot be fixed";
                            //}
                        }
                    }
                }
                rObj.FIX_END_TIME = DateTime.Now;
                //doc.Save(rObj.DestFilePath);
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Check Cross Reference destination as null
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckCrossReferencenulldestination(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<string> lstStr = new List<string>();
                //Below Code for to get all bookmarks from the file
                foreach (Bookmark bk in doc.Range.Bookmarks)
                {
                    //if (bk.Text != "")
                    lstStr.Add(bk.Name);
                }
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph pr in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        foreach (Field field in pr.Range.Fields)
                        {
                            if (field.Type == FieldType.FieldRef)
                            {
                                string name = ((Aspose.Words.Fields.FieldRef)field).BookmarkName.ToString();
                                if (lstStr.Contains(name))
                                {
                                    List<Bookmark> lstbookmark = doc.Range.Bookmarks.Where(x => x.Name == name).ToList();
                                    foreach (Bookmark bookmark in lstbookmark)
                                    {//Below code for check destination point of the bookmark
                                        if (bookmark.Text.StartsWith("\r") || bookmark.Text.StartsWith(" \r") || bookmark.Text.StartsWith("\f") || bookmark.Text.Trim().StartsWith("\f"))
                                        {
                                            if (layout.GetStartPageIndex(field.Start) != 0)
                                                lstrp.Add(layout.GetStartPageIndex(field.Start));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (lst4.Count > 0)
                {
                    lst4.Sort();
                    pagenumber = string.Join(", ", lst4.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Cross references referring destination starting with paragraph return in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Cross references referring destination starting with paragraph return";
                    rObj.PageNumbersLst = lst4;
                }
                else
                {
                    if (rObj.QC_Result != "Failed")
                    {
                        rObj.QC_Result = "Passed";

                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///Verify table rows width
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckTablerowswidth(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            List<int> lstrp = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                doc.Save(rObj.DestFilePath);
                doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection tblLst = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in tblLst)
                {
                    double FirstRowWidth = 0, RowWidth = 0;
                    foreach (Row rw in tbl.Rows)
                    {
                        foreach (Cell cell in rw.Cells)
                        {
                            FirstRowWidth += cell.CellFormat.Width;
                        }
                        break;
                    }
                    for (int i = 1; i < tbl.Rows.Count; i++)
                    {
                        RowWidth = 0;
                        foreach (Cell cell in tbl.Rows[i].Cells)
                        {
                            RowWidth += cell.CellFormat.Width;
                        }
                        if (Math.Round(RowWidth, 2) != Math.Round(FirstRowWidth, 2))
                        {
                            lstrp.Add(layout.GetStartPageIndex(tbl));
                            break;
                        }
                    }
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (lst4.Count > 0)
                {
                    lst4.Sort();
                    string pagenumber = string.Join(", ", lst4.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table rows width not equal in: " + pagenumber;
                }
                if (tblLst.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "All table rows width are equal";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        ///repeat table heading rows.
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void CheckTableHeadingRowsRepeat(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            List<int> lst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection table = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tab in table)
                {
                    Row Rw1 = tab.FirstRow;
                    Row Rw2 = tab.LastRow;
                    if (layout.GetStartPageIndex(Rw1) != layout.GetStartPageIndex(Rw2))
                    {
                        if (tab.FirstRow.RowFormat.HeadingFormat == false)
                        {
                            if (layout.GetStartPageIndex(tab) != 0)
                                lst.Add(layout.GetStartPageIndex(tab.FirstRow));
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (table.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (lst2.Count > 0)
                {
                    lst2.Sort();
                    string pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Heading repeat row is not existed in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Heading repeat row does not exist";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All table Heading rows are repeated";
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        ///Fix repeat table heading rows.
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void FixTableHeadingRowsRepeat(RegOpsQC rObj, Document doc)
        {
            bool IsFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection table = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tab in table)
                {
                    Row Rw1 = tab.FirstRow;
                    Row Rw2 = tab.LastRow;
                    if (layout.GetStartPageIndex(Rw1) != layout.GetStartPageIndex(Rw2))
                    {
                        if (tab.FirstRow.RowFormat.HeadingFormat == false)
                        {
                            tab.FirstRow.RowFormat.HeadingFormat = true;
                            IsFixed = true;
                        }
                    }
                }
                if (IsFixed)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments += ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All table rows  are repeated.";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        /// <summary>
        /// Checking table in another table
        /// </summary>
        /// <param name="table"></param>
        /// <returns></returns>
        private static bool CheckInnerTable(Table table)
        {
            bool depth = false;
            Node parent = table.GetAncestor(table.NodeType);
            while (parent != null)
            {
                depth = true;
                parent = parent.GetAncestor(typeof(Table));
            }
            return depth;
        }
        /// <summary>
        /// code for checking child tables
        /// </summary>
        /// <param name="table"></param>
        /// <returns></returns>
        private static int GetChildTableCount(Table table)
        {
            int childTableCount = 0;
            foreach (Row row in table.Rows.OfType<Row>())
            {
                foreach (Cell Cell in row.Cells.OfType<Cell>())
                {
                    TableCollection childTables = Cell.Tables;

                    if (childTables.Count > 0)
                        childTableCount++;
                }
            }
            return childTableCount;
        }

        public void TextWrappingfortables(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            List<int> lstrp = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                // doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> TablesList = doc.GetChildNodes(NodeType.Table, true).ToList();
                foreach (Table tbl in TablesList)
                {
                    if (tbl.TextWrapping != TextWrapping.None && rObj.Check_Parameter == "None")
                    {
                        lstrp.Add(layout.GetStartPageIndex(tbl));
                    }
                    else if (tbl.TextWrapping != TextWrapping.Around && rObj.Check_Parameter == "Around")
                    {
                        lstrp.Add(layout.GetStartPageIndex(tbl));
                    }
                }
                List<int> lst4 = lstrp.Distinct().ToList();
                if (TablesList.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (lst4.Count > 0)
                {
                    lst4.Sort();
                    string pagenumber = string.Join(", ", lst4.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Text wrapping for tables is not in \"" + rObj.Check_Parameter + "\" in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Text wrapping for tables is not in \"" + rObj.Check_Parameter + "\"";
                    rObj.PageNumbersLst = lst4;
                }
                else
                {
                    if (rObj.QC_Result != "Failed")
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Tables are in " + rObj.Check_Parameter;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void Fixtextwrappingfortables(RegOpsQC rObj, Document doc)
        {
            bool TblFix = false;
            List<int> lstrp = new List<int>();
            List<int> lst4 = new List<int>();
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //  doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> TablesList = doc.GetChildNodes(NodeType.Table, true).ToList();
                foreach (Table tbl in TablesList)
                {
                    if (tbl.TextWrapping != TextWrapping.None && rObj.Check_Parameter == "None")
                    {
                        tbl.TextWrapping = TextWrapping.None;
                        lstrp.Add(layout.GetStartPageIndex(tbl));
                        TblFix = true;
                    }
                    else if (tbl.TextWrapping != TextWrapping.Around && rObj.Check_Parameter == "Around")
                    {
                        tbl.TextWrapping = TextWrapping.Around;
                        lstrp.Add(layout.GetStartPageIndex(tbl));
                        TblFix = true;
                    }
                }
                if (TablesList.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (lst4.Count > 0)
                {
                    lst4.Sort();
                    string pagenumber = string.Join(", ", lst4.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Text wrapping for tables is  in \"" + rObj.Check_Parameter + "\" in: " + pagenumber;
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    if (TblFix == true)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments += ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";

                    }
                }
                // doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void Removeblankrowsfootnote(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            List<int> lst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                // doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> TablesList = doc.GetChildNodes(NodeType.Table, true).ToList();

                foreach (Table tab in TablesList)
                {
                    Row Rw2 = tab.LastRow;
                    Paragraph pr = (Paragraph)tab.NextSibling;
                    if (!pr.IsInCell)
                    {
                        if (pr.GetText().Trim() == "")
                        {
                            //Remove blank lines after table
                            if ((pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph))
                            {
                                lst.Add(layout.GetStartPageIndex(pr));
                            }
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (TablesList.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no Blank rows in the document";
                }
                else if (lst2.Count > 0)
                {
                    lst2.Sort();
                    string pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Blank row is existed in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Blank row exist";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No Blank rows in the document";
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixRemoveblankrowsfootnote(RegOpsQC rObj, Document doc)
        {
            bool isFixed = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                //  doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> TablesList = doc.GetChildNodes(NodeType.Table, true).ToList();

                foreach (Table tab in TablesList)
                {
                    Row Rw2 = tab.LastRow;
                    Paragraph pr = (Paragraph)tab.NextSibling;
                    if (!pr.IsInCell)
                    {
                        if ((pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph && pr.NextSibling.ToString(SaveFormat.Text).Trim().Length == 0))
                        {
                            pr.Remove();
                            isFixed = true;
                        }
                    }
                }
                if (TablesList.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables.";
                }
                else
                {
                    if (isFixed)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments += ". Fixed.";
                        rObj.CommentsWOPageNum += ". Fixed.";
                    }
                }
                // doc.UpdateFields();
                //   doc.Save(rObj.DestFilePath);
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        /// <summary>
        /// TitlesaboveTablendFigure-check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void TitlesaboveTablendFigure(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lstrp = new List<int>();
                List<FieldSeq> TablendFigureSeqFieldStarts = doc.Range.Fields.Where(f => f.Type == FieldType.FieldSequence).Cast<FieldSeq>().Where(f => f.SequenceIdentifier == "Text_Table" || f.SequenceIdentifier == "Table" || f.SequenceIdentifier == "Text_Figure" || f.SequenceIdentifier == "Figure").ToList();
                foreach (FieldSeq TableSeqFieldStart in TablendFigureSeqFieldStarts)
                {
                    Paragraph pr = TableSeqFieldStart.Start.ParentParagraph;
                    if (pr.NextSibling != null)
                    {
                        if (pr.IsInCell || (pr.NextSibling.NodeType != NodeType.Table) || (pr.NextSibling.NodeType != NodeType.Shape))
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(pr) != 0)
                                lstrp.Add(layout.GetStartPageIndex(pr));
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "title are correct placed  in the document";
                }
                else
                {
                    List<int> lst2 = lstrp.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Tables or Figures titles are not correctly placed in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Tables or Figures titles are not in page numbers";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// Table column headings should be in title case check old method
        public void TableColumnHeadingsShouldBeInTitleCaseChecknotusingstyle(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool isFailed = false;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            try
            {
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in sct.Body.GetChildNodes(NodeType.Table, true))
                    {
                        if (table.Range.Text.ToUpper().Contains("SEQ TABLE") || table.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || table.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                        {
                            bool isFirstRowTitle = false;
                            foreach (Cell cell in table.Rows[0])
                            {
                                foreach (Paragraph para in cell.Paragraphs)
                                {
                                    if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                                    {
                                        isFirstRowTitle = true;
                                        break;
                                    }
                                }
                            }
                            if (!isFirstRowTitle)
                            {
                                foreach (Cell cell in table.Rows[0])
                                {
                                    foreach (Paragraph para in cell.Paragraphs)
                                    {
                                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                                        string newtext = textInfo.ToTitleCase(para.ToString(SaveFormat.Text).Trim().ToLower());
                                        if (originaltext != newtext)
                                        {
                                            if (layout.GetStartPageIndex(para) != 0)
                                                lst.Add(layout.GetStartPageIndex(para));
                                            isFailed = true;
                                        }
                                    }
                                }

                            }
                            else if (isFirstRowTitle)
                            {
                                foreach (Cell cell in table.Rows[1])
                                {
                                    foreach (Paragraph para in cell.Paragraphs)
                                    {
                                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                                        string newtext = textInfo.ToTitleCase(para.ToString(SaveFormat.Text).Trim().ToLower());
                                        if (originaltext != newtext)
                                        {
                                            if (layout.GetStartPageIndex(para) != 0)
                                                lst.Add(layout.GetStartPageIndex(para));
                                            isFailed = true;
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (isFailed)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table column headings are not in title case check in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table column headings are not in title case check";
                    rObj.PageNumbersLst = lst2;

                }

                else
                {

                    //rObj.Comments = "Table column headings are in title case check";
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Table Column Headings Should Be In Title Case Fix old method

        public void TableColumnHeadingsShouldBeInTitleCaseFixnotusingstyle(RegOpsQC rObj, Document doc)
        {
            bool Fixflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in sct.Body.GetChildNodes(NodeType.Table, true))
                    {
                        if (table.Range.Text.ToUpper().Contains("SEQ TABLE") || table.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || table.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                        {
                            bool isFirstRowTitle = false;
                            foreach (Cell cell in table.Rows[0])
                            {
                                foreach (Paragraph para in cell.Paragraphs)
                                {
                                    if (table.Range.Text.ToUpper().Contains("SEQ TABLE") || table.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || table.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                                    {
                                        isFirstRowTitle = true;
                                        break;
                                    }
                                }
                            }
                            if (!isFirstRowTitle)
                            {
                                foreach (Cell cell in table.Rows[0])
                                {
                                    foreach (Paragraph para in cell.Paragraphs)
                                    {
                                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                                        string newtext = textInfo.ToTitleCase(para.ToString(SaveFormat.Text).Trim().ToLower());
                                        if (originaltext != newtext)
                                        {
                                            para.Range.Replace(originaltext, newtext);
                                            Fixflag = true;
                                        }
                                    }
                                }

                            }
                            else if (isFirstRowTitle)
                            {
                                foreach (Cell cell in table.Rows[1])
                                {
                                    foreach (Paragraph para in cell.Paragraphs)
                                    {
                                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                                        string newtext = textInfo.ToTitleCase(para.ToString(SaveFormat.Text).Trim().ToLower());
                                        if (originaltext != newtext)
                                        {
                                            para.Range.Replace(originaltext, newtext);
                                            Fixflag = true;
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
                if (Fixflag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                //doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// Table column headings should be in title case check
        public void TableColumnHeadingsShouldBeInTitleCaseCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool isFailed = false;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            try
            {
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in sct.Body.GetChildNodes(NodeType.Table, true))
                    {
                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell cell in row)
                            {
                                foreach (Paragraph para in cell.Paragraphs)
                                {
                                    if (para.ParagraphFormat.StyleName.Contains("Table:Header"))
                                    {
                                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                                        string newtext = textInfo.ToTitleCase(para.ToString(SaveFormat.Text).Trim().ToLower());
                                        if (originaltext != newtext)
                                        {
                                            if (layout.GetStartPageIndex(para) != 0)
                                                lst.Add(layout.GetStartPageIndex(para));
                                            isFailed = true;
                                        }

                                    }

                                }
                            }
                        }                       
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (isFailed)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table column headings are not in title case check in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table column headings are not in title case check";
                    rObj.PageNumbersLst = lst2;

                }

                else
                {

                    //rObj.Comments = "Table column headings are in title case check";
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Table Column Headings Should Be In Title Case Fix

        public void TableColumnHeadingsShouldBeInTitleCaseFix(RegOpsQC rObj, Document doc)
        {
            bool Fixflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in sct.Body.GetChildNodes(NodeType.Table, true))
                    {
                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell cell in row)
                            {
                                foreach (Paragraph para in cell.Paragraphs)
                                {
                                    if (para.ParagraphFormat.StyleName.Contains("Table:Header"))
                                    {
                                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                                        string newtext = textInfo.ToTitleCase(para.ToString(SaveFormat.Text).Trim().ToLower());
                                        if (originaltext != newtext)
                                        {
                                            para.Range.Replace(originaltext, newtext);
                                            Fixflag = true;
                                        }

                                    }

                                }
                            }
                        }
                    }
                }
                if (Fixflag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// Figure title should be in title case
        public void FigureTitleShouldBeInTitleCaseCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool isFailed = false;
            string Pagenumber = string.Empty;
            string footnotePagenumber = string.Empty;
            try
            {
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> footnotelst = new List<int>();
                bool footnoteisFailed = false;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (para.Range.Text.ToUpper().Contains("SEQ FIGURE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE"))
                        {
                            int i = 0;
                            string TextafterFieldEnd = "";
                            NodeCollection footnote = para.GetChildNodes(NodeType.Footnote, true);
                            if (footnote.Count() > 0)
                            {
                                footnoteisFailed = true;
                                if (layout.GetStartPageIndex(para) != 0)
                                    footnotelst.Add(layout.GetStartPageIndex(para));
                            }
                            else
                            {
                                foreach (Node node in para.ChildNodes)
                                {
                                    if (node.NodeType == NodeType.FieldEnd && i == 0)
                                        i++;
                                    if (node.NodeType == NodeType.Run && i > 0)
                                        TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;

                                }
                                if (TextafterFieldEnd != "")
                                {
                                    string TitlecaseText = textInfo.ToTitleCase(TextafterFieldEnd.ToLower());
                                    if (TextafterFieldEnd != TitlecaseText)
                                    {
                                        if (layout.GetStartPageIndex(para) != 0)
                                            lst.Add(layout.GetStartPageIndex(para));
                                        isFailed = true;
                                    }
                                }
                            }
                            //string originaltext = para.GetText().ToString().TrimStart();
                            //if (originaltext.ToUpper().StartsWith("FIGURE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 6);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        if (layout.GetStartPageIndex(para) != 0)
                            //            lst.Add(layout.GetStartPageIndex(para));
                            //        isFailed = true;
                            //    }
                            //}
                            //else if (originaltext.ToUpper().StartsWith("SUMMARY FIGURE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 14);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        if (layout.GetStartPageIndex(para) != 0)
                            //            lst.Add(layout.GetStartPageIndex(para));
                            //        isFailed = true;
                            //    }
                            //}
                            //else if (originaltext.ToUpper().StartsWith("TEXT FIGURE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 11);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        if (layout.GetStartPageIndex(para) != 0)
                            //            lst.Add(layout.GetStartPageIndex(para));
                            //        isFailed = true;
                            //    }
                            //}
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                List<int> footnotelst2 = footnotelst.Distinct().ToList();
                if (rObj.Check_Type == 1 && footnoteisFailed)
                {
                    footnotelst2.Sort();
                    Pagenumber = string.Join(", ", footnotelst2.ToArray());
                    rObj.FootnoteExistedPageNumbers = Pagenumber;
                }
                if (isFailed)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.TableFailedPageNumber = Pagenumber;
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Figure titles are not in title case in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Figure titles are not in title case";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {

                    //rObj.Comments = "Figure titles are in title case.";
                    rObj.QC_Result = "Passed";
                }




                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Figure Title Should Be In Title Case Fix

        public void FigureTitleShouldBeInTitleCaseFix(RegOpsQC rObj, Document doc)
        {
            bool Fixflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            bool isfootnoteexist = false;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (para.Range.Text.ToUpper().Contains("SEQ FIGURE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE"))
                        {
                            int i = 0;
                            string TextafterFieldEnd = "";
                            foreach (Node node in para.ChildNodes)
                            {
                                NodeCollection footnote = para.GetChildNodes(NodeType.Footnote, true);
                                if (footnote.Count() == 0)
                                {
                                    if (node.NodeType == NodeType.FieldEnd && i == 0)
                                        i++;
                                    if (node.NodeType == NodeType.Run && i > 0)
                                        TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;
                                }
                                else
                                {
                                    isfootnoteexist = true;
                                }
                            }
                            if (TextafterFieldEnd != "")
                            {
                                string TitlecaseText = textInfo.ToTitleCase(TextafterFieldEnd.ToLower());
                                if (TextafterFieldEnd != TitlecaseText)
                                {
                                    para.Range.Replace(TextafterFieldEnd, TitlecaseText);
                                    Fixflag = true;
                                }

                            }
                            //string originaltext = para.GetText().ToString().TrimStart();
                            //if (originaltext.ToUpper().StartsWith("FIGURE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 6);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        para.Range.Replace(tabletext, tabletitletext);
                            //        Fixflag = true;
                            //    }
                            //}
                            //else if (originaltext.ToUpper().StartsWith("SUMMARY FIGURE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 14);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        para.Range.Replace(tabletext, tabletitletext);
                            //        Fixflag = true;
                            //    }
                            //}
                            //else if (originaltext.ToUpper().StartsWith("TEXT FIGURE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 11);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        para.Range.Replace(tabletext, tabletitletext);
                            //        Fixflag = true;
                            //    }
                            //}
                        }
                    }
                }
                if (Fixflag && !isfootnoteexist)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else if (Fixflag && rObj.TableFailedPageNumber != null && isfootnoteexist && rObj.FootnoteExistedPageNumbers != null)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = "Footnote present in figure titles in:" + rObj.FootnoteExistedPageNumbers + ".These cannot be fixed and figure titles are not in title case :" + rObj.TableFailedPageNumber + ". Fixed";
                }
                else if (!Fixflag && isfootnoteexist && rObj.FootnoteExistedPageNumbers != null)
                {
                    rObj.Comments = "Footnote present in figure titles in:" + rObj.FootnoteExistedPageNumbers + ".These cannot be fixed";
                }
                //doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// Table title should be in title case
        public void TableTitleShouldBeInTitleCaseCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool isFailed = false;
            string Pagenumber = string.Empty;
            string footnotePagenumber = string.Empty;
            try
            {
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> footnotelst = new List<int>();
                bool footnoteisFailed = false;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                        {
                            int i = 0;
                            string TextafterFieldEnd = "";
                            NodeCollection footnote = para.GetChildNodes(NodeType.Footnote, true);
                            if (footnote.Count() > 0)
                            {
                                footnoteisFailed = true;
                                if (layout.GetStartPageIndex(para) != 0)
                                    footnotelst.Add(layout.GetStartPageIndex(para));
                            }
                            else
                            {
                                foreach (Node node in para.ChildNodes)
                                {
                                    if (node.NodeType == NodeType.FieldEnd && i == 0)
                                        i++;
                                    if (node.NodeType == NodeType.Run && i > 0)
                                        TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;

                                }
                                if (TextafterFieldEnd != "")
                                {
                                    string TitlecaseText = textInfo.ToTitleCase(TextafterFieldEnd.ToLower());
                                    if (TextafterFieldEnd != TitlecaseText)
                                    {
                                        if (layout.GetStartPageIndex(para) != 0)
                                            lst.Add(layout.GetStartPageIndex(para));
                                        isFailed = true;
                                    }
                                }
                            }

                            //string originaltext = para.GetText().ToString().TrimStart();
                            //if (originaltext.ToUpper().StartsWith("TABLE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 5);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        if (layout.GetStartPageIndex(para) != 0)
                            //            lst.Add(layout.GetStartPageIndex(para));
                            //        isFailed = true;
                            //    }
                            //}
                            //else if (originaltext.ToUpper().StartsWith("SUMMARY TABLE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 13);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        if (layout.GetStartPageIndex(para) != 0)
                            //            lst.Add(layout.GetStartPageIndex(para));
                            //        isFailed = true;
                            //    }
                            //}
                            //else if (originaltext.ToUpper().StartsWith("TEXT TABLE"))
                            //{
                            //    string tabletext = originaltext.Substring(0, 10);
                            //    string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //    if (tabletext != tabletitletext)
                            //    {
                            //        if (layout.GetStartPageIndex(para) != 0)
                            //            lst.Add(layout.GetStartPageIndex(para));
                            //        isFailed = true;
                            //    }
                            //}
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                List<int> footnotelst2 = footnotelst.Distinct().ToList();
                if (rObj.Check_Type == 1 && footnoteisFailed)
                {
                    footnotelst2.Sort();
                    Pagenumber = string.Join(", ", footnotelst2.ToArray());
                    rObj.FootnoteExistedPageNumbers = Pagenumber;
                }
                if (isFailed)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.TableFailedPageNumber = Pagenumber;
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table titles are not in title case in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table titles are not in title case";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    //rObj.Comments = "Table titles are in title case.";
                    rObj.QC_Result = "Passed";
                }

                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Table Title Should Be In Title Case Fix

        public void TableTitleShouldBeInTitleCaseFix(RegOpsQC rObj, Document doc)
        {
            bool Fixflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            bool isfootnoteexist = false;
            try
            {
                // doc = new Document(rObj.DestFilePath);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                        {
                            int i = 0;
                            string TextafterFieldEnd = "";
                            foreach (Node node in para.ChildNodes)
                            {
                                NodeCollection footnote = para.GetChildNodes(NodeType.Footnote, true);
                                if (footnote.Count() == 0)
                                {
                                    if (node.NodeType == NodeType.FieldEnd && i == 0)
                                        i++;
                                    if (node.NodeType == NodeType.Run && i > 0)
                                        TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;
                                }
                                else
                                {
                                    isfootnoteexist = true;
                                }
                            }
                            if (TextafterFieldEnd != "")
                            {
                                string TitlecaseText = textInfo.ToTitleCase(TextafterFieldEnd.ToLower());
                                if (TextafterFieldEnd != TitlecaseText)
                                {
                                    para.Range.Replace(TextafterFieldEnd, TitlecaseText);
                                    Fixflag = true;
                                }

                            }
                            // string originaltext = para.GetText().ToString().TrimStart();
                            // if (originaltext.ToUpper().StartsWith("TABLE"))
                            // {
                            //     string tabletext = originaltext.Substring(0, 5);
                            //     string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //     if (tabletext != tabletitletext)
                            //     {
                            //         para.Range.Replace(tabletext, tabletitletext);
                            //         Fixflag = true;
                            //     }
                            // }
                            //else  if (originaltext.ToUpper().StartsWith("SUMMARY TABLE"))
                            // {
                            //     string tabletext = originaltext.Substring(0, 13);
                            //     string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //     if (tabletext != tabletitletext)
                            //     {
                            //         para.Range.Replace(tabletext, tabletitletext);
                            //         Fixflag = true;
                            //     }
                            // }
                            // else if (originaltext.ToUpper().StartsWith("TEXT TABLE"))
                            // {
                            //     string tabletext = originaltext.Substring(0, 10);
                            //     string tabletitletext = textInfo.ToTitleCase(tabletext.ToLower());
                            //     if (tabletext != tabletitletext)
                            //     {
                            //         para.Range.Replace(tabletext, tabletitletext);
                            //         Fixflag = true;
                            //     }
                            // }
                        }
                    }
                }
                if (Fixflag && !isfootnoteexist)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else if (Fixflag && rObj.TableFailedPageNumber != null && isfootnoteexist && rObj.FootnoteExistedPageNumbers != null)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = "Footnote present in table titles in: " + rObj.FootnoteExistedPageNumbers + ".These cannot be fixed and Tables titles are not in title case :" + rObj.TableFailedPageNumber + ". Fixed";
                }
                else if (!Fixflag && isfootnoteexist && rObj.FootnoteExistedPageNumbers != null)
                {
                    rObj.Comments = "Footnote present in table titles in: " + rObj.FootnoteExistedPageNumbers + ".These cannot be fixed";
                }
                //doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //No Footnotes should be in the table title
        public void Nofootnotesintabletitle(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Text_Table") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph pr = fld.ParentParagraph;
                    foreach (Footnote footnote in pr.GetChildNodes(NodeType.Footnote, true))
                    {
                        if ((footnote.Count > 0))

                        {

                            flag = true;
                            if (layout.GetStartPageIndex(footnote) != 0)
                                lst.Add(layout.GetStartPageIndex(footnote));

                        }
                    }
                    //NodeCollection footnotes = pr.GetChildNodes(NodeType.Footnote, true);
                    //if (footnotes.Count > 0)
                    //{
                    //    flag = true;
                    //    if (layout.GetStartPageIndex(footnotes[0]) != 0)
                    //        lstrp.Add(layout.GetStartPageIndex(footnotes[0]));
                    //}
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No footnotes in title";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Footnotes are in page numbers: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Footnotes are present ";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //Fix-No Footnotes should be in the Table title
        public void FixNofootnotesintabletitle(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;

            string res = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph pr = fld.ParentParagraph;
                    Node[] footnotes = pr.GetChildNodes(NodeType.Footnote, true).ToArray();

                    foreach (Node footnote in footnotes)
                    {
                        footnote.Remove();
                        flag = true;
                    }
                }

                if (flag == true)
                {
                    //rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";

                }
                else
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". This may be fixed to \"" + rObj.Check_Parameter + "\" due to other checks";

                }


                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //No Footnotes should be in the Figure title
        public void Nofootnotesinfiguretitle(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Text_Figure") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph pr = fld.ParentParagraph;
                    foreach (Footnote footnote in pr.GetChildNodes(NodeType.Footnote, true))
                    {
                        if ((footnote.Count > 0))

                        {
                            flag = true;
                            if (layout.GetStartPageIndex(footnote) != 0)
                                lst.Add(layout.GetStartPageIndex(footnote));

                        }
                    }
                    //NodeCollection footnotes = pr.GetChildNodes(NodeType.Footnote, true);
                    //if (footnotes.Count > 0)
                    //{
                    //    flag = true;
                    //    if (layout.GetStartPageIndex(footnotes[0]) != 0)
                    //        lstrp.Add(layout.GetStartPageIndex(footnotes[0]));
                    //}
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No footnotes in title";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Footnotes are in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Footnotes are present ";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //Fix-No Footnotes should be in the Figure title
        public void FixNofootnotesinfiguretitle(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;

            string res = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph pr = fld.ParentParagraph;
                    NodeCollection footnotes = pr.GetChildNodes(NodeType.Footnote, true);
                    if (footnotes.Count > 0)
                    {
                        foreach (Node node in footnotes)
                        {
                            flag = true;
                            node.Remove();
                        }
                    }
                }
                if (flag == true)
                {
                    //rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                }
                else
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". This may be fixed to \"" + rObj.Check_Parameter + "\" due to other checks";
                }


                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void Consistentuseoffootnote(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            List<int> lstCK = new List<int>();
            List<int> lst = new List<int>();
            try
            {
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                foreach (Table tbl in tablesList)
                {
                    doc.UpdateListLabels();

                    //Row lastRow = doc.FirstSection.Body.Tables[2].LastRow;
                    Row rw = tbl.LastRow;
                    foreach (Cell cell in rw.Cells)
                    {
                        foreach (Paragraph para in cell.Paragraphs)
                        {
                            if (para.IsListItem)
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(para) != 0)
                                    lst.Add(layout.GetStartPageIndex(para));

                            }
                        }
                    }
                }
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).IsInCell && ((Paragraph)x).PreviousSibling != null && ((Paragraph)x).PreviousSibling.NodeType == NodeType.Table).ToList();
                foreach (Paragraph prlst in paragraphs)
                {
                    Paragraph pr = prlst;
                    if (pr.IsListItem)
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));

                    }

                }

                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no bullets.";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "No bullets List are present";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Bullets Lists are in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "bullets Listn are present";
                            rObj.PageNumbersLst = lst;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "bullets are in numeric format";
                        }
                    }
                }





                rObj.CHECK_END_TIME = DateTime.Now;
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///Table alignment check.
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void CheckTableAlignment(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection table = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tab in table)
                {
                    if (rObj.Check_Parameter == "Left" && tab.Alignment != TableAlignment.Left)
                    {
                        if (layout.GetStartPageIndex(tab) != 0)
                            lst.Add(layout.GetStartPageIndex(tab.LastRow));
                    }
                    if (rObj.Check_Parameter == "Right" && tab.Alignment != TableAlignment.Right)
                    {
                        if (layout.GetStartPageIndex(tab) != 0)
                            lst.Add(layout.GetStartPageIndex(tab.LastRow));
                    }
                    if (rObj.Check_Parameter == "Center" && tab.Alignment != TableAlignment.Center)
                    {
                        if (layout.GetStartPageIndex(tab) != 0)
                            lst.Add(layout.GetStartPageIndex(tab.LastRow));
                    }

                }
                List<int> lst2 = lst.Distinct().ToList();
                if (table.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (lst2.Count > 0)
                {
                    lst2.Sort();
                    pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";

                    rObj.Comments = "Tables are not aligned to \"" + rObj.Check_Parameter + "\" in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Tables are not aligned to \"" + rObj.Check_Parameter + "\"";

                    //rObj.Comments = "Tables are not aligned to " + rObj.Check_Parameter + "in ." + pagenumber ;
                    //rObj.CommentsWOPageNum = "Tables are not aligned to  " + rObj.Check_Parameter + "in ";

                    //rObj.Comments = "Tables are not aligned to " + rObj.Check_Parameter + "in page numbers :" + pagenumber ;
                    //rObj.CommentsWOPageNum = "Tables are not aligned to  " + rObj.Check_Parameter + "in ";

                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All tables are aligned";
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        ///Fix table alignment.
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void FixTableAlignment(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            bool IsFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection table = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tab in table)
                {
                    if (rObj.Check_Parameter == "Center")
                    {
                        tab.Alignment = TableAlignment.Center;
                        IsFixed = true;
                    }
                    else if (rObj.Check_Parameter == "Left")
                    {
                        tab.Alignment = TableAlignment.Left;
                        IsFixed = true;
                    }
                    else if (rObj.Check_Parameter == "Right")
                    {
                        tab.Alignment = TableAlignment.Right;
                        IsFixed = true;
                    }
                }
                if (IsFixed)
                {
                    rObj.Is_Fixed = 1;
                    //rObj.QC_Result = "Fixed";
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All tables are aligned.";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///No small capital letters in section headings or table, figure, or appendix titles check.
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void CheckNoSmallCaps(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (para.Range.Text.ToUpper().Contains("SEQ APPENDIX") || para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || para.Range.Text.ToUpper().Contains("SEQ FIGURE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE") || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading2 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading3 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading4 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading5)
                        {
                            foreach (Run rn in para.Runs)
                            {
                                if (rn.Font.SmallCaps == true)
                                {
                                    if (layout.GetStartPageIndex(para) != 0)
                                        lst.Add(layout.GetStartPageIndex(para));
                                }
                            }

                        }

                    }

                }
                List<int> lst2 = lst.Distinct().ToList();
                if (lst2.Count > 0)
                {
                    lst2.Sort();
                    pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Small capital letters are found in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Small capital letters are found";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No small capital letters in section headings or table, figure, or appendix titles.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        ///Fix No small capital letters in section headings or table, figure, or appendix titles check.
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void FixNoSmallCaps(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            bool IsFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (para.Range.Text.ToUpper().Contains("SEQ APPENDIX") || para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || para.Range.Text.ToUpper().Contains("SEQ FIGURE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE") || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading2 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading3 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading4 || para.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading5)
                        {
                            foreach (Run rn in para.Runs)
                            {
                                if (rn.Font.SmallCaps == true)
                                {
                                    rn.Font.SmallCaps = false;
                                    IsFixed = true;
                                }
                            }

                        }

                    }

                }
                if (IsFixed)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No small capital letters in section headings or table, figure, or appendix titles.";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        //Code for Figure Aligment Check   
        public void CheckFigureAligment(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            bool flag = false;
            bool TableFlag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;

            try
            {
                NodeCollection Shapes = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Shape shape in Shapes)
                {
                    if (shape.ParentParagraph != null && shape.ParentParagraph.ParagraphFormat.Alignment.ToString() != rObj.Check_Parameter)
                    {
                        if (layout.GetStartPageIndex(shape) != 0)
                            lst.Add(layout.GetStartPageIndex(shape));
                    }
                }

                List<int> lst2 = lst.Distinct().ToList();
                if (Shapes.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no figures in the document";
                }
                else if (lst2.Count > 0)
                {
                    lst2.Sort();
                    pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Figures are not aligned to \"" + rObj.Check_Parameter + "\" in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Figures are not aligned to \"" + rObj.Check_Parameter + "\"";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All Figures are aligned.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //Code for Figure Aligment Fix   
        public void FixFigureAligment(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {

            string pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            bool IsFixed = false;
            try
            {
                //doc = new Document(rObj.DestFilePath);

                NodeCollection Shapes = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Shape shape in Shapes)
                {
                    if (shape.HorizontalAlignment.ToString() != rObj.Check_Parameter)
                    {

                        if (rObj.Check_Parameter == "Left")
                        {
                            shape.ParentParagraph.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                            IsFixed = true;

                        }
                        else if (rObj.Check_Parameter == "Right")
                        {
                            shape.ParentParagraph.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                            IsFixed = true;

                        }
                        else if (rObj.Check_Parameter == "Center")
                        {
                            if (shape.ParentParagraph != null)
                            {
                                shape.ParentParagraph.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                IsFixed = true;
                            }


                        }

                    }
                }
                if (IsFixed == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All Figures are in given alignment";
                }
                rObj.FIX_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // Figure numbers and titles alignment 
        public void FigurenumbersandTitleAlignment(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Text_Figure") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Summary_Figure")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph para = fld.ParentParagraph;
                    if (rObj.Check_Parameter == "Left")
                    {
                        if (para.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                        }
                    }
                    else if (rObj.Check_Parameter == "Right")
                    {
                        if (para.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                        }
                    }
                    else if (rObj.Check_Parameter == "Center")
                    {
                        if (para.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                        }
                    }
                    else if (rObj.Check_Parameter == "Justify")
                    {
                        if (para.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                        }
                    }
                }
                if (SeqStartLst.Count > 0)
                {
                    if (flag == true)
                    {
                        if (lst.Count > 0)
                        {
                            List<int> lst1 = lst.Distinct().ToList();
                            lst1.Sort();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Figure title is not in \"" + rObj.Check_Parameter + "\" Alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Figure title is not in \"" + rObj.Check_Parameter + "\" Alignment ";
                            rObj.PageNumbersLst = lst1;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Figure title is not in \"" + rObj.Check_Parameter + "\" Alignment ";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Figures title is in " + rObj.Check_Parameter + " Alignment.";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No Figure titles in document ";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        //Fix Figure numbers and titles alignment
        public void FixFigurenumbersandTitleAlignment(RegOpsQC rObj, Document doc)
        {

            //rObj.QC_Result = string.Empty;
            string res = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            string Pagenumber = string.Empty;
            bool FixFlag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                List<int> lstrp = new List<int>();

                List<Node> SeqStartLst = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Text_Figure") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Summary_Figure")).ToList();
                foreach (FieldStart fld in SeqStartLst)
                {
                    Paragraph para = fld.ParentParagraph;
                    if (rObj.Check_Parameter == "Left")
                    {
                        FixFlag = true;
                        para.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                    }
                    else if (rObj.Check_Parameter == "Right")
                    {
                        FixFlag = true;
                        para.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                    }
                    else if (rObj.Check_Parameter == "Center")
                    {
                        FixFlag = true;
                        para.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                    }
                    else if (rObj.Check_Parameter == "Justify")
                    {
                        FixFlag = true;
                        para.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                    }
                }
                if (FixFlag == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = "Figures title is fixed to \"" + rObj.Check_Parameter + "\" Alignment";
                }
                // doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //Table numbers and titles alignment
        public void TablenumbersandTitleAlignment(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            bool TableFlag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            string HoriAlignChkNme = string.Empty;
            string VertAlignChkNme = string.Empty;
            string HoriAlignChkPara = string.Empty;
            string VertiAlignChkPara = String.Empty;
            Int64 HoriAlignChkType = 0;
            Int64 VertiAlignChkType = 0;
            ChLst = ChLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
            foreach (RegOpsQC chlst in ChLst)
            {
                chlst.Parent_Checklist_ID = rObj.CheckList_ID;
                chlst.JID = rObj.JID;
                chlst.Job_ID = rObj.Job_ID;
                chlst.Folder_Name = rObj.Folder_Name;
                chlst.File_Name = rObj.File_Name;
                chlst.Created_ID = rObj.Created_ID;
                if (chlst.Check_Name == "Horizontal Alignment")
                {
                    HoriAlignChkNme = chlst.Check_Name;
                    HoriAlignChkPara = chlst.Check_Parameter;
                    HoriAlignChkType = chlst.Check_Type;
                }
                else if (chlst.Check_Name == "Vertical Alignment")
                {
                    VertAlignChkNme = chlst.Check_Name;
                    VertiAlignChkPara = chlst.Check_Parameter;
                    VertiAlignChkType = chlst.Check_Type;
                }
            }
            try
            {
                if (HoriAlignChkPara != "" || VertiAlignChkPara != null)
                {
                    CellVerticalAlignment VAlign = CellVerticalAlignment.Center;
                    ParagraphAlignment HAlign = ParagraphAlignment.Center;
                    switch (HoriAlignChkPara)
                    {
                        case "Left":
                            HAlign = ParagraphAlignment.Left;
                            break;
                        case "Center":
                            HAlign = ParagraphAlignment.Center;
                            break;
                        case "Right":
                            HAlign = ParagraphAlignment.Right;
                            break;
                    }
                    switch (VertiAlignChkPara)
                    {
                        case "Top":
                            VAlign = CellVerticalAlignment.Top;
                            break;
                        case "Center":
                            VAlign = CellVerticalAlignment.Center;
                            break;
                        case "Bottom":
                            VAlign = CellVerticalAlignment.Bottom;
                            break;
                    }

                    foreach (Table tbl in doc.GetChildNodes(NodeType.Table, true))
                    {
                        TableFlag = true;
                        tbl.StyleOptions = TableStyleOptions.FirstColumn | TableStyleOptions.RowBands | TableStyleOptions.FirstRow;
                        if (HoriAlignChkPara != "" && VertiAlignChkPara != "")
                        {
                            foreach (Row row in tbl.Rows)
                            {
                                ///List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                //List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table")).ToList();
                                List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();

                                if (Captionstyle.Count != 0)
                                {
                                    foreach (Cell cell in row.Cells)
                                    {
                                        foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                        {
                                            if (cell.CellFormat.VerticalAlignment != VAlign)
                                            {
                                                flag = true;
                                                if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                else if (layout.GetStartPageIndex(pr) != 0)
                                                    lst.Add(layout.GetStartPageIndex(pr));
                                            }
                                            if (pr.ParagraphFormat.Alignment != HAlign)
                                            {
                                                flag = true;
                                                if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                    lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                else if (layout.GetStartPageIndex(pr) != 0)
                                                    lst.Add(layout.GetStartPageIndex(pr));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (HoriAlignChkPara != "" || VertiAlignChkPara != "")
                        {
                            if (HoriAlignChkPara != "")
                            {
                                foreach (Row row in tbl.Rows)
                                {
                                    ///List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                    List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    if (Captionstyle.Count != 0)
                                    {

                                        foreach (Cell cell in row.Cells)
                                        {
                                            foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                            {
                                                if (pr.ParagraphFormat.Alignment != HAlign)
                                                {
                                                    flag = true;
                                                    if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                    else if (layout.GetStartPageIndex(pr) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (VertiAlignChkPara != "")
                            {
                                foreach (Row row in tbl.Rows)
                                {
                                    ///List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                    List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    if (Captionstyle.Count != 0)
                                    {

                                        foreach (Cell cell in row.Cells)
                                        {
                                            foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                            {
                                                if (cell.CellFormat.VerticalAlignment != VAlign)
                                                {
                                                    flag = true;
                                                    if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                    else if (layout.GetStartPageIndex(pr) != 0)
                                                        lst.Add(layout.GetStartPageIndex(pr));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }


                    List<Node> Captionstyle1 = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    foreach (FieldStart fld in Captionstyle1)
                    {
                        Paragraph para = fld.ParentParagraph;
                        if (!para.IsInCell)
                        {
                            if (HoriAlignChkPara != "")
                            {
                                if (para.ParagraphFormat.Alignment != HAlign)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(para) != 0)
                                        lst.Add(layout.GetStartPageIndex(para));
                                }
                            }
                        }
                    }
                }
                if (TableFlag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no Tables";
                }
                else if (flag == true)
                {
                    if (lst.Count > 0)
                    {
                        if (VertiAlignChkPara != "" && HoriAlignChkPara != "")
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables Title is not in " + VertiAlignChkPara + " " + HoriAlignChkPara + " alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables  Title  is not in " + VertiAlignChkPara + " " + HoriAlignChkPara + " alignment";
                            rObj.PageNumbersLst = lst1;
                        }
                        else if (VertiAlignChkPara != "")
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables  Title  is not in " + VertiAlignChkPara + " alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables  Title  is not in " + VertiAlignChkPara + " alignment";
                            rObj.PageNumbersLst = lst1;
                        }
                        else if (HoriAlignChkPara != "")
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables  Title  is not in " + HoriAlignChkPara + " alignment in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Tables  Title  is not in " + HoriAlignChkPara + " alignment";
                            rObj.PageNumbersLst = lst1;
                        }
                        else
                        {
                            List<Int32> lst1 = lst.Distinct().ToList();
                            Pagenumber = string.Join(", ", lst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Tables  Title  is not in given alignment in: " + Pagenumber;
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Tables Title is not in given alignment";
                    }
                }
                else
                {
                    NodeCollection table = doc.GetChildNodes(NodeType.Table, true);
                    if (table.Count > 0)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Tables Title is aligned to given alignment";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "No tables present in the document";
                    }
                }
                if (HoriAlignChkType == 1 || VertiAlignChkType == 1)
                {
                    rObj.Check_Type = 1;
                }
                else
                {
                    rObj.Check_Type = 0;
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        //Table numbers and titles alignment
        public void FIxTablenumbersandTitleAlignment(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            bool Fixflag = false;
            bool TableFlag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            string HoriAlignChkNme = string.Empty;
            string VertAlignChkNme = string.Empty;
            string HoriAlignChkPara = string.Empty;
            string VertiAlignChkPara = String.Empty;
            Int64 HoriCheck_Type = 0;
            Int64 VertiCheck_Type = 0;
            ChLst = ChLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
            foreach (RegOpsQC chlst in ChLst)
            {
                chlst.Parent_Checklist_ID = rObj.CheckList_ID;
                chlst.JID = rObj.JID;
                chlst.Job_ID = rObj.Job_ID;
                chlst.Folder_Name = rObj.Folder_Name;
                chlst.File_Name = rObj.File_Name;
                chlst.Created_ID = rObj.Created_ID;
                if (chlst.Check_Name == "Horizontal Alignment")
                {
                    HoriAlignChkNme = chlst.Check_Name;
                    HoriAlignChkPara = chlst.Check_Parameter;
                    HoriCheck_Type = chlst.Check_Type;
                }
                else if (chlst.Check_Name == "Vertical Alignment")
                {
                    VertAlignChkNme = chlst.Check_Name;
                    VertiAlignChkPara = chlst.Check_Parameter;
                    VertiCheck_Type = chlst.Check_Type;
                }
            }
            try
            {
                //doc = new Document(rObj.DestFilePath);
                if (HoriAlignChkPara != "" || VertiAlignChkPara != null)
                {
                    CellVerticalAlignment VAlign = CellVerticalAlignment.Center;
                    ParagraphAlignment HAlign = ParagraphAlignment.Center;
                    switch (HoriAlignChkPara)
                    {
                        case "Left":
                            HAlign = ParagraphAlignment.Left;
                            break;
                        case "Center":
                            HAlign = ParagraphAlignment.Center;
                            break;
                        case "Right":
                            HAlign = ParagraphAlignment.Right;
                            break;
                    }
                    switch (VertiAlignChkPara)
                    {
                        case "Top":
                            VAlign = CellVerticalAlignment.Top;
                            break;
                        case "Center":
                            VAlign = CellVerticalAlignment.Center;
                            break;
                        case "Bottom":
                            VAlign = CellVerticalAlignment.Bottom;
                            break;
                    }
                    foreach (Table tbl in doc.GetChildNodes(NodeType.Table, true))
                    {

                        TableFlag = true;
                        tbl.StyleOptions = TableStyleOptions.FirstColumn | TableStyleOptions.RowBands | TableStyleOptions.FirstRow;
                        if (HoriAlignChkPara != "" && VertiAlignChkPara != "" && HoriCheck_Type == 1 && VertiCheck_Type == 1)
                        {
                            foreach (Row row in tbl.Rows)
                            {
                                ///List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                //List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table")).ToList();
                                List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();

                                if (Captionstyle.Count != 0)
                                {
                                    foreach (Cell cell in row.Cells)
                                    {
                                        foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                        {
                                            if (cell.CellFormat.VerticalAlignment != VAlign)
                                            {
                                                Fixflag = true;
                                                cell.CellFormat.VerticalAlignment = VAlign;
                                            }
                                            if (pr.ParagraphFormat.Alignment != HAlign)
                                            {
                                                Fixflag = true;
                                                pr.ParagraphFormat.Alignment = HAlign;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (HoriAlignChkPara != "" || VertiAlignChkPara != "")
                        {
                            if (VertiAlignChkPara != "" && VertiCheck_Type == 1)
                            {
                                foreach (Row row in tbl.Rows)
                                {
                                    ///List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                    List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    if (Captionstyle.Count != 0)
                                    {
                                        foreach (Cell cell in row.Cells)
                                        {
                                            foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                            {
                                                if (cell.CellFormat.VerticalAlignment != VAlign)
                                                {
                                                    Fixflag = true;
                                                    cell.CellFormat.VerticalAlignment = VAlign;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (HoriAlignChkPara != "" && HoriCheck_Type == 1)
                            {
                                foreach (Row row in tbl.Rows)
                                {
                                    ///List<Node> Captionstyle = row.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption).ToList();
                                    List<Node> Captionstyle = row.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    if (Captionstyle.Count != 0)
                                    {

                                        foreach (Cell cell in row.Cells)
                                        {
                                            foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                            {
                                                if (pr.ParagraphFormat.Alignment != HAlign)
                                                {
                                                    Fixflag = true;
                                                    pr.ParagraphFormat.Alignment = HAlign;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    List<Node> Captionstyle1 = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    foreach (FieldStart fld in Captionstyle1)
                    {
                        Paragraph para = fld.ParentParagraph;
                        if (!para.IsInCell)
                        {
                            if (HoriAlignChkPara != "")
                            {
                                if (para.ParagraphFormat.Alignment != HAlign)
                                {
                                    Fixflag = true;
                                    para.ParagraphFormat.Alignment = HAlign;
                                }
                            }
                        }
                    }
                }
                if (TableFlag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no Tables";
                }
                else if (Fixflag == true)
                {
                    if (rObj.Comments != "")
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                    else
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "Tables Title is aligned to given alignment";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Tables Title is in given alignment";
                }
                rObj.FIX_END_TIME = DateTime.Now;
                // doc.Save(rObj.DestFilePath);
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        ///No Hard Return check

        public void NoHardreturn(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            List<int> lst = new List<int>();
            List<int> lstCK = new List<int>();
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);

                List<Node> TablendFigureSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                foreach (FieldStart TableSeqFieldStart in TablendFigureSeqFieldStarts)
                {

                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    if (pr.Range.Text.Contains("\r"))
                    {
                        Paragraph nextpara = pr.NextSibling as Paragraph;
                        if (nextpara != null && !nextpara.HasChildNodes)
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(pr) != 0)
                                lst.Add(layout.GetStartPageIndex(pr));
                        }
                    }
                }

                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables";
                }
                else
                {
                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "No Hard Retuns in Tables";
                    }
                    else
                    {
                        if (lst.Count > 0)
                        {
                            lstCK = lst.Distinct().ToList();
                            lstCK.Sort();
                            Pagenumber = string.Join(", ", lstCK.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Hard Returns in tables in: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Hard Returns in Tables ";
                            rObj.PageNumbersLst = lstCK;
                        }

                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }



        ///Hard return-Fix
        ///
        public void FixNoHardreturn(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                List<int> lst = new List<int>();
                //doc = new Document(rObj.DestFilePath);
                FindReplaceOptions opt = new FindReplaceOptions();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);

                List<Node> TablendFigureSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") && ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                foreach (FieldStart TableSeqFieldStart in TablendFigureSeqFieldStarts)
                {
                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    if (pr.Range.Text.Contains("\r"))
                    {

                        Paragraph nextpara = pr.NextSibling as Paragraph;
                        if (nextpara != null && !nextpara.HasChildNodes)
                        {
                            FixFlag = true;
                            nextpara.Remove();
                        }

                    }
                }

                if (FixFlag == true)
                {
                    // rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";

                }
                doc.AcceptAllRevisions();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Repeat table title and header row check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void RepeatTableTitleAndHeaderRow(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool tableflag = false;
            bool flag = false;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            bool notitle = false;
            bool flgcoomments = false;
            try
            {

                NodeCollection table = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in table)
                {
                    tableflag = true;
                    bool isFirstRowTitle = false;
                    foreach (Cell cell in tbl.Rows[0])
                    {
                        foreach (Paragraph para in cell.Paragraphs)
                        {
                            if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.GetText().ToUpper().TrimStart().StartsWith("TEXT TABLE") || para.GetText().ToUpper().TrimStart().StartsWith("SEQ SUMMARY TABLE"))
                            {
                                isFirstRowTitle = true;

                                break;
                            }
                            else
                            {
                                notitle = true;
                            }
                        }
                        if (!isFirstRowTitle)
                        {
                            foreach (Cell cell1 in tbl.Rows[0])
                            {
                                Row Rw1 = tbl.FirstRow;
                                Row Rw2 = tbl.LastRow;
                                if (layout.GetStartPageIndex(Rw1) != layout.GetStartPageIndex(Rw2))
                                {
                                    if (tbl.Rows[0].RowFormat.HeadingFormat == false)
                                    {
                                        if (layout.GetStartPageIndex(tbl) != 0)
                                            lst.Add(layout.GetStartPageIndex(tbl.FirstRow));

                                        flag = true;
                                    }
                                }

                            }
                        }
                        if (isFirstRowTitle)
                        {
                            foreach (Cell cell2 in tbl.Rows[1])
                            {
                                Row Rw1 = tbl.FirstRow;
                                Row Rw2 = tbl.LastRow;
                                if (layout.GetStartPageIndex(Rw1) != layout.GetStartPageIndex(Rw2))
                                {
                                    if (tbl.Rows[0].RowFormat.HeadingFormat == false || tbl.Rows[1].RowFormat.HeadingFormat == false)
                                    {
                                        if (layout.GetStartPageIndex(tbl) != 0)
                                            lst.Add(layout.GetStartPageIndex(tbl.FirstRow));
                                        flag = true;
                                    }
                                }

                            }
                        }
                    }
                }
                if (tableflag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }

                else if (flag)
                {
                    flgcoomments = true;
                    List<int> lst2 = lst.Distinct().ToList();
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Tables are not in Repeat table title and header row in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Tables are not in Repeat table title and header row";
                    rObj.PageNumbersLst = lst2;

                }
                else if (table.Count > 0 && notitle && !flgcoomments)
                {
                    rObj.Comments = "There are no table titles in the tables ";
                    rObj.QC_Result = "Passed";
                }
                else
                {

                    //rObj.Comments = "Tables are in Repeat table title and header row";
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Repeat table title and header row Fix

        public void FixRepeatTableTitleAndHeaderRow(RegOpsQC rObj, Document doc)
        {
            bool Fixflag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection table = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in table)
                {
                    bool isFirstRowTitle = false;
                    foreach (Cell cell in tbl.Rows[0])
                    {
                        foreach (Paragraph para in cell.Paragraphs)
                        {
                            if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.GetText().ToUpper().TrimStart().StartsWith("TEXT TABLE") || para.GetText().ToUpper().TrimStart().StartsWith("SEQ SUMMARY TABLE"))
                            {
                                isFirstRowTitle = true;

                                break;
                            }
                        }

                        if (isFirstRowTitle)
                        {
                            foreach (Cell cell2 in tbl.Rows[1])
                            {
                                Row Rw1 = tbl.FirstRow;
                                Row Rw2 = tbl.LastRow;
                                if (layout.GetStartPageIndex(Rw1) != layout.GetStartPageIndex(Rw2))
                                {
                                    if (tbl.Rows[0].RowFormat.HeadingFormat == false || tbl.Rows[1].RowFormat.HeadingFormat == false)
                                    {
                                        tbl.Rows[0].RowFormat.HeadingFormat = true;
                                        tbl.Rows[1].RowFormat.HeadingFormat = true;
                                        Fixflag = true;
                                    }
                                }
                            }
                        }
                        if (!isFirstRowTitle)
                        {
                            foreach (Cell cell1 in tbl.Rows[0])
                            {
                                Row Rw1 = tbl.FirstRow;
                                Row Rw2 = tbl.LastRow;
                                if (layout.GetStartPageIndex(Rw1) != layout.GetStartPageIndex(Rw2))
                                {
                                    if (tbl.Rows[0].RowFormat.HeadingFormat == false)
                                    {
                                        tbl.Rows[0].RowFormat.HeadingFormat = true;

                                        Fixflag = true;
                                    }
                                }
                            }
                        }
                    }
                }

                if (Fixflag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                //doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// No Cell should be left blank


        public void NoCellEmpty(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            bool HeaderFlag = false;
            List<int> lst = new List<int>();
            List<int> lstCK = new List<int>();
            string SectionNumber = string.Empty;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                for (int i = 0; i < doc.Sections.Count; i++)
                {
                    foreach (Section set in doc.Sections)
                    {
                        foreach (Table tbl in set.GetChildNodes(NodeType.Table, true))
                        {

                            if (tbl.ParentNode.NodeType == NodeType.HeaderFooter)
                            {


                                foreach (Row row in tbl.Rows)
                                {


                                    foreach (Cell cell in row.Cells)
                                    {


                                        foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                        {

                                            if (pr.Count < 1 || pr.Runs.Count < 1)
                                            {

                                                lst.Add(i + 1);
                                                HeaderFlag = true;

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    foreach (Table tbl in tables)
                    {

                        if (tbl.ParentNode.NodeType == NodeType.Body)
                        {

                            foreach (Row row in tbl.Rows)
                            {


                                foreach (Cell cell in row.Cells)
                                {


                                    foreach (Paragraph pr in cell.GetChildNodes(NodeType.Paragraph, true))
                                    {

                                        if (pr.Count < 1 || pr.Runs.Count < 1)
                                        {

                                            flag = true;
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                }
                            }
                        }
                    }

                }



                if (HeaderFlag == true && flag == true)
                {
                    if (lst.Count > 0)
                    {
                        List<int> lst1 = lst.Distinct().ToList();
                        SectionNumber = string.Join(", ", lst1.ToArray());
                        lstCK = lst.Distinct().ToList();
                        lstCK.Sort();
                        Pagenumber = string.Join(", ", lstCK.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Empty cells in tables in Sections : " + SectionNumber + " and Empty cells in tables in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Empty cells in Tables ";
                        rObj.PageNumbersLst = lstCK;
                        rObj.CHECK_END_TIME = DateTime.Now;

                    }


                }
                else
                {

                    if (tables.Count == 0)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "There are no tables";
                    }
                    else
                    {
                        if (flag == false)
                        {
                            rObj.QC_Result = "Passed";
                            //rObj.Comments = "No Empty cell in Tables";
                        }
                        else
                        {
                            if (lst.Count > 0)
                            {
                                lstCK = lst.Distinct().ToList();
                                lstCK.Sort();
                                Pagenumber = string.Join(", ", lstCK.ToArray());
                                rObj.QC_Result = "Failed";
                                rObj.Comments = "Empty cells in tables in: " + Pagenumber;
                                rObj.CommentsWOPageNum = "Empty cells in Tables ";
                                rObj.PageNumbersLst = lstCK;
                            }

                        }

                    }
                }

                rObj.CHECK_END_TIME = DateTime.Now;

            }


            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void Footnotesuperscriptlowercaseletters(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            string pagenumber = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                List<Run> lst1 = new List<Run>();
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                foreach (Table tbl in tablesList)
                {
                    doc.UpdateListLabels();
                    Row rw = tbl.LastRow;
                    foreach (Cell cell in rw.Cells)
                    {
                        foreach (Paragraph pr in cell.Paragraphs)
                        {
                            while (pr.IsInCell && !pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || pr.Range.Text.Trim() == "" || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 12)) && layout.GetStartPageIndex(pr) != 0)
                            {
                                flag = true;
                                Run firstRun = pr.Runs[0];
                                if (firstRun != null)
                                {
                                    if (firstRun.Font.Superscript)
                                    {
                                        Regex regex = new Regex(@"\(?[a-z]\)?");
                                        if (!regex.IsMatch(firstRun.Text))
                                        {
                                            if (pr.LastChild != null)
                                                lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                            else
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                }


                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (!flag)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All footnotes and superscript with lowecase are right postion";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {

                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "footnotes and superscript with lowecase are not in: " + pagenumber;
                        rObj.CommentsWOPageNum = "footnotes and superscript with lowecase are not in :";
                        rObj.PageNumbersLst = lst2;
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "footnotes and superscript with lowecase are in right position";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }



        public void Emptyparagraphaftertable(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                List<int> lst = new List<int>();
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                DocumentBuilder builder = new DocumentBuilder(doc);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in tablesList)
                    {
                        Paragraph par = new Paragraph(doc);
                        if (table.NextSibling != null && table.NextSibling.Range.Text != ControlChar.ParagraphBreak)
                        {
                            if (table.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph par1 = (Paragraph)table.NextSibling;
                                if (table.NextSibling.Range.Text != "\r")
                                {
                                    if (par1.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                    {
                                        flag = true;
                                        if (layout.GetStartPageIndex(table.LastRow) != 0)
                                            lst.Add(layout.GetStartPageIndex(table.LastRow));
                                    }
                                }
                            }
                            else
                            {
                                if (table.NextSibling.Range.Text != "\r")
                                    if (layout.GetStartPageIndex(table.LastRow) != 0)
                                        lst.Add(layout.GetStartPageIndex(table.LastRow));
                            }
                        }
                    }
                    NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                    foreach (Aspose.Words.Drawing.Shape shap in figures)
                    {
                        Paragraph para = shap.ParentParagraph;
                        if (para.NextSibling != null)
                        {
                            if (para.NextSibling.Range.Text != "\r")
                            {
                                if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(para) != 0)
                                        lst.Add(layout.GetStartPageIndex(para));
                                }
                            }
                        }

                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (lst2.Count > 0)
                {
                    lst2.Sort();
                    string Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Blank rows exist after table or figure with given style \"" + rObj.Check_Parameter + "\" in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Blank rows exist after table or figure with given style \"" + rObj.Check_Parameter + "\" in Page Numbers:";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There is no blank rows after table or figure.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }


        public void FixEmptyparagrapfaftertable(RegOpsQC rObj, Document doc)
        {
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                // doc = new Document(rObj.DestFilePath)
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                DocumentBuilder builder = new DocumentBuilder(doc);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in tablesList)
                    {
                        if (table.NextSibling != null && table.NextSibling.Range.Text != ControlChar.ParagraphBreak)
                        {
                            Paragraph par = new Paragraph(doc);
                            if (table.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                if (table.NextSibling.Range.Text != "\r")
                                {
                                    if (par.ParagraphFormat.StyleName == rObj.Check_Parameter)
                                    {
                                        table.ParentNode.InsertAfter(par, table);
                                        builder.MoveTo(par);
                                        par.ParagraphFormat.StyleName = rObj.Check_Parameter;
                                        isFixed = true;
                                    }
                                }
                            }

                        }
                    }
                    NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                    foreach (Aspose.Words.Drawing.Shape shap in figures)
                    {
                        Paragraph para = shap.ParentParagraph;
                        if (para.NextSibling != null)
                        {
                            if (para.NextSibling.Range.Text != "\r")
                            {
                                if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                {
                                    Paragraph par = new Paragraph(doc);
                                    para.ParentNode.InsertAfter(par, para);
                                    builder.MoveTo(par);
                                    para.ParagraphFormat.StyleName = rObj.Check_Parameter;
                                    isFixed = true;
                                }
                            }
                        }

                    }

                }
                if (isFixed == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum += ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = " blank rows exist after tables and figures";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        /// <summary>
        /// A blank paragraph after table and figure with given style - Check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void EmptyParagraphAfterTableFigure(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                List<int> lst = new List<int>();
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                Style StyleName = null;
                StyleName = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == rObj.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem).ToList();
                if (StyleName == null)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Document does not contain \"" + rObj.Check_Parameter + "\" given style style";
                }
                else
                {
                    foreach (Table table in tablesList)
                    {
                        if (table.NextSibling != null)
                        {
                            // present handled only for Paragraphs nodes
                            if (table.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph par1 = (Paragraph)table.NextSibling;
                                if (par1.Range.Text != "\r")
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(table.LastRow) != 0)
                                        lst.Add(layout.GetStartPageIndex(table.LastRow));
                                }
                                else if (par1.Range.Text == "\r" && par1.ParagraphFormat.StyleName != StyleName.Name)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(table.LastRow) != 0)
                                        lst.Add(layout.GetStartPageIndex(table.LastRow));
                                }
                            }
                        }
                    }
                    NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                    foreach (Aspose.Words.Drawing.Shape shap in figures)
                    {
                        Paragraph para = shap.ParentParagraph;
                        if (para != null && para.NextSibling != null)
                        {
                            // present handled only for Paragraphs nodes
                            if (para.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph par = (Paragraph)para.NextSibling;
                                if (par.Range.Text != "\r")
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(par) != 0)
                                        lst.Add(layout.GetStartPageIndex(par));
                                }
                                else if (par.Range.Text == "\r")
                                {
                                    if (par.ParagraphFormat.StyleName != StyleName.Name)
                                    {
                                        flag = true;
                                        if (layout.GetStartPageIndex(par) != 0)
                                            lst.Add(layout.GetStartPageIndex(par));
                                    }
                                }
                            }
                        }
                    }

                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        string Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Blank paragraph does not exist after table or figure with given style \"" + rObj.Check_Parameter + "\" in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Blank paragraph does not exist after table or figure with given style \"" + rObj.Check_Parameter + "\"";
                        rObj.PageNumbersLst = lst2;
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Blank paragraph exist after table or figure with given style " + rObj.Check_Parameter;
                    }
                    rObj.CHECK_END_TIME = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        /// <summary>
        /// A blank paragraph after table and figure with given style - Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixEmptyParagraphAfterTableFigure(RegOpsQC rObj, Document doc)
        {
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                DocumentBuilder builder = new DocumentBuilder(doc);
                Style StyleName = null;
                StyleName = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == rObj.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem).ToList();
                if (StyleName == null)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Document does not contain \"" + rObj.Check_Parameter + "\" style";
                }
                else
                {
                    foreach (Table table in tablesList)
                    {
                        if (table.NextSibling != null)
                        {
                            // present handled only for Paragraphs nodes
                            if (table.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph par1 = (Paragraph)table.NextSibling;
                                Paragraph pr = new Paragraph(doc);
                                if (par1.Range.Text != "\r")
                                {
                                    par1.ParentNode.InsertAfter(pr, table);
                                    builder.MoveTo(pr);
                                    pr.ParagraphFormat.StyleName = StyleName.Name;
                                    isFixed = true;
                                }
                                else if (par1.Range.Text == "\r" && par1.ParagraphFormat.StyleName != StyleName.Name)
                                {
                                    par1.ParagraphFormat.StyleName = StyleName.Name;
                                    isFixed = true;

                                }
                            }
                        }
                    }
                    NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                    foreach (Aspose.Words.Drawing.Shape shap in figures)
                    {
                        Paragraph para = shap.ParentParagraph;
                        if (para != null && para.NextSibling != null)
                        {
                            // present handled only for Paragraphs nodes
                            if (para.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph par = (Paragraph)para.NextSibling;
                                Paragraph pr = new Paragraph(doc);
                                if (par.Range.Text != "\r")
                                {
                                    par.ParentNode.InsertAfter(pr, para);
                                    builder.MoveTo(pr);
                                    pr.ParagraphFormat.StyleName = StyleName.Name;
                                    isFixed = true;
                                }
                                else if (par.Range.Text == "\r")
                                {
                                    if (par.ParagraphFormat.StyleName != StyleName.Name)
                                    {
                                        par.ParagraphFormat.StyleName = StyleName.Name;
                                        isFixed = true;
                                    }
                                }
                            }
                        }
                    }

                    if (isFixed == true)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Blank paragraph exist after table or figure with given style " + rObj.Check_Parameter;
                    }
                    rObj.FIX_END_TIME = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        ///Table cell margins check
        public void TableCellMargins(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            try
            {
                rObj.QC_Result = string.Empty;
                rObj.Comments = string.Empty;
                string Pagenumber = string.Empty;
                bool SubChkFlag = false;
                List<int> Rightlstp = new List<int>();
                List<int> Leftlstp = new List<int>();

                // to get sub checks list
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;

                        if (chLst[k].Check_Name == "Left")
                        {
                            try
                            {
                                chLst[k].CHECK_START_TIME = DateTime.Now;

                                LayoutCollector layout = new LayoutCollector(doc);
                                NodeCollection t = doc.GetChildNodes(NodeType.Table, true);

                                foreach (Table t1 in t)
                                {
                                    NodeCollection cells = t1.GetChildNodes(NodeType.Cell, true);
                                    foreach (Cell c in cells)
                                    {
                                        //int v = Convert.ToInt32(c.CellFormat.LeftPadding) % 72;
                                        //if (v != Convert.ToDouble(chLst[k].Check_Parameter.Equals(MidpointRounding.AwayFromZero)))
                                        //{
                                        double x = Math.Round(Convert.ToDouble(chLst[k].Check_Parameter) * 72, 2);
                                        double output = roundoff(x.ToString());
                                        if (c.CellFormat.LeftPadding != output)
                                        {
                                            SubChkFlag = true;
                                            if (layout.GetStartPageIndex(c) != 0)
                                                Rightlstp.Add(layout.GetStartPageIndex(c));
                                        }
                                        //}
                                    }
                                }



                                if (SubChkFlag)
                                {
                                    List<int> lst1 = Leftlstp.Distinct().ToList();
                                    lst1.Sort();
                                    Pagenumber = string.Join(", ", lst1.ToArray());
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Table cell is not in left margin in: " + Pagenumber + " with given value \"" + chLst[k].Check_Parameter + "\"";
                                    chLst[k].CommentsWOPageNum = "Table cell is not in left margin in page numbers " + " with given value \"" + chLst[k].Check_Parameter + "\"";
                                    chLst[k].PageNumbersLst = lst1;
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Table cell Left Margin is in " + chLst[k].Check_Parameter;
                                }
                                chLst[k].CHECK_END_TIME = DateTime.Now;
                            }

                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }
                        }

                        if (chLst[k].Check_Name == "Right")
                        {
                            try
                            {
                                chLst[k].CHECK_START_TIME = DateTime.Now;
                                LayoutCollector layout = new LayoutCollector(doc);
                                NodeCollection t = doc.GetChildNodes(NodeType.Table, true);
                                foreach (Table t2 in t)
                                {
                                    NodeCollection cells = t2.GetChildNodes(NodeType.Cell, true);
                                    foreach (Cell c in cells)
                                    {
                                        //int v = Convert.ToInt32(c.CellFormat.RightPadding) % 72;
                                        //if (v != Convert.ToDouble(chLst[k].Check_Parameter.Equals(MidpointRounding.AwayFromZero)))
                                        //{

                                        double x = Math.Round(Convert.ToDouble(chLst[k].Check_Parameter) * 72, 2);

                                        double output = roundoff(x.ToString());
                                        if (c.CellFormat.RightPadding != output)
                                        {
                                            SubChkFlag = true;
                                            if (layout.GetStartPageIndex(c) != 0)
                                                Rightlstp.Add(layout.GetStartPageIndex(c));
                                        }
                                        //}
                                    }
                                }

                                if (SubChkFlag)
                                {
                                    List<int> lst1 = Rightlstp.Distinct().ToList();
                                    lst1.Sort();
                                    Pagenumber = string.Join(", ", lst1.ToArray());
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Table cell is not in Right margin in: " + Pagenumber + " with given value \"" + chLst[k].Check_Parameter + "\"";
                                    chLst[k].CommentsWOPageNum = "Table cell is not in left margin in page numbers " + " with given value \"" + chLst[k].Check_Parameter + "\"";
                                    chLst[k].PageNumbersLst = lst1;
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Table cell Right Margin is in "+ chLst[k].Check_Parameter;
                                }
                                chLst[k].CHECK_END_TIME = DateTime.Now;
                            }
                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }
                        }
                    }
                }
                if (SubChkFlag == true && rObj.Job_Type != "QC")
                    rObj.QC_Result = "Failed";

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }

        public double roundoff(string input)
        {
            string TempNum = input;
            double FinalNum = Convert.ToDouble(input);
            string[] array = TempNum.Split('.');
            if (array.Length > 1 && array[1] != null)
            {
                string DecNum = array[1];
                if (DecNum.Length > 1)
                {
                    char value = DecNum[1];
                    double num = Convert.ToDouble(value.ToString());

                    if (num <= 2)
                    {
                        char co = DecNum[1];
                        string fgt = "0.0" + co;
                        double num1 = Convert.ToDouble(fgt);
                        FinalNum = FinalNum - num1;
                        return FinalNum;
                    }
                    else if (num < 5 && num > 2)
                    {
                        char co = DecNum[1];
                        string fgt = "0.0" + co;
                        double num1 = Convert.ToDouble(fgt);
                        double num2 = 0.05 - num1;
                        FinalNum = FinalNum + num2;
                        return FinalNum;
                    }
                    else if (num > 5 && num <= 7)
                    {
                        char co = DecNum[1];
                        string fgt = "0.0" + co;
                        double num1 = Convert.ToDouble(fgt);
                        double num2 = num1 - 0.05;
                        FinalNum = FinalNum - num2;
                        return FinalNum;
                    }
                    else if (num > 7)
                    {
                        char co = DecNum[1];
                        string fgt = "0.0" + co;
                        double num1 = Convert.ToDouble(fgt);
                        double num2 = 0.1 - num1;
                        FinalNum = FinalNum + num2;
                        return FinalNum;
                    }
                }
            }

            return Convert.ToDouble(input);
        }

        ///Table cell margin fix method
        public void FixTableCellMargins(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            try
            {

                bool LeftFixFlag = false;
                bool RightFixFlag = false;
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;

                        if (chLst[k].Check_Name == "Left" && chLst[k].Check_Type == 1)
                        {
                            try
                            {
                                chLst[k].FIX_START_TIME = DateTime.Now;
                                // doc = new Document(rObj.DestFilePath);
                                LayoutCollector layout = new LayoutCollector(doc);
                                NodeCollection t = doc.GetChildNodes(NodeType.Table, true);
                                foreach (Table t1 in t)
                                {
                                    NodeCollection cells = t1.GetChildNodes(NodeType.Cell, true);
                                    foreach (Cell c in cells)
                                    {
                                        if (c.CellFormat.LeftPadding != (Convert.ToDouble(chLst[k].Check_Parameter) * 72))
                                        {
                                            LeftFixFlag = true;
                                            c.CellFormat.LeftPadding = (Convert.ToDouble(chLst[k].Check_Parameter) * 72);
                                        }
                                    }
                                }

                                if (LeftFixFlag)
                                {
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                                }
                                chLst[k].FIX_END_TIME = DateTime.Now;
                            }
                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }
                        }

                        if (chLst[k].Check_Name == "Right" && chLst[k].Check_Type == 1)
                        {
                            try
                            {
                                chLst[k].FIX_START_TIME = DateTime.Now;

                                NodeCollection t = doc.GetChildNodes(NodeType.Table, true);
                                foreach (Table t2 in t)
                                {

                                    NodeCollection cells = t2.GetChildNodes(NodeType.Cell, true);
                                    foreach (Cell c1 in cells)
                                    {
                                        if (c1.CellFormat.RightPadding != (Convert.ToDouble(chLst[k].Check_Parameter) * 72))
                                        {
                                            RightFixFlag = true;
                                            c1.CellFormat.RightPadding = (Convert.ToDouble(chLst[k].Check_Parameter) * 72);
                                        }
                                    }
                                }

                                if (RightFixFlag)
                                {
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                                }
                                chLst[k].FIX_END_TIME = DateTime.Now;
                            }
                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }

                            //doc.Save(rObj.DestFilePath);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }


        //// table header row vertical check
        public void VerticalAlignmentForHeaderRows(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            bool tablefix = false;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);

                foreach (Table table in lsttbles)
                {
                    tablefix = true;
                    bool isFirstRowTitle = false;
                    foreach (Cell cell in table.Rows[0])
                    {
                        foreach (Paragraph para in cell.Paragraphs)
                        {
                            if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.GetText().ToUpper().TrimStart().StartsWith("TEXT") || para.GetText().ToUpper().TrimStart().StartsWith("SUMMARY"))
                            {
                                isFirstRowTitle = true;

                                break;
                            }
                        }
                    }


                    if (!isFirstRowTitle)
                    {
                        for (int i = 0; i <= table.Rows.Count(); i++)
                        {
                            foreach (Cell cell in table.Rows[0])
                            {
                                if (rObj.Check_Parameter == "Top" && cell.CellFormat.VerticalAlignment != CellVerticalAlignment.Top)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(cell) != 0)
                                        lst.Add(layout.GetStartPageIndex(cell));
                                }
                                if (rObj.Check_Parameter == "Center" && cell.CellFormat.VerticalAlignment != CellVerticalAlignment.Center)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(cell) != 0)
                                        lst.Add(layout.GetStartPageIndex(cell));
                                }
                                if (rObj.Check_Parameter == "Bottom" && cell.CellFormat.VerticalAlignment != CellVerticalAlignment.Bottom)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(cell) != 0)
                                        lst.Add(layout.GetStartPageIndex(cell));
                                }
                            }

                        }
                    }
                    else if (isFirstRowTitle)
                    {
                        for (int i = 1; i <= table.Rows.Count(); i++)
                        {
                            foreach (Cell cell in table.Rows[1])
                            {
                                if (rObj.Check_Parameter == "Top" && cell.CellFormat.VerticalAlignment != CellVerticalAlignment.Top)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(cell) != 0)
                                        lst.Add(layout.GetStartPageIndex(cell));
                                }
                                if (rObj.Check_Parameter == "Center" && cell.CellFormat.VerticalAlignment != CellVerticalAlignment.Center)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(cell) != 0)
                                        lst.Add(layout.GetStartPageIndex(cell));
                                }
                                if (rObj.Check_Parameter == "Bottom" && cell.CellFormat.VerticalAlignment != CellVerticalAlignment.Bottom)
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(cell) != 0)
                                        lst.Add(layout.GetStartPageIndex(cell));
                                }
                            }

                        }

                    }
                }



                List<int> lst2 = lst.Distinct().ToList();
                if (tablefix == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (flag == true)
                {
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Table header row is not aligned to \"" + rObj.Check_Parameter + "\" in: " + pagenumber;
                        rObj.CommentsWOPageNum = "Table header row is not aligned to \"" + rObj.Check_Parameter + "\"";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All table header rows are aligned to"+ rObj.Check_Parameter;
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        //  table header row vertical fix method
        public void FixVerticalAlignmentForHeaderRows(RegOpsQC rObj, Document doc, List<RegOpsQC> ChLst)
        {

            bool IsFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                // doc = new Document(rObj.DestFilePath);
                foreach (Table table in lsttbles)
                {

                    bool isFirstRowTitle = false;
                    foreach (Cell cell in table.Rows[0])
                    {
                        foreach (Paragraph para in cell.Paragraphs)
                        {
                            if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.GetText().ToUpper().TrimStart().StartsWith("TEXT") || para.GetText().ToUpper().TrimStart().StartsWith("SUMMARY"))
                            {
                                isFirstRowTitle = true;

                                break;
                            }
                        }

                        if (!isFirstRowTitle)
                        {
                            for (int i = 0; i <= table.Rows.Count(); i++)
                            {
                                foreach (Cell cells in table.Rows[0])
                                {
                                    if (rObj.Check_Parameter == "Top")
                                    {
                                        cell.CellFormat.VerticalAlignment = CellVerticalAlignment.Top;
                                        IsFixed = true;
                                    }
                                    else if (rObj.Check_Parameter == "Center")
                                    {
                                        cells.CellFormat.VerticalAlignment = CellVerticalAlignment.Center;
                                        IsFixed = true;
                                    }
                                    else if (rObj.Check_Parameter == "Bottom")
                                    {
                                        cells.CellFormat.VerticalAlignment = CellVerticalAlignment.Bottom;
                                        IsFixed = true;
                                    }
                                }

                            }

                        }
                        if (isFirstRowTitle)
                        {
                            for (int i = 1; i <= table.Rows.Count(); i++)
                            {
                                foreach (Cell cells in table.Rows[1])
                                {
                                    if (rObj.Check_Parameter == "Top")
                                    {
                                        cell.CellFormat.VerticalAlignment = CellVerticalAlignment.Top;
                                        IsFixed = true;
                                    }
                                    else if (rObj.Check_Parameter == "Center")
                                    {
                                        cells.CellFormat.VerticalAlignment = CellVerticalAlignment.Center;
                                        IsFixed = true;
                                    }
                                    else if (rObj.Check_Parameter == "Bottom")
                                    {
                                        cells.CellFormat.VerticalAlignment = CellVerticalAlignment.Bottom;
                                        IsFixed = true;
                                    }
                                }

                            }
                        }
                    }
                }


                if (IsFixed)
                {
                    rObj.Is_Fixed = 1;
                    //rObj.QC_Result = "Fixed";
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All table header rows are aligned."+ rObj.Check_Parameter;
                }
                // doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // used to check symbol style in table and figures titles   
        // only check
        public void Symbolshouldnotpresent(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst1 = new List<int>();
                List<int> lst2 = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> Tabeseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Table") && (((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE"))).ToList();
                foreach (FieldStart fld in Tabeseq)
                {
                    Paragraph pr = fld.ParentParagraph;
                    foreach (Run frun in pr.GetChildNodes(NodeType.Run, false).ToList())
                    {
                        if (frun.Font.Name.ToUpper() == "SYMBOL")
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(frun) != 0)
                                lst1.Add(layout.GetStartPageIndex(frun));
                        }

                    }
                }
                List<Node> Figseqs = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Figure") && (((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("Figure" + ControlChar.SpaceChar) || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("Figure" + ControlChar.NonBreakingSpaceChar) || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((FieldStart)x).ParentParagraph.GetText().TrimStart().ToUpper().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE"))).ToList();

                foreach (FieldStart fld in Figseqs)
                {
                    Paragraph pr = fld.ParentParagraph;
                    foreach (Run frun in pr.GetChildNodes(NodeType.Run, false).ToList())
                    {
                        if (frun.Font.Name.ToUpper() == "SYMBOL")
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(frun) != 0)
                                lst2.Add(layout.GetStartPageIndex(frun));
                        }

                    }
                }
                if (flag == true)
                {
                    List<int> lsttable = lst1.Distinct().ToList();
                    if (lsttable.Count > 0)
                    {

                        lsttable.Sort();
                        Pagenumber = string.Join(", ", lsttable.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Table title contains symbol(s) in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Table title contains symbol(s)";
                        rObj.PageNumbersLst = lsttable;
                    }
                    List<int> lstfig = lst2.Distinct().ToList();
                    if (lstfig.Count > 0)
                    {
                        lsttable.Sort();
                        Pagenumber = string.Join(", ", lsttable.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Figure title contains symbol(s) in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Figure title contains symbol(s)";
                        rObj.PageNumbersLst = lstfig;
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Figures/Tables titles does not contain symbols";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Misiing sequence number for Tables
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void MissingSequenceNumber(RegOpsQC rObj, Document doc)
        {

            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            bool Allsubcheck = false;
            List<int> lstrp = new List<int>();

            List<int> lst = new List<int>();

            List<int> lstrinvalid = new List<int>();
            List<int> pgnumlst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);

                List<Node> childtbllst = new List<Node>();
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in lsttbles)
                {
                    //List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                    List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE"))))).ToList();

                    childtbllst.AddRange(existlst);
                }
                //Inner Table Code Close
                //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))).ToList();
                if (paragraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in paragraphs)
                    {
                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();

                        List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                        if (CheckInTblExist.Count == 0 && Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE")))
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow)
                                    {
                                        lstrp.Add(layout.GetStartPageIndex(paragraph));
                                        pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    }
                                }
                                else
                                {
                                    Paragraph pr = paragraph;
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            if (paragraph.LastChild != null)
                                            {
                                                lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                            }
                                            else
                                            {
                                                lstrp.Add(layout.GetStartPageIndex(paragraph));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                            }
                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }

                            }

                        }
                    }
                    List<int> lst2 = lstrp.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Missing sequence number in: " + pagenumber;
                        rObj.CommentsWOPageNum = "Missing sequence number";
                        rObj.PageNumbersLst = lst2;

                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "No missing sequence number";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No Table titles are present in the document";
                }


            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }


        /// <summary>
        ///Fix Misiing sequence number for Tables
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <summary>
        ///Fix Misiing sequence number for Tables
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixMissingSequenceNumber(RegOpsQC rObj, Document doc)
        {
            bool Fixcaption = false;
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            string HeaderCaptionfrmt = string.Empty;
            List<int> lstrp = new List<int>();

            List<int> lst = new List<int>();

            List<int> lstrinvalid = new List<int>();
            List<int> pgnumlst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> childtbllst = new List<Node>();
                List<RegOpsQC> chLst1 = new List<RegOpsQC>();
                List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                if (HeadingPara.Count > 0 && ((Paragraph)HeadingPara[0]).IsListItem == true)
                {
                    HeaderCaptionfrmt = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.NumberFormat;
                    string startat = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.StartAt.ToString();
                    if (HeaderCaptionfrmt != "")
                        HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\0", startat);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt.ToCharArray().ElementAt(HeaderCaptionfrmt.Length - 1) == '.')
                {
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Remove(HeaderCaptionfrmt.Length - 1);
                }
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table tbl in lsttbles)
                {
                    //List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                    List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE"))))).ToList();

                    childtbllst.AddRange(existlst);
                }
                FindReplaceOptions options = new FindReplaceOptions();
                options.MatchCase = true;
                options.FindWholeWordsOnly = false;
                options.Direction = FindReplaceDirection.Forward;
                //Inner Table Code Close
                //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))).ToList();
                if (paragraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in paragraphs)
                    {
                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                        List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                        Paragraph pr = (Paragraph)paragraph;
                        if (CheckInTblExist.Count == 0 && Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE")))
                        {
                            if (paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow)
                                    {
                                        string my_StringNm = string.Empty;
                                        string ReplceStr = paragraph.GetText().TrimStart();
                                        string a = paragraph.GetText().TrimStart();
                                        my_StringNm = a.Substring(0, 12);
                                        if (my_StringNm.ToUpper().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || my_StringNm.ToUpper().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                                        {
                                            Fixcaption = AddTextTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                        }
                                    }
                                }
                                else
                                {
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            if (paragraph.LastChild != null)
                                            {
                                                string my_StringNm = string.Empty;
                                                string ReplceStr = paragraph.GetText().TrimStart();
                                                string a = paragraph.GetText().TrimStart();
                                                my_StringNm = a.Substring(0, 12);
                                                if (my_StringNm.ToUpper().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || my_StringNm.ToUpper().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                                                {
                                                    Fixcaption = AddTextTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                                }
                                            }
                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            else if (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow)
                                    {
                                        string my_StringNm = string.Empty;
                                        string ReplceStr = paragraph.GetText().TrimStart();
                                        string a = paragraph.GetText().TrimStart();
                                        my_StringNm = a.Substring(0, 15);
                                        if (my_StringNm.ToUpper().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || my_StringNm.ToUpper().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                                        {
                                            Fixcaption = AddSummaryTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                        }
                                    }
                                }
                                else
                                {
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            if (paragraph.LastChild != null)
                                            {
                                                string my_StringNm = string.Empty;
                                                string ReplceStr = paragraph.GetText().TrimStart();
                                                string a = paragraph.GetText().TrimStart();
                                                my_StringNm = a.Substring(0, 15);
                                                if (my_StringNm.ToUpper().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || my_StringNm.ToUpper().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                                                {
                                                    Fixcaption = AddSummaryTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                                }
                                            }
                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            else if (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                            {
                                if (paragraph.IsInCell)
                                {
                                    Cell cell = (Cell)paragraph.ParentNode;
                                    if (cell.ParentRow.IsFirstRow)
                                    {
                                        string my_StringNm = string.Empty;
                                        string ReplceStr = paragraph.GetText().TrimStart();
                                        string a = paragraph.GetText().TrimStart();
                                        my_StringNm = a.Substring(0, 7);
                                        if (my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                                        {
                                            Fixcaption = AddTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                        }
                                    }
                                }
                                else
                                {
                                    while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                    {
                                        if (pr.NextSibling.NodeType == NodeType.Table)
                                        {
                                            if (paragraph.LastChild != null)
                                            {
                                                string my_StringNm = string.Empty;
                                                string ReplceStr = paragraph.GetText().TrimStart();
                                                string a = paragraph.GetText().TrimStart();
                                                my_StringNm = a.Substring(0, 7);
                                                if (my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))
                                                {
                                                    Fixcaption = AddTableFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                                }
                                            }
                                            break;
                                        }
                                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                        {
                                            pr = (Paragraph)pr.NextSibling;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (Fixcaption)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    if (rObj.CommentsPageNumLst != null)
                    {
                        foreach (var pg in rObj.CommentsPageNumLst)
                        {
                            pg.Comments = pg.Comments + ". Fixed";
                        }
                    }

                }
                else
                {
                    if (rObj.QC_Result == "Failed")
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = rObj.Comments + ". Fixed";
                        if (rObj.CommentsPageNumLst != null)
                        {
                            foreach (var pg in rObj.CommentsPageNumLst)
                            {
                                pg.Comments = pg.Comments + ". These cannot be fixed";
                            }
                        }

                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
                doc.UpdateFields();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        /// <summary>
        /// Table caption style check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void TableCaptionstyle(RegOpsQC rObj, Document doc)
        {

            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            bool Allsubcheck = false;
            List<int> lstrp = new List<int>();
            Style Captionstyles = null;
            List<int> lst = new List<int>();

            List<int> lstrinvalid = new List<int>();
            List<int> pgnumlst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter).FirstOrDefault();
                List<Node> childtbllst = new List<Node>();
                NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "File doesn't has \"" + rObj.Check_Parameter + "\" style";
                }
                else
                {
                    foreach (Table tbl in lsttbles)
                    {
                        //List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                        List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE"))))).ToList();

                        childtbllst.AddRange(existlst);
                    }
                    //Inner Table Code Close
                    //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))) && ((Paragraph)x).ParagraphFormat.Style.Name != rObj.Check_Parameter).ToList();
                    if (paragraphs.Count > 0)
                    {
                        foreach (Paragraph paragraph in paragraphs)
                        {
                            List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();

                            List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                            if (CheckInTblExist.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE")))
                            {

                                if (layout.GetStartPageIndex(paragraph) != 0)
                                {
                                    if (paragraph.IsInCell)
                                    {
                                        Cell cell = (Cell)paragraph.ParentNode;
                                        if (cell.ParentRow.IsFirstRow)
                                        {
                                            lstrp.Add(layout.GetStartPageIndex(paragraph));
                                            pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                        }
                                    }
                                    else
                                    {
                                        Paragraph pr = paragraph;
                                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                        {
                                            if (pr.NextSibling.NodeType == NodeType.Table)
                                            {
                                                if (paragraph.LastChild != null)
                                                {
                                                    lstrp.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                }
                                                else
                                                {
                                                    lstrp.Add(layout.GetStartPageIndex(paragraph));
                                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                                }
                                                break;
                                            }
                                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                pr = (Paragraph)pr.NextSibling;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                }

                            }
                        }
                        List<int> lst2 = lstrp.Distinct().ToList();
                        if (lst2.Count > 0)
                        {
                            lst2.Sort();
                            pagenumber = string.Join(", ", lst2.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Missing \"" + rObj.Check_Parameter + "\" style for table(s) in: " + pagenumber;
                            rObj.CommentsWOPageNum = "Missing \"" + rObj.Check_Parameter + "\" style for table(s)";
                            rObj.PageNumbersLst = lst2;

                        }
                        else
                        {
                            rObj.QC_Result = "Passed";
                            //rObj.Comments = "All tables titles are in " + rObj.Check_Parameter + " style";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "No Table titles are present in the document";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        /// <summary>
        /// Fix Table caption style check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTableCaptionstyle(RegOpsQC rObj, Document doc)
        {

            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            Style Captionstyles = null;
            bool Fixcaption = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter).FirstOrDefault();
                List<Node> childtbllst = new List<Node>();
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "File doesn't has \"" + rObj.Check_Parameter + "\" style";
                }
                else
                {
                    NodeCollection lsttbles = doc.GetChildNodes(NodeType.Table, true);
                    foreach (Table tbl in lsttbles)
                    {
                        //List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar))))).ToList();
                        List<Node> existlst = tbl.GetChildNodes(NodeType.Table, true).Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).FirstRow.FirstCell.FirstParagraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || (((Table)x).PreviousSibling != null && (((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Table)x).PreviousSibling.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE"))))).ToList();

                        childtbllst.AddRange(existlst);
                    }
                    //Inner Table Code Close
                    List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))) && ((Paragraph)x).ParagraphFormat.Style.Name != rObj.Check_Parameter).ToList();
                    if (paragraphs.Count > 0)
                    {
                        foreach (Paragraph paragraph in paragraphs)
                        {
                            List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();

                            List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == paragraph.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == paragraph.Range.Text).ToList();
                            if (CheckInTblExist.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE")))
                            {

                                if (layout.GetStartPageIndex(paragraph) != 0)
                                {
                                    if (paragraph.IsInCell)
                                    {
                                        Cell cell = (Cell)paragraph.ParentNode;
                                        if (cell.ParentRow.IsFirstRow)
                                        {
                                            paragraph.ParagraphFormat.Style = Captionstyles;
                                            Fixcaption = true;
                                        }
                                    }
                                    else
                                    {
                                        Paragraph pr = paragraph;
                                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                                        {
                                            if (pr.NextSibling.NodeType == NodeType.Table)
                                            {

                                                paragraph.ParagraphFormat.Style = Captionstyles;
                                                Fixcaption = true;
                                                break;
                                            }
                                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                pr = (Paragraph)pr.NextSibling;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                }

                            }
                        }
                        foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                        {
                            if (TableSeqFieldStart.ParentParagraph.NodeType == NodeType.Paragraph)
                            {
                                Paragraph pr = (Paragraph)TableSeqFieldStart.ParentParagraph;
                                List<Node> CheckInTblExist = childtbllst.Where(x => (((Table)x).FirstRow.FirstCell.FirstParagraph.Range.Text == pr.Range.Text) || ((Table)x).PreviousSibling != null && ((Table)x).PreviousSibling.Range.Text == pr.Range.Text).ToList();
                                if ((pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar)) && CheckInTblExist.Count == 0 && (TableSeqFieldStart.GetField().GetFieldCode().Contains("SEQ Table")) && pr.ParagraphFormat.StyleIdentifier.ToString() != rObj.Check_Parameter)
                                {
                                    Fixcaption = true;
                                    pr.ParagraphFormat.Style = Captionstyles;

                                }
                            }
                        }

                        if (Fixcaption == true)
                        {

                            rObj.QC_Result = "Failed";
                            rObj.Is_Fixed = 1;
                            rObj.Comments = rObj.Comments + ". Fixed ";
                            rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";


                        }
                        else
                        {
                            rObj.QC_Result = "Passed";
                            //rObj.Comments = "All tables titles are in " + rObj.Check_Parameter + " style";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "No Table titles are present in the document";
                    }
                }
                rObj.FIX_START_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }
        /// <summary>
        /// figure missing sequence number
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FigureMissingSequenceNumber(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            List<int> lst = new List<int>();
            List<int> pgnumlst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE"))).ToList();
                if (paragraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in paragraphs)
                    {
                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE"))).ToList();

                        if (Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE")))
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                Paragraph pr = paragraph;
                                if (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Shape))
                                {
                                    lstrp.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                }
                            }
                        }
                    }
                    List<int> lst2 = lstrp.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Figure sequence number is Missing in: " + pagenumber;
                        rObj.CommentsWOPageNum = "Missing sequence number ";
                        rObj.PageNumbersLst = lst2;
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "No sequence number is missing";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No Figure titles are present in the document";
                }

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        /// <summary>
        /// fix figure missing sequence number
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixFigureMissingSequenceNumber(RegOpsQC rObj, Document doc)
        {
            bool Fixcaption = false;
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            string HeaderCaptionfrmt = string.Empty;
            List<int> lstrp = new List<int>();
            List<int> lst = new List<int>();
            List<int> pgnumlst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<RegOpsQC> chLst1 = new List<RegOpsQC>();
                List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                if (HeadingPara.Count > 0 && ((Paragraph)HeadingPara[0]).IsListItem == true)
                {
                    HeaderCaptionfrmt = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.NumberFormat;
                    string startat = ((Paragraph)HeadingPara[0]).ListFormat.ListLevel.StartAt.ToString();
                    if (HeaderCaptionfrmt != "")
                        HeaderCaptionfrmt = HeaderCaptionfrmt.Replace("\0", startat);
                }
                if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt.ToCharArray().ElementAt(HeaderCaptionfrmt.Length - 1) == '.')
                {
                    HeaderCaptionfrmt = HeaderCaptionfrmt.Remove(HeaderCaptionfrmt.Length - 1);
                }
                FindReplaceOptions options = new FindReplaceOptions();
                options.MatchCase = true;
                options.FindWholeWordsOnly = false;
                options.Direction = FindReplaceDirection.Forward;
                //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE"))).ToList();
                if (paragraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in paragraphs)
                    {
                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE"))).ToList();

                        if (Fieldseq.Count == 0 && paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE"))
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                Paragraph pr = paragraph;
                                if (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Shape))
                                {
                                    string my_StringNm = string.Empty;
                                    string ReplceStr = paragraph.GetText().TrimStart();
                                    string a = paragraph.GetText().TrimStart();
                                    my_StringNm = a.Substring(0, 12);
                                    if (my_StringNm.ToUpper().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || my_StringNm.ToUpper().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE"))
                                    {
                                        Fixcaption = AddTextFigureFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                    }
                                }
                            }
                        }
                        else if (Fieldseq.Count == 0 && paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE"))
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                Paragraph pr = paragraph;
                                if (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Shape))
                                {
                                    string my_StringNm = string.Empty;
                                    string ReplceStr = paragraph.GetText().TrimStart();
                                    string a = paragraph.GetText().TrimStart();
                                    my_StringNm = a.Substring(0, 15);
                                    if (my_StringNm.ToUpper().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || my_StringNm.ToUpper().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE"))
                                    {
                                        Fixcaption = AddSummaryFigureFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                    }
                                }
                            }
                        }
                        else if (Fieldseq.Count == 0 && paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar))
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0)
                            {
                                Paragraph pr = paragraph;
                                if (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Shape))
                                {
                                    string my_StringNm = string.Empty;
                                    string ReplceStr = paragraph.GetText().TrimStart();
                                    string a = paragraph.GetText().TrimStart();
                                    my_StringNm = a.Substring(0, 8);
                                    if (my_StringNm.ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))
                                    {
                                        Fixcaption = AddFigureFieldcode(a, pr, my_StringNm, HeaderCaptionfrmt, options, chLst1, doc);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Fixcaption)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    if (rObj.CommentsPageNumLst != null)
                    {
                        foreach (var pg in rObj.CommentsPageNumLst)
                        {
                            pg.Comments = pg.Comments + ". Fixed";
                        }
                    }

                }
                else
                {
                    if (rObj.QC_Result == "Failed")
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = rObj.Comments + ". These cannot be fixed";
                        if (rObj.CommentsPageNumLst != null)
                        {
                            foreach (var pg in rObj.CommentsPageNumLst)
                            {
                                pg.Comments = pg.Comments + ". These cannot be fixed";
                            }
                        }

                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
                doc.UpdateFields();
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        public static bool AddFigureFieldcode(string a, Paragraph pr, string my_StringNm, string HeaderCaptionfrmt, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixcaption = false;
            my_StringNm = a.Substring(0, 7);

            if (my_StringNm.Contains("Figure" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Figure" + ControlChar.SpaceChar, "Figure" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                //below condition to check the exact location to add sequence filed code 
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    //code to replace Table+Hardspace+prefix+hyphen
                    if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                        pr.Range.Replace(my_StringNm, "Figure" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                    //else if (!my_StringNm.ToUpper().Contains("TABLE P.") && my_StringNm.Substring(my_StringNm.Length - 1) != ".")
                    //{
                    else
                        pr.Range.Replace(my_StringNm, "Figure" + ControlChar.NonBreakingSpaceChar, options);
                    //}
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Figure")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, ".");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Figure"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Figure \\* ARABIC", rn, true);
                            Fixcaption = true;
                        }
                    }
                    break;
                }
            }
            return Fixcaption;
        }

        public static bool AddSummaryFigureFieldcode(string a, Paragraph pr, string my_StringNm, string HeaderCaptionfrmt, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixcaption = false;
            my_StringNm = a.Substring(0, 14);

            if (my_StringNm.Contains("Summary" + ControlChar.SpaceChar + "Figure" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Summary" + ControlChar.SpaceChar + "Figure" + ControlChar.SpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.SpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Summary" + ControlChar.SpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar))
            {
                pr.Range.Replace("Summary" + ControlChar.SpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    //code to replace Table+Hardspace+prefix+hyphen
                    if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                        pr.Range.Replace(my_StringNm, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                    //else if (!my_StringNm.ToUpper().Contains("TABLE P.") && my_StringNm.Substring(my_Stringnm.Length - 1) != ".")
                    //{
                    else
                        pr.Range.Replace(my_StringNm, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Summary Figure")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, ".");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Summary Figure"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Summary_Figure \\* ARABIC", rn, true);
                            Fixcaption = true;
                        }
                    }
                    break;
                }
            }
            return Fixcaption;
        }

        public static bool AddTextFigureFieldcode(string a, Paragraph pr, string my_StringNm, string HeaderCaptionfrmt, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixcaption = false;
            my_StringNm = a.Substring(0, 11);

            if (my_StringNm.Contains("Text" + ControlChar.SpaceChar + "Figure" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Text" + ControlChar.SpaceChar + "Figure" + ControlChar.SpaceChar, "Text" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Text" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Text" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.SpaceChar, "Text" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            if (my_StringNm.Contains("Text" + ControlChar.SpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar))
            {
                pr.Range.Replace("Text" + ControlChar.SpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, "Text" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    //code to replace Table+Hardspace+prefix+hyphen
                    if (HeaderCaptionfrmt != "" && HeaderCaptionfrmt != null && (HeaderCaptionfrmt.Any(ch => Char.IsLetter(ch)) || HeaderCaptionfrmt.Contains(".")) && (my_StringNm.Contains(HeaderCaptionfrmt) || (chLst1 != null && chLst1.Count > 0 && chLst1[0].Check_Type == 1)))
                        pr.Range.Replace(my_StringNm, "Text" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar + HeaderCaptionfrmt + ControlChar.NonBreakingHyphenChar, options);
                    //else if (!my_StringNm.ToUpper().Contains("TABLE P.") && my_StringNm.Substring(my_Stringnm.Length - 1) != ".")
                    //{
                    else
                        pr.Range.Replace(my_StringNm, "Text" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, options);
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Text Figure")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, ".");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Text Figure"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Text_Figure \\* ARABIC", rn, true);
                            Fixcaption = true;
                        }
                    }
                    break;
                }
            }
            return Fixcaption;
        }


        /// <summary>
        /// figure caption style
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Figurecaptionstyle(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            List<int> lst = new List<int>();
            List<int> pgnumlst = new List<int>();
            Style Captionstyles = null;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter.ToString()).FirstOrDefault();
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "File doesn't has" + rObj.Check_Parameter + "style";
                }
                else
                {
                    //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE"))) && ((Paragraph)x).ParagraphFormat.Style.Name != rObj.Check_Parameter).ToList();
                    if (paragraphs.Count > 0)
                    {
                        foreach (Paragraph paragraph in paragraphs)
                        {
                            List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE"))).ToList();

                            if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE")))
                            {
                                if (layout.GetStartPageIndex(paragraph) != 0)
                                {
                                    Paragraph pr = paragraph;
                                    //if (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Shape))
                                    //{
                                    lstrp.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                    //}
                                }
                            }
                        }
                        List<int> lst2 = lstrp.Distinct().ToList();
                        if (lst2.Count > 0)
                        {
                            lst2.Sort();
                            pagenumber = string.Join(", ", lst2.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Missing \"" + rObj.Check_Parameter + "\" style for figure(s) in: " + pagenumber;
                            rObj.CommentsWOPageNum = "Missing \"" + rObj.Check_Parameter + "\" style for figure(s)";
                            rObj.PageNumbersLst = lst2;

                        }
                        else
                        {
                            rObj.QC_Result = "Passed";
                            //rObj.Comments = "All figures titles are in " + rObj.Check_Parameter + " style";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "No Figure titles are present in the document";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        /// <summary>
        ///Fix figure caption style
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixFigurecaptionstyle(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            List<int> lstrp = new List<int>();
            List<int> lst = new List<int>();
            List<int> pgnumlst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            Style Captionstyles = null;
            bool Fixcaption = false;
            try
            {
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter.ToString()).FirstOrDefault();
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "File doesn't has" + rObj.Check_Parameter + "style";
                }
                else
                {
                    List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                    LayoutCollector layout = new LayoutCollector(doc);
                    //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUED)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONTINUE)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CONT.)") && !((Paragraph)x).Range.Text.ToUpper().Contains("(CON'T)") && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption || ((((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().TrimStart().StartsWith("Table" + ControlChar.SpaceChar)) && (((Paragraph)x).Runs[0].Font.Bold == true)) || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TITLE" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Title || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE TITLE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION CROSSREFERENCE" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "TABLE HEAD" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "PARAGRAPH" || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "BODY TEXT" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.BodyText || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Normal || ((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "NORMAL")).ToList();
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE"))) && ((Paragraph)x).ParagraphFormat.Style.Name != rObj.Check_Parameter).ToList();
                    if (paragraphs.Count > 0)
                    {
                        foreach (Paragraph paragraph in paragraphs)
                        {
                            List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE"))).ToList();

                            if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE")))
                            {
                                if (layout.GetStartPageIndex(paragraph) != 0)
                                {
                                    Paragraph pr = paragraph;
                                    //if (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Shape))
                                    //{
                                    pr.ParagraphFormat.Style = Captionstyles;
                                    Fixcaption = true;
                                    //}
                                }
                            }
                        }
                        foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                        {
                            if (TableSeqFieldStart.ParentParagraph.NodeType == NodeType.Paragraph)
                            {
                                Paragraph pr = (Paragraph)TableSeqFieldStart.ParentParagraph;
                                if ((pr.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar)) && (TableSeqFieldStart.GetField().GetFieldCode().Contains("SEQ Figure")) && pr.ParagraphFormat.StyleIdentifier.ToString() != rObj.Check_Parameter)
                                {
                                    Fixcaption = true;
                                    pr.ParagraphFormat.Style = Captionstyles;

                                }
                            }
                        }

                        if (Fixcaption == true)
                        {

                            //rObj.QC_Result = "Failed";
                            rObj.Is_Fixed = 1;
                            rObj.Comments = rObj.Comments + ". Fixed";
                            rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";

                        }
                        else
                        {
                            rObj.QC_Result = "Passed";
                            //rObj.Comments = "All figures titles are in " + rObj.Check_Parameter + " style";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "No Figure titles are present in the document";
                    }
                }
                rObj.FIX_START_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }
        /// <summary>
        /// Move Table title and caption into caption row - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void ThakedaCheckmovetablecaptionintocaptionrow(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool Allsubchecks = false;
            bool fixFlag = false;
            bool Notfixflag = false;
            bool Notusercaptinflag = false;
            string pagenumber = string.Empty;
            List<int> lst = new List<int>();
            List<int> pgnumlst = new List<int>();
            List<int> Notusercaptinlst = new List<int>();
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                //doc.Save(rObj.DestFilePath);
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE")) && ((FieldStart)x).FieldType == FieldType.FieldSequence && !((FieldStart)x).ParentParagraph.IsInCell && ((FieldStart)x).ParentParagraph.NextSibling != null).ToList();
                List<Node> paragraphsLst = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).IsInCell && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption)).ToList();
                foreach (Paragraph paragraph in paragraphsLst)
                {
                    bool CanFix = true;
                    Paragraph pr = paragraph;
                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                    if (Fieldseq.Count == 0 && (pr.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || pr.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || pr.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || pr.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE")) && pr.NextSibling != null)
                    {
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table)
                            {
                                Table tbl = (Table)pr.NextSibling;
                                List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();


                                if ((!paragraph.NextSibling.GetText().Contains("SEQ Table") || !paragraph.NextSibling.GetText().Contains("SEQ Text_Table") || !paragraph.NextSibling.GetText().Contains("SEQ Summary_Table")) && ((paragraph.GetText().ToUpper().StartsWith("TABLE") || paragraph.GetText().ToUpper().StartsWith("TEXT") || paragraph.GetText().ToUpper().StartsWith("SUMMARY")) && (!paragraph.GetText().Contains("SEQ Table") || !paragraph.GetText().Contains("SEQ Text_Table") || !paragraph.GetText().Contains("SEQ Summary_Table"))))
                                {
                                    if (fstart.Count == 0)
                                    {
                                        if (layout.GetStartPageIndex(paragraph) != 0)
                                        {
                                            fixFlag = true;
                                            CanFix = true;
                                            if (paragraph.LastChild != null)
                                            {
                                                lst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                            }
                                            else
                                            {
                                                lst.Add(layout.GetStartPageIndex(paragraph));
                                                pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                            }
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        CanFix = false;
                                        break;
                                    }
                                }
                                else
                                {
                                    Notusercaptinflag = true;
                                }

                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                CanFix = false;
                                pr = (Paragraph)pr.NextSibling;
                            }
                            else
                            {
                                CanFix = false;
                                break;
                            }
                        }
                        if (!CanFix)
                        {
                            if (layout.GetStartPageIndex(paragraph) != 0 && !Notusercaptinflag)
                            {
                                Notfixflag = true;
                                if (paragraph.LastChild != null)
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph.LastChild));
                                }
                                else
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(paragraph));
                                    pgnumlst.Add(layout.GetStartPageIndex(paragraph));
                                }

                            }
                        }
                    }
                }
                foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                {
                    bool CanFix = true;
                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    if (pr.GetText().TrimStart().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || pr.GetText().TrimStart().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || pr.GetText().TrimStart().ToUpper().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || pr.GetText().TrimStart().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || pr.GetText().TrimStart().ToUpper().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                    {
                        CanFix = false;
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table)) // condition
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table || pr.NextSibling.NodeType == NodeType.BookmarkEnd)
                            {
                                if (pr.NextSibling.NodeType == NodeType.BookmarkEnd)
                                {
                                    Table tbl = (Table)pr.NextSibling.NextSibling;
                                    List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                                    if (fstart.Count == 0)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                        {
                                            fixFlag = true;
                                            CanFix = true;
                                            if (pr.LastChild != null)
                                            {
                                                lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                            }
                                            else
                                            {
                                                lst.Add(layout.GetStartPageIndex(pr));
                                                pgnumlst.Add(layout.GetStartPageIndex(pr));
                                            }
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        CanFix = false;
                                        break;
                                    }
                                }
                                else
                                {
                                    Table tbl = (Table)pr.NextSibling;
                                    List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                                    if (fstart.Count == 0)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                        {
                                            fixFlag = true;
                                            CanFix = true;
                                            if (pr.LastChild != null)
                                            {
                                                lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                                pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                            }
                                            else
                                            {
                                                lst.Add(layout.GetStartPageIndex(pr));
                                                pgnumlst.Add(layout.GetStartPageIndex(pr));
                                            }
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        CanFix = false;
                                        break;
                                    }
                                }
                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                CanFix = false;
                                pr = (Paragraph)pr.NextSibling;
                            }
                            else
                            {
                                CanFix = false;
                                break;
                            }
                        }
                        if (!CanFix)
                        {
                            if (layout.GetStartPageIndex(pr) != 0 && !Notusercaptinflag)
                            {
                                Notfixflag = true;
                                if (pr.LastChild != null)
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                    pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                }
                                else
                                {
                                    Notusercaptinlst.Add(layout.GetStartPageIndex(pr));
                                    pgnumlst.Add(layout.GetStartPageIndex(pr));
                                }

                            }
                        }
                    }
                    else
                    {
                        if (layout.GetStartPageIndex(pr) != 0)
                        {
                            Notfixflag = true;
                            if (pr.LastChild != null)
                            {
                                Notusercaptinlst.Add(layout.GetStartPageIndex(pr.LastChild));
                                pgnumlst.Add(layout.GetStartPageIndex(pr.LastChild));
                            }
                            else
                            {
                                Notusercaptinlst.Add(layout.GetStartPageIndex(pr));
                                pgnumlst.Add(layout.GetStartPageIndex(pr));
                            }

                        }
                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (TableSeqFieldStarts.Count == 0 && paragraphsLst.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No table captions found";
                }
                else if (lst.Count == 0 && Notusercaptinlst.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All table captions are in right position";
                }
                else if (fixFlag || Notfixflag)
                {
                    Allsubchecks = true;
                    rObj.QC_Result = "Failed";
                    List<int> lst2 = Notusercaptinlst.Distinct().ToList();
                    if (lst2.Count > 0 && !Notusercaptinflag)
                    {
                        lst2.Sort();
                        pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.Comments = "Table captions are not in right position in: " + pagenumber + ". These cannot be fixed";
                    }
                    List<int> lst3 = lst.Distinct().ToList();
                    if (lst3.Count > 0)
                    {
                        lst3.Sort();
                        pagenumber = string.Join(", ", lst3.ToArray());
                        if (lst2.Count > 0)
                            rObj.Comments = rObj.Comments + " and Table captions are not in right position in: " + pagenumber;
                        else
                            rObj.Comments = "Table captions are not in right position in: " + pagenumber;
                    }

                    // added for page number report
                    List<PageNumberReport> pglst = new List<PageNumberReport>();
                    List<int> pgnumlstsrt = pgnumlst.Distinct().ToList();
                    pgnumlstsrt.Sort();
                    int fixedflag = 0;
                    int notfixedflag = 0;
                    string pgcomments = string.Empty;
                    for (int i = 0; i < pgnumlstsrt.Count; i++)
                    {
                        fixedflag = 0;
                        notfixedflag = 0;
                        PageNumberReport pgObj = new PageNumberReport();
                        pgObj.PageNumber = Convert.ToInt32(pgnumlstsrt[i]);

                        if (lst2.Contains(pgnumlstsrt[i]))
                            notfixedflag = 1;
                        if (lst3.Contains(pgnumlstsrt[i]))
                            fixedflag = 1;

                        if (notfixedflag == 1 && fixedflag == 1)
                        {
                            pgObj.Comments = "Few table captions are not in right position and cannot be fixed. Few table captions are not in right position";
                            pglst.Add(pgObj);
                        }
                        else if (notfixedflag == 1)
                        {
                            pgObj.Comments = "Table captions are not in right position. These cannot be fixed";
                            pglst.Add(pgObj);
                        }
                        else if (fixedflag == 1)
                        {
                            pgObj.Comments = "Table captions are not in right position";
                            pglst.Add(pgObj);
                        }
                    }
                    if (pgnumlstsrt != null && pgnumlstsrt.Count > 0)
                        rObj.CommentsPageNumLst = pglst;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "All table captions are in right position";
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        /// <summary>
        /// Move Table title and caption into caption row - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void ThakedaFixmovetablecaptionintocaptionrow(RegOpsQC rObj, Document doc)
        {
            bool FixFlag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                DocumentBuilder builder = new DocumentBuilder(doc);
                //code to get caption paragraphs from the document.
                List<Node> paragraphsLst = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).IsInCell && (((Paragraph)x).ParagraphFormat.StyleName.ToUpper() == "CAPTION" || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Caption)).ToList();
                //doc.TrackRevisions = true;
                //doc.StartTrackRevisions(" ");
                foreach (Paragraph paragraph in paragraphsLst)
                {
                    Paragraph pr = paragraph;
                    string rer = pr.Range.Text;
                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                    if (Fieldseq.Count == 0 && (pr.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || pr.GetText().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || pr.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || pr.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE")) && pr.NextSibling != null)
                    {
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table)
                            {
                                Table tbl = (Table)pr.NextSibling;
                                List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                                if (fstart.Count == 0)
                                {

                                    if (paragraph.PreviousSibling != null && paragraph.PreviousSibling.NodeType == NodeType.Table)
                                    {//code to add enter key between two tables before moving into caption row
                                        Paragraph par = new Paragraph(doc);
                                        paragraph.ParentNode.InsertBefore(par, paragraph);
                                    }
                                    if (paragraph.Range.Text.Contains(ControlChar.PageBreakChar) || paragraph.Range.Text.Contains(ControlChar.PageBreak))
                                    { //code to add page break when there is a page break before caption row.
                                        DocumentBuilder builder1 = new DocumentBuilder(doc);
                                        Paragraph par = new Paragraph(doc);
                                        paragraph.ParentNode.InsertBefore(par, paragraph);
                                        builder1.MoveTo(par);
                                        builder1.InsertBreak(BreakType.PageBreak);
                                    }
                                    Row clonedRow = (Row)tbl.Rows[0].Clone(true);
                                    clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                    int count = clonedRow.Cells.Count();
                                    double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                    for (int i = 1; i < count; i++)
                                    {
                                        clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                        NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                    }
                                    tbl.Rows.Insert(0, clonedRow);
                                    Row rw = tbl.FirstRow;
                                    foreach (Cell cel in rw)
                                    {
                                        cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                        cel.CellFormat.Borders.Top.LineWidth = 0;
                                        cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                        cel.CellFormat.Borders.Left.LineWidth = 0;
                                        cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                        cel.CellFormat.Borders.Right.LineWidth = 0;
                                        // cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.Single;
                                        // cel.CellFormat.Borders.Bottom.LineWidth = 1;
                                    }
                                    tbl.FirstRow.FirstCell.RemoveAllChildren();
                                    tbl.FirstRow.FirstCell.EnsureMinimum();
                                    tbl.FirstRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                    tbl.FirstRow.FirstCell.Paragraphs.Add(paragraph);
                                    tbl.FirstRow.FirstCell.Paragraphs[0].Remove();
                                    //if (tbl.AllowAutoFit != true)
                                    //  tbl.FirstRow.FirstCell.CellFormat.Width = NewCellWidth;
                                    tbl.FirstRow.FirstCell.CellFormat.WrapText = true;
                                    tbl.FirstRow.RowFormat.HeightRule = HeightRule.Auto;
                                    tbl.FirstRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                    tbl.FirstRow.RowFormat.HeadingFormat = true;
                                    //tbl.PreviousSibling.Remove();

                                    FixFlag = true;
                                    break;

                                }
                                else
                                    break;
                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                pr = (Paragraph)pr.NextSibling;
                            else
                                break;
                        }
                    }
                }
                //code to get sequencefield code paragraphs
                List<Node> TableSeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                foreach (FieldStart TableSeqFieldStart in TableSeqFieldStarts)
                {
                    Paragraph pr = TableSeqFieldStart.ParentParagraph;
                    Paragraph pr1 = TableSeqFieldStart.ParentParagraph;
                    if (pr.GetText().TrimStart().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || pr.GetText().TrimStart().ToUpper().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || pr.GetText().TrimStart().ToUpper().TrimStart().StartsWith("TEXT" + ControlChar.SpaceChar + "TABLE") || pr.GetText().TrimStart().ToUpper().StartsWith("TEXT" + ControlChar.NonBreakingSpaceChar + "TABLE") || pr.GetText().TrimStart().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || pr.GetText().TrimStart().ToUpper().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))
                    {
                        while (pr.NextSibling != null && (pr.NextSibling.Range.Text.Trim() == "" || pr.NextSibling.Range.Text == ControlChar.ParagraphBreak.ToString() || pr.NextSibling.NodeType == NodeType.Table))
                        {
                            if (pr.NextSibling.NodeType == NodeType.Table)
                            {
                                if (pr.NextSibling.NodeType == NodeType.Table)
                                {
                                    Table tbl = (Table)pr.NextSibling;
                                    List<Node> fstart = tbl.FirstRow.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE") || ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE"))).ToList();
                                    if (fstart.Count == 0)
                                    {
                                        if (pr.PreviousSibling != null && pr.PreviousSibling.NodeType == NodeType.Table)
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            pr.ParentNode.InsertBefore(par, pr);
                                        }
                                        if (pr.Range.Text.Contains(ControlChar.PageBreakChar) || pr.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            DocumentBuilder builder1 = new DocumentBuilder(doc);
                                            Paragraph par = new Paragraph(doc);
                                            pr.ParentNode.InsertBefore(par, pr);
                                            builder1.MoveTo(par);
                                            builder1.InsertBreak(BreakType.PageBreak);
                                        }
                                        Row clonedRow = (Row)tbl.Rows[0].Clone(true);
                                        clonedRow.Cells[0].CellFormat.HorizontalMerge = CellMerge.First;
                                        int count = clonedRow.Cells.Count();
                                        double NewCellWidth = clonedRow.Cells[0].CellFormat.Width;
                                        for (int i = 1; i < count; i++)
                                        {
                                            clonedRow.Cells[i].CellFormat.HorizontalMerge = CellMerge.Previous;
                                            NewCellWidth += clonedRow.Cells[i].CellFormat.Width;
                                        }
                                        tbl.Rows.Insert(0, clonedRow);
                                        Row rw = tbl.FirstRow;
                                        foreach (Cell cel in rw)
                                        {
                                            cel.CellFormat.Borders.Top.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Top.LineWidth = 0;
                                            cel.CellFormat.Borders.Left.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Left.LineWidth = 0;
                                            cel.CellFormat.Borders.Right.LineStyle = LineStyle.None;
                                            cel.CellFormat.Borders.Right.LineWidth = 0;
                                            //cel.CellFormat.Borders.Bottom.LineStyle = LineStyle.Single;
                                            //cel.CellFormat.Borders.Bottom.LineWidth = 1;
                                        }
                                        tbl.FirstRow.FirstCell.RemoveAllChildren();
                                        tbl.FirstRow.FirstCell.EnsureMinimum();
                                        tbl.FirstRow.FirstCell.FirstParagraph.ParagraphFormat.ClearFormatting();
                                        tbl.FirstRow.FirstCell.Paragraphs.Add(pr1);
                                        tbl.FirstRow.FirstCell.Paragraphs[0].Remove();
                                        //if (tbl.AllowAutoFit != true)
                                        //  tbl.FirstRow.FirstCell.CellFormat.Width = NewCellWidth;  
                                        tbl.FirstRow.FirstCell.CellFormat.WrapText = true;
                                        tbl.FirstRow.RowFormat.HeightRule = HeightRule.Auto;
                                        tbl.FirstRow.FirstCell.CellFormat.Shading.ClearFormatting();
                                        tbl.FirstRow.RowFormat.HeadingFormat = true;
                                        FixFlag = true;
                                        break;
                                    }
                                }

                            }
                            if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                                pr = (Paragraph)pr.NextSibling;
                            else
                                break;
                        }
                    }
                }
                if (FixFlag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    if (rObj.CommentsPageNumLst != null)
                    {
                        foreach (var pg in rObj.CommentsPageNumLst)
                        {
                            pg.Comments = pg.Comments + ". Fixed";
                        }
                    }
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void FigureStyle(RegOpsQC rObj, Document doc)
        {
            try
            {
                bool StatusFlag = false;
                Style Captionstyles = null;
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection shapes = doc.GetChildNodes(NodeType.Shape, true);
                List<int> PgLst = new List<int>();
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter.ToString()).FirstOrDefault();
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "File doesn't has" + rObj.Check_Parameter + "style";
                }
                else
                {
                    foreach (Section sec in doc.GetChildNodes(NodeType.Section, true))
                    {
                        foreach (Shape shape in sec.Body.GetChildNodes(NodeType.Shape, true))
                        {
                            if (shape.HasImage)
                            {
                                Paragraph p1 = shape.ParentParagraph;
                                if (p1.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                {
                                    StatusFlag = true;
                                    PgLst.Add(layout.GetStartPageIndex(shape));
                                }
                            }
                        }
                    }
                    if (StatusFlag == true)
                    {
                        if (PgLst.Count > 0)
                        {
                            List<int> PgLst1 = PgLst.Distinct().ToList();
                            PgLst1.Sort();
                            string pagenumber = string.Join(", ", PgLst1.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Figures with No \"" + rObj.Check_Parameter + "\" style are in: " + pagenumber;
                        }
                        else
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "There are Figures with No \"" + rObj.Check_Parameter + "\" style";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "All Figures are in \"" + rObj.Check_Parameter + "\" style";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }
        public void FigureStyleFix(RegOpsQC rObj, Document doc)
        {
            try
            {
                bool StatusFlag = false;
                Style Captionstyles = null;
                LayoutCollector layout = new LayoutCollector(doc);
                NodeCollection shapes = doc.GetChildNodes(NodeType.Shape, true);
                List<int> PgLst = new List<int>();
                StyleCollection stylist = doc.Styles;
                Captionstyles = stylist.Where(x => x.Name == rObj.Check_Parameter.ToString()).FirstOrDefault();
                if (Captionstyles == null)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "File doesn't has" + rObj.Check_Parameter + "style";
                }
                else
                {
                    foreach (Section sec in doc.GetChildNodes(NodeType.Section, true))
                    {
                        foreach (Shape shape in sec.Body.GetChildNodes(NodeType.Shape, true))
                        {
                            if (shape.HasImage)
                            {
                                Paragraph p1 = shape.ParentParagraph;
                                if (p1.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                {
                                    StatusFlag = true;
                                    p1.ParagraphFormat.StyleName = rObj.Check_Parameter;
                                }
                            }
                        }
                    }
                    if (StatusFlag == true)
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "All Figures are in \"" + rObj.Check_Parameter + "\" style";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void RemoveFigureBorders(RegOpsQC rObj, Document doc)
        {
            bool StatusFlag = false;
            LayoutCollector layout = new LayoutCollector(doc);
            NodeCollection shapes = doc.GetChildNodes(NodeType.Shape, true);
            List<int> PgLst = new List<int>();
            List<int> PgLst2 = new List<int>();
            try
            {
                foreach (Shape sh in shapes)
                {
                    PgLst.Add(layout.GetStartPageIndex(sh));
                }
                foreach (Shape sh in shapes)
                {
                    int shap = 0;
                    foreach (int pages in PgLst)
                    {
                        if (pages == layout.GetStartPageIndex(sh))
                        {
                            shap++;
                        }
                    }
                    if (shap == 1)
                    {
                        if (sh.ImageData.Borders.LineStyle != LineStyle.None)
                        {
                            //sh.ImageData.Borders.LineStyle = LineStyle.None;
                            PgLst2.Add(layout.GetStartPageIndex(sh));
                            StatusFlag = true;
                        }
                        if (sh.Stroke.On == true)
                        {
                            //sh.Stroke.On = false;
                            PgLst2.Add(layout.GetStartPageIndex(sh));
                            StatusFlag = true;
                        }
                    }
                }
                if (StatusFlag == true)
                {
                    if (PgLst.Count > 0)
                    {
                        List<int> PgLst1 = PgLst2.Distinct().ToList();
                        PgLst1.Sort();
                        string pagenumber = string.Join(", ", PgLst1.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Figure contains borders in: " + pagenumber;
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Page contains one figure";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void CheckTableAndSummaryTableAndFigureAndSummaryFigurenumbaring(RegOpsQC rObj, Document doc)
        {
            bool CrossreferenceFigure = false;
            bool CrossreferenceTable = false;
            bool Flag = false;
            bool Flag1 = false;
            bool Flag2 = false;
            bool Flag3 = false;
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                FindReplaceOptions options = new FindReplaceOptions();
                options.MatchCase = true;
                options.FindWholeWordsOnly = false;
                options.Direction = FindReplaceDirection.Forward;
                List<Node> Crossreferenceidentify = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().Contains("CROSS-REFERENCES"))).ToList();
                if (Crossreferenceidentify.Count > 0)
                {
                    List<Node> removeCharspaceintheparagraph = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))).ToList();
                    List<Node> Tableparagraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("CROSS-REFERENCES"))).ToList();
                    if (Tableparagraphs.Count > 0)
                    {
                        Flag3 = true;
                        foreach (Paragraph paragraph in Tableparagraphs)
                        {
                            if (paragraph.Range.Text.Contains("CROSS-REFERENCES") && paragraph.ParagraphFormat.Style.Name == "Heading 1")
                            {
                                Flag = true;
                            }
                            if (Flag == false && (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE" + ControlChar.SpaceChar)))
                            {
                                if (paragraph.IsInCell)
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceTable = true;
                                }
                                else
                                {
                                    if (paragraph.NextSibling.NodeType == NodeType.Table)
                                    {
                                            lst.Add(layout.GetStartPageIndex(paragraph));
                                        CrossreferenceTable = true;
                                    }
                                }

                            }
                            if (Flag == true && ((paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar))))
                            {
                                if (paragraph.IsInCell)
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceTable = true;
                                }
                                else
                                {
                                    if (paragraph.NextSibling.NodeType == NodeType.Table)
                                    {
                                            lst.Add(layout.GetStartPageIndex(paragraph));
                                        CrossreferenceTable = true;
                                    }
                                }
                            }
                        }

                        foreach (Paragraph paragraph in Tableparagraphs)
                        {
                            if (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE" + ControlChar.NonBreakingSpaceChar))
                            {
                                    lst.Add(layout.GetStartPageIndex(paragraph));
                                CrossreferenceTable = true;
                            }
                        }
                    }
                    List<Node> Figfureparagraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("CROSS-REFERENCES"))).ToList();
                    if (Figfureparagraphs.Count > 0)
                    {
                        Flag3 = true;
                        foreach (Paragraph paragraph in Figfureparagraphs)
                        {
                            if (paragraph.ParagraphFormat.Style.Font.Bold == true && paragraph.Range.Text.Contains("CROSS-REFERENCES") && paragraph.ParagraphFormat.Style.Name == "Heading 1")
                            {
                                Flag1 = true;
                            }
                            if (Flag1 == false && ((paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE" + ControlChar.SpaceChar))))
                            {
                                if (paragraph.NextSibling.NodeType == NodeType.Paragraph)
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceFigure = true;
                                }
                                else
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceFigure = true;
                                }

                            }
                            if (Flag1 == true && ((paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar))))
                            {
                                if (paragraph.NextSibling.NodeType == NodeType.Paragraph)
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceFigure = true;
                                }
                                else
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceFigure = true;
                                }

                            }
                        }
                        foreach (Paragraph paragraph in Figfureparagraphs)
                        {
                            if (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE" + ControlChar.TabChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE" + ControlChar.TabChar))
                            {
                                    lst.Add(layout.GetStartPageIndex(paragraph));
                                CrossreferenceFigure = true;
                            }
                        }
                    }
                    List<Node> betweenAppendixAndCrossreferenceparagraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("CROSS-REFERENCES") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("APPENDIX") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))).ToList();
                    if (betweenAppendixAndCrossreferenceparagraphs.Count > 0)
                    {
                        Flag3 = true;
                        foreach (Paragraph paragraph in betweenAppendixAndCrossreferenceparagraphs)
                        {
                            if (paragraph.ParagraphFormat.Style.Font.Bold == true && paragraph.Range.Text.Contains("CROSS-REFERENCES") && paragraph.ParagraphFormat.Style.Name == "Heading 1")
                            {
                                Flag2 = true;
                            }
                            if (Flag2 == true && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar)))
                            {
                                if (paragraph.IsInCell)
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceTable = true;
                                }
                                else
                                {
                                    if (paragraph.NextSibling.NodeType == NodeType.Table)
                                    {
                                            lst.Add(layout.GetStartPageIndex(paragraph));
                                        CrossreferenceTable = true;
                                    }
                                }

                            }
                            if (Flag2 == true && (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar)))
                            {
                                if (paragraph.NextSibling.NodeType == NodeType.Paragraph)
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceFigure = true;
                                }
                                else
                                {
                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                    CrossreferenceFigure = true;
                                }

                            }
                            if (Flag2 && paragraph.GetText().ToUpper().TrimStart().Contains("APPENDIX"))
                            {
                                break;
                            }
                        }
                    }
                    List<int> lst2 = lst.Distinct().ToList();
                    if (CrossreferenceTable || CrossreferenceFigure)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Cross Reference Above Summary Table or Below Table or TabChar Not in(Summary Table,Table) in" + Pagenumber;
                        rObj.CommentsWOPageNum = "Cross Reference Above Summary Table or Below Table or TabChar Not in(Summary Table,Table)";
                        rObj.PageNumbersLst = lst2;
                    }
                    else if (!Flag3)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "No table and figure in the document";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No cross reference name in the document";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixTableAndSummaryTableAndFigureAndSummaryFigurenumbaring(RegOpsQC rObj, Document doc)
        {
            bool CrossreferenceFigure = false;
            bool CrossreferenceTable = false;
            bool Flag = false;
            bool Flag1 = false;
            bool Flag2 = false;
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                FindReplaceOptions options = new FindReplaceOptions();
                options.MatchCase = true;
                options.FindWholeWordsOnly = false;
                options.Direction = FindReplaceDirection.Forward;
                List<Node> removeCharspaceintheparagraph = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))).ToList();
                if (removeCharspaceintheparagraph.Count > 0)
                {
                    foreach (Paragraph paragraph in removeCharspaceintheparagraph)
                    {
                        paragraph.Range.Replace("\t", ".");
                    }
                }
                List<Node> Tableparagraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("CROSS-REFERENCES"))).ToList();
                if (Tableparagraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in Tableparagraphs)
                    {
                        if (paragraph.Range.Text.Contains("CROSS-REFERENCES") && paragraph.ParagraphFormat.Style.Name == "Heading 1")
                        {
                            Flag = true;
                        }
                        if (Flag == false && (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE" + ControlChar.SpaceChar)))
                        {
                            if (paragraph.IsInCell)
                            {
                                paragraph.Range.Replace("Summary_Table", "Table");
                                paragraph.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, "Table" + ControlChar.NonBreakingSpaceChar);
                                paragraph.Range.Replace("Summary" + ControlChar.SpaceChar + "Table" + ControlChar.SpaceChar, "Table" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceTable = true;
                            }
                            else
                            {
                                if (paragraph.NextSibling.NodeType == NodeType.Table)
                                {
                                    paragraph.Range.Replace("Summary_Table", "Table");
                                    paragraph.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, "Table" + ControlChar.NonBreakingSpaceChar);
                                    paragraph.Range.Replace("Summary" + ControlChar.SpaceChar + "Table" + ControlChar.SpaceChar, "Table" + ControlChar.NonBreakingSpaceChar);
                                    CrossreferenceTable = true;
                                }
                            }

                        }
                        if (Flag == true && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar)))
                        {
                            if (paragraph.IsInCell)
                            {
                                paragraph.Range.Replace("Table" + ControlChar.SpaceChar, "Summary_Table" + ControlChar.SpaceChar);
                                paragraph.Range.Replace("Table" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceTable = true;
                            }
                            else
                            {
                                if (paragraph.NextSibling.NodeType == NodeType.Table)
                                {
                                    paragraph.Range.Replace("Table" + ControlChar.SpaceChar, "Summary_Table" + ControlChar.NonBreakingSpaceChar);
                                    paragraph.Range.Replace("Table" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar);
                                    CrossreferenceTable = true;
                                }
                            }
                        }
                    }
                    foreach (Paragraph paragraph in Tableparagraphs)
                    {
                        if (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar))
                        {
                            paragraph.Range.Replace("Table" + ControlChar.NonBreakingSpaceChar, "Table" + ControlChar.TabChar);
                            paragraph.Range.Replace("Table" + ControlChar.SpaceChar, "Table" + ControlChar.TabChar);
                            paragraph.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.TabChar);
                            paragraph.Range.Replace("Summary" + ControlChar.SpaceChar + "Table" + ControlChar.SpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.TabChar);
                            CrossreferenceTable = true;
                        }
                    }
                }
                List<Node> Figfureparagraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("CROSS-REFERENCES"))).ToList();
                if (Figfureparagraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in Figfureparagraphs)
                    {
                        if (paragraph.Range.Text.Contains("CROSS-REFERENCES") && paragraph.ParagraphFormat.Style.Name == "Heading 1")
                        {
                            Flag1 = true;
                        }
                        if (Flag1 == false && (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE" + ControlChar.SpaceChar)))
                        {
                            if (paragraph.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                paragraph.Range.Replace("Summary_Figure", "Figure");
                                paragraph.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, "Figure" + ControlChar.NonBreakingSpaceChar);
                                paragraph.Range.Replace("Summary" + ControlChar.SpaceChar + "Figure" + ControlChar.SpaceChar, "Figure" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceFigure = true;
                            }
                            else
                            {
                                paragraph.Range.Replace("Summary_Figure", "Figure");
                                paragraph.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, "Figure" + ControlChar.NonBreakingSpaceChar);
                                paragraph.Range.Replace("Summary" + ControlChar.SpaceChar + "Figure" + ControlChar.SpaceChar, "Figure" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceFigure = true;
                            }

                        }
                        if (Flag1 == true && (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar)))
                        {
                            if (paragraph.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                paragraph.Range.Replace("Figure" + ControlChar.SpaceChar, "Summary_Figure" + ControlChar.SpaceChar);
                                paragraph.Range.Replace("Figure" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceFigure = true;
                            }
                            else
                            {
                                paragraph.Range.Replace("Figure", "Summary_Figure");
                                paragraph.Range.Replace("Figure" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceFigure = true;
                            }

                        }
                    }
                    foreach (Paragraph paragraph in Figfureparagraphs)
                    {
                        if (paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar))
                        {
                            paragraph.Range.Replace("Figure" + ControlChar.NonBreakingSpaceChar, "Figure" + ControlChar.TabChar);
                            paragraph.Range.Replace("Figure" + ControlChar.SpaceChar, "Figure" + ControlChar.TabChar);
                            paragraph.Range.Replace("Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.TabChar);
                            paragraph.Range.Replace("Summary" + ControlChar.SpaceChar + "Figure" + ControlChar.SpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.TabChar);
                            CrossreferenceFigure = true;
                        }
                    }
                }
                List<Node> betweenAppendixAndCrossreferenceparagraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("CROSS-REFERENCES") || ((Paragraph)x).GetText().ToUpper().TrimStart().Contains("APPENDIX") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE"))).ToList();
                if (betweenAppendixAndCrossreferenceparagraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in betweenAppendixAndCrossreferenceparagraphs)
                    {
                        if (paragraph.Range.Text.Contains("CROSS-REFERENCES") && paragraph.ParagraphFormat.Style.Name == "Heading 1")
                        {
                            Flag2 = true;
                        }
                        if (Flag2 == true && (paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar)))
                        {
                            if (paragraph.IsInCell)
                            {
                                paragraph.Range.Replace("Table" + ControlChar.SpaceChar, "Summary_Table" + ControlChar.SpaceChar);
                                paragraph.Range.Replace("Table" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceTable = true;
                            }
                            else
                            {
                                if (paragraph.NextSibling.NodeType == NodeType.Table)
                                {
                                    paragraph.Range.Replace("Table" + ControlChar.SpaceChar, "Summary_Table" + ControlChar.SpaceChar);
                                    paragraph.Range.Replace("Table" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Table" + ControlChar.NonBreakingSpaceChar);
                                    CrossreferenceTable = true;
                                }
                            }

                        }
                        if (Flag2 == true && (paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar)))
                        {
                            if (paragraph.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                paragraph.Range.Replace("Figure" + ControlChar.SpaceChar, "Summary_Figure" + ControlChar.SpaceChar);
                                paragraph.Range.Replace("Figure" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceFigure = true;
                            }
                            else
                            {
                                paragraph.Range.Replace("Figure" + ControlChar.SpaceChar, "Summary_Figure" + ControlChar.SpaceChar);
                                paragraph.Range.Replace("Figure" + ControlChar.NonBreakingSpaceChar, "Summary" + ControlChar.NonBreakingSpaceChar + "Figure" + ControlChar.NonBreakingSpaceChar);
                                CrossreferenceFigure = true;
                            }

                        }
                        if (Flag2 && paragraph.GetText().ToUpper().TrimStart().Contains("APPENDIX"))
                        {
                            break;
                        }
                    }
                }
                if (CrossreferenceFigure || CrossreferenceTable)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        public void CheckTableHeaderStyle(RegOpsQC rObj, Document doc)
        {
            bool Flag = false;
            bool Flag1 = false;
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                Style ExistingStyle = null;
                ExistingStyle = doc.Styles.Where(x => ((Style)x).Name == rObj.Check_Parameter.ToString() || ((Style)x).StyleIdentifier.ToString() == rObj.Check_Parameter.ToString()).FirstOrDefault<Style>();
                if (ExistingStyle != null)
                {
                    if (ExistingStyle.Type.ToString() == "Paragraph")
                    {
                        if (tables.Count > 0)
                        {
                            foreach (Table table in tables)
                            {
                                foreach (Row row in table.Rows)
                                {
                                    if (row.IsFirstRow && row.Range.Text.ToUpper().Contains("SEQ TABLE") || row.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || row.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        foreach (Cell cell in row)
                                        {
                                            foreach (Paragraph para in cell.Paragraphs)
                                            {
                                                if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                                {
                                                    if (layout.GetStartPageIndex(para) != 0)
                                                        lst.Add(layout.GetStartPageIndex(para));
                                                    Flag = true;
                                                }
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            rObj.QC_Result = "Passed";
                            rObj.Comments = "Tables are not existing in document";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "Given style is not applicable in paragraph";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Given style is not existing in document";
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (Flag)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table header style is not proper: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table header style is not proper";
                    rObj.PageNumbersLst = lst2;

                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixTableHeaderStyle(RegOpsQC rObj, Document doc)
        {
            bool Flag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                Style ExistingStyle = null;
                ExistingStyle = doc.Styles.Where(x => ((Style)x).Name == rObj.Check_Parameter.ToString() || ((Style)x).StyleIdentifier.ToString() == rObj.Check_Parameter.ToString()).FirstOrDefault<Style>();
                if (ExistingStyle != null)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            if (row.IsFirstRow && row.Range.Text.ToUpper().Contains("SEQ TABLE") || row.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || row.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                            {
                                continue;
                            }
                            else
                            {
                                foreach (Cell cell in row)
                                {
                                    foreach (Paragraph para in cell.Paragraphs)
                                    {
                                        if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                        {
                                            para.ParagraphFormat.StyleName = rObj.Check_Parameter;
                                            Flag = true;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Given style is not existing in document";
                }
                if (Flag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void CheckTableBodyStyle(RegOpsQC rObj, Document doc)
        {
            bool isFirstRowTitle = false;
            bool Flag = false;
            bool Flag1 = false;
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                Style ExistingStyle = null;
                ExistingStyle = doc.Styles.Where(x => ((Style)x).Name == rObj.Check_Parameter.ToString() || ((Style)x).StyleIdentifier.ToString() == rObj.Check_Parameter.ToString()).FirstOrDefault<Style>();
                if (ExistingStyle != null)
                {
                    if (ExistingStyle.Type.ToString() == "Paragraph")
                    {
                        if (tables.Count > 0)
                        {
                            foreach (Table table in tables)
                            {
                                foreach (Row row in table.Rows)
                                {
                                    if (row.IsFirstRow && row.Range.Text.ToUpper().Contains("SEQ TABLE") || row.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || row.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                                    {
                                        isFirstRowTitle = true;
                                        continue;
                                    }
                                    else if (isFirstRowTitle)
                                    {
                                        isFirstRowTitle = false;
                                        continue;
                                    }
                                    else if (!isFirstRowTitle)
                                    {
                                        foreach (Cell cell in row)
                                        {
                                            foreach (Paragraph para in cell.Paragraphs)
                                            {
                                                if (!row.IsLastRow)
                                                {
                                                    if (!row.IsFirstRow)
                                                    {
                                                        if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                                        {
                                                            if (layout.GetStartPageIndex(para) != 0)
                                                                lst.Add(layout.GetStartPageIndex(para));
                                                            Flag = true;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (para.ParagraphFormat.StyleName == "Footnote Text")
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                                        {
                                                            if (layout.GetStartPageIndex(para) != 0)
                                                                lst.Add(layout.GetStartPageIndex(para));
                                                            Flag = true;
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            rObj.QC_Result = "Passed";
                            rObj.Comments = "Table are not existing in document";
                        }
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "Given style is not applicable in paragraph";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Given style is not existing in document";
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (Flag)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table body style is not in proper: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table body style is not proper";
                    rObj.PageNumbersLst = lst2;

                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        public void FixTableBodyStyle(RegOpsQC rObj, Document doc)
        {
            bool isFirstRowTitle = false;
            bool Flag = false;
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                Style ExistingStyle = null;
                ExistingStyle = doc.Styles.Where(x => ((Style)x).Name == rObj.Check_Parameter.ToString() || ((Style)x).StyleIdentifier.ToString() == rObj.Check_Parameter.ToString()).FirstOrDefault<Style>();
                if (ExistingStyle != null)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            if (row.IsFirstRow && row.Range.Text.ToUpper().Contains("SEQ TABLE") || row.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || row.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                            {
                                isFirstRowTitle = true;
                                continue;
                            }
                            else if (isFirstRowTitle)
                            {
                                isFirstRowTitle = false;
                                continue;
                            }
                            else if (!isFirstRowTitle)
                            {
                                foreach (Cell cell in row)
                                {
                                    foreach (Paragraph para in cell.Paragraphs)
                                    {
                                        if (!row.IsLastRow)
                                        {
                                            if (!row.IsFirstRow)
                                            {
                                                if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                                {
                                                    para.ParagraphFormat.StyleName = rObj.Check_Parameter;
                                                    Flag = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (para.ParagraphFormat.StyleName == "Footnote Text")
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                if (para.ParagraphFormat.StyleName != rObj.Check_Parameter)
                                                {
                                                    para.ParagraphFormat.StyleName = rObj.Check_Parameter;
                                                    Flag = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Given style is not existing in document";
                }

                if (Flag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void RemoveFigureBordersFix(RegOpsQC rObj, Document doc)
        {
            bool StatusFlag = false;
            LayoutCollector layout = new LayoutCollector(doc);
            NodeCollection shapes = doc.GetChildNodes(NodeType.Shape, true);
            List<int> PgLst = new List<int>();
            List<int> PgLst2 = new List<int>();
            try
            {
                foreach (Shape sh in shapes)
                {
                    PgLst.Add(layout.GetStartPageIndex(sh));
                }
                foreach (Shape sh in shapes)
                {
                    int shap = 0;
                    foreach (int pages in PgLst)
                    {
                        if (pages == layout.GetStartPageIndex(sh))
                        {
                            shap++;
                        }
                    }
                    if (shap == 1)
                    {
                        if (sh.ImageData.Borders.LineStyle != LineStyle.None)
                        {
                            sh.ImageData.Borders.LineStyle = LineStyle.None;
                            PgLst2.Add(layout.GetStartPageIndex(sh));
                            StatusFlag = true;
                        }
                        if (sh.Stroke.On == true)
                        {
                            sh.Stroke.On = false;
                            PgLst2.Add(layout.GetStartPageIndex(sh));
                            StatusFlag = true;
                        }
                    }
                }
                if (StatusFlag == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void Figuresexceedingpagemargins(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            bool flag = false;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            Double ImageWidth;
            Double ImageHeight;
            Double targetHeight;
            Double targetWidth;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                foreach (Section sec in doc)
                {
                    PageSetup ps = sec.PageSetup;
                    Double leftmarginsize = ps.LeftMargin;
                    Double rightmarginsize = ps.RightMargin;
                    targetHeight = ps.PageHeight - ps.TopMargin - ps.BottomMargin;
                    targetWidth = ps.PageWidth - ps.LeftMargin - ps.RightMargin;
                    NodeCollection Shapes = sec.Body.GetChildNodes(NodeType.Shape, true);
                    foreach (Shape shape in Shapes)
                    {
                        if (shape.HasImage)
                        {

                            ImageWidth = Convert.ToDouble(shape.Width);
                            ImageHeight = Convert.ToDouble(shape.Height);
                            if (ImageWidth > targetWidth)
                            {
                                flag = true;
                                lst.Add(layout.GetStartPageIndex(shape));
                            }
                            else if (ImageHeight > targetHeight)
                            {
                                flag = true;
                                lst.Add(layout.GetStartPageIndex(shape));
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                }
                else
                {
                    if (lst.Count > 0)
                    {
                        List<int> lst1 = lst.Distinct().ToList();
                        lst1.Sort();
                        string Pagenumber = string.Join(", ", lst1.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "figures Exceed margins in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Figures exceed page margins";
                        rObj.PageNumbersLst = lst1;
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Figures Exceed page margins";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void FiguresexceedingpagemarginsFix(RegOpsQC rObj, Document doc)
        {
            bool flag = false;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            Double ImageWidth;
            Double ImageHeight;
            Double targetHeight;
            Double targetWidth;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                foreach (Section sec in doc)
                {
                    PageSetup ps = sec.PageSetup;
                    Double leftmarginsize = ps.LeftMargin;
                    Double rightmarginsize = ps.RightMargin;
                    targetHeight = ps.PageHeight - ps.TopMargin - ps.BottomMargin;
                    targetWidth = ps.PageWidth - ps.LeftMargin - ps.RightMargin;
                    NodeCollection Shapes = sec.Body.GetChildNodes(NodeType.Shape, true);
                    foreach (Shape shape in Shapes)
                    {
                        if (shape.HasImage)
                        {
                            ImageWidth = Convert.ToDouble(shape.Width);
                            ImageHeight = Convert.ToDouble(shape.Height);
                            if (ImageWidth > targetWidth)
                            {
                                shape.Width = targetWidth;
                                flag = true;
                            }
                            else if (ImageHeight > targetHeight)
                            {
                                shape.Height = targetHeight;
                                flag = true;
                            }
                        }
                    }
                }
                if (flag == true)
                {
                    rObj.Comments += ". Fixed.";
                    rObj.CommentsWOPageNum += ". Fixed.";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
                //doc.Save(rObj.DestFilePath);
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        //List Footnotes below table and figures check
        public void ListFootnotesTablesFigures(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string pagenumber = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                List<int> lst1 = new List<int>();
                List<int> paraMiddeleSuperscript = new List<int>();
                int i = 0;
                int j = 0;
                bool flag = false;
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> tablesList = doc.GetChildNodes(NodeType.Table, true).Where(x => ((Table)x).NextSibling != null && ((Table)x).NextSibling.NodeType == NodeType.Paragraph).ToList();
                
                foreach (Table tbl in tablesList)
                {
                    foreach (Row ree in tbl.Rows)
                    {
                        foreach (Cell cell in ree.Cells)
                        {
                            foreach (Paragraph pr in cell.Paragraphs)
                            {
                                if (!pr.Range.Text.StartsWith("\f") && (pr.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (pr.Runs.Count > 0 && pr.Runs[0].Font.Size < 10)) && layout.GetStartPageIndex(pr) != 0)
                                {
                                    i = 0;
                                    foreach (Run rn in pr.Runs)
                                    {
                                        if ((rn.Font.Superscript) && rn.Font.Size <= 10)
                                        {
                                            i++;
                                            flag = true;
                                        }
                                    }
                                    if (i > 1)
                                    {
                                        if (layout.GetStartPageIndex(pr) != 0)
                                            lst.Add(layout.GetStartPageIndex(pr));
                                    }
                                    
                                }
                            }
                        }
                    }
                }
                NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Aspose.Words.Drawing.Shape shape in figures)
                {
                    if (shape.ParentParagraph != null && shape.ParentParagraph.NextSibling != null)
                    {
                        if (shape.ParentParagraph.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)shape.ParentNode.NextSibling;
                            if (!pr1.Range.Text.StartsWith("\f") && (pr1.ParagraphFormat.StyleName.ToUpper().Contains("FOOTNOTE") || (pr1.Runs.Count > 0 && pr1.Runs[0].Font.Size < 10)) && layout.GetStartPageIndex(pr1) != 0)
                            {
                                j = 0;
                                foreach (Run rn in pr1.Runs)
                                {
                                    if ((rn.Font.Superscript) && rn.Font.Size <= 10)
                                    {
                                        j++;
                                        flag = true;
                                    }
                                }
                                if (j > 1)
                                {
                                    if (layout.GetStartPageIndex(pr1) != 0)
                                        lst.Add(layout.GetStartPageIndex(pr1));
                                }
                            }
                        }
                    }
                }
                List<int> pages = lst.Distinct<int>().ToList();
                if (pages.Count > 0)
                {
                    string pageNumbers = string.Join(", ", pages.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "List footnotes at the bottom of the table or figure with each footnote are not present in its own line in : " + pageNumbers;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void AvoidSpaceshardReturnAndTabsIinTableCellsCheck(RegOpsQC rObj, Document doc)
        {
            try
            {
                List<int> lst = new List<int>();
                bool Flag1 = false;
                string Pagenumber = string.Empty;
                rObj.QC_Result = string.Empty;
                rObj.Comments = string.Empty;
                LayoutCollector layout = new LayoutCollector(doc);
                rObj.FIX_START_TIME = DateTime.Now;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in sct.Body.GetChildNodes(NodeType.Table, true))
                    {
                        bool Flag = false;
                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell ce in row)
                            {
                                foreach (Paragraph pr in ce.Paragraphs)
                                {
                                    if (pr.Range.Text == " " || pr.Range.Text == "\t" || pr.Range.Text == "\r" || pr.Range.Text.Trim() == "\a")
                                    {
                                        if (layout.GetStartPageIndex(table) != 0)
                                            lst.Add(layout.GetStartPageIndex(table));
                                        Flag = true;
                                        Flag1 = true;
                                        break;
                                    }
                                }
                                if (Flag)
                                {
                                    break;
                                }
                            }
                            if (Flag)
                            {
                                break;
                            }
                        }
                    }
                }
                if (Flag1 == true)
                {
                    List<int> lst1 = lst.Distinct().ToList();
                    lst1.Sort();
                    Pagenumber = string.Join(", ", lst1.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table Empty cell are present in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table Empty cell are present";
                    rObj.PageNumbersLst = lst1;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void RemoveReferencedTableOrFigureAppearsOnTheSamePageCheck(RegOpsQC rObj, Document doc)
        {
            try
            {
                rObj.QC_Result = string.Empty;
                rObj.Comments = string.Empty;
                bool Flag = false;
                bool Flag1 = false;
                LayoutCollector layout = new LayoutCollector(doc);
                rObj.FIX_START_TIME = DateTime.Now;
                //TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                //List<Node> Tables = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))).ToList();
                //List<Node> Figures = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))).ToList();
                List<int> lst = new List<int>();
                List<int> lst1 = new List<int>();
                List<int> ls = new List<int>();
                List<string> cross = new List<string>();
                int ll = 0;
                int ll1 = 0;
                foreach (Paragraph para in paragraphs)
                {
                    Flag = false;
                    NodeCollection bookmarkends = para.GetChildNodes(NodeType.BookmarkEnd, true);
                    foreach (Node bookmarkend in bookmarkends)
                    {
                        if (bookmarkend.GetType().FullName == "Aspose.Words.BookmarkEnd")
                        {
                            BookmarkEnd ddd = (BookmarkEnd)bookmarkend;
                            cross.Add(ddd.Name);
                            lst.Add(layout.GetStartPageIndex(para));
                            foreach (int h in lst)
                            {
                                ll = h;
                            }
                            if (Flag == true)
                            {
                                break;
                            }
                        }
                        foreach (Field f in doc.Range.Fields)
                        {
                            if (f.Type.Equals(FieldType.FieldRef))
                            {
                                FieldRef fieldRef = (FieldRef)f;
                                if (cross.Contains(fieldRef.BookmarkName))
                                {
                                    Flag = true;
                                    cross.Clear();
                                    lst1.Add(layout.GetStartPageIndex(f.Start));
                                    foreach (int h1 in lst1)
                                    {
                                        ll1 = h1;
                                    }
                                    if (ll == ll1)
                                    {
                                        ll = 0;
                                        ll1 = 0;
                                        lst.Clear();
                                        lst1.Clear();
                                        if (layout.GetStartPageIndex(f.End) != 0)
                                            ls.Add(layout.GetStartPageIndex(f.Start));
                                        Flag1 = true;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                if (Flag1 == true)
                {
                    List<int> lst2 = ls.Distinct().ToList();
                    lst1.Sort();
                    string Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table Or Figure cross reference same page in : " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table Or Figure cross reference same page";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void RemoveReferencedTableOrFigureAppearsOnTheSamePageFix(RegOpsQC rObj, Document doc)
        {
            try
            {
                bool Flag1 = false;
                bool Flag = false;
                LayoutCollector layout = new LayoutCollector(doc);
                rObj.FIX_START_TIME = DateTime.Now;
                //TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                //List<Node> Tables = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar))).ToList();
                //List<Node> Figures = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))).ToList();
                List<int> lst = new List<int>();
                List<int> lst1 = new List<int>();
                List<string> cross = new List<string>();
                int ll = 0;
                int ll1 = 0;
                foreach (Paragraph para in paragraphs)
                {
                    Flag = false;
                    NodeCollection bookmarkends = para.GetChildNodes(NodeType.BookmarkEnd, true);
                    foreach (Node bookmarkend in bookmarkends)
                    {
                        if (bookmarkend.GetType().FullName == "Aspose.Words.BookmarkEnd")
                        {
                            BookmarkEnd ddd = (BookmarkEnd)bookmarkend;
                            cross.Add(ddd.Name);
                            lst.Add(layout.GetStartPageIndex(para));
                            foreach (int h in lst)
                            {
                                ll = h;
                            }
                            if (Flag == true)
                            {
                                break;
                            }
                        }
                        foreach (Field f in doc.Range.Fields)
                        {
                            if (f.Type.Equals(FieldType.FieldRef))
                            {
                                FieldRef fieldRef = (FieldRef)f;
                                if (cross.Contains(fieldRef.BookmarkName))
                                {
                                    Flag = true;
                                    cross.Clear();
                                    lst1.Add(layout.GetStartPageIndex(f.Start));
                                    foreach (int h1 in lst1)
                                    {
                                        ll1 = h1;
                                    }
                                    if (ll == ll1)
                                    {
                                        f.Unlink();
                                        ll = 0;
                                        ll1 = 0;
                                        lst.Clear();
                                        lst1.Clear();
                                        Flag1 = true;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                if (Flag1 == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void tableFreeOfMergedCellsCheck(RegOpsQC rObj, Document doc)
        {
            try
            {
                List<int> lst = new List<int>();
                string Pagenumber = string.Empty;
                rObj.QC_Result = string.Empty;
                rObj.Comments = string.Empty;
                rObj.FIX_START_TIME = DateTime.Now;
                bool Flag = false;
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in sct.Body.GetChildNodes(NodeType.Table, true))
                    {
                        table.ConvertToHorizontallyMergedCells();
                        foreach (Row r in table.Rows)
                        {
                            foreach (Cell c in r.Cells)
                            {
                                if (c.CellFormat.HorizontalMerge == CellMerge.Previous || c.CellFormat.HorizontalMerge == CellMerge.First)
                                {
                                    if (layout.GetStartPageIndex(table) != 0)
                                        lst.Add(layout.GetStartPageIndex(table));
                                    Flag = true;
                                }
                                if (c.CellFormat.VerticalMerge == CellMerge.Previous || c.CellFormat.VerticalMerge == CellMerge.First)
                                {
                                    if (layout.GetStartPageIndex(table) != 0)
                                        lst.Add(layout.GetStartPageIndex(table));
                                    Flag = true;
                                }
                            }
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (Flag == true)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Table merged cells are present in : " + Pagenumber;
                    rObj.CommentsWOPageNum = "Table merged cells are present";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void tableFreeOfMergedCellsFix(RegOpsQC rObj, Document doc)
        {
            try
            {
                rObj.FIX_START_TIME = DateTime.Now;
                bool Flag = false;
                foreach (Section sct in doc.Sections)
                {
                    foreach (Table table in sct.Body.GetChildNodes(NodeType.Table, true))
                    {
                        foreach (Row r in table.Rows)
                        {
                            if (r.RowFormat.Borders.LineStyle != LineStyle.None)
                            {
                                r.RowFormat.Borders.LineStyle = LineStyle.None;
                                Flag = true;
                            }
                        }
                    }
                }
                if (Flag == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed ";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


    }
}
