using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Aspose.Words.Layout;
using Aspose.Words.Tables;
using Aspose.Words.Fields;
using CMCai.Models;
using Aspose.Words.Properties;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Drawing;
using System.Data;
using System.Text;
using Aspose.Words.Fonts;
using Aspose.Words.Replacing;
using Aspose.Words;
using Aspose.Words.Drawing;
using System.Globalization;
using Aspose.Words.Notes;
using Aspose.Words.Lists;

namespace CMCai.Actions
{
    public class WordDocumentActions
    {
        //  string sourcePath1 = ConfigurationManager.AppSettings["SourceFolderPath"].ToString();//System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/");
        //  string destPath1 = ConfigurationManager.AppSettings["SourceFolderPath"].ToString();//System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCSource/");
        //  string sourcePathFolder = System.Web.Hosting.HostingEnvironment.MapPath("~/RegOpsQCDestination/");

        public string m_ConnectionString = ConfigurationManager.AppSettings["CmcConnection"].ToString();
        public string m_DummyConn = ConfigurationManager.AppSettings["DummySchema"].ToString();
        public string m_Conn = ConfigurationManager.AppSettings["CmcConnection"].ToString();

        string sourcePath = string.Empty;
        string destPath = string.Empty;



        public string getConnectionInfo(Int64 userID)
        {
            string m_Result = string.Empty;
            Connection conn = new Connection();
            conn.connectionstring = m_Conn;
            try
            {

                DataSet ds = new DataSet();
                ds = conn.GetDataSet("SELECT org.ORGANIZATION_SCHEMA as ORGANIZATION_SCHEMA,org.ORGANIZATION_PASSWORD as ORGANIZATION_PASSWORD FROM USERS us LEFT JOIN ORGANIZATIONS org ON org.ORGANIZATION_ID=us.ORGANIZATION_ID WHERE USER_ID=" + userID, CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    m_Result = ds.Tables[0].Rows[0]["ORGANIZATION_SCHEMA"].ToString() + "|" + ds.Tables[0].Rows[0]["ORGANIZATION_PASSWORD"].ToString();
                }
                return m_Result;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return m_Result;
            }

        }

        ///Section headings / structure consistent with template
        ///
        public void SectionHeadingsconsistentwithTemplate(RegOpsQC rObj, Document doc, Connection conn, long preid)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool isTocExisted = false;
            List<string> docTOClistA = new List<string>();
            List<string> docTOClistB = new List<string>();
            DataSet ds = new DataSet(); Document docB = new Document();
            try
            {
                ds = conn.GetDataSet("select CHECK_PARAMETER_FILE,CHECK_PARAMETER from  REGOPS_QC_PREFERENCE_DETAILS rc where QC_PREFERENCES_ID =" + preid + " and CHECKLIST_ID='" + rObj.CheckList_ID + "'", CommandType.Text, ConnectionState.Open);
                if (conn.Validate(ds))
                {
                    Stream stream = new MemoryStream((byte[])ds.Tables[0].Rows[0]["CHECK_PARAMETER_FILE"]);
                    docB = new Document(stream);
                }
                Document docA = doc;

                docA.UpdateFields();
                docB.UpdateFields();
                List<Node> FieldNodes = docA.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart)).ToList();
                foreach (Node start in FieldNodes)
                {
                    if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                    {
                        isTocExisted = true;
                        break;
                    }
                }
                if (isTocExisted)
                {
                    foreach (Field field in docA.Range.Fields)
                    {
                        if (field.Type.Equals(Aspose.Words.Fields.FieldType.FieldHyperlink))
                        {
                            FieldHyperlink hyperlink = (FieldHyperlink)field;
                            if (hyperlink.SubAddress != null && hyperlink.SubAddress.StartsWith("_Toc"))
                            {
                                Paragraph tocItem = (Paragraph)field.Start.GetAncestor(NodeType.Paragraph);
                                string str = tocItem.ToString(SaveFormat.Text).Trim();
                                string ext = str.Substring(0, str.LastIndexOf("\t"));
                                if (ext.StartsWith("Table") == false && ext.StartsWith("Figure") == false)
                                    docTOClistA.Add(ext);
                            }
                        }
                    }
                    foreach (Field field in docB.Range.Fields)
                    {
                        if (field.Type.Equals(Aspose.Words.Fields.FieldType.FieldHyperlink))
                        {
                            FieldHyperlink hyperlink = (FieldHyperlink)field;
                            if (hyperlink.SubAddress != null && hyperlink.SubAddress.StartsWith("_Toc"))
                            {
                                Paragraph tocItem = (Paragraph)field.Start.GetAncestor(NodeType.Paragraph);
                                string str = tocItem.ToString(SaveFormat.Text).Trim();
                                string ext = str.Substring(0, str.LastIndexOf("\t"));
                                if (ext.StartsWith("Table") == false && ext.StartsWith("Figure") == false)
                                    docTOClistB.Add(ext);

                            }
                        }
                    }

                    if (docTOClistA.SequenceEqual(docTOClistB))
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Section headings are in consistent with template.";

                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Section headings are not consistent with template";
                    }
                }
                else
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "TOC not existed in the document";
                }

                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// File format in doc or docx - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void DocumentFormat(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                string ext = Path.GetExtension(rObj.DestFilePath);
                if (ext.ToLower() == ".doc" || ext.ToLower() == ".docx")
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "File Extension is " + ext + ".";
                }
                else
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "File extension is not correct";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Convertwordtopdf - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Convertwordtopdf(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                string ext = Path.GetExtension(rObj.DestFilePath);
                if (ext.ToLower() == ".doc" || ext.ToLower() == ".docx")
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "File extension is word format";
                }
                else if(ext.ToLower() == ".pdf")
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void ConvertwordtopdfFix(RegOpsQC rObj, Document doc,ref int wordtopdf)
        {
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                // Save the document in PDF format.
                string ext = Path.GetExtension(rObj.DestFilePath);
                if (ext.ToLower() == ".doc")
                    wordtopdf = 1;
                else if (ext.ToLower() == ".docx")
                    wordtopdf = 2;
                rObj.Is_Fixed = 1;
                rObj.Comments = rObj.Comments + ". Fixed";
                rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";                
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void EndWithPeriodFix(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                // doc = new Document(rObj.DestFilePath);
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();
                foreach (Paragraph para in listItems)
                {
                    if (para.IsListItem)
                    {
                        string pr = para.Range.Text.Trim();
                        if (pr != "" && pr != null)
                        {
                            Run lastRun = para.Runs[para.Runs.Count - 1];
                            if (lastRun != null && !lastRun.Text.TrimEnd().EndsWith("."))
                                lastRun.Text = lastRun.Text.TrimEnd() + ".";
                            FixFlag = true;
                        }
                    }
                }
                if (FixFlag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// File name Length - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FileNameLength(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string res = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                String originalFileName = Path.GetFileNameWithoutExtension(doc.OriginalFileName);
                if (rObj.Check_Parameter != "" && rObj.Check_Parameter != null)
                {
                    if (originalFileName.Length == Convert.ToInt64(rObj.Check_Parameter.ToString()))
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "File Name length is in Size " + rObj.Check_Parameter + ".";
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "File Name length is not in Size " + rObj.Check_Parameter + ".";
                    }
                }
                else
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "File Name length not defined.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// No Security - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void VerifyPasswordprotection(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                destPath = rObj.DestFilePath + rObj.Job_ID + "/Destination/" + rObj.File_Name;
                try
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Document is not protected with password";
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("The document password is incorrect") || ex.Message.Contains("File contains corrupted data"))
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Dcoument Password protected";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "Document is not protected with password";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }
        /// <summary>
        /// Maximum File size allowed Check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="path"></param>
        public void MaxFileSizeCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            sourcePath = rObj.DestFilePath;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                FileInfo fi = new FileInfo(sourcePath);
                decimal f1 = fi.Length;
                decimal f2 = Convert.ToDecimal(rObj.Check_Parameter);
                decimal f3 = f2 * 1048576;
                if (f1 > f3)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "File size not allowed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "File size is allowed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Documents are in docx format check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="path"></param>
        public void DocxFormatCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            sourcePath = rObj.DestFilePath;
            string extension = Path.GetExtension(rObj.File_Name);
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                if (extension != ".docx")
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Document is not in docx format";
                    if (rObj.Check_Type == 1)
                    {
                        var name = Path.GetFileNameWithoutExtension(rObj.File_Name);
                        string[] sobj = Regex.Split(sourcePath, @"\\Output");
                        string dirName = Path.GetDirectoryName(sobj[1]);
                        rObj.DestFilePath = sobj[0] + "\\Output\\" + dirName + "\\" + name + ".docx";                        
                        try
                        {
                            doc.Save(rObj.DestFilePath);
                            if (File.Exists(sourcePath))
                            {
                                File.Delete(sourcePath);
                            }
                            rObj.Is_Fixed = 1;
                            rObj.Comments = "Document is not in docx file format. Fixed";
                        }
                        catch(Exception ex)
                        {
                            rObj.QC_Result = "Failed";
                            if (ex.Message.ToLower().Contains("macro"))
                                rObj.Comments = "As the document contains Macros, it cannot be converted into docx file format";
                            else
                                rObj.Comments = "As the document contains some unsupported file formats, it cannot be converted into docx file format";
                        }                       
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Document is in docx format";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Word properties should be blank - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void WordPropertiesBlank(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                doc.RemovePersonalInformation = true;
                BuiltInDocumentProperties properties = doc.BuiltInDocumentProperties;
                if (properties.Author.Trim() != "" || properties.LastSavedBy.Trim() != "" || properties.Subject.Trim() != "" || properties.Title.Trim() != "" || properties.Category.Trim() != "" || properties.Comments.Trim() != "" || properties.ContentType.Trim() != "" || properties.ContentStatus.Trim() != "" || properties.Manager.Trim() != "" || properties.Company.Trim() != "")
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Word Properties List is not Blank";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Word Properties List is Blank.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Word properties should be blank - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixWordPropertiesBlank(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                doc.RemovePersonalInformation = true;
                BuiltInDocumentProperties properties = doc.BuiltInDocumentProperties;
                properties.LastSavedBy = "";
                properties.Author = "";
                properties.Title = "";
                properties.Subject = "";
                properties.Category = "";
                properties.Comments = "";
                properties.ContentStatus = "";
                properties.ContentType = "";
                properties.Company = "";
                properties.Manager = "";
                properties.Keywords = " ";
                //rObj.QC_Result = "Fixed";
                rObj.Is_Fixed = 1;

                rObj.Comments = "Word Properties Removed";
                // doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Page size consistency across all sections-Only check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void StandardPageSizeNew(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = "";
            rObj.Comments = "";
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            bool sect = false;
            List<string> PagesizeLst = new List<string>();
            string[] PagesizeArr = new string[] { };
            try
            {
                foreach (Section section in doc)
                {
                    //sect = true;
                    if (section.Count > 1)
                    {

                        //Section secondSection = doc.Sections[1];
                        if (rObj.Check_Parameter != null && rObj.Check_Parameter != "")
                        {
                            
                               PagesizeArr = rObj.Check_Parameter.Split(',');
                                for (int a = 0; a < PagesizeArr.Length; a++)
                                {
                                    string pagesize = PagesizeArr[a].Replace("[", "").Replace("\"", "").Replace("]", "").Replace("\\", "");
                                PagesizeLst.Add(pagesize.ToUpper());
                                }

                            string pgsize = doc.FirstSection.PageSetup.PaperSize.ToString();
                            string pgsize2 = doc.LastSection.PageSetup.PaperSize.ToString();
                            //string pgsize3 = doc.LastSection.PageSetup.PaperSize.ToString();
                            foreach(string str in PagesizeLst)
                            {
                                if (str.Contains(pgsize.ToUpper()) && str.Contains(pgsize2.ToUpper()))
                                {
                                    flag = true;
                                }
                                //else
                                //    flag = false;
                            }
                            


                            //if (rObj.Check_Parameter.Contains("A4")&& PagesizeLst.Contains(Aspose.Words.PaperSize.Letter.ToString()) && doc.FirstSection.PageSetup.PaperSize == Aspose.Words.PaperSize.A4 && secondSection.PageSetup.PaperSize == Aspose.Words.PaperSize.A4 && doc.LastSection.PageSetup.PaperSize == Aspose.Words.PaperSize.A4)
                            //{
                            //    flag = false;
                            //    //rObj.Comments = "Page Consistency is in A4 Size.";
                            //}
                            //else if (rObj.Check_Parameter.Contains("Letter") && doc.FirstSection.PageSetup.PaperSize == Aspose.Words.PaperSize.Letter && secondSection.PageSetup.PaperSize == Aspose.Words.PaperSize.Letter && doc.LastSection.PageSetup.PaperSize == Aspose.Words.PaperSize.Letter)
                            //{
                            //    flag = false;
                            //    //rObj.Comments = "Page Consistency is in Letter Size.";
                            //}
                            //else if (rObj.Check_Parameter.Contains("Legal") && doc.FirstSection.PageSetup.PaperSize == Aspose.Words.PaperSize.Legal && secondSection.PageSetup.PaperSize == Aspose.Words.PaperSize.Legal && doc.LastSection.PageSetup.PaperSize == Aspose.Words.PaperSize.Legal)
                            //{
                            //    flag = false;
                            //    //rObj.Comments = "Page Consistency is in Legal Size.";
                            //}

                            

                        }
                    }

                }


                if (!flag)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "All Pages are not in \"" + rObj.Check_Parameter + "\" Size ";
                }

                else
                {
                    if(flag)

                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "All Pages are in " + rObj.Check_Parameter + " Size.";
                    }
                }
                


                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        /// <summary>
        /// Appendices are lettered instead of numbered-check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Appendicesarelettered(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> SeqFields = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().TrimStart().Contains("SEQ Appendix") && !((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().Contains("ARABIC")).ToList();

                foreach (FieldStart fld in SeqFields)
                {
                    Paragraph pr = fld.ParentParagraph;

                    if (!pr.ToString(SaveFormat.Text).Trim().Contains("\t"))
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));
                    }


                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Fields are in Alphabetics with 1 tab space";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        lst2.Sort();
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Fields are in Arabic or no space:" + Pagenumber;
                        rObj.CommentsWOPageNum = "Fields are in Arabic or no space";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }




        public void Regularexpressioncheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                FindReplaceOptions options = new FindReplaceOptions();
                options.UseSubstitutions = true;
                // This is added for testing purposes
                options.ApplyFont.HighlightColor = Color.Yellow;
                NodeCollection paragraphs = doc.GetChildNodes(NodeType.Paragraph, true);
                foreach (Paragraph pr in paragraphs)
                {

                    pr.Range.Replace(new Regex("([≥±<>])\\s+"), "$1", options);


                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Fields are in Alphabetics with 1 tab space";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        lst2.Sort();
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Fields are in Arabic or no space:" + Pagenumber;
                        rObj.CommentsWOPageNum = "Fields are in Arabic or no space";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        ///Numbered list style-Check

        public void NumberedListStyle(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {

            rObj.QC_Result = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            string res = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            List<int> lst = new List<int>();
            bool allSubChkFlag = false;

            try
            {
                // to get sub checks list
                LayoutCollector layout = new LayoutCollector(doc);
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();

                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;

                        if (chLst[k].Check_Name == "Each numbered item is spaced with")
                        {
                            try
                            {
                                chLst[k].CHECK_START_TIME = DateTime.Now;


                                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();

                                foreach (Paragraph para in listItems)
                                {
                                    if (chLst[k].Check_Parameter != "" && chLst[k].Check_Parameter != null)
                                    {

                                        if (para.ParagraphFormat.LineSpacing != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                        {
                                            if (layout.GetStartPageIndex(para) != 0)
                                                lst.Add(layout.GetStartPageIndex(para));
                                            flag = true;
                                            allSubChkFlag = true;
                                        }

                                    }

                                }

                                if (flag == false)
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Contains space after List Item in "+ chLst[k].Check_Parameter;
                                }

                                else
                                {


                                    List<int> lst2 = lst.Distinct().ToList();
                                    if (lst2.Count > 0)
                                    {
                                        lst2.Sort();
                                        Pagenumber = string.Join(", ", lst2.ToArray());
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = " list item is not spaced in \"" + chLst[k].Check_Parameter + "\" in: " + Pagenumber;
                                        chLst[k].CommentsWOPageNum = " list item is not spaced in \"" + chLst[k].Check_Parameter + "\"";
                                        chLst[k].PageNumbersLst = lst2;
                                    }
                                }
                                chLst[k].CHECK_END_TIME = DateTime.Now;
                            }
                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }
                        }
                        else if (chLst[k].Check_Name == "Indent the list tab space with")
                        {
                            try
                            {
                                chLst[k].CHECK_START_TIME = DateTime.Now;
                                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();
                                foreach (Paragraph para in listItems)
                                {

                                    if (para.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                    {
                                        flag = true;
                                        allSubChkFlag = true;
                                        if (layout.GetStartPageIndex(para) != 0)
                                            lst.Add(layout.GetStartPageIndex(para));
                                    }

                                }
                                if (flag == false)
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Contains no space after List Item in ."+chLst[k].Check_Parameter;
                                }

                                else
                                {


                                    List<int> lst2 = lst.Distinct().ToList();
                                    if (lst2.Count > 0)
                                    {
                                        lst2.Sort();
                                        Pagenumber = string.Join(", ", lst2.ToArray());
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = " list item contains spaced in \"" + chLst[k].Check_Parameter + "\"  in: " + Pagenumber;
                                        chLst[k].CommentsWOPageNum = "  list item contains spaced in \"" + chLst[k].Check_Parameter + "\"  in: "; ;
                                        chLst[k].PageNumbersLst = lst2;
                                    }
                                }
                                chLst[k].CHECK_END_TIME = DateTime.Now;


                            }
                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }
                        }
                    }
                }
                if (allSubChkFlag == true && rObj.Job_Type != "QC")
                {
                    rObj.QC_Result = "Failed";
                }
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }


        //Numbered List Item-Fix

        public void FixNumberedListStyle(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool flag = false;          
            bool FixFlag = false;
            rObj.QC_Result = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {

                
                // to get sub checks list
                LayoutCollector layout = new LayoutCollector(doc);
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();

                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;

                        if (chLst[k].Check_Name == "Each numbered item is spaced with")
                        {
                            try
                            {

                                //doc.Save(rObj.DestFilePath);

                                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();
                                foreach (Paragraph para in listItems)
                                {
                                    if (chLst[k].Check_Parameter != "" && chLst[k].Check_Parameter != null)
                                    {

                                        if (para.ParagraphFormat.LineSpacing != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                        {
                                            para.ParagraphFormat.LineSpacing = Convert.ToDouble(chLst[k].Check_Parameter)*12;
                                            //para.ParagraphFormat.LineSpacingRule = Aspose.Words.LineSpacingRule.AtLeast;
                                            FixFlag = true;
                                        }


                                    }

                                }
                                if (!FixFlag)
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Contains no space after List Item in ." + chLst[k].Check_Parameter;
                                }
                                else
                                {
                                    
                                    chLst[k].Is_Fixed = 1;
                                    //chLst[k].Comments = "Top fixed to " + chLst[k].Check_Parameter + " Inch.";
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                                }
                                chLst[k].FIX_END_TIME = DateTime.Now;
                                //doc.Save(rObj.DestFilePath);

                            }
                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }
                        }
                        else if (chLst[k].Check_Name == "Indent the list tab space with")
                        {
                            try
                            {
                                //doc = new Document(rObj.DestFilePath);
                                chLst[k].FIX_START_TIME = DateTime.Now;
                                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();
                                foreach (Paragraph para in listItems)
                                {
                                    if (para.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                    {
                                        flag = true;
                                        para.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    }
                                }
                                if (!flag)
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Contains no space after List Item in ." + chLst[k].Check_Parameter;
                                }
                                else
                                {
                                   
                                    chLst[k].Is_Fixed = 1;
                                    //chLst[k].Comments = "Top fixed to " + chLst[k].Check_Parameter + " Inch.";
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                                }
                                chLst[k].FIX_END_TIME = DateTime.Now;
                                //doc.Save(rObj.DestFilePath);


                            }
                            catch (Exception ex)
                            {
                                chLst[k].QC_Result = "Error";
                                chLst[k].Comments = "Technical error: " + ex.Message;
                                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            }
                        }
                    }
                }
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
            }
        }

        /// <summary>
        /// Multiple footnote designators are separated by commas, with no spaces-check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void multiplefootnoteseparatebycomma(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
               
                LayoutCollector layout = new LayoutCollector(doc);
              
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell cell in row)
                            {
                                foreach (Footnote footnote in cell.GetChildNodes(NodeType.Footnote, true))
                                {
                                    if ((footnote.Count > 0))

                                    {
                                        if (footnote.NextSibling != null && footnote.NextSibling.NodeType == NodeType.Footnote)
                                        {

                                            flag = true;
                                            if (layout.GetStartPageIndex(footnote) != 0)
                                                lst.Add(layout.GetStartPageIndex(footnote));

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (tables.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables in the document";
                }
                else if (!flag)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "multiple footnote are  placed in correct format" ;
                }


                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        lst2.Sort();
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Contains no comma after Footnotes in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Contains no comma after Footnotes";
                        rObj.PageNumbersLst = lst2;



                    }
                }

                rObj.CHECK_END_TIME = DateTime.Now;
            }


            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        /// <summary>
        /// Multiple footnote designators are separated by commas, with no spaces-Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void Fixmultiplefootnoteseparatebycomma(RegOpsQC rObj, Document doc)
        {

            string Pagenumber = string.Empty;
            bool FixFlag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                List<int> lst = new List<int>();
            
                NodeCollection tables = doc.GetChildNodes(NodeType.Table, true);
                if (tables.Count > 0)
                {
                    foreach (Table table in tables)
                    {
                        foreach (Row row in table.Rows)
                        {
                            foreach (Cell cell in row)
                            {
                                foreach (Footnote footnote in cell.GetChildNodes(NodeType.Footnote, true))
                                {
                                    if ((footnote.Count > 0))

                                    {
                                        if (footnote.NextSibling != null && footnote.NextSibling.NodeType == NodeType.Footnote)
                                        {

                                            FixFlag = true;
                                            Run comma = new Run(doc, ", ");
                                            comma.Font.Superscript = true;
                                            footnote.ParentNode.InsertAfter(comma, footnote);



                                        }
                                    }
                                }
                            }
                        }
                    }
                }


                if (FixFlag == true)
                {

                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }


                doc.AcceptAllRevisions();
                //doc.Save(rObj.DestFilePath);

                rObj.FIX_END_TIME = DateTime.Now;
            }


            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// check insert blank row before table and figure ,and after table and figure - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void CheckInsertBlankRowBeforeAndAfterTableandFigure(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            string res = string.Empty;
            string pagenumber = string.Empty;
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                NodeCollection tabls = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table table in tabls)
                {
                    if (table.PreviousSibling != null && table.PreviousSibling.Range.Text != ControlChar.ParagraphBreak)
                    {
                        if (table.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph par1 = (Paragraph)table.PreviousSibling;
                            if (par1.Range.Text.ToUpper().Contains("SEQ TABLE"))
                            {
                                if (par1.PreviousSibling != null && par1.PreviousSibling.Range.Text != ControlChar.ParagraphBreak)
                                    if (par1.PreviousSibling.Range.Text != "\r")
                                        if (layout.GetStartPageIndex(table) != 0)
                                            lst.Add(layout.GetStartPageIndex(table.LastRow));
                            }
                            else
                            {
                                if (table.PreviousSibling.Range.Text != "\r")
                                    if (layout.GetStartPageIndex(table.LastRow) != 0)
                                        lst.Add(layout.GetStartPageIndex(table.LastRow));
                            }
                        }
                        else
                        {
                            if (table.PreviousSibling.Range.Text != "\r")
                                if (layout.GetStartPageIndex(table.LastRow) != 0)
                                    lst.Add(layout.GetStartPageIndex(table.LastRow));
                        }
                    }
                }
                foreach (Table table in tabls)
                {
                    if (table.NextSibling != null && table.NextSibling.Range.Text != ControlChar.ParagraphBreak)
                    {
                        if (table.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            if (table.NextSibling.Range.Text != "\r")
                                if (layout.GetStartPageIndex(table.LastRow) != 0)
                                    lst.Add(layout.GetStartPageIndex(table.LastRow));
                        }
                        else
                        {
                            if (table.NextSibling.Range.Text != "\r")
                                if (layout.GetStartPageIndex(table.LastRow) != 0)
                                    lst.Add(layout.GetStartPageIndex(table.LastRow));
                        }
                    }
                }
                NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Aspose.Words.Drawing.Shape shap in figures)
                {
                    Paragraph para = shap.ParentParagraph;
                    if (para != null)
                    {
                        if(para.PreviousSibling != null)
                        {
                            if (para.PreviousSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph para1 = (Paragraph)para.PreviousSibling;
                                if (para1.Range.Text.ToUpper().Contains("SEQ FIGURE"))
                                {
                                    if(para1.PreviousSibling != null)
                                    {
                                        if (para1.PreviousSibling.Range.Text != "\r")
                                        {
                                            if (layout.GetStartPageIndex(para) != 0)
                                                lst.Add(layout.GetStartPageIndex(para));
                                        }
                                    }
                                }
                                else
                                {
                                    if (para.PreviousSibling.Range.Text != "\r")
                                    {
                                        if (layout.GetStartPageIndex(para) != 0)
                                            lst.Add(layout.GetStartPageIndex(para));
                                    }
                                }
                            }
                        }
                        if (para.NextSibling != null)
                        {
                            if (para.NextSibling.Range.Text != "\r")
                            {
                                if (layout.GetStartPageIndex(para) != 0)
                                    lst.Add(layout.GetStartPageIndex(para));
                            }
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (tabls.Count == 0 && figures.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "There are no tables and figures in the document";
                }
                else if (lst2.Count > 0)
                {
                    lst2.Sort();
                    pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Blank lines does not exist before as well as after tables and figures in: " + pagenumber;
                    rObj.CommentsWOPageNum = "Blank lines does not exist before as well as after tables and figures";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "There is blank rows exist before and after tables and figures.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Fix insert blank row before table and figure ,and after table and figure - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// 
        public void FixInsertBlankRowBeforeAndAfterTableandFigure(RegOpsQC rObj, Document doc)
        {
            string res = string.Empty;
            string pagenumber = string.Empty;
            //doc = new Document(rObj.DestFilePath);
            DocumentBuilder builder = new DocumentBuilder(doc);
            LayoutCollector layout = new LayoutCollector(doc);
            List<int> lst = new List<int>();
            bool isFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                NodeCollection tabls = doc.GetChildNodes(NodeType.Table, true);
                foreach (Table table in tabls)
                {
                    if (table.PreviousSibling != null && table.PreviousSibling.Range.Text != ControlChar.ParagraphBreak)
                    {
                        Paragraph par = new Paragraph(doc);
                        if (table.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph par1 = (Paragraph)table.PreviousSibling;
                            if (par1.Range.Text.ToUpper().Contains("SEQ TABLE"))
                            {
                                if (par1.PreviousSibling != null && par1.PreviousSibling.Range.Text != ControlChar.ParagraphBreak)
                                {
                                    if (par1.PreviousSibling.Range.Text != "\r")
                                    {
                                        table.ParentNode.InsertBefore(par, table.PreviousSibling);
                                        builder.MoveTo(par);
                                        isFixed = true;
                                    }
                                }
                            }
                            else
                            {
                                if (table.PreviousSibling.Range.Text != "\r")
                                {
                                    table.ParentNode.InsertBefore(par, table);
                                    builder.MoveTo(par);
                                    isFixed = true;
                                }
                            }
                        }
                        else
                        {
                            if (table.PreviousSibling.Range.Text != "\r")
                            {
                                table.ParentNode.InsertBefore(par, table);
                                builder.MoveTo(par);
                                isFixed = true;
                            }
                        }
                    }
                }

                foreach (Table table in tabls)
                {
                    if (table.NextSibling != null && table.NextSibling.Range.Text != ControlChar.ParagraphBreak)
                    {
                        Paragraph par = new Paragraph(doc);
                        if (table.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            if (table.NextSibling.Range.Text != "\r")
                            {
                                table.ParentNode.InsertAfter(par, table);
                                builder.MoveTo(par);
                                isFixed = true;
                            }
                        }
                        else
                        {
                            if (table.NextSibling.Range.Text != "\r")
                            {
                                table.ParentNode.InsertAfter(par, table);
                                builder.MoveTo(par);
                                isFixed = true;
                            }
                        }
                    }
                }
                NodeCollection figures = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Aspose.Words.Drawing.Shape shap in figures)
                {
                    Paragraph para = shap.ParentParagraph;
                    if (para != null)
                    {
                        if (para.PreviousSibling != null)
                        {

                            if (para.PreviousSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph para1 = (Paragraph)para.PreviousSibling;
                                if (para1.Range.Text.ToUpper().Contains("SEQ FIGURE"))
                                {
                                    if(para1.PreviousSibling != null)
                                    {
                                        if (para1.PreviousSibling.Range.Text != "\r")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            para.ParentNode.InsertBefore(par, para.PreviousSibling);
                                            builder.MoveTo(par);
                                            isFixed = true;
                                        }
                                    }
                                }
                                else
                                {
                                    if (para.PreviousSibling.Range.Text != "\r")
                                    {
                                        Paragraph par = new Paragraph(doc);
                                        para.ParentNode.InsertBefore(par, para);
                                        builder.MoveTo(par);
                                        isFixed = true;
                                    }
                                }
                            }
                        }
                        if(para.NextSibling != null)
                        {
                            if (para.NextSibling.Range.Text != "\r")
                            {
                                Paragraph par = new Paragraph(doc);
                                para.ParentNode.InsertAfter(par, para);
                                builder.MoveTo(par);
                                isFixed = true;
                            }
                        }
                    }
                }
                if (tabls.Count == 0 && figures.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no tables and figures in the document";
                }
                else if (isFixed)
                {
                    rObj.Is_Fixed = 1;
                    //rObj.QC_Result = "Fixed";
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = " blank rows exist before and after tables and figures.";
                }
                rObj.FIX_END_TIME = DateTime.Now;
                //doc.Save(rObj.DestFilePath);
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        
        /// <summary>
        /// Report blank Lines - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void ReportBlankLines(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            string Pagenumber = string.Empty;
            List<int> lstBlankLines = new List<int>();
            try
            {
                rObj.FIX_START_TIME = DateTime.Now;
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Section sct in doc.Sections)
                {
                    NodeCollection nc = sct.Body.GetChildNodes(NodeType.Paragraph, true);
                    foreach (Paragraph p in nc)
                    {
                        if (p.GetText().Trim() == "" && !p.GetText().Contains("\f") && p.GetChildNodes(NodeType.Shape, true).Count == 0)
                        {
                            //Report blank lines before table
                            if ((p.PreviousSibling != null && p.PreviousSibling.NodeType == NodeType.Table) || (p.NextSibling != null && p.NextSibling.NodeType == NodeType.Table))
                            {
                                if (!(p.PreviousSibling != null && p.PreviousSibling.NodeType == NodeType.Table))
                                {
                                    flag = true;
                                    lstBlankLines.Add(layout.GetStartPageIndex(p)); //blank lines before table
                                }
                            }
                            else
                            {
                                //Report blank line if it is not containing a shape and not a line after shape
                                if ((p.PreviousSibling != null && (p.PreviousSibling.NodeType == NodeType.Paragraph && ((Paragraph)p.PreviousSibling).GetChildNodes(NodeType.Shape, true).Count == 0)))
                                {
                                    flag = true;
                                    lstBlankLines.Add(layout.GetStartPageIndex(p)); //other blank lines 
                                }
                            }
                        }
                    }
                    //Remove blank line in end of section
                    if (sct.Body.GetChildNodes(NodeType.Any, true).Count == 1 && sct.Body.GetChildNodes(NodeType.Paragraph, true).Count == 1 && sct.Body.GetChildNodes(NodeType.Paragraph, true)[0].GetText().Trim() == "")
                    {
                        flag = true;
                        lstBlankLines.Add(layout.GetStartPageIndex(sct.Body.GetChildNodes(NodeType.Paragraph, true)[0])); //Blank Lines
                    }
                }
                //Remove blank line in end of document
                Node LastNode = ((Section)doc.Sections.Last()).Body.LastChild;
                if (LastNode != null && LastNode.NodeType == NodeType.Paragraph && LastNode.PreviousSibling != null && LastNode.PreviousSibling.NodeType != NodeType.Table && LastNode.GetText().Trim() == "" && ((Paragraph)LastNode).GetChildNodes(NodeType.Shape, true).Count == 0)
                {
                    flag = true;
                    lstBlankLines.Add(layout.GetStartPageIndex(LastNode));//Blank Lines
                }
                if (flag == true)
                {
                    rObj.QC_Result = "Failed";
                    if (lstBlankLines.Count > 0)
                    {
                        lstBlankLines = lstBlankLines.Distinct().ToList();
                        lstBlankLines.Sort();
                        Pagenumber = string.Join(", ", lstBlankLines.ToArray());
                        rObj.Comments = rObj.Comments + "\nBlank lines exist in updated document at page(s) " + Pagenumber;
                        rObj.CommentsWOPageNum = "Blank lines exist";
                        rObj.PageNumbersLst = lstBlankLines;
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Blank lines does not Exist in updated document.";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //public void WordBlankPage(RegOpsQC rObj, Aspose.Words.Document doc)
        //{
        //    rObj.QC_Result = string.Empty;//commented by nagesh 15-Dec-2020
        //    rObj.Comments = string.Empty;
        //    bool flag = false;
        //    string Pagenumber = string.Empty;
        //    string FolderName = "";
        //    List<int> lstBlankPages = new List<int>();
        //    Guid guid = Guid.NewGuid();
        //    try
        //    {
        //        rObj.CHECK_START_TIME = DateTime.Now;
        //        //Guid guid = Guid.NewGuid();
        //        string[] folderPathArr = rObj.DestFilePath.Split(new string[] { "Destination\\" }, StringSplitOptions.None);
        //        FolderName = folderPathArr[0] + "Destination\\";
        //        Aspose.Words.Document TempDoc = new Aspose.Words.Document(rObj.DestFilePath);
        //        foreach (Section section in TempDoc)
        //        {
        //            // Up to three different footers are possible in a section (for first, even and odd pages).
        //            // We check and delete all of them.
        //            Aspose.Words.HeaderFooter footer;
        //            Aspose.Words.HeaderFooter header;
        //            footer = section.HeadersFooters[HeaderFooterType.FooterFirst];
        //            if (footer != null)
        //                footer.Remove();

        //            // Primary footer is the footer used for odd pages.
        //            footer = section.HeadersFooters[HeaderFooterType.FooterPrimary];
        //            if (footer != null)
        //                footer.Remove();

        //            footer = section.HeadersFooters[HeaderFooterType.FooterEven];
        //            if (footer != null)
        //                footer.Remove();

        //            header = section.HeadersFooters[HeaderFooterType.HeaderFirst];
        //            if (header != null)
        //                header.Remove();

        //            // Primary footer is the footer used for odd pages.
        //            header = section.HeadersFooters[HeaderFooterType.HeaderPrimary];
        //            if (header != null)
        //                header.Remove();

        //            header = section.HeadersFooters[HeaderFooterType.HeaderEven];
        //            if (header != null)
        //                header.Remove();
        //        }
        //        TempDoc.Save(FolderName + guid + ".pdf", Aspose.Words.SaveFormat.Pdf);
        //        Aspose.Pdf.Document PdfDocument = new Aspose.Pdf.Document(FolderName + guid + ".pdf");
        //        foreach (Aspose.Pdf.Page p in PdfDocument.Pages)
        //        {
        //            if (p.IsBlank(0.01))
        //            {
        //                flag = true;
        //                lstBlankPages.Add(p.Number);
        //            }
        //        }
        //        File.Delete(FolderName + guid + ".pdf");
        //        if (flag == true)
        //        {
        //            List<int> lst2 = lstBlankPages.Distinct().ToList();
        //            if (lst2.Count > 0)
        //            {
        //                lst2.Sort();
        //                Pagenumber = string.Join(", ", lst2.ToArray());
        //                rObj.QC_Result = "Failed";//Commented by Nagsh on 15-Dec-2020
        //                //rObj.Is_Fixed = 1;
        //                rObj.Comments = "Blank Page are found in updated document at Page Numbers: " + Pagenumber;
        //            }
        //        }
        //        else
        //        {
        //            rObj.QC_Result = "Passed";
        //            rObj.Comments = "Blank pages does not Exist in updated document.";
        //        }
        //        rObj.CHECK_END_TIME = DateTime.Now;
        //    }
        //    catch (Exception ex)
        //    {
        //        FileInfo fi = new FileInfo(FolderName + guid + ".pdf");
        //        if (fi.Exists)
        //            File.Delete(FolderName + guid + ".pdf");

        //        ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
        //        rObj.Job_Status = "Error";
        //        rObj.QC_Result = "Error";
        //        rObj.Comments = "Technical error: " + ex.Message;
        //    }

        //}

        public void WordBlankPage(RegOpsQC rObj, Aspose.Words.Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            string Pagenumber = string.Empty;
            List<int> lstBlankPages = new List<int>();
            try
            {
                rObj.FIX_START_TIME = DateTime.Now;
               // Aspose.Words.Document document = new Aspose.Words.Document(rObj.DestFilePath);
                int totalPages = doc.PageCount;
                for (int i = 0; i < totalPages; i++)
                {
                    Document pageDoc = doc.ExtractPages(i, 1);
                    string textOfPage = "";
                    int shapeCount = 0;
                    foreach (Section section in pageDoc.Sections)
                    {
                        textOfPage = textOfPage + section.Body.ToString(SaveFormat.Text);
                        shapeCount += section.Body.GetChildNodes(NodeType.Shape, true).Count;
                    }
                    if (string.IsNullOrEmpty(textOfPage.Trim()) && shapeCount == 0)
                    {
                        flag = true;
                        lstBlankPages.Add(i + 1);
                    }
                }
                if (flag == true)
                {
                    List<int> lst2 = lstBlankPages.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        if(rObj.Job_Type == "QC")
                        {
                            rObj.Comments = "Blank page(s) found in document at: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Blank page found in document";
                        }
                        else
                        {
                            rObj.Comments = "Blank page(s) found in document at: " + Pagenumber;
                            rObj.CommentsWOPageNum = "Blank page found in updated document";
                        }                      
                        rObj.PageNumbersLst = lst2;
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //if (rObj.Job_Type == "QC")
                    //    rObj.Comments = "Blank pages does not exist in document";
                    //else
                    //    rObj.Comments = "Blank pages does not exist in updated document";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }
        /// <summary>
        /// No Widow and Orphaned headings - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckAndFixOrphans(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    if (pr.ParagraphFormat.WidowControl == false)
                    {
                        flag = true;
                        if (pr.LastChild != null && layout.GetStartPageIndex(pr.LastChild) != 0)
                            lst.Add(layout.GetStartPageIndex(pr.LastChild));
                        else if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Orphaned headings not exist.";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Orphan headings are in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Orphaned headings exist";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// No Widow and Orphaned headings - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixCheckAndFixOrphans(RegOpsQC rObj, Document doc)
        {
            // rObj.QC_Result = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                List<int> lst = new List<int>();
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    if (pr.ParagraphFormat.WidowControl == false)
                    {
                        FixFlag = true;
                        pr.ParagraphFormat.WidowControl = true;
                    }
                }
                if (FixFlag == true)
                {
                    //rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = "Orphaned headings. Fixed";
                }
                else
                {
                    //rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = "Orphaned headings. Fixed";
                    rObj.CommentsWOPageNum = "Orphaned headings. Fixed";

                }

                doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Verify for existence of any hidden text - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void HiddenText(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();
                NodeCollection runs = doc.GetChildNodes(NodeType.Run, true);
                foreach (Run run in runs.OfType<Run>())
                {
                    if (run.Font.Hidden == true)
                    {
                        rObj.Comments = "Hidden Text Exist.";
                        if (layout.GetStartPageIndex(run) != 0)
                            lst.Add(layout.GetStartPageIndex(run));
                    }
                }
                List<int> lst1 = lst.Distinct().ToList();
                if (lst1.Count > 0)
                {
                    lst1.Sort();
                    Pagenumber = string.Join(", ", lst1.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Hidden text exist in : " + Pagenumber;
                    rObj.CommentsWOPageNum = "Hidden text exist";
                    rObj.PageNumbersLst = lst1;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Hidden text does not exist.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Use "Link to Previous" in multi section document - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Linktoprevious(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            int i = 1;
            bool linkFlag = true;
            bool SectionLinkFlag = false;
            try
            {
                //string ext = Path.GetExtension(rObj.DestFilePath);
                if (doc.Sections.Count > 1)
                {
                    SectionLinkFlag = true;
                    foreach (Section section in doc.Sections)
                    {
                        if (i != 1)
                        {
                            foreach (HeaderFooter hf in section.GetChildNodes(NodeType.HeaderFooter, true))
                            {
                                if (hf.IsLinkedToPrevious == false)
                                {
                                    linkFlag = false;
                                    string a = i + ", ";
                                    rObj.Comments = rObj.Comments + a;
                                    break;
                                }
                            }
                        }
                        i++;
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "There are no multiple section(s) to Link.";
                }
                if (!linkFlag)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = rObj.Comments.TrimEnd(' ').TrimEnd(',');
                    rObj.Comments = "Not linked to previous option at section(s) " + rObj.Comments;
                }
                else if (!SectionLinkFlag)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "There are no multiple section(s) to Link.";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All sections are linked to previous";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Use "Link to Previous" in multi section document - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixLinktoprevious(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            int i = 0;
            try
            {
                //string ext = Path.GetExtension(rObj.DestFilePath);
                //doc = new Document(rObj.DestFilePath);
                if (doc.Sections.Count > 1)
                {
                    foreach (Section section in doc.Sections)
                    {
                        if (i != 0)//Condition for omitting first section
                        {
                            foreach (HeaderFooter hf in section.GetChildNodes(NodeType.HeaderFooter, true))
                            {
                                if (hf.IsLinkedToPrevious == false)
                                {
                                    hf.IsLinkedToPrevious = true;
                                }
                            }
                        }
                        i++;
                    }
                }
                //rObj.QC_Result = "Fixed";
                rObj.Is_Fixed = 1;
                rObj.Comments = rObj.Comments + ". Fixed";
                //   doc.AcceptAllRevisions();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Check whether TOC,LOT,LOF and LOA are present for above 5 pages - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckTOCExists_old(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            bool TOCPresentBelowpages = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool Tocfamily = false;
            bool CheckLOT = false;
            bool CheckLOF = false;
            bool TableFlag = false;
            bool FigureFlag = false;
            chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
            try
            {
                int pagecount = doc.PageCount;
                Document TempDoc = doc.Clone();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                List<Node> listFieldTOC = TempDoc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC).ToList();
                //Below code for checking toc/LOT/LOF for the file having below 5 pages excluding toc/lot/lof
                if (pagecount >= 5 && listFieldTOC.Count > 0)
                {
                    string Tempfilename = rObj.DestFilePath;
                    Tempfilename = Tempfilename.Replace(rObj.File_Name, "Temp_" + rObj.File_Name);
                    List<Node> SectionBreakslst = TempDoc.GetChildNodes(NodeType.Paragraph, true).Where(x => x.Range.Text.Contains(ControlChar.SectionBreak)).ToList();                   
                    foreach (Paragraph pr in SectionBreakslst)
                    {
                        Paragraph prbreak = pr;
                        Paragraph prcl = null;
                        if (pr.PreviousSibling != null && pr.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.PreviousSibling;
                        }
                        if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        {
                            if (prcl.IsEndOfSection)
                            {
                                prbreak.ParentSection.Remove();
                            }
                        }
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.NextSibling;
                        }
                        if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        {
                            if (prcl.IsEndOfSection)
                            {
                                prbreak.ParentSection.Remove();
                            }
                        }
                    }
                    bool isTocExisted = false;
                    Node TOCBeginNode = null;
                    Node TOCEndNode = null;
                    int TocEndpgno;
                    List<Node> FieldNodes = TempDoc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    foreach (Node start in FieldNodes)
                    {
                        if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                        if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                        {
                            TOCEndNode = start;
                        }
                        if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                    }
                    if (isTocExisted)
                    {
                        bool fixinruns = false;
                        LayoutCollector layout = new LayoutCollector(TempDoc);
                        TocEndpgno = layout.GetEndPageIndex(TOCEndNode);
                        foreach (Paragraph pr in TempDoc.GetChildNodes(NodeType.Paragraph, true).Where(X => (layout.GetStartPageIndex(X) == TocEndpgno)))
                        {
                            if (pr.Range.Text.Equals(ControlChar.SectionBreak) || pr.Range.Text.Equals(ControlChar.PageBreak))
                            {
                                
                                pr.Range.Replace("&b", string.Empty);
                                pr.Range.Replace("&m", string.Empty);
                                break;
                            }
                            else if (pr.Range.Text.Contains(ControlChar.SectionBreak) || pr.Range.Text.Contains(ControlChar.PageBreak))
                            {

                                if(pr.Runs != null)
                                {
                                    foreach(Run run in pr.Runs)
                                    {
                                        if((run.Range.Text.Contains(ControlChar.SectionBreak) || run.Range.Text.Contains(ControlChar.PageBreak)) && layout.GetStartPageIndex(run)== layout.GetEndPageIndex(run))
                                        {
                                            run.Range.Replace("&b", string.Empty);
                                            run.Range.Replace("&m", string.Empty);
                                            fixinruns = true;
                                            break;
                                        }
                                    }
                                }
                                if (fixinruns)
                                    break;
                            }
                        }
                    }
                    foreach (FieldStart start in TempDoc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                                pr1.Remove();
                        }
                        start.GetField().Remove();
                    }
                    Paragraph prB = new Paragraph(TempDoc);
                    List<Node> paragraphs = TempDoc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC "))).ToList();
                    foreach (Paragraph pr in paragraphs)
                    {
                        if ((pr.Range.Text.Contains(ControlChar.SectionBreak) && pr.IsEndOfSection) && prB != pr)
                            pr.ParentSection.Remove();
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph && pr.NextSibling.Range.Text.Contains(ControlChar.SectionBreak))
                        {
                            prB = (Paragraph)pr.NextSibling;
                            if (prB.IsEndOfSection)
                                prB.ParentSection.Remove();
                        }
                        pr.Remove();
                    }
                    TempDoc.Save(Tempfilename);
                    TempDoc = new Document(Tempfilename);
                    if (TempDoc.PageCount < 5)
                        TOCPresentBelowpages = true;
                    File.Delete(Tempfilename);
                }
                // Below code for to check TOC/LOT/LOF for below 5 pages file
                if (pagecount < 5 && !TOCPresentBelowpages)
                {
                    flag = true;
                    if (listFieldTOC.Count > 0)
                        TOCPresentBelowpages = true;
                }
                else if (!TOCPresentBelowpages)
                {
                    //Below code for check TOC/LOT/LOF presenct or not
                    List<Node> fieldnodes = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).FieldType == FieldType.FieldTOC).ToList();
                    foreach (FieldStart nd in fieldnodes)
                    {
                        if (nd.FieldType == FieldType.FieldSequence)
                        {
                            if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ TABLE") && TableFlag != true)
                                TableFlag = true;
                            else if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ FIGURE") && FigureFlag != true)
                                FigureFlag = true;
                        }
                        if (nd.FieldType == FieldType.FieldTOC)
                        {
                            if (!nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                Tocfamily = true;
                            else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                CheckLOT = true;
                            else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                CheckLOF = true;
                        }
                    }
                }
                ////check sectrion break/page break exist after toc.
                //bool TOC = false;
                //bool TOCLOT = false;
                //bool TOCLOF = false;
                //bool LOTLOF = false;
                //bool Failed = false;
                //string Sectionbreakcomments = string.Empty;
                //List<Node> TblCaptionFieldseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("TABLE")).ToList();
                //List<Node> FgrCaptionFieldseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("FIGURE")).ToList();
                //if (Tocfamily == true || CheckLOT == true || CheckLOF == true)
                //{                   
                //    if ((Tocfamily && CheckLOT && CheckLOF) || (Tocfamily && !CheckLOT && !CheckLOF && !TableFlag && ! FigureFlag)||(Tocfamily && CheckLOT && !CheckLOF && TableFlag && !FigureFlag)||(Tocfamily && !CheckLOT && CheckLOF && !TableFlag && FigureFlag)||(!Tocfamily && CheckLOT && CheckLOF && TableFlag && FigureFlag)||(!Tocfamily && CheckLOT && !CheckLOF && TableFlag && !FigureFlag)||(!Tocfamily && !CheckLOT && CheckLOF && !TableFlag && FigureFlag))
                //    {
                //        LayoutCollector layout = new LayoutCollector(doc);
                //        bool isTocExisted = false;
                //        Node TOCBeginNode = null;
                //        Node TOCEndNode = null;

                //        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                //        foreach (Node start in FieldNodes)
                //        {
                //            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                //            {
                //                isTocExisted = true;
                //                TOCBeginNode = start;
                //            }
                //            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                //            {
                //                TOCEndNode = start;
                //            }
                //            if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                //            {
                //                isTocExisted = true;
                //                TOCBeginNode = start;
                //            }
                //        }
                //        if (isTocExisted && TOCEndNode != null)
                //        {
                //            int tocendpgno = layout.GetEndPageIndex(TOCEndNode);
                //            List<Paragraph> para = new List<Paragraph>();
                //            if (tocendpgno > 0)
                //            {
                //                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                //                {
                //                    para.Add(pr);
                //                }
                //                if (para.Count == 0)
                //                {
                //                    TOC = true;
                //                    Failed = true;
                //                }
                //            }
                //        }
                //        if (Tocfamily && CheckLOT && CheckLOF)
                //        {
                //            bool isTocExisted1 = false;
                //            Node TOCBeginNode1 = null;
                //            Node TOCEndNode1 = null;
                //            Node ToCEndNode2 = null;
                //            int i = 0;
                //            LayoutCollector layout1 = new LayoutCollector(doc);
                //            DocumentBuilder builder1 = new DocumentBuilder(doc);
                //            List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                //            foreach (Node start in FieldNodes1)
                //            {
                //                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    isTocExisted1 = true;
                //                    TOCBeginNode1 = start;
                //                }
                //                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    if (i == 0)
                //                    {
                //                        TOCEndNode1 = start;
                //                        i++;
                //                    }
                //                    else
                //                    {
                //                        ToCEndNode2 = start;
                //                        break;
                //                    }
                //                }
                //            }
                //            if (isTocExisted1 && TOCEndNode1 != null)
                //            {
                //                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                //                List<Paragraph> para = new List<Paragraph>();
                //                if (tocendpgno > 0)
                //                {
                //                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                //                    {
                //                        para.Add(pr);
                //                    }
                //                    if (para.Count == 0)
                //                    {
                //                        if (TblCaptionFieldseq.Count > 12)
                //                        {
                //                            TOCLOT = true;
                //                            Failed = true;
                //                        }
                                                                          
                                       
                //                    }
                //                }
                //            }
                //            if (isTocExisted1 && ToCEndNode2 != null)
                //            {
                //                int tocendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                //                List<Paragraph> para = new List<Paragraph>();
                //                if (tocendpgno > 0)
                //                {
                //                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                //                    {
                //                        para.Add(pr);
                //                    }
                //                    if (para.Count == 0)
                //                    {
                //                        if (FgrCaptionFieldseq.Count > 12)
                //                        {
                //                            LOTLOF = true;
                //                            Failed = true;
                //                        }
                                        
                //                    }
                //                }
                //            }
                //        }
                //        else if (Tocfamily && CheckLOT && !CheckLOF)
                //        {
                //            bool isTocExisted1 = false;
                //            Node TOCBeginNode1 = null;
                //            Node TOCEndNode1 = null;
                //            LayoutCollector layout1 = new LayoutCollector(doc);
                //            DocumentBuilder builder1 = new DocumentBuilder(doc);
                //            List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                //            foreach (Node start in FieldNodes1)
                //            {
                //                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    isTocExisted1 = true;
                //                    TOCBeginNode1 = start;
                //                }
                //                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    TOCEndNode1 = start;
                //                    break;
                //                }

                //            }
                //            if (isTocExisted1 && TOCEndNode1 != null)
                //            {
                //                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                //                List<Paragraph> para = new List<Paragraph>();
                //                if (tocendpgno > 0)
                //                {
                //                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                //                    {
                //                        para.Add(pr);
                //                    }
                //                    if (para.Count == 0)
                //                    {
                //                        if (TblCaptionFieldseq.Count > 12)
                //                        {
                //                            TOCLOT = true;
                //                            Failed = true;
                //                        }
                                        
                //                    }
                //                }
                //            }

                //        }
                //        else if (Tocfamily && !CheckLOT && CheckLOF)
                //        {
                //            bool isTocExisted1 = false;
                //            Node TOCBeginNode1 = null;
                //            Node TOCEndNode1 = null;
                //            LayoutCollector layout1 = new LayoutCollector(doc);
                //            DocumentBuilder builder1 = new DocumentBuilder(doc);
                //            List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                //            foreach (Node start in FieldNodes1)
                //            {
                //                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    isTocExisted1 = true;
                //                    TOCBeginNode1 = start;
                //                }
                //                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    TOCEndNode1 = start;
                //                    break;
                //                }

                //            }
                //            if (isTocExisted1 && TOCEndNode1 != null)
                //            {
                //                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                //                List<Paragraph> para = new List<Paragraph>();
                //                if (tocendpgno > 0)
                //                {
                //                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                //                    {
                //                        para.Add(pr);
                //                    }
                //                    if (para.Count == 0)
                //                    {
                //                        if(FgrCaptionFieldseq.Count > 12)
                //                        {
                //                            TOCLOF = true;
                //                            Failed = true;
                //                        }                                        
                //                    }
                //                }
                //            }
                //        }
                //        else if (!Tocfamily && CheckLOT && CheckLOF)
                //        {
                //            bool isTocExisted1 = false;
                //            Node TOCBeginNode1 = null;
                //            Node TOCEndNode1 = null;
                //            LayoutCollector layout1 = new LayoutCollector(doc);
                //            DocumentBuilder builder1 = new DocumentBuilder(doc);
                //            List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                //            foreach (Node start in FieldNodes1)
                //            {
                //                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    isTocExisted1 = true;
                //                    TOCBeginNode1 = start;
                //                }
                //                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                //                {
                //                    TOCEndNode1 = start;
                //                    break;
                //                }

                //            }
                //            if (isTocExisted1 && TOCEndNode1 != null)
                //            {
                //                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                //                List<Paragraph> para = new List<Paragraph>();
                //                if (tocendpgno > 0)
                //                {
                //                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                //                    {
                //                        para.Add(pr);
                //                    }
                //                    if (para.Count == 0)
                //                    {
                //                        if(FgrCaptionFieldseq.Count > 12)
                //                        {
                //                            LOTLOF = true;
                //                            Failed = true;
                //                        }                                        
                //                    }
                //                }
                //            }
                //        }
                //    }                  
                //}
                ////section break Comments
                //if(Failed == true)
                //{
                //    rObj.QC_Result = "Failed";
                //    Sectionbreakcomments = " ,Section Break Not existed ";
                //    if (TOC)
                //        Sectionbreakcomments = Sectionbreakcomments + "After TOC,";
                //    if (TOCLOT)
                //        Sectionbreakcomments = Sectionbreakcomments + " Between TOC and LOT,";
                //    if (LOTLOF)
                //        Sectionbreakcomments = Sectionbreakcomments + " Between LOT and LOF,";
                //    if(TOCLOF)
                //        Sectionbreakcomments = Sectionbreakcomments + " Between TOC and LOF,";
                //    Sectionbreakcomments = Sectionbreakcomments.TrimEnd(',');
                //}     
                            
                if (TOCPresentBelowpages == true)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "TOC/LOT/LOF are present for document with below 5 pages";
                }
                else if (flag == true && TOCPresentBelowpages == false)
                {
                    if (rObj.Check_Type == 1)
                        rObj.QC_Result = "Failed";
                    else
                        rObj.QC_Result = "Passed";
                    rObj.Comments = "TOC,LOT and LOF are not required for document with below 5 pages";
                }
                else if (Tocfamily == true && CheckLOT == true && CheckLOF == true)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "TOC,LOT and LOF are present for 5 or above 5 pages";
                }
                else if (Tocfamily == false && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "TOC,LOT and LOF are not present";
                }
                else if (Tocfamily == false && CheckLOT == false && TableFlag == true && CheckLOF == true)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "TOC and LOT are not present";
                }
                else if (Tocfamily == false && CheckLOT == true && CheckLOF == false && FigureFlag == true)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "TOC and LOF are not present";
                }
                else if (Tocfamily == true && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "LOT and LOF are not present";
                }
                else if (Tocfamily == true && CheckLOT == true && FigureFlag == false && CheckLOF == false)
                {
                    if (rObj.Check_Type == 1)
                        rObj.QC_Result = "Failed";
                    else
                        rObj.QC_Result = "Passed";
                    rObj.Comments = "TOC and LOT are present";
                }
                else if (Tocfamily == true && CheckLOT == false && TableFlag == false && CheckLOF == true)
                {
                    if (rObj.Check_Type == 1)
                        rObj.QC_Result = "Failed";
                    else
                        rObj.QC_Result = "Passed";
                    rObj.Comments = "TOC and LOF are present";
                }
                else if (Tocfamily == true && CheckLOT == false && TableFlag == false && CheckLOF == false && FigureFlag == false)
                {
                    if (rObj.Check_Type == 1)
                        rObj.QC_Result = "Failed";
                    else
                        rObj.QC_Result = "Passed";
                    rObj.Comments = "TOC present";
                }
                else if (Tocfamily == false)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "TOC not present";
                }
                else if (CheckLOT == false && TableFlag == true)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "LOT not present";
                }
                else if (CheckLOF == false && FigureFlag == true)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "LOF not present";
                }
                else
                {
                    if (rObj.Check_Type == 1)
                        rObj.QC_Result = "Failed";
                    else
                        rObj.QC_Result = "Passed";
                    rObj.Comments = "This Check is passed";
                }
                if (rObj.Comments != "TOC,LOT and LOF are not required for document with below 5 pages" && rObj.Comments != "TOC/LOT/LOF are present for document with below 5 pages")
                {
                    //Below code to check predict styles
                    bool Predictflag = false;
                    foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        Predictflag = false;
                        RegOpsQC Predictstyles = new RegOpsQC();
                        RegOpsQC CheckList = new RegOpsQC();
                        List<Node> FontsLst = new List<Node>();
                        List<Node> ParaList = new List<Node>();
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr = (Paragraph)start.ParentParagraph.PreviousSibling;
                            if (chLst.Count > 0 && pr != null && (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                            {
                                if (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"Table of Contents\" Heading Style").FirstOrDefault();
                                }
                                else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"List of Tables\" Heading Style").FirstOrDefault();
                                }
                                else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"List of Figures\" Heading Style").FirstOrDefault();
                                }
                                if (CheckList != null && CheckList.Check_Type == 1)
                                {
                                    //ExistingStyle = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == CheckList.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == CheckList.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();
                                    //if (ExistingStyle != null)
                                    //    pr.ParagraphFormat.Style = ExistingStyle;
                                    Predictstyles = new WordParagraphActions().GetPredictstyles(rObj.Created_ID, CheckList.Check_Parameter.ToString());
                                    if (Predictstyles != null)
                                    {
                                        FontsLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Bold != Convert.ToBoolean(Predictstyles.Fontbold) || ((Run)x).Font.Italic != Convert.ToBoolean(Predictstyles.Fontitalic) || ((Run)x).Font.Size != Convert.ToDouble(Predictstyles.Fontsize) || ((Run)x).Font.Name != Predictstyles.Fontname).ToList();
                                    }
                                    if (FontsLst.Count > 0 || (Predictstyles.Shading != "" && Predictstyles.Shading != null && pr.ParagraphFormat.Shading.BackgroundPatternColor.Name.ToString() != Predictstyles.Shading) || (Predictstyles.Stylename != "" && Predictstyles.Stylename != null && pr.ParagraphFormat.StyleName != Predictstyles.Stylename) || (Predictstyles.Spaceafter != "" && Predictstyles.Spaceafter != null && pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(Predictstyles.Spaceafter)) || (Predictstyles.Spacebefore != "" && Predictstyles.Spacebefore != null && pr.ParagraphFormat.SpaceBefore != Convert.ToDouble(Predictstyles.Spacebefore)) || (Predictstyles.Linespacing != "" && Predictstyles.Linespacing != null && pr.ParagraphFormat.LineSpacing != Convert.ToDouble(Predictstyles.Linespacing)) || (Predictstyles.Alignment != "" && Predictstyles.Alignment != null && pr.ParagraphFormat.Alignment.ToString() != Predictstyles.Alignment))
                                    {
                                        Predictflag = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (Predictflag)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Given styles applied for existing toc, " + rObj.Comments;
                    }
                    //if (Failed)
                    //{
                    //    rObj.Comments = rObj.Comments + Sectionbreakcomments;
                    //}
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        private System.Drawing.Color GetSystemDrawingColorFromHexString(string hexString)
        {
            if (!System.Text.RegularExpressions.Regex.IsMatch(hexString, @"[#]([0-9]|[a-f]|[A-F]){6}\b"))
                throw new ArgumentException();
            int red = int.Parse(hexString.Substring(1, 2), System.Globalization.NumberStyles.HexNumber);
            int green = int.Parse(hexString.Substring(3, 2), System.Globalization.NumberStyles.HexNumber);
            int blue = int.Parse(hexString.Substring(5, 2), System.Globalization.NumberStyles.HexNumber);
            return Color.FromArgb(red, green, blue);
        }
        /// <summary>
        /// Check whether TOC,LOT,LOF and LOA are present for above 5 pages - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTOC_old(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            string res = string.Empty;
            bool Tocfamily = false;
            bool CheckLOT = false;
            bool CheckLOF = false;
            bool TableFlag = false;
            bool FigureFlag = false;
            bool CheckHeading = false;
            bool FixToc = false;
            bool FixLot = false;
            bool FixLof = false;
            string toccolor = string.Empty;
            string Tocstyname = string.Empty;
            string CheckStyles = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            string Tocposition = string.Empty;
            Style TOCStylename = null;
            Style LOTStylename = null;
            Style LOFStylename = null;
            string TOCFormat = string.Empty;
            string CommonComment = string.Empty;
            string FinalComment = string.Empty;
            bool CheckFix = false;
            bool PredictFlag = false;
            try
            {
                doc = new Document(rObj.DestFilePath);
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                int pagecount = doc.PageCount;
                for (int k = 0; k < chLst.Count; k++)
                {
                    if (chLst[k].Check_Type == 1)
                    {
                        CheckFix = true;
                    }
                }
                if (rObj.Comments.Contains("TOC,LOT and LOF are not required for document with below 5 pages") && pagecount < 5)
                {
                    rObj.QC_Result = "Passed";
                    return;
                }
                //Code for adding predict styles
                if (CheckFix && rObj.Comments.Contains("Given styles applied for existing toc"))
                {
                    foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        RegOpsQC Predictstyles = new RegOpsQC();
                        RegOpsQC CheckList = new RegOpsQC();
                        List<Node> FontsLst = new List<Node>();
                        List<Node> FontsBoldLst = new List<Node>();
                        List<Node> FontsSizeLst = new List<Node>();
                        List<Node> FontNamesLst = new List<Node>();
                        List<Node> FontsItalicLst = new List<Node>();
                        Style ExistingStyle = null;
                        bool AddComment = false;
                        string HeadingName = string.Empty;
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr = (Paragraph)start.ParentParagraph.PreviousSibling;
                            if (chLst.Count > 0 && pr != null && (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                            {
                                if (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"Table of Contents\" Heading Style").FirstOrDefault();
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        HeadingName = "TOC Heading:";
                                    }
                                }
                                else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"List of Tables\" Heading Style").FirstOrDefault();
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        HeadingName = " LOT Heading:";
                                    }
                                }
                                else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"List of Figures\" Heading Style").FirstOrDefault();
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        HeadingName = " LOF Heading:";
                                    }
                                }
                                if (CheckList != null && CheckList.Check_Type == 1)
                                {
                                    ExistingStyle = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == CheckList.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == CheckList.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();
                                    Predictstyles = new WordParagraphActions().GetPredictstyles(rObj.Created_ID, CheckList.Check_Parameter.ToString());
                                    if (Predictstyles != null && ExistingStyle != null)
                                    {
                                        //pr.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        if (Predictstyles.Fontbold != null && Predictstyles.Fontbold != "")
                                        {
                                            FontsBoldLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Bold != Convert.ToBoolean(Predictstyles.Fontbold)).ToList();
                                            if (FontsBoldLst.Count > 0)
                                            {
                                                CommonComment = CommonComment + " Font Bold should be '" + Predictstyles.Fontbold + "',";
                                                foreach (Run fnrun in pr.Runs)
                                                {
                                                    PredictFlag = true;
                                                    AddComment = true;
                                                    fnrun.Font.Bold = Convert.ToBoolean(Predictstyles.Fontbold);
                                                }
                                            }
                                        }
                                        if (Predictstyles.Fontsize != null && Predictstyles.Fontsize != "")
                                        {
                                            FontsSizeLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Size != Convert.ToDouble(Predictstyles.Fontsize)).ToList();
                                            if (FontsSizeLst.Count > 0)
                                            {
                                                CommonComment = CommonComment + " Font size should be '" + Predictstyles.Fontsize + "',";
                                                foreach (Run fnrun in pr.Runs)
                                                {
                                                    PredictFlag = true;
                                                    AddComment = true;
                                                    fnrun.Font.Size = Convert.ToDouble(Predictstyles.Fontsize);
                                                }
                                            }
                                        }
                                        if (Predictstyles.Fontname != null && Predictstyles.Fontname != "")
                                        {
                                            FontNamesLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Name != Predictstyles.Fontname).ToList();
                                            if (FontNamesLst.Count > 0)
                                            {
                                                FontNamesLst = FontNamesLst.Where(x => ((Run)x).Font.Name.ToUpper() != "SYMBOL").ToList();
                                            }
                                            if (FontNamesLst.Count > 0)
                                            {
                                                CommonComment = CommonComment + " Font name should be '" + Predictstyles.Fontname + "',";
                                                foreach (Run fnrun in pr.Runs)
                                                {
                                                    if (fnrun.Font.Name.ToUpper() != "SYMBOL")
                                                    {
                                                        PredictFlag = true;
                                                        AddComment = true;
                                                        fnrun.Font.Name = Predictstyles.Fontname;
                                                    }
                                                }
                                            }
                                        }
                                        if (Predictstyles.Fontitalic != null && Predictstyles.Fontitalic != "")
                                        {
                                            FontsItalicLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Italic != Convert.ToBoolean(Predictstyles.Fontitalic)).ToList();
                                            if (FontsItalicLst.Count > 0)
                                            {
                                                CommonComment = CommonComment + " Font italic should be '" + Predictstyles.Fontitalic + "',";
                                                foreach (Run fnrun in pr.Runs)
                                                {
                                                    PredictFlag = true;
                                                    AddComment = true;
                                                    fnrun.Font.Italic = Convert.ToBoolean(Predictstyles.Fontitalic);
                                                }
                                            }
                                        }
                                        if (Predictstyles.Shading != "" && Predictstyles.Shading != null && pr.ParagraphFormat.Shading.BackgroundPatternColor.Name.ToString() != Predictstyles.Shading)
                                        {
                                            PredictFlag = true;
                                            AddComment = true;
                                            pr.ParagraphFormat.Shading.BackgroundPatternColor = System.Drawing.Color.Empty;
                                            CommonComment = CommonComment + " Shading should be '" + Predictstyles.Shading + "',";
                                        }
                                        if (Predictstyles.Stylename != "" && Predictstyles.Stylename != null && pr.ParagraphFormat.StyleName != Predictstyles.Stylename)
                                        {
                                            PredictFlag = true;
                                            AddComment = true;
                                            pr.ParagraphFormat.StyleName = Predictstyles.Stylename;
                                            CommonComment = CommonComment + " Style name should be '" + Predictstyles.Stylename + "',";
                                        }
                                        if (Predictstyles.Spaceafter != "" && Predictstyles.Spaceafter != null && pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(Predictstyles.Spaceafter))
                                        {
                                            PredictFlag = true;
                                            AddComment = true;
                                            pr.ParagraphFormat.SpaceAfter = Convert.ToDouble(Predictstyles.Spaceafter);
                                            CommonComment = CommonComment + " Space after should be '" + Predictstyles.Spaceafter + "',";
                                        }
                                        if (Predictstyles.Spacebefore != "" && Predictstyles.Spacebefore != null && pr.ParagraphFormat.SpaceBefore != Convert.ToDouble(Predictstyles.Spacebefore))
                                        {
                                            PredictFlag = true;
                                            AddComment = true;
                                            pr.ParagraphFormat.SpaceBefore = Convert.ToDouble(Predictstyles.Spacebefore);
                                            CommonComment = CommonComment + " Space before should be '" + Predictstyles.Spacebefore + "',";
                                        }
                                        if (Predictstyles.Linespacing != "" && Predictstyles.Linespacing != null && pr.ParagraphFormat.LineSpacing != Convert.ToDouble(Predictstyles.Linespacing))
                                        {
                                            PredictFlag = true;
                                            AddComment = true;
                                            pr.ParagraphFormat.LineSpacing = Convert.ToDouble(Predictstyles.Linespacing);
                                            CommonComment = CommonComment + " Line spacing should be '" + Predictstyles.Linespacing + "',";
                                        }
                                        if (Predictstyles.Alignment != "" && Predictstyles.Alignment != null && pr.ParagraphFormat.Alignment.ToString() != Predictstyles.Alignment)
                                        {
                                            PredictFlag = true;
                                            AddComment = true;
                                            if (Predictstyles.Alignment == "Left")
                                                pr.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            else if (Predictstyles.Alignment == "Right")
                                                pr.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            else
                                                pr.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            CommonComment = CommonComment + " Alignment should be '" + Predictstyles.Alignment + "',";
                                        }
                                        CommonComment = CommonComment.TrimEnd(',');
                                        CommonComment = CommonComment + ".";
                                        if (AddComment)
                                        {
                                            FinalComment = FinalComment + HeadingName + CommonComment;
                                            CommonComment = string.Empty;
                                        }
                                        if (ExistingStyle != null && PredictFlag)
                                        {
                                            // pr.ParagraphFormat.Style = ExistingStyle;
                                            foreach (Run run in pr.Runs)
                                            {
                                                run.Font.Bold = ExistingStyle.Font.Bold;
                                                run.Font.Italic = ExistingStyle.Font.Italic;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                // Code for removing toc/lot/lof for below 5 pages (Including or excluding toc/lot/lof)
                if (CheckFix && rObj.Comments == "TOC/LOT/LOF are present for document with below 5 pages")
                {
                    
                    List<Node> SectionBreakslst = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => x.Range.Text.Contains(ControlChar.SectionBreak)).ToList();
                    foreach (Paragraph pr in SectionBreakslst)
                    {
                        Paragraph prbreak = pr;
                        Paragraph prcl = null;
                        if (pr.PreviousSibling != null && pr.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.PreviousSibling;
                        }
                        //if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        //{
                        //    if (prcl.IsEndOfSection)
                        //    {
                        //        prbreak.ParentSection.Body.Remove();
                        //    }
                        //}
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.NextSibling;
                        }
                        //if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        //{
                        //    if (prcl.IsEndOfSection)
                        //    {
                        //        prbreak.ParentSection.Body.Remove();
                        //    }
                        //}
                    }
                    bool isTocExisted = false;
                    Node TOCBeginNode = null;
                    Node TOCEndNode = null;
                    int TocEndpgno;
                    List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    foreach (Node start in FieldNodes)
                    {
                        if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                        if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                        {
                            TOCEndNode = start;
                        }
                        if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                    }
                    if (isTocExisted)
                    {
                        bool fixinruns = false;
                        LayoutCollector layout = new LayoutCollector(doc);
                        TocEndpgno = layout.GetEndPageIndex(TOCEndNode);
                        foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(X => (layout.GetStartPageIndex(X) == TocEndpgno)))
                        {
                            if (pr.Range.Text.Equals(ControlChar.SectionBreak) || pr.Range.Text.Equals(ControlChar.PageBreak))
                            {

                                pr.Range.Replace("&b", string.Empty);
                                pr.Range.Replace("&m", string.Empty);
                                break;
                            }
                            else if (pr.Range.Text.Contains(ControlChar.SectionBreak) || pr.Range.Text.Contains(ControlChar.PageBreak))
                            {


                                if (pr.Runs != null)
                                {
                                    foreach (Run run in pr.Runs)
                                    {
                                        if ((run.Range.Text.Contains(ControlChar.SectionBreak) || run.Range.Text.Contains(ControlChar.PageBreak)) && layout.GetStartPageIndex(run) == layout.GetEndPageIndex(run))
                                        {
                                            run.Range.Replace("&b", string.Empty);
                                            run.Range.Replace("&m", string.Empty);
                                            fixinruns = true;
                                            break;
                                        }
                                    }
                                }
                                if (fixinruns)
                                    break;
                            }
                        }
                    }
                    foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                            start.GetField().Remove();
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                            {
                                pr1.Remove();
                            }
                        }
                    }
                    Paragraph prB = new Paragraph(doc);
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC "))).ToList();
                    foreach (Paragraph pr in paragraphs)
                    {
                        //if ((pr.Range.Text.Contains(ControlChar.SectionBreak) && pr.IsEndOfSection) && prB != pr)
                        //{                           
                        //    //NodeCollection SectionLst = doc.GetChildNodes(NodeType.Section, true);
                        //    //foreach(Section section in SectionLst)
                        //    //{
                        //    //    section.HeadersFooters.LinkToPrevious(false);
                        //    //}
                        //    Section sct = pr.ParentSection;
                        //    // pr.ParentSection.Remove();
                        //    sct.HeadersFooters.LinkToPrevious(false);
                        //    sct.Body.Remove();
                        //    pr.Remove();

                        //}
                        //if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph && pr.NextSibling.Range.Text.Contains(ControlChar.SectionBreak))
                        //{
                        //    prB = (Paragraph)pr.NextSibling;
                        //    if (prB.IsEndOfSection)
                        //        prB.ParentSection.Remove();
                        //}
                        if (!pr.Range.Text.Contains("\f"))
                            pr.Remove();
                    }
                    //rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = "TOC/LOT/LOF Removed from the document below 5 pages";
                }
                else
                {
                    //Code for to check toc/lot/lof presence and to check given styles exist or not
                    Style paraStyle = null;
                    StyleCollection stylist = doc.Styles;
                    if (stylist.Where(x => x.Name.ToUpper() == "PARAGRAPH").Count() == 0)
                        paraStyle = stylist.Where(x => x.Name.ToUpper() == "PARAGRAPH").FirstOrDefault();
                    List<Node> TblCaptionFieldseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("TABLE")).ToList();
                    List<Node> FgrCaptionFieldseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("FIGURE")).ToList();
                    NodeCollection paragraphs = doc.GetChildNodes(NodeType.Paragraph, true);
                    List<Node> fieldnodes = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).FieldType == FieldType.FieldTOC).ToList();
                    foreach (FieldStart nd in fieldnodes)
                    {
                        if (nd.FieldType == FieldType.FieldSequence)
                        {
                            if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("SEQ TABLE") && TableFlag != true)
                                TableFlag = true;
                            else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("SEQ FIGURE") && FigureFlag != true)
                                FigureFlag = true;
                        }
                        if (nd.FieldType == FieldType.FieldTOC)
                        {
                            if (!nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                Tocfamily = true;
                            else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                CheckLOT = true;
                            else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                CheckLOF = true;
                        }
                    }
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;
                        if (chLst[k].Check_Name == "\"Table of Contents\" Heading Style" && chLst[k].Check_Type == 1)
                        {
                            TOCStylename = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();                                                          
                            if (TOCStylename == null)
                                CheckStyles = CheckStyles + chLst[k].Check_Parameter + ",";
                        }
                        else if (chLst[k].Check_Name == "\"List of Tables\" Heading Style" && chLst[k].Check_Type == 1)
                        {
                            LOTStylename = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();                                                           
                            if (LOTStylename == null)
                                CheckStyles = CheckStyles + chLst[k].Check_Parameter + ",";
                        }
                        else if (chLst[k].Check_Name == "\"List of Figures\" Heading Style" && chLst[k].Check_Type == 1)
                        {
                            LOFStylename = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();                               
                            if (LOFStylename == null)
                                CheckStyles = CheckStyles + chLst[k].Check_Parameter + ",";
                            // List<Style> stere = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).ToList();
                        }
                        else if (chLst[k].Check_Name == "TOC starts from")
                            Tocposition = chLst[k].Check_Parameter;
                        else if (chLst[k].Check_Name == "TOC Format")
                            TOCFormat = chLst[k].Check_Parameter;
                    }
                    //code for to add toc/Lot/lof
                    if (!Tocfamily)
                    {
                        //code for to find location to add toc.
                        Node heading = null;
                        DocumentBuilder builder = new DocumentBuilder(doc);
                        if ((CheckLOF || CheckLOT) && TOCStylename != null)
                        {
                            List<Node> Checkfieldsnodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart)).ToList();
                            foreach (FieldStart nd in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                            {
                                if (nd.ParentNode.PreviousSibling == null || nd.ParentNode.PreviousSibling.PreviousSibling == null)
                                {
                                    Paragraph pr = new Paragraph(doc);
                                    doc.Sections[0].Body.PrependChild(pr);
                                    builder.MoveTo(pr);
                                    break;
                                }
                                else
                                {
                                    heading = nd.ParentNode.PreviousSibling.PreviousSibling;
                                    builder.MoveTo(heading);
                                    break;
                                }
                            }
                        }
                        if (!CheckLOF && !CheckLOT && TOCStylename != null)
                        {
                            if (Tocposition == "Page 1")
                            {
                                CheckHeading = true;
                                Paragraph pr = new Paragraph(doc);
                                doc.Sections[0].Body.PrependChild(pr);
                                builder.MoveTo(pr);
                            }
                            else
                            {
                                foreach (Paragraph pr1 in paragraphs)
                                {
                                    if (pr1.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1 || pr1.ParagraphFormat.StyleName.ToUpper() == "HEADING 1 UNNUMBERED" || pr1.ParagraphFormat.StyleName.ToUpper() == "HEADING 1 NOTOC")
                                    {
                                        CheckHeading = true;
                                        if (pr1.PreviousSibling == null)
                                        {
                                            Paragraph pr = new Paragraph(doc);
                                            pr1.ParentSection.Body.PrependChild(pr);
                                            builder.MoveTo(pr);
                                            break;
                                        }
                                        else
                                        {
                                            if (pr1.PreviousSibling.NodeType == NodeType.Table)
                                            {
                                                Table table = (Table)pr1.PreviousSibling;
                                                if (table.NextSibling.ToString(SaveFormat.Text).Trim() != null && table.NextSibling.ToString(SaveFormat.Text).Trim() != "")
                                                {
                                                    Paragraph par = new Paragraph(doc);
                                                    table.ParentNode.InsertAfter(par, table);
                                                    builder.MoveTo(par);
                                                }
                                            }
                                            else
                                            {
                                                heading = pr1.PreviousSibling;
                                                Paragraph par = new Paragraph(doc);
                                                pr1.ParentNode.InsertBefore(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            break;
                                        }
                                    }
                                }
                            }
                            if (CheckHeading == false)
                            {
                                Paragraph pr = new Paragraph(doc);
                                doc.Sections[0].Body.PrependChild(pr);
                                builder.MoveTo(pr);
                            }
                        }
                        //Below Code for adding toc/lot/lof
                        if (chLst.Count > 0)
                        {
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;
                                if (chLst[k].Check_Name == "\"Table of Contents\" Heading Style" && chLst[k].Check_Type == 1)
                                {
                                    if (TOCStylename != null)
                                    {
                                        //TOCStylename.ParagraphFormat.OutlineLevel = OutlineLevel.BodyText;
                                        builder.ParagraphFormat.Style = TOCStylename;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("TABLE OF CONTENTS");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        if (TOCFormat != null && TOCFormat != "")
                                            builder.InsertTableOfContents(TOCFormat);
                                        else
                                        {
                                            builder.InsertTableOfContents("TOC \\o \"1 - 3\" \\h \\z \\u");
                                            // builder.InsertTableOfContents("TOC \\H \\Z \\T \"LIST OF FIGURES, 1, LIST OF TABLES, 1, LIST OF APPENDICES, 1, HEADING 1, 1, HEADING 1 UNNUMBERED, 1, HEADING 2, 2, HEADING 2 UNNUMBERED, 2, HEADING 3, 3, HEADING 3 UNNUMBERED, 3, HEADING 4, 4, HEADING 4 UNNUMBERED, 4\" \\* MERGEFORMAT ");
                                            // builder.InsertTableOfContents(@"TOC \\o \'1-3\' \\H \\Z \\U 'LIST OF FIGURES,1, LIST OF TABLES,1, LIST OF APPENDICES,1, HEADING 1,1, HEADING 1 UNNUMBERED,1,HEADING 1 UNNUMBERED, HEADING 2,2, HEADING 2 UNNUMBERED,2, HEADING 3,3, HEADING 3 UNNUMBERED,3, HEADING 4,4, HEADING 4 UNNUMBERED,4'");
                                        }
                                        if (!CheckLOF && !CheckLOT && (!TableFlag || (TableFlag && LOTStylename == null)) && (FigureFlag == false || (FigureFlag && LOFStylename == null)))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                        FixToc = true;
                                    }
                                }
                                if (chLst[k].Check_Name == "\"List of Tables\" Heading Style" && chLst[k].Check_Type == 1 && CheckLOT == false && TableFlag == true)
                                {
                                    if (LOTStylename != null)
                                    {
                                        if (TblCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style = LOTStylename;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF TABLES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("TOC \\h \\z \\c \"Table\"");
                                        if (!CheckLOF && (!FigureFlag || (FigureFlag && LOFStylename == null)))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                        FixLot = true;
                                    }

                                }
                                if (chLst[k].Check_Name == "\"List of Figures\" Heading Style" && chLst[k].Check_Type == 1 && !CheckLOF && FigureFlag)
                                {
                                    bool isLotExist = false;
                                    Node TOCEndNode = null;
                                    if (CheckLOT == true)
                                    {
                                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                                        foreach (Node start in FieldNodes)
                                        {
                                            if (!isLotExist && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                            {
                                                if (start.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                                    isLotExist = true;
                                            }
                                            if (isLotExist && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                            {
                                                TOCEndNode = start;
                                                break;
                                            }
                                        }
                                    }
                                    if (LOFStylename != null)
                                    {
                                        if (FgrCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style = LOFStylename;
                                        if (CheckLOT == true)
                                        {
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("TOC \\h \\z \\c \"Figure\"");
                                        if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                        {
                                            builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                        }
                                        else
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        if (paraStyle != null)
                                            builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        builder.CurrentParagraph.Remove();
                                        FixLof = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (Tocfamily == true && CheckLOT == false && CheckLOF == false && FigureFlag == true && TableFlag == true)
                    {
                        //Below code for adding LOT and LOF
                        bool isTocExisted = false;
                        Node TOCBeginNode = null;
                        Node TOCEndNode = null;
                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                        foreach (Node start in FieldNodes)
                        {
                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                            {
                                TOCEndNode = start;
                                break;
                            }
                            if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                        }
                        if (chLst.Count > 0)
                        {
                            DocumentBuilder builder = new DocumentBuilder(doc);
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;

                                if (chLst[k].Check_Name == "\"List of Tables\" Heading Style" && chLst[k].Check_Type == 1)
                                {
                                    if (LOTStylename != null)
                                    {
                                        if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            if (TOCEndNode.NextSibling != null)
                                            {
                                                Run run = (Run)TOCEndNode.NextSibling;
                                                Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        if (TblCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style = LOTStylename;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF TABLES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("TOC \\h \\z \\c \"Table\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        if (paraStyle != null)
                                            builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        FixLot = true;
                                    }
                                }
                                if (chLst[k].Check_Name == "\"List of Figures\" Heading Style" && chLst[k].Check_Type == 1)
                                {
                                    if (LOFStylename != null)
                                    {
                                        if (FgrCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style = LOFStylename;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("TOC \\h \\z \\c \"Figure\"");
                                        if (TOCEndNode.ParentNode.NextSibling != null && !TOCEndNode.ParentNode.NextSibling.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        }
                                        FixLof = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (Tocfamily == true && CheckLOF == false && FigureFlag == true)
                    {
                        //Below code for adding LOF
                        bool isTocExisted = false;
                        Node TOCBeginNode = null;
                        Node TOCEndNode = null;
                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                        foreach (Node start in FieldNodes)
                        {
                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                            {
                                TOCEndNode = start;
                            }
                        }
                        if (chLst.Count > 0)
                        {
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;

                                if (chLst[k].Check_Name == "\"List of Figures\" Heading Style" && chLst[k].Check_Type == 1)
                                {
                                    if (LOFStylename != null)
                                    {
                                        DocumentBuilder builder = new DocumentBuilder(doc);
                                        if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            if (TOCEndNode.NextSibling != null)
                                            {
                                                Run run = (Run)TOCEndNode.NextSibling;
                                                Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        if (FgrCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style = LOFStylename;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("TOC \\h \\z \\c \"Figure\"");

                                        if (TOCEndNode.ParentNode.NextSibling != null && !TOCEndNode.ParentNode.NextSibling.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        }
                                        FixLof = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (Tocfamily == true && CheckLOT == false && TableFlag == true)
                    {
                        //Below Code for adding LOT
                        bool isTocExisted = false;
                        Node TOCBeginNode = null;
                        Node TOCEndNode = null;
                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                        foreach (Node start in FieldNodes)
                        {
                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                            {
                                TOCEndNode = start;
                                break;
                            }
                        }
                        if (chLst.Count > 0)
                        {
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;

                                if (chLst[k].Check_Name == "\"List of Tables\" Heading Style" && chLst[k].Check_Type == 1)
                                {
                                    if (LOTStylename != null)
                                    {
                                        DocumentBuilder builder = new DocumentBuilder(doc);
                                        if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            if (TOCEndNode.NextSibling != null)
                                            {
                                                Run run = (Run)TOCEndNode.NextSibling;
                                                Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);
                                            //if (TOCEndNode.ParentNode.PreviousSibling!=null && TOCEndNode.ParentNode.PreviousSibling.NodeType==NodeType.Paragraph)
                                            //{
                                            //    Paragraph par = new Paragraph(doc);
                                            //    Run run = (Run)TOCEndNode.NextSibling;
                                            //    Paragraph pr1 = (Paragraph)TOCEndNode.ParentNode;
                                            //     pr1.ParentSection.Body.InsertBefore(par, pr1);
                                            //     builder.MoveTo(par);
                                            // //   Field fields = null;
                                            // //foreach(Field fld in TOCEndNode.ParentNode.PreviousSibling.Range.Fields)
                                            // //   {
                                            // //       fields = fld;
                                            // //       break;
                                            // //   }
                                            // //   pr1.ParentNode.InsertBefore(par, pr1);
                                            // //   int indx = doc.FirstSection.ChildNodes.IndexOf(TOCEndNode.ParentNode);                                                
                                            // //   builder.MoveToField(fields, false);
                                            //    //builder1.InsertBreak(BreakType.PageBreak);
                                            //}                                            
                                            //else
                                            //    builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        if (TblCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style = LOTStylename;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF TABLES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("TOC \\h \\z \\c \"Table\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        if (paraStyle != null)
                                            builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        FixLot = true;
                                    }
                                }
                            }
                        }
                    }
                    //below code to insert section break after existing toc.
                    //bool Sectionbreakfixed = false;
                    //if (Tocfamily || CheckLOT || CheckLOF && (!FixToc && !FixLot && !FixLof))
                    //{
                    //    if(Tocfamily && CheckLOT && CheckLOF)
                    //    {
                    //        bool isTocExisted1 = false;
                    //        Node TOCBeginNode1 = null;
                    //        Node TOCEndNode1 = null;
                    //        Node ToCEndNode2 = null;
                    //        int i = 0;
                    //        LayoutCollector layout1 = new LayoutCollector(doc);
                    //        DocumentBuilder builder1 = new DocumentBuilder(doc);
                    //            List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    //            foreach (Node start in FieldNodes1)
                    //            {
                    //                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                    //                {
                    //                    isTocExisted1 = true;
                    //                    TOCBeginNode1 = start;
                    //                }
                    //                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                    //                {
                    //                    if (i == 0)
                    //                    {
                    //                        TOCEndNode1 = start;
                    //                        i++;
                    //                    }
                    //                    else
                    //                    {
                    //                        ToCEndNode2 = start;
                    //                        break;
                    //                    }                                  
                                        
                                        
                    //                }
                                    
                    //            }
                    //            if (isTocExisted1 && TOCEndNode1 != null)
                    //            {
                    //                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                    //                List<Paragraph> para = new List<Paragraph>();
                    //                if (tocendpgno > 0)
                    //                {
                    //                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                    //                    {
                    //                        para.Add(pr);
                    //                    }
                    //                    if (para.Count > 0)
                    //                    {
                    //                        foreach (Paragraph pr in para)
                    //                        {
                    //                            if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                    //                            {
                    //                                pr.Range.Replace("&m", "&b");
                    //                            }
                    //                        }
                    //                    }
                    //                    else if(TblCaptionFieldseq.Count > 12)
                    //                    {
                    //                        builder1.MoveTo(TOCEndNode1.ParentNode);
                    //                        builder1.InsertBreak(BreakType.SectionBreakNewPage);
                    //                        Sectionbreakfixed = true;
                    //                    }
                    //                }
                    //            }
                    //        if (isTocExisted1 && ToCEndNode2 != null)
                    //        {
                    //            int tocendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                    //            List<Paragraph> para = new List<Paragraph>();
                    //            if (tocendpgno > 0)
                    //            {
                    //                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                    //                {
                    //                    para.Add(pr);
                    //                }
                    //                if (para.Count > 0)
                    //                {
                    //                    foreach (Paragraph pr in para)
                    //                    {
                    //                        if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                    //                        {
                    //                            pr.Range.Replace("&m", "&b");
                    //                        }
                    //                    }
                    //                }
                    //                else if (FgrCaptionFieldseq.Count > 12)
                    //                {
                    //                    builder1.MoveTo(ToCEndNode2.ParentNode);
                    //                    builder1.InsertBreak(BreakType.SectionBreakNewPage);
                    //                    Sectionbreakfixed = true;
                    //                }
                    //            }
                    //        }
                    //    }
                    //    else if(Tocfamily && CheckLOT && !CheckLOF)
                    //    {
                    //        bool isTocExisted1 = false;
                    //        Node TOCBeginNode1 = null;
                    //        Node TOCEndNode1 = null;
                    //        LayoutCollector layout1 = new LayoutCollector(doc);
                    //        DocumentBuilder builder1 = new DocumentBuilder(doc);
                    //        List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    //        foreach (Node start in FieldNodes1)
                    //        {
                    //            if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                    //            {
                    //                isTocExisted1 = true;
                    //                TOCBeginNode1 = start;
                    //            }
                    //            if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                    //            {
                    //                TOCEndNode1 = start;
                    //                break;
                    //            }

                    //        }
                    //        if (isTocExisted1 && TOCEndNode1 != null)
                    //        {
                    //            int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                    //            List<Paragraph> para = new List<Paragraph>();
                    //            if (tocendpgno > 0)
                    //            {
                    //                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                    //                {
                    //                    para.Add(pr);
                    //                }
                    //                if (para.Count > 0)
                    //                {
                    //                    foreach (Paragraph pr in para)
                    //                    {
                    //                        if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                    //                        {
                    //                            pr.Range.Replace("&m", "&b");
                    //                        }
                    //                    }
                    //                }
                    //                else if (TblCaptionFieldseq.Count > 12)
                    //                {
                    //                    builder1.MoveTo(TOCEndNode1.ParentNode);
                    //                    builder1.InsertBreak(BreakType.SectionBreakNewPage);
                    //                    Sectionbreakfixed = true;
                    //                }
                    //            }
                    //        }

                    //    }
                    //    else if (Tocfamily && !CheckLOT && CheckLOF)
                    //    {
                    //        bool isTocExisted1 = false;
                    //        Node TOCBeginNode1 = null;
                    //        Node TOCEndNode1 = null;
                    //        LayoutCollector layout1 = new LayoutCollector(doc);
                    //        DocumentBuilder builder1 = new DocumentBuilder(doc);
                    //        List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    //        foreach (Node start in FieldNodes1)
                    //        {
                    //            if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                    //            {
                    //                isTocExisted1 = true;
                    //                TOCBeginNode1 = start;
                    //            }
                    //            if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                    //            {
                    //                TOCEndNode1 = start;
                    //                break;
                    //            }

                    //        }
                    //        if (isTocExisted1 && TOCEndNode1 != null)
                    //        {
                    //            int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                    //            List<Paragraph> para = new List<Paragraph>();
                    //            if (tocendpgno > 0)
                    //            {
                    //                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                    //                {
                    //                    para.Add(pr);
                    //                }
                    //                if (para.Count > 0)
                    //                {
                    //                    foreach (Paragraph pr in para)
                    //                    {
                    //                        if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                    //                        {
                    //                            pr.Range.Replace("&m", "&b");
                    //                        }
                    //                    }
                    //                }
                    //                else if (FgrCaptionFieldseq.Count > 12)
                    //                {
                    //                    builder1.MoveTo(TOCEndNode1.ParentNode);
                    //                    builder1.InsertBreak(BreakType.SectionBreakNewPage);
                    //                    Sectionbreakfixed = true;
                    //                }
                    //            }
                    //        }

                    //    }
                    //    LayoutCollector layout = new LayoutCollector(doc);
                    //    bool isTocExisted = false;
                    //    Node TOCBeginNode = null;
                    //    Node TOCEndNode = null;
                    //    DocumentBuilder builder = new DocumentBuilder(doc);
                    //    List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    //    foreach (Node start in FieldNodes)
                    //    {
                    //        if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                    //        {
                    //            isTocExisted = true;
                    //            TOCBeginNode = start;
                    //        }
                    //        if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                    //        {
                    //            TOCEndNode = start;
                    //        }
                    //        if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                    //        {
                    //            isTocExisted = true;
                    //            TOCBeginNode = start;
                    //        }
                    //    }
                    //    if (isTocExisted && TOCEndNode != null)
                    //    {
                    //        int tocendpgno = layout.GetEndPageIndex(TOCEndNode);
                    //        List<Paragraph> para = new List<Paragraph>();
                    //        if(tocendpgno > 0)
                    //        {
                    //            foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                    //            {
                    //                para.Add(pr);
                    //            }
                    //            if(para.Count > 0)
                    //            {
                    //                foreach(Paragraph pr in para)
                    //                {
                    //                    if(pr.Range.Text.Contains(ControlChar.SectionBreak))
                    //                   {
                    //                        pr.Range.Replace("&m", "&b");
                    //                   }
                    //                }
                    //            }
                    //            else
                    //            {
                    //                builder.MoveTo(TOCEndNode.ParentNode);
                    //                builder.InsertBreak(BreakType.SectionBreakNewPage);
                    //                Sectionbreakfixed = true;
                    //            }
                    //        }                                                                        
                    //    }
                    //}
                    if (FixToc == true && FixLot == true && FixLof == true)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "TOC,LOT and LOF are created by REGai.";
                    }
                    else if (FixToc == true && FixLot == true && FixLof == false)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "TOC and LOT are created by REGai.";
                    }
                    else if (FixToc == true && FixLot == false && FixLof == true)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "TOC and LOF are created by REGai.";
                    }
                    else if (FixToc == false && FixLot == true && FixLof == true)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "LOT and LOF are created by REGai.";
                    }
                    else if (FixToc == true && FixLot == false && FixLof == false)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "TOC created by REGai.";
                    }
                    else if (FixToc == false && FixLot == false && FixLof == true)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "LOF created by REGai.";
                    }
                    else if (FixToc == false && FixLot == true && FixLof == false)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = "LOT created by REGai.";
                    }
                    //if (Sectionbreakfixed)
                    //{
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = rObj.Comments + ",These are Fixed";
                    //}
                    if (CheckStyles != null && CheckStyles != "")
                    {
                        CheckStyles = CheckStyles.Substring(0, CheckStyles.Length - 1);
                        rObj.Comments = rObj.Comments + "," + CheckStyles + " styles not exist in the document.";
                        rObj.Comments = rObj.Comments.Replace("Given styles applied for existing toc,", "");
                    }
                    if (PredictFlag)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        if (!rObj.Comments.Contains("Given styles applied for existing toc") || (FinalComment != null && FinalComment != ""))
                            rObj.Comments = FinalComment + "These are fixed," + rObj.Comments;
                        rObj.Comments = rObj.Comments.Replace("Given styles applied for existing toc,", "");
                    }
                    if (rObj.Is_Fixed != 1 && (CheckFix || rObj.Comments.Trim() == "TOC and LOT are present" || rObj.Comments == "TOC and LOF are present" || rObj.Comments == "TOC present" || rObj.Comments == "This Check is passed"))
                    {
                        rObj.QC_Result = "Passed";
                    }                    
                }
                doc.UpdateFields();
                doc.Save(rObj.DestFilePath);
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        /// <summary>
        /// Check whether TOC,LOT,LOF and LOA are present for above 5 pages - check(mesoblast)
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckTOCExists(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            bool TOCPresentBelowpages = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool Tocfamily = false;
            bool CheckLOT = false;
            bool CheckLOF = false;
            bool CheckLOA = false;
            bool TableFlag = false;
            bool FigureFlag = false;
            bool AppendixFlag = false;
            bool positionFlag = false;
            bool FontstylFlag = false;
            string Level1FontFamily = string.Empty;
            bool sectionbreak = false;
            bool lotlofflag = false;       
            bool LotandLOffontstylesflag = false;
            string Lot_And_LOfFOntSize = string.Empty;
            string Lofloffont_family = string.Empty;
            string Tocheadingfontfamily = string.Empty;
            string Tocheadingfontsize = string.Empty;
            string Tocheadingspacingafter = string.Empty;          
            string LOACaption = string.Empty;
            bool allsubchecks = false;
            bool CheckType = false;
            chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
            try
            {               
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;                    

                    if (chLst[k].Check_Name == "Field code for List of Appendices" && chLst[k].Check_Type == 1)
                    {
                        LOACaption = chLst[k].Check_Parameter;
                    }
                }
                int pagecount = doc.PageCount;
                Document TempDoc = doc.Clone();

                List<Node> listFieldTOC = TempDoc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC).ToList();
                //Below code for checking toc/LOT/LOF for the file having below 5 pages excluding toc/lot/lof
                if (pagecount >= 5 && listFieldTOC.Count > 0)
                {
                    string Tempfilename = rObj.DestFilePath;
                    Tempfilename = Tempfilename.Replace(rObj.File_Name, "Temp_" + rObj.File_Name);
                    List<Node> SectionBreakslst = TempDoc.GetChildNodes(NodeType.Paragraph, true).Where(x => x.Range.Text.Contains(ControlChar.SectionBreak)).ToList();
                    foreach (Paragraph pr in SectionBreakslst)
                    {
                        Paragraph prbreak = pr;
                        Paragraph prcl = null;
                        if (pr.PreviousSibling != null && pr.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.PreviousSibling;
                        }
                        if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF APPENDICES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        {
                            if (prcl.IsEndOfSection)
                            {
                                prbreak.ParentSection.Remove();
                            }
                        }
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.NextSibling;
                        }
                        if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF APPENDICES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        {
                            if (prcl.IsEndOfSection)
                            {
                                prbreak.ParentSection.Remove();
                            }
                        }
                    }
                    bool isTocExisted = false;
                    Node TOCBeginNode = null;
                    Node TOCEndNode = null;                    
                    List<Node> FieldNodes = TempDoc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    foreach (Node start in FieldNodes)
                    {
                        if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                        if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                        {
                            TOCEndNode = start;
                        }
                        if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                    }
                    //if (isTocExisted)
                    //{
                    //    bool fixinruns = false;
                    //    LayoutCollector layout = new LayoutCollector(TempDoc);
                    //    TocEndpgno = layout.GetEndPageIndex(TOCEndNode);
                    //    foreach (Paragraph pr in TempDoc.GetChildNodes(NodeType.Paragraph, true).Where(X => (layout.GetStartPageIndex(X) == TocEndpgno)))
                    //    {
                    //        if (pr.Range.Text.Equals(ControlChar.SectionBreak) || pr.Range.Text.Equals(ControlChar.PageBreak))
                    //        {

                    //            pr.Range.Replace("&b", string.Empty);
                    //            pr.Range.Replace("&m", string.Empty);
                    //            break;
                    //        }
                    //        else if (pr.Range.Text.Contains(ControlChar.SectionBreak) || pr.Range.Text.Contains(ControlChar.PageBreak))
                    //        {

                    //            if (pr.Runs != null)
                    //            {
                    //                foreach (Run run in pr.Runs)
                    //                {
                    //                    if ((run.Range.Text.Contains(ControlChar.SectionBreak) || run.Range.Text.Contains(ControlChar.PageBreak)) && layout.GetStartPageIndex(run) == layout.GetEndPageIndex(run))
                    //                    {
                    //                        run.Range.Replace("&b", string.Empty);
                    //                        run.Range.Replace("&m", string.Empty);
                    //                        fixinruns = true;
                    //                        break;
                    //                    }
                    //                }
                    //            }
                    //            if (fixinruns)
                    //                break;
                    //        }
                    //    }
                    //}
                    foreach (FieldStart start in TempDoc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                                pr1.Remove();
                        }
                        start.GetField().Remove();
                    }
                    Paragraph prB = new Paragraph(TempDoc);
                    List<Node> paragraphs = TempDoc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF APPENDICES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC "))).ToList();
                    foreach (Paragraph pr in paragraphs)
                    {
                        if ((pr.Range.Text.Contains(ControlChar.SectionBreak) && pr.IsEndOfSection) && prB != pr)
                            pr.ParentSection.Remove();
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph && pr.NextSibling.Range.Text.Contains(ControlChar.SectionBreak))
                        {
                            prB = (Paragraph)pr.NextSibling;
                            if (prB.IsEndOfSection)
                                prB.ParentSection.Remove();
                        }
                        pr.Remove();
                    }
                    TempDoc.Save(Tempfilename);

                    TempDoc = new Document(Tempfilename);
                    if (TempDoc.PageCount < 5)
                        TOCPresentBelowpages = true;
                    File.Delete(Tempfilename);
                }
                // Below code for to check TOC/LOT/LOF/LOA for below 5 pages file
                if (pagecount < 5 && !TOCPresentBelowpages)
                {
                    flag = true;
                    if (listFieldTOC.Count > 0)
                        TOCPresentBelowpages = true;
                }
                else if (!TOCPresentBelowpages)
                {
                    //Below code for check TOC/LOT/LOF/LOA presenct or not
                    List<Node> fieldnodes = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).FieldType == FieldType.FieldTOC).ToList();

                    if (LOACaption != null && LOACaption != "")
                    {
                        foreach (FieldStart nd in fieldnodes)
                        {
                            if (nd.FieldType == FieldType.FieldSequence)
                            {
                                if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ TABLE") && TableFlag != true)
                                    TableFlag = true;
                                else if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ FIGURE") && FigureFlag != true)
                                    FigureFlag = true;
                                else if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ " + LOACaption.ToUpper()) && AppendixFlag != true)
                                    AppendixFlag = true;
                            }
                            if (nd.FieldType == FieldType.FieldTOC)
                            {
                                if (!nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains(LOACaption.ToUpper()))
                                    Tocfamily = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    CheckLOT = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                    CheckLOF = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains(LOACaption.ToUpper()))
                                    CheckLOA = true;
                            }
                        }
                    }
                    else
                    {
                        foreach (FieldStart nd in fieldnodes)
                        {
                            if (nd.FieldType == FieldType.FieldSequence)
                            {
                                if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ TABLE") && TableFlag != true)
                                    TableFlag = true;
                                else if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ FIGURE") && FigureFlag != true)
                                    FigureFlag = true;
                            }
                            if (nd.FieldType == FieldType.FieldTOC)
                            {
                                if (!nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    Tocfamily = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    CheckLOT = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                    CheckLOF = true;
                            }
                        }
                    }
                    if (!AppendixFlag && !CheckLOA)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                            chLst[k].JID = rObj.JID;
                            chLst[k].Job_ID = rObj.Job_ID;
                            chLst[k].Folder_Name = rObj.Folder_Name;
                            chLst[k].File_Name = rObj.File_Name;
                            chLst[k].Created_ID = rObj.Created_ID;                            

                            if (chLst[k].Check_Name == "Field code for List of Appendices")
                            {
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Comments = "No Field code exist in document";
                            }
                        }
                    }
                    //TOC LOT LOF LOA HEADING STYLES FOR EXISTING TOC CODE  
                    if (Tocfamily || CheckLOT || CheckLOT || CheckLOA)
                    {
                        chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                        for (int p = 0; p < chLst.Count; p++)
                        {
                            if (chLst[p].Check_Type == 1)
                                CheckType = true;
                            chLst[p].Parent_Checklist_ID = rObj.CheckList_ID;
                            chLst[p].JID = rObj.JID;
                            chLst[p].Job_ID = rObj.Job_ID;
                            chLst[p].Folder_Name = rObj.Folder_Name;
                            chLst[p].File_Name = rObj.File_Name;
                            chLst[p].Created_ID = rObj.Created_ID;
                            

                            List<Node> TOCHeadingpara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).ParagraphFormat.StyleName != "TOC 1" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 2" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 3" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 4" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 5" && ((Paragraph)x).ParagraphFormat.StyleName != "Table of Figures" && ((Paragraph)x).Range.Text.ToUpper().Equals("TABLE OF CONTENTS") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF TABLES") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF FIGURES") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF APPENDICES")|| ((Paragraph)x).Range.Text.ToUpper().Equals("TABLE OF CONTENTS\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF TABLES\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF FIGURES\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF APPENDICES\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("TABLE OF CONTENT") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF TABLE") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF FIGURE"))).ToList();
                            if (chLst[p].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family")
                            {
                                if (TOCHeadingpara.Count > 0)
                                {
                                    foreach (Paragraph pr in TOCHeadingpara)
                                    {                                       
                                            foreach (Run run in pr.Runs)
                                            {
                                                if (run.Font.Name.ToUpper() != chLst[p].Check_Parameter.ToUpper())
                                                {
                                                    allsubchecks = true;
                                                    chLst[p].QC_Result = "Failed";
                                                    chLst[p].Comments = "TOC, LOT, LOF and LOA Heading - FontFamily is not in " + "\"" + chLst[p].Check_Parameter + "\"";
                                                    break;
                                                }
                                                else
                                                {
                                                    chLst[p].QC_Result = "passed";
                                                    chLst[p].Comments = "TOC, LOT, LOF and LOA Heading - FontFamily is in " + "\"" + chLst[p].Check_Parameter + "\"";
                                                }
                                            }                                       

                                    }
                                }

                            }
                            if (chLst[p].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Size")
                            {
                                if (TOCHeadingpara.Count > 0)
                                {
                                    foreach (Paragraph pr in TOCHeadingpara)
                                    {                                   
                                            foreach (Run run in pr.Runs)
                                            {
                                                if (run.Font.Size != Convert.ToDouble(chLst[p].Check_Parameter))
                                                {
                                                    allsubchecks = true;
                                                    chLst[p].QC_Result = "Failed";
                                                    chLst[p].Comments = "TOC, LOT, LOF and LOA Heading - Font size is not in " + "\"" + chLst[p].Check_Parameter +"\"";
                                                    break;
                                                }
                                                else
                                                {
                                                    chLst[p].QC_Result = "passed";
                                                    chLst[p].Comments = "TOC, LOT, LOF and LOA Heading - Font size is in " + "\"" + chLst[p].Check_Parameter + "\"";
                                                }
                                            }                                       
                                    }

                                }
                            }
                            if (chLst[p].Check_Name == "TOC, LOT, LOF and LOA Heading - Spacing after")
                            {
                                if (TOCHeadingpara.Count > 0)
                                {
                                    foreach (Paragraph pr in TOCHeadingpara)
                                    {
                                        if (pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[p].Check_Parameter))
                                        {
                                            allsubchecks = true;
                                            chLst[p].QC_Result = "Failed";
                                            chLst[p].Comments = "TOC, LOT, LOF and LOA Heading - Spacing after is not in " + "\"" + chLst[p].Check_Parameter + "\"";
                                            break;
                                        }
                                        else
                                        {
                                            chLst[p].QC_Result = "passed";
                                            chLst[p].Comments = "TOC, LOT, LOF and LOA Heading - Spacing after is in " + "\"" + chLst[p].Check_Parameter + "\"";
                                        }
                                    }
                                }
                            }

                            
                        }
                    }
                    //TOC heading styles ending
                    
                        DocumentBuilder bulder = new DocumentBuilder(doc);
                        chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                            chLst[k].JID = rObj.JID;
                            chLst[k].Job_ID = rObj.Job_ID;
                            chLst[k].Folder_Name = rObj.Folder_Name;
                            chLst[k].File_Name = rObj.File_Name;
                            chLst[k].Created_ID = rObj.Created_ID;
                           
                        if (Tocfamily == true)
                        {
                            if (chLst[k].Check_Name == "Add Section break after TOC, LOT, LOF and LOA")
                            {
                                //section break for existing Toc
                                Document Tempdoc1 = doc;
                                string Tempfilename1 = rObj.DestFilePath;
                                Tempfilename1 = Tempfilename1.Replace(rObj.File_Name, "Temp_1" + rObj.File_Name);
                                Tempdoc1.Save(Tempfilename1);
                                Tempdoc1 = new Document(Tempfilename1);
                                List<Node> TblCaptionFieldseq = Tempdoc1.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("TABLE")).ToList();
                                List<Node> FgrCaptionFieldseq = Tempdoc1.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("FIGURE")).ToList();

                                int v = 0;
                                int w = 0;
                                int y = 0;
                                int z = 0;
                                bool afterentireTOC = true;
                                bool TOCLOT = true;
                                bool TOCLOF = true;
                                bool LOTLOF = true;
                                if (Tocfamily || CheckLOT || CheckLOF)
                                {
                                    if ((Tocfamily && CheckLOT && CheckLOF) || (Tocfamily && !CheckLOT && !CheckLOF && !TableFlag && !FigureFlag) || (Tocfamily && CheckLOT && !CheckLOF && TableFlag && !FigureFlag) || (Tocfamily && !CheckLOT && CheckLOF && !TableFlag && FigureFlag) || (!Tocfamily && CheckLOT && CheckLOF && TableFlag && FigureFlag) || (!Tocfamily && CheckLOT && !CheckLOF && TableFlag && !FigureFlag) || (!Tocfamily && !CheckLOT && CheckLOF && !TableFlag && FigureFlag))
                                    {
                                        if (Tocfamily && CheckLOT && CheckLOF)
                                        {
                                            bool isTocExisted1 = false;
                                            Node TOCBeginNode1 = null;
                                            Node TOCEndNode1 = null;
                                            Node ToCEndNode2 = null;
                                            Node TOCEndNode3 = null;

                                            int j = 0;
                                            LayoutCollector layout1 = new LayoutCollector(Tempdoc1);
                                            DocumentBuilder builder1 = new DocumentBuilder(Tempdoc1);
                                            List<Node> FieldNodes1 = Tempdoc1.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes1)
                                            {
                                                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted1 = true;
                                                    TOCBeginNode1 = start;
                                                }
                                                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    if (j == 0)
                                                    {
                                                        TOCEndNode1 = start;
                                                        j++;
                                                    }
                                                    else if (j == 1)
                                                    {
                                                        ToCEndNode2 = start;
                                                        j++;
                                                    }
                                                    else
                                                    {
                                                        TOCEndNode3 = start;
                                                    }
                                                }
                                            }
                                            if (isTocExisted1 && TOCEndNode1 != null && TOCEndNode3 != null && layout1.GetEndPageIndex(TOCEndNode1) != layout1.GetEndPageIndex(TOCEndNode3))
                                            {
                                                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                int lotendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                int lofendpgno = layout1.GetEndPageIndex(TOCEndNode3);
                                                List<Paragraph> para = new List<Paragraph>();
                                               
                                                if (tocendpgno > 0)
                                                {
                                                    foreach (Paragraph pr in Tempdoc1.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                    {
                                                        para.Add(pr);
                                                    }                                                    
                                                    if(tocendpgno == lotendpgno)
                                                    {
                                                        TOCLOT = false;
                                                    }
                                                    else if(para.Count > 0)
                                                    {
                                                        foreach (Paragraph pr in para)
                                                        {
                                                            if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                            {
                                                                v = pr.Range.Replace("&m", "&b");
                                                            }
                                                        }
                                                    }
                                                    else
                                                        TOCLOT = false;
                                                }
                                            }
                                            if (isTocExisted1 && ToCEndNode2 != null && TOCEndNode3 != null && layout1.GetEndPageIndex(ToCEndNode2) != layout1.GetEndPageIndex(TOCEndNode3))
                                            {
                                                int tocendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                List<Paragraph> para = new List<Paragraph>();
                                                if (tocendpgno > 0)
                                                {
                                                    foreach (Paragraph pr in Tempdoc1.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                    {
                                                        para.Add(pr);
                                                    }
                                                    if (para.Count > 0)
                                                    {
                                                        foreach (Paragraph pr in para)
                                                        {
                                                            if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                            {
                                                                w = pr.Range.Replace("&m", "&b");
                                                            }
                                                        }
                                                    }
                                                    else if (FgrCaptionFieldseq.Count > 12)
                                                    {
                                                        LOTLOF = false;
                                                    }
                                                }
                                            }
                                        }
                                        else if (Tocfamily && CheckLOT && !CheckLOF)
                                        {
                                            bool isTocExisted1 = false;
                                            Node TOCBeginNode1 = null;
                                            Node TOCEndNode1 = null;
                                            Node ToCEndNode2 = null;
                                            int j = 0;
                                            LayoutCollector layout1 = new LayoutCollector(Tempdoc1);
                                            DocumentBuilder builder1 = new DocumentBuilder(Tempdoc1);
                                            List<Node> FieldNodes1 = Tempdoc1.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes1)
                                            {
                                                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted1 = true;
                                                    TOCBeginNode1 = start;
                                                }
                                                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    if (j == 0)
                                                    {
                                                        TOCEndNode1 = start;
                                                        j++;
                                                    }
                                                    else if (j == 1)
                                                    {
                                                        ToCEndNode2 = start;
                                                        j++;
                                                    }

                                                }
                                            }
                                            if (isTocExisted1 && TOCEndNode1 != null  && ToCEndNode2 != null)
                                            {
                                                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                int lotendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                List<Paragraph> para = new List<Paragraph>();
                                                if (tocendpgno > 0)
                                                {
                                                    foreach (Paragraph pr in Tempdoc1.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                    {
                                                        para.Add(pr);
                                                    }
                                                    if(tocendpgno== lotendpgno)
                                                        TOCLOT = false;
                                                    else if (para.Count > 0)
                                                    {
                                                        foreach (Paragraph pr in para)
                                                        {
                                                            if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                            {
                                                                v = pr.Range.Replace("&m", "&b");
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        TOCLOT = false;
                                                    }
                                                }
                                            }

                                        }
                                        else if (Tocfamily && !CheckLOT && CheckLOF)
                                        {
                                            bool isTocExisted1 = false;
                                            Node TOCBeginNode1 = null;
                                            Node TOCEndNode1 = null;
                                            Node ToCEndNode2 = null;
                                            int j = 0;
                                            LayoutCollector layout1 = new LayoutCollector(Tempdoc1);
                                            DocumentBuilder builder1 = new DocumentBuilder(Tempdoc1);
                                            List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes1)
                                            {
                                                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted1 = true;
                                                    TOCBeginNode1 = start;
                                                }
                                                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    if (j == 0)
                                                    {
                                                        TOCEndNode1 = start;
                                                        j++;
                                                    }
                                                    else if (j == 1)
                                                    {
                                                        ToCEndNode2 = start;
                                                        j++;
                                                    }

                                                }
                                            }
                                            if (isTocExisted1 && TOCEndNode1 != null && ToCEndNode2 != null)
                                            {
                                                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                int lofendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                List<Paragraph> para = new List<Paragraph>();
                                                if (tocendpgno > 0)
                                                {
                                                    foreach (Paragraph pr in Tempdoc1.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                    {
                                                        para.Add(pr);
                                                    }
                                                    if(tocendpgno== lofendpgno)
                                                        TOCLOF = false;
                                                    else if (para.Count > 0)
                                                    {
                                                        foreach (Paragraph pr in para)
                                                        {
                                                            if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                            {
                                                                y = pr.Range.Replace("&m", "&b");
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        TOCLOF = false;
                                                    }
                                                }
                                            }

                                        }
                                        else if (!Tocfamily && CheckLOT && CheckLOF)
                                        {
                                            bool isTocExisted1 = false;
                                            Node TOCBeginNode1 = null;
                                            Node TOCEndNode1 = null;
                                            Node ToCEndNode2 = null;
                                            int j = 0;
                                            LayoutCollector layout1 = new LayoutCollector(Tempdoc1);
                                            DocumentBuilder builder1 = new DocumentBuilder(Tempdoc1);
                                            List<Node> FieldNodes1 = Tempdoc1.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes1)
                                            {
                                                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted1 = true;
                                                    TOCBeginNode1 = start;
                                                }
                                                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    if (j == 0)
                                                    {
                                                        TOCEndNode1 = start;
                                                        j++;
                                                    }
                                                    else if (j == 1)
                                                    {
                                                        ToCEndNode2 = start;
                                                        j++;
                                                    }

                                                }
                                            }
                                            if (isTocExisted1 && TOCEndNode1 != null && ToCEndNode2 != null)
                                            {
                                                int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                int lotendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                List<Paragraph> para = new List<Paragraph>();
                                                if (tocendpgno > 0)
                                                {
                                                    foreach (Paragraph pr in Tempdoc1.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                    {
                                                        para.Add(pr);
                                                    }
                                                    if(tocendpgno== lotendpgno)
                                                        LOTLOF = false;
                                                    else if (para.Count > 0)
                                                    {
                                                        foreach (Paragraph pr in para)
                                                        {
                                                            if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                            {
                                                                w = pr.Range.Replace("&m", "&b");
                                                            }
                                                        }
                                                    }
                                                    else if (FgrCaptionFieldseq.Count > 12)
                                                    {
                                                        LOTLOF = false;
                                                    }
                                                }
                                            }
                                        }
                                        LayoutCollector layout = new LayoutCollector(Tempdoc1);
                                        bool isTocExisted = false;
                                        Node TOCBeginNode = null;
                                        Node TOCEndNode = null;
                                        DocumentBuilder builder = new DocumentBuilder(Tempdoc1);
                                        List<Node> FieldNodes = Tempdoc1.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                        foreach (Node start in FieldNodes)
                                        {
                                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                            {
                                                isTocExisted = true;
                                                TOCBeginNode = start;
                                            }
                                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                            {
                                                TOCEndNode = start;
                                            }
                                            if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                                            {
                                                isTocExisted = true;
                                                TOCBeginNode = start;
                                            }
                                        }
                                        if (isTocExisted && TOCEndNode != null)
                                        {
                                            int tocendpgno = layout.GetEndPageIndex(TOCEndNode);
                                            List<Paragraph> para = new List<Paragraph>();
                                            if (tocendpgno > 0)
                                            {
                                                foreach (Paragraph pr in Tempdoc1.GetChildNodes(NodeType.Paragraph, true).Where(x => layout.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                {
                                                    para.Add(pr);
                                                }
                                                if (para.Count > 0)
                                                {
                                                    foreach (Paragraph pr in para)
                                                    {
                                                        if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                        {
                                                            z = pr.Range.Replace("&m", "&b");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    afterentireTOC = false;

                                                }
                                            }
                                        }
                                    }

                                }
                                string sectionbreakcommentstext = string.Empty;
                                string pagebrekcomments = "Page Break existed ";
                                int h = 0;
                                if (v == 1)
                                {
                                    h = h + 1;
                                    pagebrekcomments = pagebrekcomments + "between TOC and LOT, ";
                                }
                                if (w == 1)
                                {
                                    h = h + 1;
                                    pagebrekcomments = pagebrekcomments + "between LOT and LOF, ";
                                }
                                if (y == 1)
                                {
                                    h = h + 1;
                                    pagebrekcomments = pagebrekcomments + "between TOC and LOF, ";
                                }
                                if (z == 1)
                                {
                                    h = h + 1;
                                    pagebrekcomments = pagebrekcomments + "after entire TOC, ";
                                }
                                if (v == 1 || w == 1 || y == 1 || z == 1)
                                {

                                    if (h >= 1)
                                        sectionbreakcommentstext = pagebrekcomments.TrimEnd(',');
                                }
                                if (!afterentireTOC || !TOCLOT || !TOCLOF || !LOTLOF)
                                {
                                    sectionbreakcommentstext = sectionbreakcommentstext + "NO section break ";
                                    if (!TOCLOT)
                                    {
                                        sectionbreakcommentstext = sectionbreakcommentstext + "between TOC and LOT, ";

                                    }
                                    if (!LOTLOF)
                                    {
                                        sectionbreakcommentstext = sectionbreakcommentstext + "between LOT and LOF, ";
                                    }
                                    if (!TOCLOF)
                                    {
                                        sectionbreakcommentstext = sectionbreakcommentstext + "between TOC and LOF, ";
                                    }
                                    if (!afterentireTOC)
                                    {
                                        sectionbreakcommentstext = sectionbreakcommentstext + "after entire TOC, ";
                                    }
                                }
                                if (h >= 1 || !afterentireTOC || !TOCLOT || !TOCLOF || !LOTLOF)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = sectionbreakcommentstext.TrimEnd(',');
                                    if (chLst[k].Check_Type == 1)
                                        sectionbreak = true;

                                }
                                else if (TableFlag || FigureFlag)
                                {
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "All section breaks are in correct order";
                                }
                                Tempdoc1.Save(Tempfilename1);
                                File.Delete(Tempfilename1);
                            }
                           
                        }

                        if (Tocfamily || CheckLOT || CheckLOF || CheckLOA)
                        {
                            if (chLst[k].Check_Type == 1)
                                CheckType = true;
                            //Level checks
                            Style toc1 = doc.Styles[StyleIdentifier.Toc1];

                            if (chLst[k].Check_Name == "Level1 - Position")
                            {
                                positionFlag = false;
                                if (toc1 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level l Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Left" && toc1.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 1-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Center" && toc1.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 1-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Right" && toc1.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 1-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Justify" && toc1.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 1-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                if (positionFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 1-Position alignment is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level1 - Font Size")
                            {
                                if (toc1 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level l Heading style not existed in document";
                                }
                                else if (toc1.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 1 - Font Size is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (toc1.Font.Size == Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 1 - Font Size is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level1 - Font Style")
                            {
                                FontstylFlag = false;
                                if (toc1 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level l Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Regular" && (toc1.Font.Bold == true || toc1.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 1 - Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold" && (toc1.Font.Bold == false || toc1.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 1 - Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Italic" && (toc1.Font.Bold == true || toc1.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 1 - Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic" && (toc1.Font.Bold == false || toc1.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 1 - Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                if (FontstylFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 1 - Font Style is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level1 - Uppercase")
                            {
                                if (toc1 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 1 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Yes")
                                {
                                    if (toc1.Font.AllCaps == true)
                                    {
                                        chLst[k].Comments = "Level 1 Headings are in Uppercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 1 Headings are not in Uppercase";
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "No")
                                {
                                    if (toc1.Font.AllCaps == false)
                                    {
                                        chLst[k].Comments = "Level 1 Headings are in Lowercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 1 Headings are not in Lowercase";
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Level1 - Font Family")
                            {
                                if (toc1 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level l Heading style not existed in document";
                                }
                                else if (toc1.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 1 - FontFamily is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 1 - FontFamily is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level1 - Indentation")
                            {
                                if (toc1 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Leve l Indentation style not existed in document";
                                }

                                else if (toc1.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 1 - Indentation is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 1 - Indentation is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }

                            }
                            //level 2 checks
                            Style toc2 = doc.Styles[StyleIdentifier.Toc2];
                            if (chLst[k].Check_Name == "Level2 - Position")
                            {
                                positionFlag = false;
                                if (toc2 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 Heading style not existed in document.";
                                }
                                else if (chLst[k].Check_Parameter == "Left" && toc2.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 2-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\""; ;

                                }
                                else if (chLst[k].Check_Parameter == "Center" && toc2.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 2-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\""; ;

                                }
                                else if (chLst[k].Check_Parameter == "Right" && toc2.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 2-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\""; ;

                                }
                                else if (chLst[k].Check_Parameter == "Justify" && toc2.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 2-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                if (positionFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 2 -Position alignment is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level2 - Font Size")
                            {
                                if (toc2 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 Heading style not existed in document";
                                }
                                else if (toc2.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 - Font Size is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (toc2.Font.Size == Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 2 - Font Size is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level2 - Font Style")
                            {
                                FontstylFlag = false;
                                if (toc2 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Regular" && (toc2.Font.Bold == true || toc2.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 2 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold" && (toc2.Font.Bold == false || toc2.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 2 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Italic" && (toc2.Font.Bold == true || toc2.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 2 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic" && (toc2.Font.Bold == false || toc2.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 2 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\""; ;
                                }
                                if (FontstylFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 2 - Font Style is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level2 - Uppercase")
                            {
                                if (toc2 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Yes")
                                {
                                    if (toc2.Font.AllCaps == true)
                                    {
                                        chLst[k].Comments = "Level 2 Headings are in Uppercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 2 Headings are not in Uppercase";
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "No")
                                {
                                    if (toc2.Font.AllCaps == false)
                                    {
                                        chLst[k].Comments = "Level 2 Headings are in Lowercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 2 Headings are not in Lowercase";
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Level2 - Font Family")
                            {
                                if (toc2 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 Heading style not existed in document";
                                }
                                else if (toc2.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 - FontFamily is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 2 - FontFamily is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level2 - Indentation")
                            {
                                if (toc2 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 Indentation style not existed in document";
                                }

                                else if (toc2.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 2 - Indentation is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 2 - Indentation is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }

                            }
                            //level 3 checks
                            Style toc3 = doc.Styles[StyleIdentifier.Toc3];
                            if (chLst[k].Check_Name == "Level3 - Position")
                            {
                                positionFlag = false;
                                if (toc3 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Left" && toc3.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 3-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Center" && toc3.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 3-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Right" && toc3.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 3-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Justify" && toc3.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 3-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                if (positionFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 3-Position alignment is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level3 - Font Size")
                            {
                                if (toc3 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 Heading style not existed in document";
                                }
                                else if (toc3.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 - Font Size is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (toc3.Font.Size == Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 3 - Font Size is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level3 - Font Style")
                            {
                                FontstylFlag = false;
                                if (toc3 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Regular" && (toc3.Font.Bold == true || toc3.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 3 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold" && (toc3.Font.Bold == false || toc3.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 3 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Italic" && (toc3.Font.Bold == true || toc3.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 3 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic" && (toc3.Font.Bold == false || toc3.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 3 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                if (FontstylFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 3 - Font Style is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level3 - Uppercase")
                            {
                                if (toc3 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Yes")
                                {
                                    if (toc3.Font.AllCaps == true)
                                    {
                                        chLst[k].Comments = "Level 3 Headings are in Uppercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 3 Headings are not in Uppercase";
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "No")
                                {
                                    if (toc3.Font.AllCaps == false)
                                    {
                                        chLst[k].Comments = "Level 3 Headings are in Lowercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 3 Headings are not in Lowercase";
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Level3 - Font Family")
                            {
                                if (toc3 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 Heading style not existed in document";
                                }
                                else if (toc3.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 - FontFamily is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 3 - FontFamily is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level3 - Indentation")
                            {
                                if (toc3 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 Indentation style not existed in document";
                                }

                                else if (toc3.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 3 - Indentation is not in " + "\"" + chLst[k].Check_Parameter + "\""; ;
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 3 - Indentation is in " + "\"" + chLst[k].Check_Parameter + "\""; ;
                                }

                            }
                            //level 4 checks
                            Style toc4 = doc.Styles[StyleIdentifier.Toc4];
                            if (chLst[k].Check_Name == "Level4 - Position")
                            {
                                positionFlag = false;
                                if (toc4 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Left" && toc4.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 4 - Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Center" && toc4.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 4 - Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Right" && toc4.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 4 - Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Justify" && toc4.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 4 - Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                if (positionFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 4 - Position alignment is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level4 - Font Size")
                            {
                                if (toc4 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 Heading style not existed in document";
                                }
                                else if (toc4.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 - Font Size not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (toc4.Font.Size == Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 4 - Font Size is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level4 - Font Style")
                            {
                                FontstylFlag = false;
                                if (toc4 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Regular" && (toc4.Font.Bold == true || toc4.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 4 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold" && (toc4.Font.Bold == false || toc4.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 4 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Italic" && (toc4.Font.Bold == true || toc4.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 4 - Font Style is not in" + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic" && (toc4.Font.Bold == false || toc4.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 4 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                if (FontstylFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 4 - Font Style is in  " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level4 - Uppercase")
                            {
                                if (toc4 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Yes")
                                {
                                    if (toc4.Font.AllCaps == true)
                                    {
                                        chLst[k].Comments = "Level 4 Headings are in Uppercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 4 Headings are not in Uppercase";
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "No")
                                {
                                    if (toc4.Font.AllCaps == false)
                                    {
                                        chLst[k].Comments = "Level 4 Headings are in Lowercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 4 Headings are not in Lowercase";
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Level4 - Font Family")
                            {
                                if (toc4 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 Heading style not existed in document";
                                }
                                else if (toc4.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 - FontFamily is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 4 - FontFamily is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level4 - Indentation")
                            {
                                if (toc4 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 Indentation style not existed in document";
                                }

                                else if (toc4.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 4 - Indentation is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 4 - Indentation is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }

                            }
                            //level 5 checks
                            Style toc5 = doc.Styles[StyleIdentifier.Toc5];
                            if (chLst[k].Check_Name == "Level5 - Position")
                            {
                                positionFlag = false;
                                if (toc5 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Left" && toc5.ParagraphFormat.Alignment != ParagraphAlignment.Left)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 5-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Center" && toc5.ParagraphFormat.Alignment != ParagraphAlignment.Center)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 5-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Right" && toc5.ParagraphFormat.Alignment != ParagraphAlignment.Right)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 5-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                else if (chLst[k].Check_Parameter == "Justify" && toc5.ParagraphFormat.Alignment != ParagraphAlignment.Justify)
                                {
                                    positionFlag = true;
                                    chLst[k].Comments = "Level 5-Position alignment is not in " + "\"" + chLst[k].Check_Parameter + "\"";

                                }
                                if (positionFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 5-Position alignment is in " + "\"" + chLst[k].Check_Parameter + "\"" + ".";
                                }
                            }
                            if (chLst[k].Check_Name == "Level5 - Font Size")
                            {
                                if (toc5 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 Heading style not existed in document";
                                }
                                else if (toc5.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {                                    
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 - Font Size is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }                                
                                else if (toc5.Font.Size == Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level5 - Font Size is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level5 - Font Style")
                            {
                                FontstylFlag = false;
                                if (toc5 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Regular" && (toc5.Font.Bold == true || toc5.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 5 - Font Style is not in " + "\""  + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold" && (toc5.Font.Bold == false || toc5.Font.Italic == true))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 5 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Italic" && (toc5.Font.Bold == true || toc5.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 5 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic" && (toc5.Font.Bold == false || toc5.Font.Italic == false))
                                {
                                    FontstylFlag = true;
                                    chLst[k].Comments = "Level 5 - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                if (FontstylFlag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 5 - Font Style is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level5 - Uppercase")
                            {
                                if (toc5 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 Heading style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Yes")
                                {
                                    if (toc5.Font.AllCaps == true)
                                    {
                                        chLst[k].Comments = "Level 5 Headings are in Uppercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 5 Headings are not in Uppercase";
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "No")
                                {
                                    if (toc5.Font.AllCaps == false)
                                    {
                                        chLst[k].Comments = "Level 5 Headings are in Lowercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Level 5 Headings are not in Lowercase";
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Level5 - Font Family")
                            {
                                if (toc5 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 Heading style not existed in document";
                                }
                                else if (toc5.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 - FontFamily is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 5 - FontFamily is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Level5 - Indentation")
                            {
                                if (toc5 == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Leve 5 Indentation style not existed in document";
                                }

                                else if (toc5.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Level 5 - Indentation is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "Level 5 - Indentation is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            /// LOT AND LOF checks starts from here
                            Style LotandLOffontstyles = doc.Styles[StyleIdentifier.TableOfFigures];
                            if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Size")
                            {
                                if (LotandLOffontstyles == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "LOT, LOF and LOA style not existed in document";
                                }
                                else if (LotandLOffontstyles.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    lotlofflag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Size is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Size  in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Style")
                            {
                                if (LotandLOffontstyles == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "LOT, LOF and LOA style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Regular" && (LotandLOffontstyles.Font.Bold == true || LotandLOffontstyles.Font.Italic == true))
                                {
                                    LotandLOffontstylesflag = true;
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold" && (LotandLOffontstyles.Font.Bold == false || LotandLOffontstyles.Font.Italic == true))
                                {
                                    LotandLOffontstylesflag = true;
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Italic" && (LotandLOffontstyles.Font.Bold == true || LotandLOffontstyles.Font.Italic == false))
                                {
                                    LotandLOffontstylesflag = true;
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic" && (LotandLOffontstyles.Font.Bold == false || LotandLOffontstyles.Font.Italic == false))
                                {
                                    LotandLOffontstylesflag = true;
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Style is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                if (LotandLOffontstylesflag)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Style is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "LOT, LOF and LOA - Uppercase")
                            {
                                if (LotandLOffontstyles == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "LOT, LOF and LOA style not existed in document";
                                }
                                else if (chLst[k].Check_Parameter == "Yes")
                                {
                                    if (LotandLOffontstyles.Font.AllCaps == true)
                                    {
                                        chLst[k].Comments = "LOT, LOF and LOA are in Uppercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "LOT, LOF and LOA are not in Uppercase";
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "No")
                                {
                                    if (LotandLOffontstyles.Font.AllCaps == false)
                                    {
                                        chLst[k].Comments = "LOT, LOF and LOA are in Lowercase";
                                        chLst[k].QC_Result = "Passed";
                                    }
                                    else
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "LOT, LOF and LOA are not in Lowercase";
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == ("LOT, LOF and LOA - Font Family"))
                            {
                                if (LotandLOffontstyles == null)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "LOT, LOF and LOA style not existed in document";
                                }
                                else if (LotandLOffontstyles.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "LOT, LOF and LOA - Font Family is not in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "LOT, LOF and LOA - FontFamily is in " + "\"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                        }

                        
                    }
                }            
                    if (TOCPresentBelowpages == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC/LOT/LOF/LOA are present for document with below 5 pages";
                    }
                    else if (flag == true && TOCPresentBelowpages == false)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC,LOT,LOF and LOA are not required for document with below 5 pages";
                    }
                    else if (Tocfamily == true && CheckLOT == true && CheckLOF == true && CheckLOA == false && AppendixFlag == false)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC,LOT and LOF are present for 5 or above 5 pages";
                    }
                    else if (Tocfamily == true && CheckLOT == true && CheckLOF == true && CheckLOA == true)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC,LOT,LOF and LOA are present for 5 or above 5 pages";
                    }
                    else if (Tocfamily == false && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false && CheckLOA == true && AppendixFlag == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC,LOT and LOF are not present.";
                    }
                    else if (Tocfamily == false && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false && CheckLOA == false && AppendixFlag == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC,LOT,LOF and LOA are not present";
                    }
                    else if (Tocfamily == false && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false && CheckLOA == false && AppendixFlag == false)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC,LOT and LOF are not present";
                    }
                    else if (Tocfamily == false && CheckLOT == false && TableFlag == true && CheckLOF == true && CheckLOA == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC and LOT are not present";
                    }
                    else if (Tocfamily == false && CheckLOT == false && TableFlag == true && CheckLOF == true && CheckLOA == false && AppendixFlag == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC,LOT and LOA are not present";
                    }
                    else if (Tocfamily == false && CheckLOT == false && TableFlag == true && CheckLOF == true && CheckLOA == false && AppendixFlag == false)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC and LOT are not present";
                    }
                    else if (Tocfamily == false && CheckLOT == true && CheckLOF == false && FigureFlag == true && CheckLOA == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC and LOF are not present";
                    }
                    else if (Tocfamily == false && CheckLOT == true && CheckLOF == false && FigureFlag == true && CheckLOA == false && AppendixFlag == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC,LOF and LOA are not present";
                    }
                    else if (Tocfamily == false && CheckLOT == true && CheckLOF == false && FigureFlag == true && CheckLOA == false && AppendixFlag == false)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC and LOF are not present";
                    }
                    else if (Tocfamily == true && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false && CheckLOA == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "LOT and LOF are not present";
                    }
                    else if (Tocfamily == true && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false && AppendixFlag == true && CheckLOA == false)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "LOT,LOF and LOA are not present";
                    }
                    else if (Tocfamily == true && CheckLOT == false && FigureFlag == true && TableFlag == true && CheckLOF == false && AppendixFlag == false && CheckLOA == false)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "LOT and LOF are not present";
                    }
                    else if (Tocfamily == true && CheckLOT == true && FigureFlag == false && CheckLOF == false && CheckLOA == true)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC,LOT and LOA are present";
                    }
                    else if (Tocfamily == true && CheckLOT == true && FigureFlag == false && CheckLOF == false && CheckLOA == false && AppendixFlag == true)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC and LOT are present";
                    }
                    else if (Tocfamily == true && CheckLOT == true && FigureFlag == false && CheckLOF == false && CheckLOA == false && AppendixFlag == false)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC and LOT are present";
                    }
                    else if (Tocfamily == true && CheckLOT == false && TableFlag == false && CheckLOF == true && CheckLOA == true)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC,LOF and LOA are present";
                    }
                    else if (Tocfamily == true && CheckLOT == false && TableFlag == false && CheckLOF == true && CheckLOA == false && AppendixFlag == true)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC and LOF are present";
                    }
                    else if (Tocfamily == true && CheckLOT == false && TableFlag == false && CheckLOF == true && CheckLOA == false && AppendixFlag == false)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC and LOF are present";
                    }
                    else if (Tocfamily == true && CheckLOT == false && TableFlag == false && CheckLOF == false && FigureFlag == false && CheckLOA == false && AppendixFlag == false)
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "TOC present";
                    }
                else if (Tocfamily == false && CheckLOT == false && TableFlag == false && CheckLOF == false && FigureFlag == false && CheckLOA == false && AppendixFlag == false)
                {

                    rObj.Comments = "Headinigs/Tables/Figures not found";
                    rObj.QC_Result = "Failed";
                }
                else if (Tocfamily == false)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "TOC not present";
                    }
                    else if (CheckLOT == false && TableFlag == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "LOT not present";
                    }
                    else if (CheckLOF == false && FigureFlag == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "LOF not present";
                    }
                    else if (CheckLOA == false && AppendixFlag == true)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "LOA not present";
                    }
                    else
                    {
                        if (rObj.Check_Type == 1)
                            rObj.QC_Result = "Failed";
                        else
                            rObj.QC_Result = "Passed";
                        rObj.Comments = "This Check is passed";
                    }
                rObj.CHECK_END_TIME = DateTime.Now;
                if (sectionbreak)               
                    rObj.QC_Result = "Failed";                
                if (CheckType&&allsubchecks)                   
                    rObj.QC_Result = "Failed";

                if (rObj.Comments != "TOC,LOT,LOF and LOA are not required for document with below 5 pages" && rObj.Comments != "TOC/LOT/LOF/LOA are present for document with below 5 pages" && rObj.Comments != "Headinigs/Tables/Figures not found.")
                    {
                        //Below code to check predict styles
                        bool Predictflag = false;
                        foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                        {
                            Predictflag = false;
                            //RegOpsQC Predictstyles = new RegOpsQC();
                            RegOpsQC CheckList = new RegOpsQC();
                            List<Node> FontsLst = new List<Node>();
                            List<Node> ParaList = new List<Node>();                          
                            Style Predictstyles = null;
                        
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph pr = (Paragraph)start.ParentParagraph.PreviousSibling;
                            
                            if (chLst.Count > 0 && pr != null && (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES")))
                                {
                                    if (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS"))
                                    {
                                        CheckList = chLst.Where(x => x.Check_Name == "\"Table of Contents\" Heading Style").FirstOrDefault();
                                    }
                                    else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES"))
                                    {
                                        CheckList = chLst.Where(x => x.Check_Name == "\"List of Tables\" Heading Style").FirstOrDefault();
                                    }
                                    else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES"))
                                    {
                                        CheckList = chLst.Where(x => x.Check_Name == "\"List of Figures\" Heading Style").FirstOrDefault();
                                    }
                                    else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES"))
                                    {
                                        CheckList = chLst.Where(x => x.Check_Name == "Field code for List of Appendices").FirstOrDefault();
                                    }
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        //ExistingStyle = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == CheckList.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == CheckList.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();
                                        //if (ExistingStyle != null)
                                        //    pr.ParagraphFormat.Style = ExistingStyle;
                                       // Predictstyles = new WordParagraphActions().GetPredictstyles(rObj.Created_ID, CheckList.Check_Parameter.ToString());
                                    Predictstyles = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == CheckList.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == CheckList.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();                                    
                                    if (Predictstyles != null)
                                        {
                                        if (Predictstyles.ParagraphFormat != null)
                                        {
                                            FontsLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Bold != Convert.ToBoolean(Predictstyles.Font.Bold) || ((Run)x).Font.Italic != Convert.ToBoolean(Predictstyles.Font.Italic) || ((Run)x).Font.Size != Convert.ToDouble(Predictstyles.Font.Size) || ((Run)x).Font.Name != Predictstyles.Font.Name).ToList();
                                            if (FontsLst.Count > 0 || (Predictstyles.ParagraphFormat.Shading.ToString() != "" && Predictstyles.ParagraphFormat.Shading.ToString() != null && pr.ParagraphFormat.Shading.BackgroundPatternColor.Name.ToString() != Predictstyles.ParagraphFormat.Shading.ToString() && pr.ParagraphFormat.Shading.BackgroundPatternColor.Name.ToString() != Predictstyles.ParagraphFormat.Shading.ToString()) || (Predictstyles.Name.ToString() != "" && Predictstyles.Name.ToString() != null && pr.ParagraphFormat.StyleName != Predictstyles.Name.ToString()) || (Predictstyles.ParagraphFormat.SpaceAfter.ToString() != "" && Predictstyles.ParagraphFormat.SpaceAfter.ToString() != null && pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(Predictstyles.ParagraphFormat.SpaceAfter)) || (Predictstyles.ParagraphFormat.SpaceBefore.ToString() != "" && Predictstyles.ParagraphFormat.SpaceBefore.ToString() != null && pr.ParagraphFormat.SpaceBefore != Convert.ToDouble(Predictstyles.ParagraphFormat.SpaceBefore.ToString())) || (Predictstyles.ParagraphFormat.LineSpacing.ToString() != "" && Predictstyles.ParagraphFormat.LineSpacing.ToString() != null && pr.ParagraphFormat.LineSpacing != Convert.ToDouble(Predictstyles.ParagraphFormat.LineSpacing.ToString())) || (Predictstyles.ParagraphFormat.Alignment.ToString() != "" && Predictstyles.ParagraphFormat.Alignment.ToString() != null && pr.ParagraphFormat.Alignment.ToString() != Predictstyles.ParagraphFormat.Alignment.ToString()))
                                            {
                                                Predictflag = true;
                                                break;
                                            }
                                        }

                                        }
                                        
                                    }
                                }
                            }
                        }
                        if (Predictflag)
                        {
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Given styles applied for existing toc, " + rObj.Comments;
                        }                  
                    }
                    rObj.CHECK_END_TIME = DateTime.Now;
                }
            
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }       
        /// <summary>
        /// Check whether TOC,LOT,LOF and LOA are present for above 5 pages - fix(mesoblast)
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixTOC(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            string res = string.Empty;
            bool Tocfamily = false;
            bool CheckLOT = false;
            bool CheckLOF = false;
            bool CheckLOA = false;
            bool TableFlag = false;
            bool FigureFlag = false;
            bool AppendixFlag = false;
            bool CheckHeading = false;
            bool FixToc = false;
            bool FixLot = false;
            bool FixLof = false;
            bool FixLoa = false;
            string toccolor = string.Empty;
            string Tocstyname = string.Empty;
            string CheckStyles = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            string Tocposition = string.Empty;
            Style TOCStylename = null;
            Style LOTStylename = null;
            Style LOFStylename = null;
            string TOCCaption = string.Empty;
            string LOTCaption = string.Empty;
            string LOFCaption = string.Empty;
            string LOACaption = string.Empty;
            string TOCFormat = string.Empty;
            string CommonComment = string.Empty;
            string FinalComment = string.Empty;
            bool CheckFix = false;
            bool PredictFlag = false;
            string Lofloffont_family = string.Empty;
            //string LevelFontSize = string.Empty;
            //string LevelPosition = string.Empty;
            //string LevelFontStyle = string.Empty;
            //string LevelUppercase = string.Empty;
            //string Level1FontFamily = string.Empty;
            //string Level2FontFamily = string.Empty;
            //string Level3FontFamily = string.Empty;
            //string Level4FontFamily = string.Empty;
            //string Level5FontFamily = string.Empty;
            string LotandLofFontSize = string.Empty;
            string LotandLofFontStyle = string.Empty;
            string LotandLofuppercase = string.Empty;
            string lotloffontfamily = string.Empty;
            string ExceptionLst = string.Empty;
            string fontsizeRes = string.Empty;   
            string Lot_And_LOfFOntSize = string.Empty;
            string Tocheadingfontfamily = string.Empty;
            string Tocheadingfontsize = string.Empty;
            string Tocheadingspacingafter = string.Empty;
            bool subcheckfixed = false;
            try
            {

                //doc = new Document(rObj.DestFilePath);
                //doc.TrackRevisions = true;
                //doc.StartTrackRevisions(" ");
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                int pagecount = doc.PageCount;
                for (int k = 0; k < chLst.Count; k++)
                {
                    if (chLst[k].Check_Type == 1)
                    {
                        CheckFix = true;
                    }
                    if (chLst[k].Check_Name == "\"Table of Contents\" Heading Style" && chLst[k].Check_Type == 1)
                    {
                        TOCCaption = chLst[k].Check_Parameter;
                    }
                    if (chLst[k].Check_Name == "\"List of Tables\" Heading Style" && chLst[k].Check_Type == 1)
                    {
                        LOTCaption = chLst[k].Check_Parameter;
                    }
                    else if (chLst[k].Check_Name == "\"List of Figures\" Heading Style" && chLst[k].Check_Type == 1)
                    {
                        LOFCaption = chLst[k].Check_Parameter;
                    }
                    else if (chLst[k].Check_Name == "Field code for List of Appendices" && chLst[k].Check_Type == 1)
                    {
                        LOACaption = chLst[k].Check_Parameter;
                    }
                }
                if (rObj.Comments.Contains("TOC,LOT,LOF and LOA are not required for document with below 5 pages") && pagecount < 5)
                {
                    rObj.QC_Result = "Passed";
                    return;
                }
                //Code for adding predict styles
                if (CheckFix && rObj.Comments.Contains("Given styles applied for existing toc"))
                {
                    foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        //RegOpsQC Predictstyles = new RegOpsQC();
                        RegOpsQC CheckList = new RegOpsQC();
                        List<Node> FontsLst = new List<Node>();
                        List<Node> FontsBoldLst = new List<Node>();
                        List<Node> FontsSizeLst = new List<Node>();
                        List<Node> FontNamesLst = new List<Node>();
                        List<Node> FontsItalicLst = new List<Node>();
                        Style Predictstyles = null;
                        bool AddComment = false;
                        string HeadingName = string.Empty;
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr = (Paragraph)start.ParentParagraph.PreviousSibling;
                            if (chLst.Count > 0 && pr != null && (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES") || pr.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES")))
                            {
                                if (pr.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"Table of Contents\" Heading Style").FirstOrDefault();
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        HeadingName = "TOC Heading:";
                                    }
                                }
                                else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"List of Tables\" Heading Style").FirstOrDefault();
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        HeadingName = " LOT Heading:";
                                    }
                                }
                                else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "\"List of Figures\" Heading Style").FirstOrDefault();
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        HeadingName = " LOF Heading:";
                                    }
                                }
                                else if (pr.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES"))
                                {
                                    CheckList = chLst.Where(x => x.Check_Name == "Field code for List of Appendices").FirstOrDefault();
                                    if (CheckList != null && CheckList.Check_Type == 1)
                                    {
                                        HeadingName = " LOA Heading:";
                                    }
                                }
                                if (CheckList != null && CheckList.Check_Type == 1)
                                {
                                   
                                    //Predictstyles = new WordParagraphActions().GetPredictstyles(rObj.Created_ID, CheckList.Check_Parameter.ToString());
                                    Predictstyles = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == CheckList.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == CheckList.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();
                                    if (Predictstyles != null )
                                    {
                                        if(Predictstyles.ParagraphFormat != null)
                                        {
                                            //pr.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            if (Predictstyles.Font.Bold.ToString() != null && Predictstyles.Font.Bold.ToString() != "")
                                            {
                                                FontsBoldLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Bold != Convert.ToBoolean(Predictstyles.Font.Bold)).ToList();
                                                if (FontsBoldLst.Count > 0)
                                                {
                                                    CommonComment = CommonComment + " Font Bold should be '" + Predictstyles.Font.Bold + "',";
                                                    foreach (Run fnrun in pr.Runs)
                                                    {
                                                        PredictFlag = true;
                                                        AddComment = true;
                                                        fnrun.Font.Bold = Convert.ToBoolean(Predictstyles.Font.Bold);
                                                    }
                                                }
                                            }
                                            if (Predictstyles.Font.Size.ToString() != null && Predictstyles.Font.Size.ToString() != "")
                                            {
                                                FontsSizeLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Size != Convert.ToDouble(Predictstyles.Font.Size)).ToList();
                                                if (FontsSizeLst.Count > 0)
                                                {
                                                    CommonComment = CommonComment + " Font size should be '" + Predictstyles.Font.Size + "',";
                                                    foreach (Run fnrun in pr.Runs)
                                                    {
                                                        PredictFlag = true;
                                                        AddComment = true;
                                                        fnrun.Font.Size = Convert.ToDouble(Predictstyles.Font.Size);
                                                    }
                                                }
                                            }
                                            if (Predictstyles.Font.Name.ToString() != null && Predictstyles.Font.Name.ToString() != "")
                                            {
                                                FontNamesLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Name != Predictstyles.Font.Name).ToList();
                                                if (FontNamesLst.Count > 0)
                                                {
                                                    FontNamesLst = FontNamesLst.Where(x => ((Run)x).Font.Name.ToUpper() != "SYMBOL").ToList();
                                                }
                                                if (FontNamesLst.Count > 0)
                                                {
                                                    CommonComment = CommonComment + " Font name should be '" + Predictstyles.Font.Name + "',";
                                                    foreach (Run fnrun in pr.Runs)
                                                    {
                                                        if (fnrun.Font.Name.ToUpper() != "SYMBOL")
                                                        {
                                                            PredictFlag = true;
                                                            AddComment = true;
                                                            fnrun.Font.Name = Predictstyles.Font.Name;
                                                        }
                                                    }
                                                }
                                            }
                                            if (Predictstyles.Font.Italic.ToString() != null && Predictstyles.Font.Italic.ToString() != "")
                                            {
                                                FontsItalicLst = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Font.Italic != Convert.ToBoolean(Predictstyles.Font.Italic)).ToList();
                                                if (FontsItalicLst.Count > 0)
                                                {
                                                    CommonComment = CommonComment + " Font italic should be '" + Predictstyles.Font.Italic + "',";
                                                    foreach (Run fnrun in pr.Runs)
                                                    {
                                                        PredictFlag = true;
                                                        AddComment = true;
                                                        fnrun.Font.Italic = Convert.ToBoolean(Predictstyles.Font.Italic);
                                                    }
                                                }
                                            }
                                            if (Predictstyles.ParagraphFormat.Shading.ToString() != "" && Predictstyles.ParagraphFormat.Shading.ToString() != null && pr.ParagraphFormat.Shading.BackgroundPatternColor.Name.ToString() != Predictstyles.ParagraphFormat.Shading.BackgroundPatternColor.Name.ToString())
                                            {
                                                PredictFlag = true;
                                                AddComment = true;
                                                pr.ParagraphFormat.Shading.BackgroundPatternColor = System.Drawing.Color.Empty;
                                                CommonComment = CommonComment + " Shading should be '" + Predictstyles.ParagraphFormat.Shading.ToString() + "',";
                                            }
                                            if (Predictstyles.Name.ToString() != "" && Predictstyles.Name.ToString() != null && pr.ParagraphFormat.StyleName != Predictstyles.Name)
                                            {
                                                PredictFlag = true;
                                                AddComment = true;
                                                pr.ParagraphFormat.StyleName = Predictstyles.Name;
                                                CommonComment = CommonComment + " Style name should be '" + Predictstyles.Name + "',";
                                            }
                                            if (Predictstyles.ParagraphFormat.SpaceAfter.ToString() != "" && Predictstyles.ParagraphFormat.SpaceAfter.ToString() != null && pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(Predictstyles.ParagraphFormat.SpaceAfter))
                                            {
                                                PredictFlag = true;
                                                AddComment = true;
                                                pr.ParagraphFormat.SpaceAfter = Convert.ToDouble(Predictstyles.ParagraphFormat.SpaceAfter);
                                                CommonComment = CommonComment + " Space after should be '" + Predictstyles.ParagraphFormat.SpaceAfter + "',";
                                            }
                                            if (Predictstyles.ParagraphFormat.SpaceBefore.ToString() != "" && Predictstyles.ParagraphFormat.SpaceBefore.ToString() != null && pr.ParagraphFormat.SpaceBefore != Convert.ToDouble(Predictstyles.ParagraphFormat.SpaceBefore))
                                            {
                                                PredictFlag = true;
                                                AddComment = true;
                                                pr.ParagraphFormat.SpaceBefore = Convert.ToDouble(Predictstyles.ParagraphFormat.SpaceBefore);
                                                CommonComment = CommonComment + " Space before should be '" + Predictstyles.ParagraphFormat.SpaceBefore + "',";
                                            }
                                            if (Predictstyles.ParagraphFormat.LineSpacing.ToString() != "" && Predictstyles.ParagraphFormat.LineSpacing.ToString() != null && pr.ParagraphFormat.LineSpacing != Convert.ToDouble(Predictstyles.ParagraphFormat.LineSpacing))
                                            {
                                                PredictFlag = true;
                                                AddComment = true;
                                                pr.ParagraphFormat.LineSpacing = Convert.ToDouble(Predictstyles.ParagraphFormat.LineSpacing);
                                                CommonComment = CommonComment + " Line spacing should be '" + Predictstyles.ParagraphFormat.LineSpacing + "',";
                                            }
                                            if (Predictstyles.ParagraphFormat.Alignment.ToString() != "" && Predictstyles.ParagraphFormat.Alignment.ToString() != null && pr.ParagraphFormat.Alignment.ToString() != Predictstyles.ParagraphFormat.Alignment.ToString())
                                            {
                                                PredictFlag = true;
                                                AddComment = true;
                                                if (Predictstyles.ParagraphFormat.Alignment.ToString() == "Left")
                                                    pr.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                                else if (Predictstyles.ParagraphFormat.Alignment.ToString() == "Right")
                                                    pr.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                                else
                                                    pr.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                                CommonComment = CommonComment + " Alignment should be '" + Predictstyles.ParagraphFormat.Alignment.ToString() + "',";
                                            }
                                            CommonComment = CommonComment.TrimEnd(',');
                                            CommonComment = CommonComment + ".";
                                            if (AddComment)
                                            {
                                                FinalComment = FinalComment + HeadingName + CommonComment;
                                                CommonComment = string.Empty;
                                            }
                                            if (Predictstyles != null && PredictFlag)
                                            {
                                                // pr.ParagraphFormat.Style = ExistingStyle;
                                                foreach (Run run in pr.Runs)
                                                {
                                                    run.Font.Bold = Predictstyles.Font.Bold;
                                                    run.Font.Italic = Predictstyles.Font.Italic;
                                                }
                                            }
                                        }

                                    }
                                       
                                }
                            }
                        }
                    }
                }
                // Code for removing toc/lot/lof for below 5 pages (Including or excluding toc/lot/lof)
                if (CheckFix && rObj.Comments == "TOC/LOT/LOF/LOA are present for document with below 5 pages")
                {
                    List<Node> SectionBreakslst = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => x.Range.Text.Contains(ControlChar.SectionBreak)).ToList();
                    foreach (Paragraph pr in SectionBreakslst)
                    {
                        Paragraph prbreak = pr;
                        Paragraph prcl = null;
                        if (pr.PreviousSibling != null && pr.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.PreviousSibling;
                        }
                        //if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        //{
                        //    if (prcl.IsEndOfSection)
                        //    {
                        //        prbreak.ParentSection.Body.Remove();
                        //    }
                        //}
                        if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph)
                        {
                            prcl = (Paragraph)prbreak.NextSibling;
                        }
                        //if (prcl != null && !prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || prcl.ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC ")))
                        //{
                        //    if (prcl.IsEndOfSection)
                        //    {
                        //        prbreak.ParentSection.Body.Remove();
                        //    }
                        //}
                    }
                    bool isTocExisted = false;
                    Node TOCBeginNode = null;
                    Node TOCEndNode = null;                  
                    List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                    foreach (Node start in FieldNodes)
                    {
                        if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                        if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                        {
                            TOCEndNode = start;
                        }
                        if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                        {
                            isTocExisted = true;
                            TOCBeginNode = start;
                        }
                    }
                    //if (isTocExisted)
                    //{
                    //    bool fixinruns = false;
                    //    LayoutCollector layout = new LayoutCollector(doc);
                    //    TocEndpgno = layout.GetEndPageIndex(TOCEndNode);
                    //    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(X => (layout.GetStartPageIndex(X) == TocEndpgno)))
                    //    {
                    //        if (pr.Range.Text.Equals(ControlChar.SectionBreak) || pr.Range.Text.Equals(ControlChar.PageBreak))
                    //        {

                    //            pr.Range.Replace("&b", string.Empty);
                    //            pr.Range.Replace("&m", string.Empty);
                    //            break;
                    //        }
                    //        else if (pr.Range.Text.Contains(ControlChar.SectionBreak) || pr.Range.Text.Contains(ControlChar.PageBreak))
                    //        {


                    //            if (pr.Runs != null)
                    //            {
                    //                foreach (Run run in pr.Runs)
                    //                {
                    //                    if ((run.Range.Text.Contains(ControlChar.SectionBreak) || run.Range.Text.Contains(ControlChar.PageBreak)) && layout.GetStartPageIndex(run) == layout.GetEndPageIndex(run))
                    //                    {
                    //                        run.Range.Replace("&b", string.Empty);
                    //                        run.Range.Replace("&m", string.Empty);
                    //                        fixinruns = true;
                    //                        break;
                    //                    }
                    //                }
                    //            }
                    //            if (fixinruns)
                    //                break;
                    //        }
                    //    }
                    //}
                    foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                            start.GetField().Remove();
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES")))
                            {
                                pr1.Remove();
                            }
                        }
                    }
                    Paragraph prB = new Paragraph(doc);
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => !((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("NoTOC") && (((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TOC HEADING CENTERED" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF APPENDICES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "LIST OF TABLES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper() == "TABLE OF FIGURES" || ((Paragraph)x).ParagraphFormat.StyleName.Trim().ToUpper().Contains("TOC "))).ToList();
                    foreach (Paragraph pr in paragraphs)
                    {
                        //if ((pr.Range.Text.Contains(ControlChar.SectionBreak) && pr.IsEndOfSection) && prB != pr)
                        //{                           
                        //    //NodeCollection SectionLst = doc.GetChildNodes(NodeType.Section, true);
                        //    //foreach(Section section in SectionLst)
                        //    //{
                        //    //    section.HeadersFooters.LinkToPrevious(false);
                        //    //}
                        //    Section sct = pr.ParentSection;
                        //    // pr.ParentSection.Remove();
                        //    sct.HeadersFooters.LinkToPrevious(false);
                        //    sct.Body.Remove();
                        //    pr.Remove();

                        //}
                        //if (pr.NextSibling != null && pr.NextSibling.NodeType == NodeType.Paragraph && pr.NextSibling.Range.Text.Contains(ControlChar.SectionBreak))
                        //{
                        //    prB = (Paragraph)pr.NextSibling;
                        //    if (prB.IsEndOfSection)
                        //        prB.ParentSection.Remove();
                        //}
                        if (!pr.Range.Text.Contains("\f"))
                            pr.Remove();
                    }
                    //rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = "TOC/LOT/LOF/LOA Removed from the document below 5 pages";
                }
                else if( !rObj.Comments.Contains("TOC,LOT,LOF and LOA are not required for document with below 5 pages")&& pagecount >= 5)                
                {
                    //Code for to check toc/lot/lof presence and to check given styles exist or not
                    Style paraStyle = null;
                    StyleCollection stylist = doc.Styles;
                    if (stylist.Where(x => x.Name.ToUpper() == "PARAGRAPH").Count() == 0)
                        paraStyle = stylist.Where(x => x.Name.ToUpper() == "PARAGRAPH").FirstOrDefault();
                    List<Node> TblCaptionFieldseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("TABLE")).ToList();
                    List<Node> FgrCaptionFieldseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith("FIGURE")).ToList();
                    List<Node> AppendixCaptionFieldseq = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.GetText().Trim().ToUpper().StartsWith(LOACaption.ToUpper())).ToList();
                    NodeCollection paragraphs = doc.GetChildNodes(NodeType.Paragraph, true);
                    List<Node> fieldnodes = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).FieldType == FieldType.FieldTOC).ToList();               
                    if (LOACaption != null && LOACaption != "")
                    {
                        foreach (FieldStart nd in fieldnodes)
                        {
                            if (nd.FieldType == FieldType.FieldSequence)
                            {
                                if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ TABLE") && TableFlag != true)
                                    TableFlag = true;
                                else if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ FIGURE") && FigureFlag != true)
                                    FigureFlag = true;
                                else if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ " + LOACaption.ToUpper()) && AppendixFlag != true)
                                    AppendixFlag = true;
                            }
                            if (nd.FieldType == FieldType.FieldTOC)
                            {
                                if (!nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains(LOACaption.ToUpper()))
                                    Tocfamily = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    CheckLOT = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                    CheckLOF = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains(LOACaption.ToUpper()))
                                    CheckLOA = true;
                            }
                        }
                    }
                    else
                    {
                        foreach (FieldStart nd in fieldnodes)
                        {
                            if (nd.FieldType == FieldType.FieldSequence)
                            {
                                if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ TABLE") && TableFlag != true)
                                    TableFlag = true;
                                else if (nd.ParentNode.GetText().Trim().ToUpper().Contains("SEQ FIGURE") && FigureFlag != true)
                                    FigureFlag = true;
                            }
                            if (nd.FieldType == FieldType.FieldTOC)
                            {
                                if (!nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    Tocfamily = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    CheckLOT = true;
                                else if (nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                    CheckLOF = true;
                            }
                        }
                    }
                                    
                    //TOC LOT LOF LOA HEADING STYLES FOR EXISTING TOC CODE  
                    if (Tocfamily||CheckLOT||CheckLOF||CheckLOA)
                    {
                        chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                        for (int p = 0; p < chLst.Count; p++)
                        {
                            chLst[p].Parent_Checklist_ID = rObj.CheckList_ID;
                            chLst[p].JID = rObj.JID;
                            chLst[p].Job_ID = rObj.Job_ID;
                            chLst[p].Folder_Name = rObj.Folder_Name;
                            chLst[p].File_Name = rObj.File_Name;
                            chLst[p].Created_ID = rObj.Created_ID;
                            List<Node> TOCHeadingpara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).ParagraphFormat.StyleName != "TOC 1" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 2" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 3" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 4" && ((Paragraph)x).ParagraphFormat.StyleName != "TOC 5" && ((Paragraph)x).ParagraphFormat.StyleName != "Table of Figures" && ((Paragraph)x).Range.Text.ToUpper().Equals("TABLE OF CONTENTS") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF TABLES") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF FIGURES") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF APPENDICES") || ((Paragraph)x).Range.Text.ToUpper().Equals("TABLE OF CONTENTS\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF TABLES\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF FIGURES\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF APPENDICES\r") || ((Paragraph)x).Range.Text.ToUpper().Equals("TABLE OF CONTENT") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF TABLE") || ((Paragraph)x).Range.Text.ToUpper().Equals("LIST OF FIGURE"))).ToList();
                            if (chLst[p].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family" && chLst[p].Check_Type == 1 && chLst[p].QC_Result == "Failed")
                            {
                                if (TOCHeadingpara.Count > 0)
                                {
                                    foreach (Paragraph pr in TOCHeadingpara)
                                    {
                                            foreach (Run run in pr.Runs)
                                            {
                                                if (run.Font.Name.ToUpper() != chLst[p].Check_Parameter.ToUpper())
                                                {
                                                    subcheckfixed = true;
                                                    run.Font.Name = chLst[p].Check_Parameter;
                                                    chLst[p].Is_Fixed = 1;
                                                }
                                            }                                        
                                    }
                                    if (chLst[p].Is_Fixed == 1)
                                        chLst[p].Comments = chLst[p].Comments + ". Fixed";
                                }
                            }
                            if (chLst[p].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Size" && chLst[p].Check_Type == 1 && chLst[p].QC_Result == "Failed")
                            {
                                if (TOCHeadingpara.Count > 0)
                                {
                                    foreach (Paragraph pr in TOCHeadingpara)
                                    {
                                            foreach (Run run in pr.Runs)
                                            {
                                                if (run.Font.Size != Convert.ToDouble(chLst[p].Check_Parameter))
                                                {
                                                    subcheckfixed = true;
                                                    run.Font.Size = Convert.ToDouble(chLst[p].Check_Parameter);
                                                    chLst[p].Is_Fixed = 1;
                                                }
                                            }                                       
                                    }
                                    if (chLst[p].Is_Fixed == 1)
                                        chLst[p].Comments = chLst[p].Comments + ". Fixed";
                                }
                            }
                            if (chLst[p].Check_Name == "TOC, LOT, LOF and LOA Heading - Spacing after" && chLst[p].Check_Type == 1 && chLst[p].QC_Result == "Failed")
                            {
                                if (TOCHeadingpara.Count > 0)
                                {
                                    foreach (Paragraph pr in TOCHeadingpara)
                                    {
                                            if (pr.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[p].Check_Parameter))
                                            {
                                                subcheckfixed = true;
                                                pr.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[p].Check_Parameter);
                                                chLst[p].Is_Fixed = 1;
                                                
                                            }
                                    }
                                    if(chLst[p].Is_Fixed == 1)
                                        chLst[p].Comments = chLst[p].Comments + ". Fixed";

                                }
                            }
                        }
                    }
                    //TOC heading styles ending
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;
                        if (chLst[k].Check_Name == "\"Table of Contents\" Heading Style" && chLst[k].Check_Type == 1)
                        {
                            TOCStylename = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();                                                          
                            if (TOCStylename == null)
                                CheckStyles = CheckStyles + chLst[k].Check_Parameter + ",";
                        }
                        else if (chLst[k].Check_Name == "\"List of Tables\" Heading Style" && chLst[k].Check_Type == 1)
                        {
                            LOTStylename = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();                                                           
                            if (LOTStylename == null)
                                CheckStyles = CheckStyles + chLst[k].Check_Parameter + ",";
                        }
                        else if (chLst[k].Check_Name == "\"List of Figures\" Heading Style" && chLst[k].Check_Type == 1)
                        {
                            LOFStylename = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();                               
                            if (LOFStylename == null)
                                CheckStyles = CheckStyles + chLst[k].Check_Parameter + ",";
                            // List<Style> stere = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).ToList();
                        }
                        //else if (chLst[k].Check_Name == "List of Appendices" && chLst[k].Check_Type == 1)
                        //{
                        //    LOAStylename = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();                               
                        //    if (LOAStylename == null)
                        //        CheckStyles = CheckStyles + chLst[k].Check_Parameter + ",";
                        //    // List<Style> stere = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == chLst[k].Check_Parameter.ToString().ToUpper()).ToList();
                        //}
                        else if (chLst[k].Check_Name == "TOC starts from")
                            Tocposition = chLst[k].Check_Parameter;
                        else if (chLst[k].Check_Name == "TOC Format")
                            TOCFormat = chLst[k].Check_Parameter;

                        ////Level1 subchecks starts from here
                        //else if (chLst[k].Check_Name == "Level1 - Position")
                        //    LevelPosition = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level1 - Font Size")
                        //    LevelFontSize = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level1 - Font Style")
                        //    LevelFontStyle = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level1 - Uppercase")
                        //    LevelUppercase = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level1 - Font Family")
                        //    Level1FontFamily = chLst[k].Check_Parameter;

                        ////Level2 subchecks starts from here
                        //else if (chLst[k].Check_Name == "Level2 - Position")
                        //    LevelPosition = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level2 - Font Size")
                        //    LevelFontSize = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level2 - Font Style")
                        //    LevelFontStyle = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level2 - Uppercase")
                        //    LevelUppercase = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level2 - Font Family")
                        //    Level2FontFamily = chLst[k].Check_Parameter;


                        ////Level3 subchecks starts from here
                        //else if (chLst[k].Check_Name == "Level3 - Position")
                        //    LevelPosition = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level3 - Font Size")
                        //    LevelFontSize = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level3 - Font Style")
                        //    LevelFontStyle = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level3 - Uppercase")
                        //    LevelUppercase = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level3 - Font Family")
                        //    Level3FontFamily = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level2 - Font Family")
                        //    Level3FontFamily = chLst[k].Check_Parameter;


                        ////Level4 subchecks starts from here
                        //else if (chLst[k].Check_Name == "Level4 - Position")
                        //    LevelPosition = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level4 - Font Size")
                        //    LevelFontSize = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level4 - Font Style")
                        //    LevelFontStyle = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level4 - Uppercase")
                        //    LevelUppercase = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level4 - Font Family")
                        //    Level4FontFamily = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level2 - Font Family")
                        //    Level4FontFamily = chLst[k].Check_Parameter;


                        ////Level5 subchecks starts from here
                        //else if (chLst[k].Check_Name == "Level5 - Position")
                        //    LevelPosition = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level5 - Font Size")
                        //    LevelFontSize = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level5 - Font Style")
                        //    LevelFontStyle = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level5 - Uppercase")
                        //    LevelUppercase = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level5 - Font Family")
                        //    Level5FontFamily = chLst[k].Check_Parameter;
                        //else if (chLst[k].Check_Name == "Level2 - Font Family")
                        //    Level5FontFamily = chLst[k].Check_Parameter;


                        //LOT ANd LOF SUBCHECKS starts from here
                        else if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Size")
                            LotandLofFontSize = chLst[k].Check_Parameter;
                        else if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Style")
                            LotandLofFontStyle = chLst[k].Check_Parameter;
                        else if (chLst[k].Check_Name == "LOT, LOF and LOA - Uppercase")
                            LotandLofuppercase = chLst[k].Check_Parameter;
                        else if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Family")
                            lotloffontfamily = chLst[k].Check_Parameter;


                        /// TOC HEading SUbcheck start from here
                        else if (chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family")
                            Tocheadingfontfamily = chLst[k].Check_Parameter;
                        else if (chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Size")
                            Tocheadingfontsize = chLst[k].Check_Parameter;
                        else if (chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Spacing after")
                            Tocheadingspacingafter = chLst[k].Check_Parameter;

                    }
                    //code add if toc headings not available
                    if (Tocfamily )
                    {
                        Node tocfirstnode = null;
                        Node lotfirstnode = null;
                        Node loffirstnode = null;
                        LayoutCollector layout = new LayoutCollector(doc);
                        DocumentBuilder builder = new DocumentBuilder(doc);
                        List<Node> Fieldnodes = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence || ((FieldStart)x).FieldType == FieldType.FieldTOC).ToList();
                        foreach (FieldStart nd in fieldnodes)
                        {
                            if (nd.FieldType == FieldType.FieldTOC)
                            {
                                if (tocfirstnode ==null&& !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\"") && !nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    tocfirstnode = nd.ParentNode;
                                else if (lotfirstnode == null && nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                    lotfirstnode = nd.ParentNode;
                                else if (loffirstnode == null && nd.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                    loffirstnode = nd.ParentNode;
                            }
                        }
                        if (Tocfamily)
                        {
                            bool tocheading = false;
                            List<Node> printocpage = doc.GetChildNodes(NodeType.Paragraph, true).ToList();
                            foreach (Paragraph pr in printocpage)
                            {
                                if (pr.Range.Text.ToUpper().Contains("TABLE OF CONTENT") && !pr.Range.Text.ToUpper().Contains("TOC"))
                                {
                                    tocheading = true;
                                    break;
                                }
                            }
                            if (!tocheading && TOCStylename != null)
                            {
                                Paragraph pr = new Paragraph(doc);
                                tocfirstnode.ParentNode.InsertBefore(pr, tocfirstnode);
                                builder.MoveTo(pr);
                                builder.ParagraphFormat.Style = TOCStylename;
                                builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                builder.Writeln("TABLE OF CONTENTS");
                                builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                            }
                        }                      
                    }

                    //code for to add toc/Lot/lof
                    if (!Tocfamily)
                    {
                        //code for to find location to add toc.
                        Node heading = null;
                        DocumentBuilder builder = new DocumentBuilder(doc);
                        if ((CheckLOF || CheckLOT) && TOCStylename != null)
                        {
                            List<Node> Checkfieldsnodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart)).ToList();
                            foreach (FieldStart nd in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                            {
                                if (nd.ParentNode.PreviousSibling == null || nd.ParentNode.PreviousSibling.PreviousSibling == null)
                                {
                                    Paragraph pr = new Paragraph(doc);
                                    doc.Sections[0].Body.PrependChild(pr);
                                    builder.MoveTo(pr);
                                    break;
                                }
                                else
                                {
                                    heading = nd.ParentNode.PreviousSibling.PreviousSibling;
                                    builder.MoveTo(heading);
                                    break;
                                }
                            }
                        }
                        if (!CheckLOF && !CheckLOT && (TOCStylename != null || Tocheadingfontfamily != null))
                        {
                            if (Tocposition == "Page 1")
                            {
                                CheckHeading = true;
                                Paragraph pr = new Paragraph(doc);
                                doc.Sections[0].Body.PrependChild(pr);
                                builder.MoveTo(pr);
                            }

                            //code for toc starts from page2
                            if (Tocposition == "Page 2")
                            {
                                CheckHeading = true;
                                LayoutCollector collector = new LayoutCollector(doc);
                                foreach (Paragraph pr1 in paragraphs)
                                {
                                    LayoutCollector layout = new LayoutCollector(doc);
                                    if (layout.GetStartPageIndex(pr1) == 2)
                                    {
                                        if (pr1.IsInCell)
                                        {
                                            Table t = (Table)pr1.ParentNode.ParentNode.ParentNode;
                                            Paragraph par = new Paragraph(doc);
                                            t.ParentNode.InsertBefore(par, t);
                                            builder.MoveTo(par);
                                        }                                     
                                        else
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            pr1.ParentNode.InsertBefore(par, pr1);
                                            builder.MoveTo(par);
                                        }
                                        builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        break;
                                    }
                                }
                            }
                            if (Tocposition == "Before heading 1")
                            {
                                foreach (Paragraph pr1 in paragraphs)
                                {
                                    if (pr1.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1 || pr1.ParagraphFormat.StyleName.ToUpper() == "HEADING 1 UNNUMBERED" || pr1.ParagraphFormat.StyleName.ToUpper() == "HEADING 1 NOTOC")
                                    {
                                        CheckHeading = true;
                                        if (pr1.PreviousSibling == null)
                                        {
                                            Paragraph pr = new Paragraph(doc);
                                            pr1.ParentSection.Body.PrependChild(pr);
                                            builder.MoveTo(pr);
                                            break;
                                        }
                                        else
                                        {
                                            if (pr1.PreviousSibling.NodeType == NodeType.Table)
                                            {
                                                Table table = (Table)pr1.PreviousSibling;
                                                if (table.NextSibling.ToString(SaveFormat.Text).Trim() != null && table.NextSibling.ToString(SaveFormat.Text).Trim() != "")
                                                {
                                                    Paragraph par = new Paragraph(doc);
                                                    table.ParentNode.InsertAfter(par, table);
                                                    builder.MoveTo(par);
                                                }
                                            }
                                            else
                                            {
                                                heading = pr1.PreviousSibling;
                                                Paragraph par = new Paragraph(doc);
                                                pr1.ParentNode.InsertBefore(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            break;
                                        }
                                    }
                                }
                            }
                            if (CheckHeading == false)
                            {
                                Paragraph pr = new Paragraph(doc);
                                doc.Sections[0].Body.PrependChild(pr);
                                builder.MoveTo(pr);
                            }
                        }
                        //Below Code for adding toc/lot/lof
                        if (chLst.Count > 0)
                        {
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;
                                if ((chLst[k].Check_Name == "\"Table of Contents\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                {
                                    if (TOCStylename != null)
                                    {
                                        builder.ParagraphFormat.Style = TOCStylename;
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("TABLE OF CONTENTS");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        if (TOCFormat != null && TOCFormat != "")
                                            builder.InsertTableOfContents(TOCFormat);
                                        else
                                        {
                                            builder.InsertTableOfContents("\\o \"1 - 3\" \\h \\z \\u");
                                            // builder.InsertTableOfContents("TOC \\H \\Z \\T \"LIST OF FIGURES, 1, LIST OF TABLES, 1, LIST OF APPENDICES, 1, HEADING 1, 1, HEADING 1 UNNUMBERED, 1, HEADING 2, 2, HEADING 2 UNNUMBERED, 2, HEADING 3, 3, HEADING 3 UNNUMBERED, 3, HEADING 4, 4, HEADING 4 UNNUMBERED, 4\" \\* MERGEFORMAT ");
                                            // builder.InsertTableOfContents(@"TOC \\o \'1-3\' \\H \\Z \\U 'LIST OF FIGURES,1, LIST OF TABLES,1, LIST OF APPENDICES,1, HEADING 1,1, HEADING 1 UNNUMBERED,1,HEADING 1 UNNUMBERED, HEADING 2,2, HEADING 2 UNNUMBERED,2, HEADING 3,3, HEADING 3 UNNUMBERED,3, HEADING 4,4, HEADING 4 UNNUMBERED,4'");
                                        }
                                        FixToc = true;
                                        if (!CheckLOF && !CheckLOT && !CheckLOA && (!TableFlag || (TableFlag && LOTCaption == null)) && (FigureFlag == false || (FigureFlag && LOFCaption == null)))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                    }
                                    else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("TABLE OF CONTENTS");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        if (TOCFormat != null && TOCFormat != "")
                                            builder.InsertTableOfContents(TOCFormat);
                                        else
                                        {
                                            builder.InsertTableOfContents("\\o \"1 - 3\" \\h \\z \\u");
                                            // builder.InsertTableOfContents("TOC \\H \\Z \\T \"LIST OF FIGURES, 1, LIST OF TABLES, 1, LIST OF APPENDICES, 1, HEADING 1, 1, HEADING 1 UNNUMBERED, 1, HEADING 2, 2, HEADING 2 UNNUMBERED, 2, HEADING 3, 3, HEADING 3 UNNUMBERED, 3, HEADING 4, 4, HEADING 4 UNNUMBERED, 4\" \\* MERGEFORMAT ");
                                            // builder.InsertTableOfContents(@"TOC \\o \'1-3\' \\H \\Z \\U 'LIST OF FIGURES,1, LIST OF TABLES,1, LIST OF APPENDICES,1, HEADING 1,1, HEADING 1 UNNUMBERED,1,HEADING 1 UNNUMBERED, HEADING 2,2, HEADING 2 UNNUMBERED,2, HEADING 3,3, HEADING 3 UNNUMBERED,3, HEADING 4,4, HEADING 4 UNNUMBERED,4'");
                                        }
                                        FixToc = true;
                                        if (!CheckLOF && !CheckLOT && !CheckLOA && (!TableFlag || (TableFlag && LOTCaption == null)) && (FigureFlag == false || (FigureFlag && LOFCaption == null)) && (!AppendixFlag || (AppendixFlag && LOACaption == null)))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                    }
                                    
                                   
                                }
                                if ((chLst[k].Check_Name == "\"List of Tables\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1 && CheckLOT == false && TableFlag == true)
                                {
                                   // if (TblCaptionFieldseq.Count > 12)
                                   if(FixToc)
                                        builder.InsertBreak(BreakType.SectionBreakNewPage);
                                    if (LOTStylename != null)
                                    {
                                        builder.ParagraphFormat.Style = LOTStylename;
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF TABLES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                        FixLot = true;
                                        if (!CheckLOF && (!FigureFlag || (FigureFlag && LOFCaption == null)))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                    }
                                    else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF TABLES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                        FixLot = true;
                                        if ((!CheckLOF && (!FigureFlag || (FigureFlag && LOFCaption == null))) && (!CheckLOA && (!AppendixFlag || (AppendixFlag && LOACaption == null))))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                    }

                                    
                                    
                                }
                                if ((chLst[k].Check_Name == "\"List of Figures\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1 && !CheckLOF && FigureFlag)
                                {
                                    bool isLotExist = false;
                                    Node TOCEndNode = null;
                                    if (CheckLOT == true)
                                    {
                                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                                        foreach (Node start in FieldNodes)
                                        {
                                            if (!isLotExist && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                            {
                                                if (start.ParentNode.Range.Text.Trim().ToUpper().Contains("\"TABLE\""))
                                                    isLotExist = true;
                                            }
                                            if (isLotExist && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                            {
                                                TOCEndNode = start;
                                                break;
                                            }
                                        }
                                    }
                                    if (CheckLOT == true)
                                    {
                                        builder.MoveTo(TOCEndNode.ParentNode);
                                    }
                                    if (FgrCaptionFieldseq.Count > 12)
                                        builder.InsertBreak(BreakType.SectionBreakNewPage);
                                    else if(FixToc && !FixLot)
                                        builder.InsertBreak(BreakType.SectionBreakNewPage);

                                    if (LOFStylename != null)
                                    {
                                        builder.ParagraphFormat.Style = LOFStylename;
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                        FixLof = true;
                                        if (!CheckLOA && (!AppendixFlag || (AppendixFlag && LOACaption == null)))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                    }
                                    else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                        FixLof = true;
                                        if (!CheckLOA && (!AppendixFlag || (AppendixFlag && LOACaption == null)))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            builder.CurrentParagraph.Remove();
                                        }
                                    }                                                                      

                                }
                                if (chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family" && chLst[k].Check_Type == 1 && !CheckLOA && AppendixFlag )
                                {
                                    bool isLofExist = false;
                                    Node TOCEndNode = null;
                                    if (CheckLOF)
                                    {
                                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                                        foreach (Node start in FieldNodes)
                                        {
                                            if (!isLofExist && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                            {
                                                if (start.ParentNode.Range.Text.Trim().ToUpper().Contains("\"FIGURE\""))
                                                    isLofExist = true;
                                            }
                                            if (isLofExist && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                            {
                                                TOCEndNode = start;
                                                break;
                                            }
                                        }
                                    }
                                    if (LOACaption != null && LOACaption != "" && Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        if (AppendixCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        //builder.ParagraphFormat.Style = LOAStylename;
                                        if (CheckLOF)
                                        {
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.Writeln("LIST OF APPENDICES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"" + LOACaption);
                                        if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                        {
                                            builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                        }
                                        else
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        if (paraStyle != null)
                                            builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        builder.CurrentParagraph.Remove();
                                        FixLoa = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (Tocfamily == true && CheckLOT == false && CheckLOF == false && FigureFlag == true && TableFlag == true && AppendixFlag == true && CheckLOA == false)
                    {
                        bool isTocExisted = false;
                        Node TOCBeginNode = null;
                        Node TOCEndNode = null;
                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                        foreach (Node start in FieldNodes)
                        {
                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                            {
                                TOCEndNode = start;
                                break;
                            }
                            if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                        }
                        if (chLst.Count > 0)
                        {
                            DocumentBuilder builder = new DocumentBuilder(doc);
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;

                                if ((chLst[k].Check_Name == "\"List of Tables\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                {
                                    if (LOTCaption != null)
                                    {
                                        if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            if (TOCEndNode.NextSibling != null)
                                            {
                                                Run run = (Run)TOCEndNode.NextSibling;
                                                Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        //if (TblCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        if (LOTStylename != null)
                                        {
                                            builder.ParagraphFormat.Style = LOTStylename;
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF TABLES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLot = true;
                                        }

                                        else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                        {
                                            builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                            builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                            builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF TABLES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLot = true;
                                        }

                                        if (paraStyle != null)
                                            builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        
                                    }
                                }
                                if ((chLst[k].Check_Name == "\"List of Figures\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                {
                                    if (LOFCaption != null)
                                    {
                                        if (FgrCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        if (LOFStylename != null)
                                        {
                                            builder.ParagraphFormat.Style = LOFStylename;
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF FIGURES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLof = true;
                                        }
                                        else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                        {
                                            builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                            builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                            builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF FIGURES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLof = true;
                                        }

                                        if (paraStyle != null)
                                            builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;

                                       
                                    }
                                }
                                if (chLst[k].Check_Name == "Field code for List of Appendices" && chLst[k].Check_Type == 1)
                                {
                                    if (LOACaption != null && LOACaption != "" && Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        if (AppendixCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF APPENDICES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"" + LOACaption);
                                        if (TOCEndNode.ParentNode.NextSibling != null && !TOCEndNode.ParentNode.NextSibling.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        }
                                        FixLoa = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (Tocfamily == true && CheckLOT == false && CheckLOF == false && FigureFlag == true && TableFlag == true && AppendixFlag == false && CheckLOA == false)
                    {
                        //Below code for adding LOT and LOF
                        bool isTocExisted = false;
                        Node TOCBeginNode = null;
                        Node TOCEndNode = null;
                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                        foreach (Node start in FieldNodes)
                        {
                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                            {
                                TOCEndNode = start;
                                break;
                            }
                            if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                        }
                        if (chLst.Count > 0)
                        {
                            DocumentBuilder builder = new DocumentBuilder(doc);
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;

                                if ((chLst[k].Check_Name == "\"List of Tables\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                {
                                    if (LOTCaption != null)
                                    {
                                        if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            if (TOCEndNode.NextSibling != null)
                                            {
                                                Run run = (Run)TOCEndNode.NextSibling;
                                                Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                       // if (TblCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        if (LOTStylename != null)
                                        {
                                            builder.ParagraphFormat.Style = LOTStylename;
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF TABLES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLot = true;
                                        }

                                        else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                        {
                                            builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                            builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                            builder.ParagraphFormat.Style.Font.Spacing = Convert.ToDouble(Tocheadingspacingafter);
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF TABLES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLot = true;
                                        }
                                        if (paraStyle != null)
                                            builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        
                                    }
                                }
                                if ((chLst[k].Check_Name == "\"List of Figures\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                {
                                    if (FgrCaptionFieldseq.Count > 12)
                                        builder.InsertBreak(BreakType.SectionBreakNewPage);
                                    if (LOFStylename != null)
                                    {
                                        builder.ParagraphFormat.Style = LOFStylename;
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        FixLof = true;
                                    }
                                    else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        FixLof = true;
                                    }

                                    if (paraStyle != null)
                                        builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;

                                    

                                }
                            }
                        }
                    }
                    else if (Tocfamily == true && CheckLOT == false && CheckLOF == false && FigureFlag == true && TableFlag == false && AppendixFlag == true && CheckLOA == false)
                    {
                        //Below code for adding LOF and LOA
                        bool isTocExisted = false;
                        Node TOCBeginNode = null;
                        Node TOCEndNode = null;
                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                        foreach (Node start in FieldNodes)
                        {
                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                            {
                                TOCEndNode = start;
                                break;
                            }
                            if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                        }
                        if (chLst.Count > 0)
                        {
                            DocumentBuilder builder = new DocumentBuilder(doc);
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;
                                if ((chLst[k].Check_Name == "\"List of Figures\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                {
                                    if (FgrCaptionFieldseq.Count > 12)
                                        builder.InsertBreak(BreakType.SectionBreakNewPage);
                                    if (LOFStylename != null)
                                    {
                                        builder.ParagraphFormat.Style = LOFStylename;
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        FixLof = true;
                                    }

                                    else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF FIGURES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        FixLof = true;
                                    }

                                    if (paraStyle != null)
                                        builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;

                                    

                                }
                                if (chLst[k].Check_Name == "Field code for List of Appendices" && chLst[k].Check_Type == 1)
                                {
                                    if (LOACaption != null && LOACaption != "" && Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        if (AppendixCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        //builder.ParagraphFormat.Style = LOAStylename;
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF APPENDICES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"" + LOACaption);
                                        if (TOCEndNode.ParentNode.NextSibling != null && !TOCEndNode.ParentNode.NextSibling.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        }
                                        FixLoa = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (Tocfamily == true && CheckLOT == false && CheckLOF == false && FigureFlag == false && TableFlag == true && AppendixFlag == true && CheckLOA == false)
                    {
                        //Below code for adding LOT and LOA
                        bool isTocExisted = false;
                        Node TOCBeginNode = null;
                        Node TOCEndNode = null;
                        List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                        foreach (Node start in FieldNodes)
                        {
                            if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                            if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                            {
                                TOCEndNode = start;
                                break;
                            }
                            if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                            {
                                isTocExisted = true;
                                TOCBeginNode = start;
                            }
                        }
                        if (chLst.Count > 0)
                        {
                            DocumentBuilder builder = new DocumentBuilder(doc);
                            for (int k = 0; k < chLst.Count; k++)
                            {
                                chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                chLst[k].JID = rObj.JID;
                                chLst[k].Job_ID = rObj.Job_ID;
                                chLst[k].Folder_Name = rObj.Folder_Name;
                                chLst[k].File_Name = rObj.File_Name;
                                chLst[k].Created_ID = rObj.Created_ID;

                                if ((chLst[k].Check_Name == "\"List of Tables\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                {

                                    if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                    {
                                        Paragraph par = new Paragraph(doc);
                                        if (TOCEndNode.NextSibling != null)
                                        {
                                            Run run = (Run)TOCEndNode.NextSibling;
                                            Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                            pr1.ParentSection.Body.InsertAfter(par, pr1);
                                            builder.MoveTo(par);
                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                    }
                                    else
                                        builder.MoveTo(TOCEndNode.ParentNode);
                                    if (TblCaptionFieldseq.Count > 12)
                                        builder.InsertBreak(BreakType.SectionBreakNewPage);
                                    if (LOTStylename != null)
                                    {
                                        builder.ParagraphFormat.Style = LOTStylename;
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF TABLES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        FixLot = true;
                                    }

                                    else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF TABLES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        FixLot = true;
                                    }

                                    if (paraStyle != null)
                                        builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                    

                                }
                                if (chLst[k].Check_Name == "Field code for List of Appendices" && chLst[k].Check_Type == 1)
                                {
                                    if (LOACaption != null && LOACaption != "" && Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                    {
                                        if (AppendixCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                        builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                        builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                        builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                        builder.Writeln("LIST OF APPENDICES");
                                        builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                        builder.InsertTableOfContents("\\h \\z \\c \"" + LOACaption);
                                        if (TOCEndNode.ParentNode.NextSibling != null && !TOCEndNode.ParentNode.NextSibling.Range.Text.Contains(ControlChar.PageBreak))
                                        {
                                            if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                            {
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                            }
                                            else
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            if (paraStyle != null)
                                                builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                        }
                                        FixLoa = true;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (Tocfamily == true && CheckLOT == false && TableFlag == true)
                        {
                            //Below Code for adding LOT
                            bool isTocExisted = false;
                            Node TOCBeginNode = null;
                            Node TOCEndNode = null;
                            List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                            foreach (Node start in FieldNodes)
                            {
                                if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                {
                                    isTocExisted = true;
                                    TOCBeginNode = start;
                                }
                                if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                {
                                    TOCEndNode = start;
                                    break;
                                }
                            }
                            if (chLst.Count > 0)
                            {
                                for (int k = 0; k < chLst.Count; k++)
                                {
                                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                    chLst[k].JID = rObj.JID;
                                    chLst[k].Job_ID = rObj.Job_ID;
                                    chLst[k].Folder_Name = rObj.Folder_Name;
                                    chLst[k].File_Name = rObj.File_Name;
                                    chLst[k].Created_ID = rObj.Created_ID;

                                    if ((chLst[k].Check_Name == "\"List of Tables\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                    {

                                        DocumentBuilder builder = new DocumentBuilder(doc);
                                        if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            if (TOCEndNode.NextSibling != null && TOCEndNode.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                Run run = (Run)TOCEndNode.NextSibling;
                                                Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);

                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        
                                        if (LOTStylename != null)
                                        {
                                            if (Tocfamily||FixToc)
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.ParagraphFormat.Style = LOTStylename;
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF TABLES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLot = true;
                                            if (!CheckLOF  && !CheckLOA && ( (FigureFlag == false || (FigureFlag && LOFCaption == null)) && (!AppendixFlag || (AppendixFlag && LOACaption == null))))
                                            {
                                                if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                                {
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                                }
                                                else
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                                if (paraStyle != null)
                                                    builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                                builder.CurrentParagraph.Remove();
                                            }
                                        }

                                        else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                        {
                                            if (Tocfamily||FixToc)
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                            builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                            builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF TABLES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Table\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLot = true;
                                            if (!CheckLOF && !CheckLOA && ((FigureFlag == false || (FigureFlag && LOFCaption == null)) && (!AppendixFlag || (AppendixFlag && LOACaption == null))))
                                            {
                                                if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                                {
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                                }
                                                else
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                                if (paraStyle != null)
                                                    builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                                builder.CurrentParagraph.Remove();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (Tocfamily == true && CheckLOF == false && FigureFlag == true)
                        {
                            //Below code for adding LOF
                            bool isTocExisted = false;
                            Node TOCBeginNode = null;
                            Node TOCEndNode = null;
                            List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                            foreach (Node start in FieldNodes)
                            {
                                if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                {
                                    isTocExisted = true;
                                    TOCBeginNode = start;
                                }
                                if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                {
                                    TOCEndNode = start;
                                }
                            }
                            if (chLst.Count > 0)
                            {
                                for (int k = 0; k < chLst.Count; k++)
                                {
                                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                    chLst[k].JID = rObj.JID;
                                    chLst[k].Job_ID = rObj.Job_ID;
                                    chLst[k].Folder_Name = rObj.Folder_Name;
                                    chLst[k].File_Name = rObj.File_Name;
                                    chLst[k].Created_ID = rObj.Created_ID;

                                    if ((chLst[k].Check_Name == "\"List of Figures\" Heading Style" || chLst[k].Check_Name == "TOC, LOT, LOF and LOA Heading - Font Family") && chLst[k].Check_Type == 1)
                                    {

                                        DocumentBuilder builder = new DocumentBuilder(doc);
                                        if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                        {
                                            Paragraph par = new Paragraph(doc);
                                            if (TOCEndNode.NextSibling != null && TOCEndNode.NextSibling.NodeType == NodeType.Paragraph)
                                            {
                                                Run run = (Run)TOCEndNode.NextSibling;
                                                Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                builder.MoveTo(par);
                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);
                                        }
                                        else
                                            builder.MoveTo(TOCEndNode.ParentNode);
                                        if (FgrCaptionFieldseq.Count > 12)
                                            builder.InsertBreak(BreakType.SectionBreakNewPage);
                                        if (LOFStylename != null)
                                        {
                                            builder.ParagraphFormat.Style = LOFStylename;
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF FIGURES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLof = true;
                                            if ( !CheckLOA && ((!AppendixFlag || (AppendixFlag && LOACaption == null))))
                                            {
                                                if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                                {
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                                }
                                                else
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                                if (paraStyle != null)
                                                    builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                                builder.CurrentParagraph.Remove();
                                            }
                                        }

                                        else if (Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                        {
                                            builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                            builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                            builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF FIGURES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"Figure\"");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            FixLof = true;
                                            if (!CheckLOA && ((!AppendixFlag || (AppendixFlag && LOACaption == null))))
                                            {
                                                if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                                {
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                                }
                                                else
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                                if (paraStyle != null)
                                                    builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                                builder.CurrentParagraph.Remove();
                                            }
                                        }                                                                            
                                    }

                                }
                            }
                        }
                        if (Tocfamily == true && CheckLOA == false && AppendixFlag == true)
                        {
                            //Below Code for adding LOA
                            bool isTocExisted = false;
                            Node TOCBeginNode = null;
                            Node TOCEndNode = null;
                            List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd)).ToList();
                            foreach (Node start in FieldNodes)
                            {
                                if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                {
                                    isTocExisted = true;
                                    TOCBeginNode = start;
                                }
                                if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                {
                                    TOCEndNode = start;
                                }
                            }
                            if (chLst.Count > 0)
                            {
                                for (int k = 0; k < chLst.Count; k++)
                                {
                                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                                    chLst[k].JID = rObj.JID;
                                    chLst[k].Job_ID = rObj.Job_ID;
                                    chLst[k].Folder_Name = rObj.Folder_Name;
                                    chLst[k].File_Name = rObj.File_Name;
                                    chLst[k].Created_ID = rObj.Created_ID;

                                    if (chLst[k].Check_Name == "Field code for List of Appendices" && chLst[k].Check_Type == 1)
                                    {
                                        if (LOACaption != null && LOACaption != "" && Tocheadingfontfamily != null && Tocheadingfontfamily != "")
                                        {
                                            DocumentBuilder builder = new DocumentBuilder(doc);
                                            if (TOCEndNode.ParentNode.Range.Text.Trim() != "")
                                            {
                                                Paragraph par = new Paragraph(doc);
                                                if (TOCEndNode.NextSibling != null && TOCEndNode.NextSibling.NodeType == NodeType.Paragraph)
                                                {
                                                    Run run = (Run)TOCEndNode.NextSibling;
                                                    Paragraph pr1 = (Paragraph)run.ParentParagraph;
                                                    pr1.ParentSection.Body.InsertAfter(par, pr1);
                                                    builder.MoveTo(par);
                                                }
                                                else
                                                    builder.MoveTo(TOCEndNode.ParentNode);

                                            }
                                            else
                                                builder.MoveTo(TOCEndNode.ParentNode);
                                            if (AppendixCaptionFieldseq.Count > 12)
                                                builder.InsertBreak(BreakType.SectionBreakNewPage);
                                            builder.ParagraphFormat.Style.Font.Name = Tocheadingfontfamily;
                                            builder.ParagraphFormat.Style.Font.Size = Convert.ToDouble(Tocheadingfontsize);
                                            builder.ParagraphFormat.SpaceAfter = Convert.ToDouble(Tocheadingspacingafter);
                                            builder.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                            builder.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            builder.Writeln("LIST OF APPENDICES");
                                            builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                            builder.InsertTableOfContents("\\h \\z \\c \"" + LOACaption);
                                            if (TOCEndNode.ParentNode.NextSibling != null && !TOCEndNode.ParentNode.NextSibling.Range.Text.Contains(ControlChar.PageBreak))
                                            {
                                                if (doc.Sections[0].PageSetup.Orientation == Orientation.Landscape)
                                                {
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Portrait;
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                    builder.CurrentSection.PageSetup.Orientation = Orientation.Landscape;
                                                }
                                                else
                                                    builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                builder.CurrentParagraph.ParagraphFormat.ClearFormatting();
                                                if (paraStyle != null)
                                                    builder.CurrentParagraph.ParagraphFormat.Style = paraStyle;
                                            }
                                            FixLoa = true;
                                        }
                                    }
                                }
                            }
                        }

                    }

                    if (chLst.Count > 0)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                            chLst[k].JID = rObj.JID;
                            chLst[k].Job_ID = rObj.Job_ID;
                            chLst[k].Folder_Name = rObj.Folder_Name;
                            chLst[k].File_Name = rObj.File_Name;
                            chLst[k].Created_ID = rObj.Created_ID;
                            if (Tocfamily == true ||(FixToc||FixLof||FixLot))
                            {
                                if (chLst[k].Check_Name == "Add Section break after TOC, LOT, LOF and LOA" && chLst[k].Check_Type == 1)
                                {
                                    //section break for existing Toc
                                   
                                    bool Sectionbreakfixed = false;
                                    int v = 0;
                                    int w = 0;
                                    int y = 0;
                                    int z = 0;
                                    bool afterentireTOC = true;
                                    bool TOCLOT = true;
                                    bool TOCLOF = true;
                                    bool LOTLOF = true;
                                    if (Tocfamily || CheckLOT || CheckLOF||FixToc ||FixLot || FixLof)
                                    {                                       
                                            if ((Tocfamily||FixToc) && (CheckLOT||FixLot) && (CheckLOF||FixLof))
                                            {
                                                bool isTocExisted1 = false;
                                                Node TOCBeginNode1 = null;
                                                Node TOCEndNode1 = null;
                                                Node ToCEndNode2 = null;
                                                Node TOCEndNode3 = null;
                                                int j = 0;
                                                LayoutCollector layout1 = new LayoutCollector(doc);
                                                DocumentBuilder builder1 = new DocumentBuilder(doc);
                                                List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                                foreach (Node start in FieldNodes1)
                                                {
                                                    if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                    {
                                                        isTocExisted1 = true;
                                                        TOCBeginNode1 = start;
                                                    }
                                                    if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                    {
                                                        if (j == 0)
                                                        {
                                                            TOCEndNode1 = start;
                                                            j++;
                                                        }
                                                        else if(j == 1)
                                                        {
                                                            ToCEndNode2 = start;
                                                            j++;
                                                        }
                                                        else
                                                        {
                                                            TOCEndNode3 = start;
                                                        }
                                                    }
                                                }
                                                if (isTocExisted1 && TOCEndNode1 != null && TOCEndNode3 != null && layout1.GetEndPageIndex(TOCEndNode1) != layout1.GetEndPageIndex(TOCEndNode3))
                                                {
                                                    int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                    int lotendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                    int lofendpgno = layout1.GetEndPageIndex(TOCEndNode3);
                                                List<Paragraph> para = new List<Paragraph>();
                                                    if (tocendpgno > 0)
                                                    {
                                                        foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                        {
                                                            para.Add(pr);
                                                        }
                                                     if(tocendpgno == lotendpgno)
                                                    {
                                                        TOCLOT = false;
                                                        builder1.MoveTo(TOCEndNode1.ParentNode);
                                                        builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                        Sectionbreakfixed = true;
                                                    }
                                                     else if (para.Count > 0)
                                                        {
                                                            foreach (Paragraph pr in para)
                                                            {
                                                                if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                                {
                                                                    v = pr.Range.Replace("&m", "&b");
                                                                if (v == 1)
                                                                    Sectionbreakfixed = true;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            TOCLOT = false;
                                                            builder1.MoveTo(TOCEndNode1.ParentNode);
                                                            builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                            Sectionbreakfixed = true;
                                                        }
                                                    }
                                                }
                                                if (isTocExisted1 && ToCEndNode2 != null && TOCEndNode3 != null && layout1.GetEndPageIndex(ToCEndNode2) != layout1.GetEndPageIndex(TOCEndNode3))
                                                {
                                                    int tocendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                    List<Paragraph> para = new List<Paragraph>();
                                                    if (tocendpgno > 0)
                                                    {
                                                        foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                        {
                                                            para.Add(pr);
                                                        }
                                                        if (para.Count > 0)
                                                        {
                                                            foreach (Paragraph pr in para)
                                                            {
                                                                if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                                {
                                                                    w = pr.Range.Replace("&m", "&b");
                                                                if (w == 1)
                                                                    Sectionbreakfixed = true;
                                                                }
                                                            }
                                                        }
                                                        else if (FgrCaptionFieldseq.Count > 12)
                                                        {
                                                            LOTLOF = false;
                                                            builder1.MoveTo(ToCEndNode2.ParentNode);
                                                            builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                            Sectionbreakfixed = true;
                                                        }
                                                    }
                                                }
                                            }
                                            else if ((Tocfamily||FixToc) && (CheckLOT||FixLot) && !CheckLOF)
                                            {
                                                bool isTocExisted1 = false;
                                                Node TOCBeginNode1 = null;
                                                Node TOCEndNode1 = null;
                                                Node ToCEndNode2 = null;
                                                int j = 0;
                                                LayoutCollector layout1 = new LayoutCollector(doc);
                                                DocumentBuilder builder1 = new DocumentBuilder(doc);
                                                List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes1)
                                            {
                                                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted1 = true;
                                                    TOCBeginNode1 = start;
                                                }
                                                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    if (j == 0)
                                                    {
                                                        TOCEndNode1 = start;
                                                        j++;
                                                    }
                                                    else if (j == 1)
                                                    {
                                                        ToCEndNode2 = start;
                                                        j++;
                                                    }
                                                    
                                                }
                                            }
                                            if (isTocExisted1 && TOCEndNode1 != null && ToCEndNode2 != null)
                                                {
                                                    int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                    int lotendpgno = layout1.GetEndPageIndex(ToCEndNode2);
                                                List<Paragraph> para = new List<Paragraph>();
                                                    if (tocendpgno > 0)
                                                    {
                                                        foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                        {
                                                            para.Add(pr);
                                                        }
                                                        if(tocendpgno == lotendpgno)
                                                       {
                                                        TOCLOT = false;
                                                        builder1.MoveTo(TOCEndNode1.ParentNode);
                                                        builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                        Sectionbreakfixed = true;
                                                    }
                                                       else if (para.Count > 0)
                                                        {
                                                            foreach (Paragraph pr in para)
                                                            {
                                                                if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                                {
                                                                    v = pr.Range.Replace("&m", "&b");
                                                                if (v == 1)
                                                                    Sectionbreakfixed = true;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            TOCLOT = false;
                                                            builder1.MoveTo(TOCEndNode1.ParentNode);
                                                            builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                            Sectionbreakfixed = true;
                                                        }
                                                    }
                                                }

                                            }
                                            else if ((Tocfamily||FixToc) && !CheckLOT && (CheckLOF||FixLof))
                                            {
                                                bool isTocExisted1 = false;
                                                Node TOCBeginNode1 = null;
                                                Node TOCEndNode1 = null;
                                                Node ToCEndNode2 = null;
                                                int j = 0;
                                                LayoutCollector layout1 = new LayoutCollector(doc);
                                                DocumentBuilder builder1 = new DocumentBuilder(doc);
                                                List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes1)
                                            {
                                                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted1 = true;
                                                    TOCBeginNode1 = start;
                                                }
                                                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    if (j == 0)
                                                    {
                                                        TOCEndNode1 = start;
                                                        j++;
                                                    }
                                                    else if (j == 1)
                                                    {
                                                        ToCEndNode2 = start;
                                                        j++;
                                                    }

                                                }
                                            }
                                            if (isTocExisted1 && TOCEndNode1 != null && ToCEndNode2 != null)
                                                {
                                                    int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                    int lofendpgno = layout1.GetEndPageIndex(ToCEndNode2);

                                                List<Paragraph> para = new List<Paragraph>();
                                                    if (tocendpgno > 0)
                                                    {
                                                        foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                        {
                                                            para.Add(pr);
                                                        }
                                                       if (tocendpgno == lofendpgno)
                                                        {
                                                        TOCLOF = false;
                                                        builder1.MoveTo(TOCEndNode1.ParentNode);
                                                        builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                        Sectionbreakfixed = true;
                                                    }
                                                    else if (para.Count > 0)
                                                        {
                                                            foreach (Paragraph pr in para)
                                                            {
                                                                if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                                {
                                                                    y = pr.Range.Replace("&m", "&b");
                                                                if (y == 1)
                                                                    Sectionbreakfixed = true;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            TOCLOF = false;
                                                            builder1.MoveTo(TOCEndNode1.ParentNode);
                                                            builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                            Sectionbreakfixed = true;
                                                        }
                                                    }
                                                }

                                            }
                                            else if (!Tocfamily && (CheckLOT||FixLot) && (CheckLOF||FixLof))
                                            {
                                                bool isTocExisted1 = false;
                                                Node TOCBeginNode1 = null;
                                                Node TOCEndNode1 = null;
                                               Node ToCEndNode2 = null;
                                                int j = 0;
                                                LayoutCollector layout1 = new LayoutCollector(doc);
                                                DocumentBuilder builder1 = new DocumentBuilder(doc);
                                                List<Node> FieldNodes1 = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes1)
                                            {
                                                if (!isTocExisted1 && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted1 = true;
                                                    TOCBeginNode1 = start;
                                                }
                                                if (isTocExisted1 && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    if (j == 0)
                                                    {
                                                        TOCEndNode1 = start;
                                                        j++;
                                                    }
                                                    else if (j == 1)
                                                    {
                                                        ToCEndNode2 = start;
                                                        j++;
                                                    }

                                                }
                                            }
                                            if (isTocExisted1 && TOCEndNode1 != null && ToCEndNode2 != null)
                                                {
                                                    int tocendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                     int lofendpgno = layout1.GetEndPageIndex(TOCEndNode1);
                                                List<Paragraph> para = new List<Paragraph>();
                                                    if (tocendpgno > 0)
                                                    {
                                                        foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout1.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                        {
                                                            para.Add(pr);
                                                        }
                                                        if(tocendpgno== lofendpgno)
                                                       {
                                                        LOTLOF = false;
                                                        builder1.MoveTo(TOCEndNode1.ParentNode);
                                                        builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                        Sectionbreakfixed = true;

                                                       }

                                                      else if (para.Count > 0)
                                                        {
                                                            foreach (Paragraph pr in para)
                                                            {
                                                                if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                                {
                                                                    w = pr.Range.Replace("&m", "&b");
                                                                if (w == 1)
                                                                    Sectionbreakfixed = true;
                                                                }
                                                            }
                                                        }
                                                        else if (FgrCaptionFieldseq.Count > 12)
                                                        {
                                                            LOTLOF = false;
                                                            builder1.MoveTo(TOCEndNode1.ParentNode);
                                                            builder1.InsertBreak(BreakType.SectionBreakNewPage);
                                                            Sectionbreakfixed = true;

                                                        }
                                                    }
                                                }
                                            }
                                            LayoutCollector layout = new LayoutCollector(doc);
                                            bool isTocExisted = false;
                                            Node TOCBeginNode = null;
                                            Node TOCEndNode = null;
                                            DocumentBuilder builder = new DocumentBuilder(doc);
                                            List<Node> FieldNodes = doc.GetChildNodes(NodeType.Any, true).Where(x => (x.NodeType == NodeType.FieldStart || x.NodeType == NodeType.FieldEnd || x.NodeType == NodeType.FieldSeparator)).ToList();
                                            foreach (Node start in FieldNodes)
                                            {
                                                if (!isTocExisted && start.NodeType == NodeType.FieldStart && ((FieldStart)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted = true;
                                                    TOCBeginNode = start;
                                                }
                                                if (isTocExisted && start.NodeType == NodeType.FieldEnd && ((FieldEnd)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    TOCEndNode = start;
                                                }
                                                if (start.NodeType == NodeType.FieldSeparator && ((FieldSeparator)start).FieldType == FieldType.FieldTOC)
                                                {
                                                    isTocExisted = true;
                                                    TOCBeginNode = start;
                                                }
                                            }
                                            if (isTocExisted && TOCEndNode != null)
                                            {
                                                int tocendpgno = layout.GetEndPageIndex(TOCEndNode);
                                                List<Paragraph> para = new List<Paragraph>();
                                                if (tocendpgno > 0)
                                                {
                                                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true).Where(x => layout.GetStartPageIndex(x) == tocendpgno && x.Range.Text.Contains("\f")))
                                                    {
                                                        para.Add(pr);
                                                    }
                                                    if (para.Count > 0)
                                                    {
                                                        foreach (Paragraph pr in para)
                                                        {
                                                            if (pr.Range.Text.Contains(ControlChar.SectionBreak))
                                                            {
                                                                z = pr.Range.Replace("&m", "&b");
                                                             if(z==1)
                                                                Sectionbreakfixed = true;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        afterentireTOC = false;
                                                        builder.MoveTo(TOCEndNode.ParentNode);
                                                        builder.InsertBreak(BreakType.SectionBreakNewPage);
                                                        Sectionbreakfixed = true;

                                                    }
                                                }
                                            }                                        
                                    }
                                    doc.Save(rObj.DestFilePath);
                                    string sectionbreakcommentstext = string.Empty;
                                    string pagebrekcomments = "Page Break existed ";
                                    int h = 0;
                                    if (v == 1)
                                    {
                                        h = h + 1;
                                        pagebrekcomments = pagebrekcomments + "between TOC and LOT, ";
                                    }
                                    if (w == 1)
                                    {
                                        h = h + 1;
                                        pagebrekcomments = pagebrekcomments + "between LOT and LOF, ";
                                    }
                                    if (y == 1)
                                    {
                                        h = h + 1;
                                        pagebrekcomments = pagebrekcomments + "between TOC and LOF, ";
                                    }
                                    if (z == 1)
                                    {
                                        h = h + 1;
                                        pagebrekcomments = pagebrekcomments + "after entire TOC, ";
                                    }
                                    if (v == 1 || w == 1 || y == 1 || z == 1)
                                    {

                                        if (h > 1)
                                            sectionbreakcommentstext = pagebrekcomments.TrimEnd(',') + " are replaced with section breaks.";
                                        else if (h == 1)
                                            sectionbreakcommentstext = pagebrekcomments.TrimEnd(',') + " is replaced with section break.";

                                    }
                                    int l = 0;
                                    if (!afterentireTOC || !TOCLOT || !TOCLOF || !LOTLOF)
                                    {
                                        
                                        sectionbreakcommentstext = sectionbreakcommentstext + "section break ";
                                        if (!TOCLOT)
                                        {
                                            l = l + 1;
                                            sectionbreakcommentstext = sectionbreakcommentstext + "between TOC and LOT, ";

                                        }
                                        if (!LOTLOF)
                                        {
                                            l = l + 1;
                                            sectionbreakcommentstext = sectionbreakcommentstext + "between LOT and LOF, ";
                                        }
                                        if (!TOCLOF)
                                        {
                                            l = l + 1;
                                            sectionbreakcommentstext = sectionbreakcommentstext + "between TOC and LOF, ";
                                        }
                                        if (!afterentireTOC)
                                        {
                                            l = l + 1;
                                            sectionbreakcommentstext = sectionbreakcommentstext + "after entire TOC, ";
                                        }
                                    }
                                    if (Sectionbreakfixed)
                                    {
                                        if (!afterentireTOC || !TOCLOT || !TOCLOF || !LOTLOF)
                                        {
                                            if(l > 1)
                                            {
                                                chLst[k].Is_Fixed = 1;
                                                chLst[k].Comments = sectionbreakcommentstext.TrimEnd(',') + " are created by REGai";
                                            }
                                            else if(l == 1)
                                            {
                                                chLst[k].Is_Fixed = 1;
                                                chLst[k].Comments = sectionbreakcommentstext.TrimEnd(',') + " is created by REGai";
                                            }
                                            
                                        }
                                        else
                                        {
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = sectionbreakcommentstext;
                                        }
                                            
                                    }
                                }
                                if(Tocfamily|| CheckLOT || CheckLOF || CheckLOA)
                                {
                                    Style toc1 = doc.Styles[StyleIdentifier.Toc1];
                                    if (chLst[k].Check_Name == "Level1 - Position" && chLst[k].Check_Type == 1 && toc1 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Left"))
                                        {
                                            subcheckfixed = true;
                                            toc1.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Center"))
                                        {
                                            subcheckfixed = true;
                                            toc1.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Right"))
                                        {
                                            subcheckfixed = true;
                                            toc1.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Justify"))
                                        {
                                            subcheckfixed = true;
                                            toc1.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level1 - Font Size" && chLst[k].Check_Type == 1 && toc1 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (Convert.ToDouble(toc1.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(toc1.Font.Name.ToUpper()))
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level1 - Font Style" && chLst[k].Check_Type == 1 && toc1 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Regular"))
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.Bold = false;
                                            toc1.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.Bold = true;
                                            toc1.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.Bold = false;
                                            toc1.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold"))
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.Bold = true;
                                            toc1.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level1 - Uppercase" && chLst[k].Check_Type == 1 && toc1 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter == "Yes")
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.AllCaps = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                        else if (chLst[k].Check_Parameter == "No")
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.AllCaps = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                    }

                                    if (chLst[k].Check_Name == "Level1 - Font Family" && chLst[k].Check_Type == 1 && toc1 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        // Convert.ToDouble(LotandLOffontsize.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(LotandLOffontsize.Font.Name.ToUpper()
                                        if (toc1.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                        {
                                            subcheckfixed = true;
                                            toc1.Font.Name = chLst[k].Check_Parameter;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level1 - Indentation" && chLst[k].Check_Type == 1 && toc1 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (toc1.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                        {
                                            subcheckfixed = true;
                                            toc1.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    

                                    Style toc2 = doc.Styles[StyleIdentifier.Toc2];
                                    if (chLst[k].Check_Name == "Level2 - Position" && chLst[k].Check_Type == 1 && toc2 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Left"))
                                        {
                                            subcheckfixed = true;
                                            toc2.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Center"))
                                        {
                                            subcheckfixed = true;
                                            toc2.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Right"))
                                        {
                                            subcheckfixed = true;
                                            toc2.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Justify"))
                                        {
                                            subcheckfixed = true;
                                            toc2.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level2 - Font Size" && chLst[k].Check_Type == 1 && toc2 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (Convert.ToDouble(toc2.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(toc2.Font.Name.ToUpper()))
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level2 - Font Style" && chLst[k].Check_Type == 1 && toc2 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Regular"))
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.Bold = false;
                                            toc2.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.Bold = true;
                                            toc2.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.Bold = false;
                                            toc2.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold"))
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.Bold = true;
                                            toc2.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level2 - Uppercase" && chLst[k].Check_Type == 1 && toc2 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter == "Yes")
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.AllCaps = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                        else if (chLst[k].Check_Parameter == "No")
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.AllCaps = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                    }

                                    if (chLst[k].Check_Name == "Level2 - Font Family" && chLst[k].Check_Type == 1 && toc2 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (toc2.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                        {
                                            subcheckfixed = true;
                                            toc2.Font.Name = chLst[k].Check_Parameter;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level2 - Indentation" && chLst[k].Check_Type == 1 && toc2 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (toc2.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                        {
                                            subcheckfixed = true;
                                            toc2.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    Style toc3 = doc.Styles[StyleIdentifier.Toc3];
                                    if (chLst[k].Check_Name == "Level3 - Position" && chLst[k].Check_Type == 1 && toc3 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Left"))
                                        {
                                            subcheckfixed = true;
                                            toc3.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Center"))
                                        {
                                            subcheckfixed = true;
                                            toc3.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Right"))
                                        {
                                            subcheckfixed = true;
                                            toc3.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Justify"))
                                        {
                                            subcheckfixed = true;
                                            toc3.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level3 - Font Size" && chLst[k].Check_Type == 1 && toc3 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (Convert.ToDouble(toc3.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(toc3.Font.Name.ToUpper()))
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level3 - Font Style" && chLst[k].Check_Type == 1 && toc3 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Regular"))
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.Bold = false;
                                            toc3.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.Bold = true;
                                            toc3.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.Bold = false;
                                            toc3.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold"))
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.Bold = true;
                                            toc3.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level3 - Uppercase" && chLst[k].Check_Type == 1 && toc3 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter == "Yes")
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.AllCaps = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                        else if (chLst[k].Check_Parameter == "No")
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.AllCaps = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                    }

                                    if (chLst[k].Check_Name == "Level3 - Font Family" && chLst[k].Check_Type == 1 && toc3 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (toc3.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                        {
                                            subcheckfixed = true;
                                            toc3.Font.Name = chLst[k].Check_Parameter;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level3 - Indentation" && chLst[k].Check_Type == 1 && toc3 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (toc3.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                        {
                                            subcheckfixed = true;
                                            toc3.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    Style toc4 = doc.Styles[StyleIdentifier.Toc4];
                                    if (chLst[k].Check_Name == "Level4 - Position" && chLst[k].Check_Type == 1 && toc4 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Left"))
                                        {
                                            subcheckfixed = true;
                                            toc4.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Center"))
                                        {
                                            subcheckfixed = true;
                                            toc4.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Right"))
                                        {
                                            subcheckfixed = true;
                                            toc4.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Justify"))
                                        {
                                            subcheckfixed = true;
                                            toc4.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level4 - Font Size" && chLst[k].Check_Type == 1 && toc4 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (Convert.ToDouble(toc4.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(toc4.Font.Name.ToUpper()))
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level4 - Font Style" && chLst[k].Check_Type == 1 && toc4 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Regular"))
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.Bold = false;
                                            toc4.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.Bold = true;
                                            toc4.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.Bold = false;
                                            toc4.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold"))
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.Bold = true;
                                            toc4.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level4 - Uppercase" && chLst[k].Check_Type == 1 && toc4 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter == "Yes")
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.AllCaps = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                        else if (chLst[k].Check_Parameter == "No")
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.AllCaps = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                    }

                                    if (chLst[k].Check_Name == "Level4 - Font Family" && chLst[k].Check_Type == 1 && toc4 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        // Convert.ToDouble(LotandLOffontsize.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(LotandLOffontsize.Font.Name.ToUpper()
                                        if (toc4.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                        {
                                            subcheckfixed = true;
                                            toc4.Font.Name = chLst[k].Check_Parameter;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level4 - Indentation" && chLst[k].Check_Type == 1 && toc4 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (toc4.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                        {
                                            subcheckfixed = true;
                                            toc4.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    Style toc5 = doc.Styles[StyleIdentifier.Toc5];
                                    if (chLst[k].Check_Name == "Level5 - Position" && chLst[k].Check_Type == 1 && toc5 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Left"))
                                        {
                                            subcheckfixed = true;
                                            toc5.ParagraphFormat.Alignment = ParagraphAlignment.Left;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Center"))
                                        {
                                            subcheckfixed = true;
                                            toc5.ParagraphFormat.Alignment = ParagraphAlignment.Center;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Right"))
                                        {
                                            subcheckfixed = true;
                                            toc5.ParagraphFormat.Alignment = ParagraphAlignment.Right;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Justify"))
                                        {
                                            subcheckfixed = true;
                                            toc5.ParagraphFormat.Alignment = ParagraphAlignment.Justify;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level5 - Font Size" && chLst[k].Check_Type == 1 && toc5 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (Convert.ToDouble(toc5.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(toc5.Font.Name.ToUpper()))
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level5 - Font Style" && chLst[k].Check_Type == 1 && toc5 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter.Contains("Regular"))
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.Bold = false;
                                            toc5.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.Bold = true;
                                            toc5.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Italic"))
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.Bold = false;
                                            toc5.Font.Italic = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else if (chLst[k].Check_Parameter.Contains("Bold"))
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.Bold = true;
                                            toc5.Font.Italic = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                    }

                                    if (chLst[k].Check_Name == "Level5 - Uppercase" && chLst[k].Check_Type == 1 && toc5 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (chLst[k].Check_Parameter == "Yes")
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.AllCaps = true;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                        else if (chLst[k].Check_Parameter == "No")
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.AllCaps = false;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }

                                    }

                                    if (chLst[k].Check_Name == "Level5 - Font Family" && chLst[k].Check_Type == 1 && toc5 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        // Convert.ToDouble(LotandLOffontsize.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(LotandLOffontsize.Font.Name.ToUpper()
                                        if (toc5.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                        {
                                            subcheckfixed = true;
                                            toc5.Font.Name = chLst[k].Check_Parameter;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                    if (chLst[k].Check_Name == "Level5 - Indentation" && chLst[k].Check_Type == 1 && toc5 != null && chLst[k].QC_Result == "Failed")
                                    {
                                        if (toc5.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                        {
                                            subcheckfixed = true;
                                            toc5.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                        }
                                    }
                                }                              
                         }
                        
                            /// ALL LEVEL checks End Here
                            if (CheckLOA || CheckLOF || CheckLOT)
                            {

                                Style LotandLOffontstyle = doc.Styles[StyleIdentifier.TableOfFigures];
                                if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Size" && chLst[k].Check_Type == 1 && LotandLOffontstyle!= null && chLst[k].QC_Result == "Failed")
                                {
                                    if (Convert.ToDouble(LotandLOffontstyle.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(LotandLOffontstyle.Font.Name.ToUpper()))
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter.ToString());
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                    }
                                }
                                if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Style" && chLst[k].Check_Type == 1 && LotandLOffontstyle != null && chLst[k].QC_Result == "Failed")
                                {
                                    if (chLst[k].Check_Parameter.Contains("Regular"))
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.Bold = false;
                                        LotandLOffontstyle.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    if (chLst[k].Check_Parameter.Contains("Bold Italic"))
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.Bold = true;
                                        LotandLOffontstyle.Font.Italic = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    if (chLst[k].Check_Parameter.Contains("Italic"))
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.Bold = false;
                                        LotandLOffontstyle.Font.Italic = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    if (chLst[k].Check_Parameter.Contains("Bold"))
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.Bold = true;
                                        LotandLOffontstyle.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                }
                                if (chLst[k].Check_Name == "LOT, LOF and LOA - Uppercase" && chLst[k].Check_Type == 1 && LotandLOffontstyle != null && chLst[k].QC_Result == "Failed")
                                {
                                    if (chLst[k].Check_Parameter == "Yes")
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.AllCaps = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else if (chLst[k].Check_Parameter == "No")
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.AllCaps = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                }

                                if (chLst[k].Check_Name == "LOT, LOF and LOA - Font Family" && chLst[k].Check_Type == 1 && LotandLOffontstyle != null && chLst[k].QC_Result == "Failed")
                                {
                                    // Convert.ToDouble(LotandLOffontsize.Font.Size) != Convert.ToDouble(chLst[k].Check_Parameter.ToString()) && !ExceptionLst.Contains(LotandLOffontsize.Font.Name.ToUpper()
                                    if (LotandLOffontstyle.ParagraphFormat.Style.Font.Name != chLst[k].Check_Parameter)
                                    {
                                        subcheckfixed = true;
                                        LotandLOffontstyle.Font.Name = chLst[k].Check_Parameter;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";

                                    }
                                }
                            }
                        }
                    }
                    string commentstext = string.Empty;
                    int i = 0;
                    if (FixToc)
                    {
                        i = i + 1;
                        commentstext = "TOC,";
                    }
                    if (FixLot)
                    {
                        i = i + 1;
                        commentstext = commentstext + "LOT,";
                    }
                    if (FixLof)
                    {
                        i = i + 1;
                        commentstext = commentstext + "LOF,";
                    }
                    if (FixLoa)
                    {
                        i = i + 1;
                        commentstext = commentstext + "LOA";
                    }
                    if (FixToc || FixLot || FixLof || FixLoa)
                    {
                        rObj.Is_Fixed = 1;
                        if (i == 1)
                            rObj.Comments = commentstext.TrimEnd(',') + " created by REGai.";
                        else if (i > 1)
                            rObj.Comments = commentstext.TrimEnd(',') + " are created by REGai.";
                    }
                    //if (FixToc == true && FixLot == true && FixLof == true && FixLoa == false)
                    //{
                    //    //rObj.QC_Result = "Fixed";
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = "TOC,LOT and LOF are created by REGai.";
                    //}                            
                    //else if (FixToc == true && FixLot == true && FixLof == false)
                    //{
                    //    //rObj.QC_Result = "Fixed";
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = "TOC and LOT are created by REGai.";
                    //}
                    //else if (FixToc == true && FixLot == false && FixLof == true)
                    //{
                    //    //rObj.QC_Result = "Fixed";
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = "TOC and LOF are created by REGai.";
                    //}
                    //else if (FixToc == false && FixLot == true && FixLof == true)
                    //{
                    //    //rObj.QC_Result = "Fixed";
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = "LOT and LOF are created by REGai.";
                    //}
                    //else if (FixToc == true && FixLot == false && FixLof == false)
                    //{
                    //    //rObj.QC_Result = "Fixed";
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = "TOC created by REGai.";
                    //}
                    //else if (FixToc == false && FixLot == false && FixLof == true)
                    //{
                    //    //rObj.QC_Result = "Fixed";
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = "LOF created by REGai.";
                    //}
                    //else if (FixToc == false && FixLot == true && FixLof == false)
                    //{
                    //    //rObj.QC_Result = "Fixed";
                    //    rObj.Is_Fixed = 1;
                    //    rObj.Comments = "LOT created by REGai.";
                    //}
                    if (CheckStyles != null && CheckStyles != "")
                            {
                                CheckStyles = CheckStyles.Substring(0, CheckStyles.Length - 1);
                                rObj.Comments = rObj.Comments + "," + CheckStyles + " styles not exist in the document.";
                                rObj.Comments = rObj.Comments.Replace("Given styles applied for existing toc,", "");
                            }
                            if (PredictFlag)
                            {
                                //rObj.QC_Result = "Fixed";
                                rObj.Is_Fixed = 1;
                                if (!rObj.Comments.Contains("Given styles applied for existing toc") || (FinalComment != null && FinalComment != ""))
                                    rObj.Comments = FinalComment + "These are fixed," + rObj.Comments;
                                rObj.Comments = rObj.Comments.Replace("Given styles applied for existing toc,", "");
                            }
                            if (rObj.Is_Fixed != 1 && (CheckFix || rObj.Comments.Trim() == "TOC and LOT are present" || rObj.Comments == "TOC and LOF are present" || rObj.Comments == "TOC present" || rObj.Comments == "This Check is passed"))
                            {
                                rObj.QC_Result = "Passed";
                            }
                    if (subcheckfixed && rObj.Is_Fixed != 1)
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = rObj.Comments + ", some of below sub checks are failed.";

                    }

                }
                doc.UpdateFields();
                //doc.Save(rObj.DestFilePath);
                rObj.CHECK_END_TIME = DateTime.Now;
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        private Run SplitRun(Run currentNode, int v)
        {
            throw new NotImplementedException();
        }
      


        /// <summary>
        /// Checking for Consistency Styles
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void ParagraphConsistencystyleCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            string Pagenumber = string.Empty;
            string difstylesdata = string.Empty;
            List<int> lst = new List<int>();
            List<string> difstyles = new List<string>();
            List<int> lstfx = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                WordParagraphActions WObj = new WordParagraphActions();
                List<string> WordStyleslst = WObj.GetWordStyles(rObj.Created_ID);
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Section sct in doc.Sections)
                {
                    foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                    {
                        Style sty = para.ParagraphFormat.Style;
                        if (!WordStyleslst.Contains(sty.Name))
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                            difstyles.Add(sty.Name);
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "All paragraphs styles in document are in consistency";
                }
                else
                {
                    List<int> lst1 = lst.Distinct().ToList();
                    lst1.Sort();
                    List<string> diffstyleslist = difstyles.Distinct().ToList();
                    if (lst1.Count > 0 && diffstyleslist.Count > 0)
                    {
                        Pagenumber = string.Join(", ", lst1.ToArray());
                        difstylesdata = string.Join(", ", diffstyleslist.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Inconsistency styles " + difstylesdata + " exist in : " + Pagenumber;
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Inconsistency styles exist";
                         
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }
        /// <summary>
        /// Checking for Symbol Styles Fonts
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckSymbolFontInDocument(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            string Pagenumber = string.Empty;
            string symbols = string.Empty;
            List<string> lst = new List<string>();
            List<string> difstyles = new List<string>();
            List<string> Symbolslst = new List<string>();
            List<int> pgnumlst = new List<int>();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                StyleCollection stylist = doc.Styles;
                stylist = doc.Styles;
                if (stylist.Where(x => x.Name.ToUpper() == "PARAGRAPH").Count() > 0 || stylist.Where(x => x.Name.ToUpper() == "TABLETEXT").Count() > 0)
                {
                    foreach (Section sct in doc.Sections)
                    {
                        foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                        {
                            foreach (Node nd in para.ChildNodes)
                            {
                                if (nd is Run)
                                {
                                    Run run = (Run)nd;
                                    if (run.Font.Name == "Symbol")
                                    {
                                        flag = true;
                                        if (layout.GetStartPageIndex(run) != 0)
                                        {
                                            lst.Add(layout.GetStartPageIndex(run).ToString() + " : " + run.Range.Text);
                                            pgnumlst.Add(layout.GetStartPageIndex(run));
                                            Symbolslst.Add(run.Range.Text);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                foreach (Section sct in doc.Sections)
                {
                    NodeCollection paras2 = sct.GetChildNodes(NodeType.Paragraph, true);
                    foreach (Paragraph para in paras2.OfType<Paragraph>().Where(p => p.ListFormat.IsListItem))
                    {
                        List<int> listobj = new List<int>();
                        if (layout.GetStartPageIndex(para) != 0)
                            listobj.Add(layout.GetStartPageIndex(para));
                        if (para.ListLabel != null && para.ListLabel.LabelString != "")
                        {
                            if (para.ListLabel.Font.Name == "Symbol")
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(para) != 0)
                                {
                                    lst.Add(layout.GetStartPageIndex(para).ToString() + " : " + para.ListLabel.LabelString);
                                    pgnumlst.Add(layout.GetStartPageIndex(para));
                                    Symbolslst.Add(para.ListLabel.LabelString);
                                }
                            }
                        }
                    }
                }
                if (flag)
                {
                    if (lst.Count > 0)
                    {
                        rObj.QC_Result = "Failed";
                        List<int> lstpgnum = pgnumlst.Distinct().ToList();
                        lstpgnum.Sort();
                        string pgcomments = string.Empty;
                        string comments = string.Empty;                                             

                        // added for page number report
                        List<PageNumberReport> pglst = new List<PageNumberReport>();
                        for (int i = 0; i < lstpgnum.Count; i++)
                        {
                            pgcomments = string.Empty;
                            PageNumberReport pgObj = new PageNumberReport();
                            pgObj.PageNumber = Convert.ToInt32(lstpgnum[i]);

                            var lst1 = (from c in lst.AsEnumerable() where c.Split(':')[0].ToString().Trim() == lstpgnum[i].ToString() select c).ToList();
                            for (int j = 0; j < lst1.Count; j++)
                            {
                                pgcomments = pgcomments + "<span style='font-family:symbol'>" + lst1[j].Split(':')[1].ToString() + "</span>, ";
                            }

                            comments = comments + lstpgnum[i] + ": " + pgcomments.Trim().TrimEnd(',') + ", ";
                            if (rObj.Job_Type == "QC")
                                pgObj.Comments = "The following symbols exist in document " + pgcomments.TrimEnd(' ').TrimEnd(',');
                            else
                                pgObj.Comments = "The following symbols exist in the updated document " + pgcomments.TrimEnd(' ').TrimEnd(',');
                            pglst.Add(pgObj);
                        }
                        if (rObj.Job_Type == "QC")
                            rObj.Comments = "The following symbols exist in document in : " + comments.Trim().TrimEnd(',');
                        else
                            rObj.Comments = "The following symbols exist in the updated document in : " + comments.Trim().TrimEnd(',');
                        rObj.CommentsPageNumLst = pglst;
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        if (rObj.Job_Type == "QC")
                            rObj.Comments = "symbol font exist";
                        else
                            rObj.Comments = "In updated document symbol font exist";
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //if (rObj.Job_Type == "QC")
                        //rObj.Comments = "No symbol font exist in document";
                    //else
                        //rObj.Comments = "No symbol font exist in the updated document";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }

        /// <summary>
        /// Checking for Symbol
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void CheckReplacingMappingSymbols(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;

            try
            {
                List<int> pgnumlst = new List<int>();
                List<int> lst = new List<int>();
                List<string> lstsp = new List<string>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<RegOpsQC> SymbolsList = GetMappedSymbols(rObj.Created_ID);
                rObj.CHECK_START_TIME = DateTime.Now;
                foreach (Section section in doc.Sections)
                {
                    foreach (Paragraph pr in section.GetChildNodes(NodeType.Paragraph, true))
                    {
                        string text = pr.ToString(SaveFormat.Text).Trim();
                        if (SymbolsList != null)
                        {
                            for (int i = 0; i < SymbolsList.Count; i++)
                            {                               
                                foreach (Run rn in pr.GetChildNodes(NodeType.Run, true))
                                {
                                    if (rn.Range.Text == SymbolsList[i].Library_Value && rn.Font.Name.ToUpper() == "SYMBOL")
                                    {
                                        flag = true;
                                        if (layout.GetStartPageIndex(pr) != 0)
                                        {
                                            lstsp.Add(layout.GetStartPageIndex(pr).ToString() + " : " + rn.Range.Text);
                                            pgnumlst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Special characters does not exist";
                }
                else
                {
                    List<string> lst1 = lstsp.Distinct().ToList();                  
                    if (lst1.Count > 0)
                    {
                        rObj.QC_Result = "Failed";

                        // added for page number report
                        List<int> lstpgnum = pgnumlst.Distinct().ToList();
                        lstpgnum.Sort();
                        string pgcomments = string.Empty;
                        string comments = string.Empty;
                        List<PageNumberReport> pglst = new List<PageNumberReport>();
                        for (int i = 0; i < lstpgnum.Count; i++)
                        {
                            pgcomments = string.Empty;
                            PageNumberReport pgObj = new PageNumberReport();
                            pgObj.PageNumber = Convert.ToInt32(lstpgnum[i]);
                            var filterlst = (from c in lst1.AsEnumerable() where c.Split(':')[0].Trim() == lstpgnum[i].ToString() select c).ToList();
                            for (int j = 0; j < filterlst.Count; j++)
                            {
                                pgcomments = pgcomments + "<span style='font-family:symbol'>" + filterlst[j].Split(':')[1].ToString() + "</span>, ";
                            }

                            //for (int j = 0; j < lst1.Count; j++)
                            //{
                            //    string[] strarr = lst1[j].Split(new string[] { ":" }, StringSplitOptions.None);
                            //    if (strarr[0].Trim().Equals(lstpgnum[i].ToString()))
                            //    {
                            //        pgcomments = pgcomments + "<span style='font-family:symbol'>" + strarr[1] +  "</span>, ";
                            //    }                                
                            //}
                            comments = comments + lstpgnum[i] + " : " + pgcomments.Trim().TrimEnd(',') + ", ";
                            pgObj.Comments = "Special characters " + pgcomments.Trim().TrimEnd(',') + " exist";
                            pglst.Add(pgObj);
                        }
                        rObj.Comments = "Special characters exist in : " + comments.Trim().TrimEnd(',');
                        rObj.CommentsPageNumLst = pglst;
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Special characters exist";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;

            }
        }
        /// <summary>
        /// Use Symbol - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixReplacingMappingSymbols(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                FindReplaceOptions options = new FindReplaceOptions(FindReplaceDirection.Forward);
                List<RegOpsQC> SymbolsList = GetMappedSymbols(rObj.Created_ID);
                foreach (Section section in doc.Sections)
                {
                    foreach (Paragraph pr in section.GetChildNodes(NodeType.Paragraph, true))
                    {
                        string text = pr.ToString(SaveFormat.Text).Trim();
                        if (SymbolsList != null)
                        {
                            for (int i = 0; i < SymbolsList.Count; i++)
                            {

                                foreach (Run rn in pr.GetChildNodes(NodeType.Run, true))
                                {
                                    if (rn.Range.Text == SymbolsList[i].Library_Value && rn.Font.Name.ToUpper() == "SYMBOL")
                                    {
                                        FixFlag = true;
                                        //  rn.Text = rn.Text.Replace(SymbolsList[i].Library_Value, SymbolsList[i].Library_Key);
                                        rn.Range.Replace(SymbolsList[i].Library_Value, SymbolsList[i].Library_Key);
                                        if (rObj.Check_Parameter != "")
                                            rn.Font.Name = rObj.Check_Parameter;
                                        //if (rn.Font.Superscript)
                                        //{
                                        //    FindReplaceOptions opt = new FindReplaceOptions();
                                        //    opt.ReplacingCallback = new SymolFontCallback();
                                        //    rn.Range.Replace(SymbolsList[i].Library_Value, SymbolsList[i].Library_Key, opt);
                                        //    rn.Font.Superscript = true;
                                        //    FixFlag = true;
                                        //}
                                        //else if (rn.Font.Subscript)
                                        //{
                                        //    FindReplaceOptions opt = new FindReplaceOptions();
                                        //    opt.ReplacingCallback = new SymolFontCallback();
                                        //    rn.Range.Replace(SymbolsList[i].Library_Value, SymbolsList[i].Library_Key, opt);
                                        //    rn.Font.Subscript = true;
                                        //    FixFlag = true;
                                        //}
                                        //else
                                        //{
                                        //    FindReplaceOptions opt = new FindReplaceOptions();
                                        //    opt.ReplacingCallback = new SymolFontCallback();
                                        //    rn.Range.Replace(SymbolsList[i].Library_Value, SymbolsList[i].Library_Key, opt);
                                        //    FixFlag = true;
                                        //}
                                    }
                                }
                            }
                        }
                        //for (int i = 0; i < SymbolsList.Count; i++)
                        //{
                        //    FindReplaceOptions opt = new FindReplaceOptions();
                        //    opt.ReplacingCallback = new SymolFontCallback();
                        //    int a = doc.Range.Replace(SymbolsList[i].Library_Value, SymbolsList[i].Library_Key, opt);
                        //    //int j = doc.Range.Replace(SymbolsList[i].Library_Key, SymbolsList[i].Library_Key);
                        //    FixFlag = true;
                        //}
                    }
                }
                if (FixFlag == true)
                {
                    // rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    if (rObj.CommentsPageNumLst != null)
                    {
                        foreach (var pg in rObj.CommentsPageNumLst)
                        {
                            pg.Comments = pg.Comments + ". Fixed";
                        }
                    }
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Special characters does not exist";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void TableFigureTitleTabkey(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Field f in doc.Range.Fields)
                {
                    if (f.Type == FieldType.FieldSequence)
                    {
                        FieldSeq seq = (FieldSeq)f;
                        if (seq.SequenceIdentifier == "Table" || seq.SequenceIdentifier == "Figure" || seq.SequenceIdentifier == "Summary_Figure" || seq.SequenceIdentifier == "Summary_Table" || seq.SequenceIdentifier == "Text_Figure" || seq.SequenceIdentifier == "Text_Table")
                        {
                            if (seq.Start.ParentParagraph.Range.Text.Contains(".\t"))
                            {
                                lst.Add(layout.GetStartPageIndex(seq.Start));
                                flag = true;

                            }
                            else if (seq.Start.ParentParagraph.Range.Text.Contains(":\t"))
                            {
                                lst.Add(layout.GetStartPageIndex(seq.Start));
                                flag = true;
                            }
                            else if (seq.Start.ParentParagraph.Range.Text.Contains(":"))
                            {
                                lst.Add(layout.GetStartPageIndex(seq.Start));
                                flag = true;
                            }
                            else if (!seq.Start.ParentParagraph.Range.Text.Contains("\t"))
                            {
                                lst.Add(layout.GetStartPageIndex(seq.Start));
                                flag = true;
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Table and Figure titles following a tab key";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Table and Figure titles not following a tab key in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Table and Figure titles not following a tab key";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixTableFigureTitleTabkey(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Field f in doc.Range.Fields)
                {
                    if (f.Type == FieldType.FieldSequence)
                    {
                        FieldSeq seq = (FieldSeq)f;
                        if (seq.SequenceIdentifier == "Table" || seq.SequenceIdentifier == "Figure" || seq.SequenceIdentifier == "Text_Figure" || seq.SequenceIdentifier == "Summary_Figure" || seq.SequenceIdentifier == "Summary_Table" || seq.SequenceIdentifier == "Text_Table")
                        {
                            if (seq.Start.ParentParagraph.Range.Text.Contains(".\t"))
                            {
                                seq.Start.ParentParagraph.Range.Replace(".\t", "\t");
                                flag = true;

                            }
                            else if (seq.Start.ParentParagraph.Range.Text.Contains(":\t"))
                            {
                                seq.Start.ParentParagraph.Range.Replace(":\t", "\t");
                                flag = true;
                            }
                            else if (seq.Start.ParentParagraph.Range.Text.Contains(":"))
                            {
                                seq.Start.ParentParagraph.Range.Replace(":", "\t");
                                flag = true;
                            }
                            else if (!seq.Start.ParentParagraph.Range.Text.Contains("\t"))
                            {
                                seq.End.ParentNode.InsertAfter(new Run(doc, "\t"), seq.End);
                                flag = true;
                            }
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Table and Figure titles following a tab key";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    //rObj.CommentsWOPageNum = "Table and Figure titles not following a tab key";
                    //rObj.PageNumbersLst = lst2;

                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        private class SymolFontCallback : IReplacingCallback
        {
            public ReplaceAction Replacing(ReplacingArgs args)
            {
                Run matchRun = args.MatchNode as Run;
                if (matchRun != null && matchRun.Font.Name == "Symbol")
                    matchRun.Font.ClearFormatting();
              
                return ReplaceAction.Replace;
            }
        }

        public List<RegOpsQC> GetMappedSymbols(Int64 Created_ID)
        {
            List<RegOpsQC> SymbolsList = new List<RegOpsQC>();
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = getConnectionInfo(Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("Select LIBRARY_VALUE,LIBRARY_KEY from LIBRARY where LIBRARY_NAME = 'QC_Symbol_Font_Mappings'", CommandType.Text, ConnectionState.Open);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        RegOpsQC Obj = new RegOpsQC();
                        Obj.Library_Value = ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString();
                        Obj.Library_Key = ds.Tables[0].Rows[i]["LIBRARY_KEY"].ToString();
                        SymbolsList.Add(Obj);
                    }
                }
                return SymbolsList;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return SymbolsList;
            }
        }

        /// <summary>
        /// Level Heading Starting at new page - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Level1Heading(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Paragraph> prsLst = new List<Paragraph>();

                List<string> TOCLst = new List<string>();
                foreach (Section sect in doc.Sections)
                {
                    //For excluding TOC
                    foreach (FieldStart start in sect.Body.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                                prsLst.Add(pr1);
                        }
                        else if (start.ParentNode != null && (start.ParentNode.PreviousSibling != null && start.ParentNode.PreviousSibling.NodeType == NodeType.Paragraph))
                        {
                            Paragraph pr1 = (Paragraph)start.ParentNode.PreviousSibling;
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                                prsLst.Add(pr1);
                        }
                    }
                }
                //NodeCollection paragraphs = doc.GetChildNodes(NodeType.Paragraph, true);
                foreach (Section st in doc.Sections)
                {
                    NodeCollection paragraphs = st.Body.GetChildNodes(NodeType.Paragraph, true);

                    foreach (Paragraph pr in paragraphs)
                    {
                        if (pr.IsInCell != true && (pr.ParentNode != null && pr.ParentNode.NodeType != NodeType.Shape && pr.GetChildNodes(NodeType.Shape, true).Count == 0) && (pr.GetChildNodes(NodeType.OfficeMath, true).Count == 0 && pr.NodeType != NodeType.HeaderFooter))
                        {

                            if (!pr.ParagraphFormat.StyleName.ToUpper().Contains("TABLE OF CONTENTS") && !pr.ParagraphFormat.StyleName.ToUpper().Contains("LIST OF TABLES") && !pr.ParagraphFormat.StyleName.ToUpper().Contains("LIST OF FIGURES") && !prsLst.Contains(pr) && (!pr.Range.Text.Contains(" HYPERLINK \\l ") && !pr.Range.Text.Contains(" PAGEREF _Toc")))

                            {

                                if (pr.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1)
                                {
                                    if (pr.ParagraphFormat.PageBreakBefore == false)
                                    {
                                        flag = true;
                                        if (pr.LastChild != null)
                                        {
                                            if (layout.GetStartPageIndex(pr.LastChild) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr.LastChild));
                                        }
                                        else
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }

                                    }

                                }
                            }
                                }

                       
                        }
                    }

                    if (flag == false)
                    {
                        rObj.QC_Result = "Passed";
                        //rObj.Comments = "All level1 headings are set to start at new page.";
                    }
                    else
                    {
                        List<int> lst2 = lst.Distinct().ToList();
                        if (lst2.Count > 0)
                        {
                            lst2.Sort();
                            Pagenumber = string.Join(", ", lst2.ToArray());
                            rObj.QC_Result = "Failed";
                            rObj.Comments = "Level1 headings which are not set to start at new page are in" + Pagenumber;
                            rObj.CommentsWOPageNum = "Level1 headings are not starting at new page";
                            rObj.PageNumbersLst = lst2;
                        }
                    }

                }
            
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }


        /// <summary>
        /// Level heading starting at new page-fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixLevel1Heading(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;          
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);

                bool FixFlag = false;
                DocumentBuilder builder = new DocumentBuilder(doc);

                List<Paragraph> prsLst = new List<Paragraph>();
                List<string> TOCLst = new List<string>();
                foreach (Section sect in doc.Sections)
                {
                    //For excluding TOC
                    foreach (FieldStart start in sect.Body.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                    {
                        if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                        {
                            Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                                prsLst.Add(pr1);
                        }
                        else if (start.ParentNode != null && (start.ParentNode.PreviousSibling != null && start.ParentNode.PreviousSibling.NodeType == NodeType.Paragraph))
                        {
                            Paragraph pr1 = (Paragraph)start.ParentNode.PreviousSibling;
                            if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES")))
                                prsLst.Add(pr1);
                        }
                    }
                }
                foreach (Section st in doc.Sections)
                {
                    NodeCollection paragraphs = st.Body.GetChildNodes(NodeType.Paragraph, true);
                    foreach (Paragraph pr in paragraphs)
                    {
                        if (pr.IsInCell != true && (pr.ParentNode != null && pr.ParentNode.NodeType != NodeType.Shape && pr.GetChildNodes(NodeType.Shape, true).Count == 0) && (pr.GetChildNodes(NodeType.OfficeMath, true).Count == 0 && pr.NodeType != NodeType.HeaderFooter))
                        {

                            if (!pr.ParagraphFormat.StyleName.ToUpper().Contains("TABLE OF CONTENTS") && !pr.ParagraphFormat.StyleName.ToUpper().Contains("LIST OF TABLES") && !pr.ParagraphFormat.StyleName.ToUpper().Contains("LIST OF FIGURES") && !prsLst.Contains(pr) && (!pr.Range.Text.Contains(" HYPERLINK \\l ") && !pr.Range.Text.Contains(" PAGEREF _Toc")))

                            {
                                if (pr.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1)
                                {

                                    if (pr.ParagraphFormat.PageBreakBefore == false)
                                    {
                                        FixFlag = true;

                                        pr.ParagraphFormat.PageBreakBefore = true;
                                    }
                                }

                            }
                        }
                    }
                }

                    if (FixFlag == true)
                    {
                        //rObj.QC_Result = "Fixed";
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". Fixed";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                    }
                    else
                    {
                        rObj.Is_Fixed = 1;
                        rObj.Comments = rObj.Comments + ". This may be fixed to \"" + rObj.Check_Parameter + "\" due to other checks";
                        rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". This may be fixed to \"" + rObj.Check_Parameter + "\" due to other checks";
                    }

                    doc.UpdateFields();
                    //doc.Save(rObj.DestFilePath);
                    rObj.FIX_END_TIME = DateTime.Now;

                
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// Single Space after period-check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Spaceafterperiod(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                //doc.TrackRevisions = true;
                //doc.StartTrackRevisions("");

                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
               NodeCollection paragraphs = doc.GetChildNodes(NodeType.Paragraph, true);
                foreach (Paragraph pr in paragraphs)
                {
                    //Regex regstart = new Regex(("([a-zA-Z\\(\\)]+\\.)([a-zA-Z\\(\\)]+)"));
                    //Regex regstart = new Regex(("([a-zA-Z\\(\\)]+\\.)([a-zA-Z]+)"));
                    Regex regstart = new Regex("([a-zA-Z\\(\\)]+\\.)([a-zA-Z])");

                    if (regstart.IsMatch(pr.Range.Text))
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));
                    }

                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Contains space after period.";
                }


                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        lst2.Sort();
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "No space after period in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "No single space after period";
                        rObj.PageNumbersLst = lst2;



                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        /// <summary>
        /// Single space after period-fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>

        public void FixSingleSpaceafterPeriod(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                List<int> lst = new List<int>();
                //doc = new Document(rObj.DestFilePath);
                //LayoutCollector layout = new LayoutCollector(doc);
               
                FindReplaceOptions opt = new FindReplaceOptions();
                opt.UseSubstitutions = true;
                //Regex regex = new Regex("([a-zA-Z]+\\.+|…)([a-zA-Z]+)");

                // Get list of paragraphs in the document.

                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    //Regex regstart = new Regex(("([a-zA-Z\\(\\)]+\\.)([a-zA-Z\\(\\)]+)"));
                    //Regex regstart = new Regex(("([a-zA-Z\\(\\)]+\\.)([a-zA-Z]+)"));
                    Regex regstart = new Regex("([a-zA-Z\\(\\)]+\\.)([a-zA-Z])");

                    if (regstart.IsMatch(pr.Range.Text))
                    {
                        
                        // Add whitespace after period.
                        FixFlag = true;

                        pr.Range.Replace(regstart, "$1 $2", opt);
                        
                    }
                }

                if (FixFlag == true)
                {

                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed ";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                //doc.StopTrackRevisions();


                //doc.AcceptAllRevisions();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// No space between number and degrees
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        //public void Nospacebetweennumberanddegrees(RegOpsQC rObj, Document doc)
        //{
        //    rObj.QC_Result = string.Empty;
        //    rObj.Comments = string.Empty;
        //    rObj.CHECK_START_TIME = DateTime.Now;
        //    List<int> lst = new List<int>();
        //    LayoutCollector layout = new LayoutCollector(doc);
        //    string Pagenumber = string.Empty;
        //    try
        //    {
        //        foreach (Section sec in doc.Sections)
        //        {
        //            foreach (Paragraph pr in sec.GetChildNodes(NodeType.Paragraph, true))

        //            {
        //                Regex regstart = new Regex(@"(\d\" + ControlChar.SpaceChar + "°C)");
        //                if (regstart.IsMatch(pr.Range.Text))
        //                {
        //                    if (layout.GetStartPageIndex(pr) != 0)
        //                        lst.Add(layout.GetStartPageIndex(pr));
        //                }
        //            }
        //        }
        //        List<int> lst2 = lst.Distinct().ToList();
        //        if (lst2.Count > 0)
        //        {
        //            lst2.Sort();
        //            Pagenumber = string.Join(", ", lst2.ToArray());
        //            rObj.QC_Result = "Failed";
        //            rObj.Comments = " Space between Number and degrees in pagenumbers: " + Pagenumber;
        //            rObj.CommentsWOPageNum = " Space between Number and degrees";
        //            rObj.PageNumbersLst = lst2;
        //        }
        //        else
        //        {
        //            rObj.QC_Result = "Passed";
        //            rObj.Comments = " No space betweenw Number and degrees";
        //        }
        //        rObj.CHECK_END_TIME = DateTime.Now;
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
        //        rObj.Job_Status = "Error";
        //        rObj.QC_Result = "Error";
        //        rObj.Comments = "Technical error: " + ex.Message;
        //    }
        //}

        ///// <summary>
        /////FIX No space between number and degrees
        ///// </summary>
        ///// <param name="rObj"></param>
        ///// <param name="doc"></param>
        //public void FIxNospacebetweennumberanddegrees(RegOpsQC rObj, Document doc)
        //{
        //    //rObj.QC_Result = string.Empty;
        //    //rObj.Comments = string.Empty;
        //    bool flag = false;
        //    rObj.FIX_START_TIME = DateTime.Now;
        //    try
        //    {
        //        foreach (Section sec in doc.Sections)
        //        {
        //            foreach (Paragraph pr in sec.GetChildNodes(NodeType.Paragraph, true))
        //            {
        //                Regex regstart = new Regex(@"(\d\" + ControlChar.SpaceChar + "°C)");
        //                if (regstart.IsMatch(pr.Range.Text))
        //                {

        //                    // run contains number space  and keywords                                                                               
        //                    MatchCollection mcs1 = regstart.Matches(pr.Range.Text);
        //                    if (mcs1.Count > 0)
        //                    {
        //                        foreach (Match mc in mcs1)
        //                        {
        //                            string tt = mc.Value.Replace(" ", string.Empty);
        //                            //tt.Replace(" ", string.Empty);
        //                            pr.Range.Replace(mc.Value, tt);
        //                            flag = true;
        //                        }
        //                    }

        //                }
        //            }
        //        }
        //        if (flag == true)
        //        {
        //            //rObj.QC_Result = " Fixed";
        //            rObj.Is_Fixed = 1;
        //            rObj.Comments = rObj.Comments + " These are fixed";
        //        }
        //       // doc.Save(rObj.DestFilePath);
        //        rObj.FIX_END_TIME = DateTime.Now;
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
        //        rObj.Job_Status = "Error";
        //        rObj.QC_Result = "Error";
        //        rObj.Comments = "Technical error: " + ex.Message;
        //    }
        //}

        /// <summary>
        /// No space between number and percentage
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void Nospacebetweennumberandpercentage(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            string Pagenumber = string.Empty;
            List<string> keywords = GetHardSpaceKeyWordsListData(rObj.Created_ID);
            try
            {
               
                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                    {
                        foreach (string keyword in keywords)
                        {
                            Regex regstart = new Regex(@"(\d\" + ControlChar.SpaceChar + keyword +")");
                            if (regstart.IsMatch(pr.Range.Text))
                            {
                                if (layout.GetStartPageIndex(pr) != 0)
                                    lst.Add(layout.GetStartPageIndex(pr));
                            }
                        }
                    }
                
                List<int> lst2 = lst.Distinct().ToList();
                if (lst2.Count > 0)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Space found between Number and units exists in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Space found between Number and units";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No space between Number and units";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///FIX No space between number and percentage
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FIxNospacebetweennumberandpercentage(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            //rObj.Comments = string.Empty;
            bool flag = false;
            List<string> keywords = GetHardSpaceKeyWordsListData(rObj.Created_ID);
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
               
                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                    {
                        foreach (string keyword in keywords)
                        {
                            Regex regstart = new Regex(@"(\d\" + ControlChar.SpaceChar + keyword + ")");
                            if (regstart.IsMatch(pr.Range.Text))
                            {

                                // run contains number space  and keywords                                                                               
                                MatchCollection mcs1 = regstart.Matches(pr.Range.Text);
                                if (mcs1.Count > 0)
                                {
                                    foreach (Match mc in mcs1)
                                    {
                                        string tt = mc.Value.Replace(" ", string.Empty);
                                        //tt.Replace(" ", string.Empty);
                                        pr.Range.Replace(mc.Value, tt);
                                        flag = true;
                                    }
                                }
                            }

                        }
                    }
                
                if (flag == true)
                {
                    //rObj.QC_Result = " Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// File Should not embedded with in a file
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FileshouldnotEmbeddedwithinFile(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            bool flag = false;
            try
            {
                NodeCollection shapes = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Shape shape in shapes)
                {
                    if (shape.OleFormat != null)
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "File embedded with in a file";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No File embedded with in a file";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Fix File Should not embedded with in a file
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixFileshouldnotEmbeddedwithinFile(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            bool flag = false;
            //doc = new Document(rObj.DestFilePath);
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                NodeCollection shapes = doc.GetChildNodes(NodeType.Shape, true);
                foreach (Shape shape in shapes)
                {
                    if (shape.OleFormat != null)
                    {
                        shape.Remove();
                        flag = true;
                    }
                }
                if (flag)
                {
                    //rObj.QC_Result = "Failed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "No File embedded with in a file";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Consistent use of space before colon-check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void SingleSpacebeforeColon(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    if (pr.ToString(SaveFormat.Text).Trim().Contains(" :"))
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Contains no space before colon.";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        lst2.Sort();
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "There is space before colon in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "There is space before colon";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        /// <summary>
        /// Space before colon-Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixSingleSpacebeforeColon(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                List<int> lst = new List<int>();
               // doc = new Document(rObj.DestFilePath);
                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    if (pr.ToString(SaveFormat.Text).Trim().Contains(" :"))
                    {
                        FixFlag = true;
                        pr.Range.Replace(" :", ":", new FindReplaceOptions(FindReplaceDirection.Forward));
                    }
                }

                if (FixFlag == true)
                {
                    // rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                doc.AcceptAllRevisions();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // Capitalize the first letter of each bulleted or numbered item check
        public void CapitalizefirstwordCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();
                foreach (Paragraph para in listItems)
                {
                    if (para.IsListItem)
                    {
                        string pr = para.Range.Text.Trim();
                        if (pr != "" && pr != null)
                        {
                            if (pr.Substring(0, 1) != pr.Substring(0, 1).ToUpper())
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(para) != 0)
                                    lst.Add(layout.GetStartPageIndex(para));
                            }
                        }

                    }
                }

                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "First letter of bulleted or numbered items are capital case";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "First letter of bulleted or numbered items are not capital case in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "First letter of bulleted or numbered items are not capital case";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // Capitalize the first word of each bulleted or numbered item fix.
        public void CapitalizefirstwordFix(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                //doc = new Document(rObj.DestFilePath);
                FindReplaceOptions opt = new FindReplaceOptions();
                opt.ReplacingCallback = new ToUpperCaseCallback();
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();
                foreach (Paragraph para in listItems)
                {
                    if (para.IsListItem)
                    {
                        string pr = para.Range.Text.Trim();
                        if (pr != "" && pr != null)
                        {
                            para.Range.Replace(new Regex("^([a-zA-Z])"), "", opt);
                            //Run lastRun = para.Runs[para.Runs.Count - 1];
                            //if (!lastRun.Text.TrimEnd().EndsWith("."))
                            //    lastRun.Text = lastRun.Text.TrimEnd() + ".";
                            FixFlag = true;
                        }
                    }
                }
                if (FixFlag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
               // doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //  each bulleted or numbered item end each item with a period check
        public void EndWithPeriodCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem && (p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "ARABIC" || p.ListFormat.ListLevel.NumberStyle.ToString().ToUpper() == "BULLET") && !p.ParagraphFormat.IsHeading).ToList();
                foreach (Paragraph para in listItems)
                {
                    if (para.IsListItem)
                    {
                        int i = 0;
                        string pr = para.Range.Text.Trim();
                        if (pr != "" && pr != null)
                        {
                            if (!pr.EndsWith("."))
                                i++;
                            if (i > 0)
                            {
                                flag = true;
                                if (layout.GetStartPageIndex(para) != 0)
                                    lst.Add(layout.GetStartPageIndex(para));
                            }
                        }
                    }
                }


                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Bulleted or numbered items ends with a period";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Bulleted or numbered items not ends with a period in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Bulleted or numbered items not ends with a period";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public class ToUpperCaseCallback : IReplacingCallback
        {
            public ReplaceAction Replacing(ReplacingArgs args)
            {
                args.Replacement = args.Match.Value.ToUpper();
                return ReplaceAction.Replace;
            }
        }
        //table reference check
        public void tableReference(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;            
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                bool isFailed = false;
                bool isFieldsexist = false;
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Field> fldseq = new List<Field>();
                List<Field> fldref = new List<Field>();
                foreach(Field flds in doc.Range.Fields)
                {
                    if(flds.Type == FieldType.FieldRef)
                    {
                        fldref.Add(flds);
                    }
                    if(flds.Type == FieldType.FieldSequence)
                    {
                        fldseq.Add(flds);
                    }
                       
                }
                foreach(FieldSeq fld in fldseq)
                {                   
                    if (fld.SequenceIdentifier == "Table" || fld.SequenceIdentifier == "Summary_Table" || fld.SequenceIdentifier == "Text_Table")
                    {
                        isFieldsexist = true;
                        NodeCollection nc = fld.End.ParentParagraph.GetChildNodes(NodeType.BookmarkEnd, true);
                        if (nc.Count() > 0)
                        {
                            bool referenceexist = false;
                            foreach (BookmarkEnd be in nc)
                            {
                                string refname = be.Name;
                                if (fldref.Count > 0)
                                {
                                    foreach (FieldRef fldr in fldref)
                                    {
                                        if (fldr.BookmarkName == refname)
                                        {
                                            referenceexist = true;
                                            break;
                                        }
                                    }
                                    if (referenceexist)
                                        break;
                                }
                                else
                                {
                                    isFailed = true;
                                    if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                        lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                                }
                            }
                            if (!referenceexist)
                            {
                                isFailed = true;
                                if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                    lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                            }
                        }
                        else
                        {
                            isFailed = true;
                            if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                        }                                              
                    }
                }
                if (!isFieldsexist)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no table sequences found in document";
                }
                else if (isFailed == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Each table in document is referred in some place of document";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Tables in " + Pagenumber + " are not referred in document";
                        rObj.CommentsWOPageNum = "Tables are not referred in document";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //Figure reference check
        public void figureReference(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                bool isFieldsexist = false;
                bool isFailed = false;
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Field> fldseq = new List<Field>();
                List<Field> fldref = new List<Field>();
                foreach (Field flds in doc.Range.Fields)
                {
                    if (flds.Type == FieldType.FieldRef)
                    {
                        fldref.Add(flds);
                    }
                    if (flds.Type == FieldType.FieldSequence)
                    {
                        fldseq.Add(flds);
                    }

                }
                foreach (FieldSeq fld in fldseq)
                {
                    isFieldsexist = true;
                    if (fld.SequenceIdentifier == "Figure" || fld.SequenceIdentifier == "Summary_Figure" || fld.SequenceIdentifier == "Text_Figure")
                    {
                        
                        NodeCollection nc = fld.End.ParentParagraph.GetChildNodes(NodeType.BookmarkEnd, true);
                        if (nc.Count() > 0)
                        {
                            
                            bool referenceexist = false;
                            foreach (BookmarkEnd be in nc)
                            {
                                string refname = be.Name;
                                if (fldref.Count > 0)
                                {
                                    foreach (FieldRef fldr in fldref)
                                    {
                                        if (fldr.BookmarkName == refname)
                                        {
                                            referenceexist = true;
                                            break;
                                        }
                                    }
                                    if (referenceexist)
                                        break;
                                }
                                else
                                {

                                    isFailed = true;
                                    if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                        lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                                }
                            }
                            if (!referenceexist)
                            {
                                isFailed = true;
                                if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                    lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                            }
                        }
                        else
                        {
                            isFailed = true;
                            if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                        }
                    }
                }
                if (!isFieldsexist)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no figure sequences found in document";
                }
                else if (isFailed == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Each figure in document is referred in some place of document";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Figures in " + Pagenumber + " are not referred in document";
                        rObj.CommentsWOPageNum = "Figures are not referred in document";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        //Appendix reference check
        public void appendixReference(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                bool isFieldsexist = false;
                bool isFailed = false;
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                List<Field> fldseq = new List<Field>();
                List<Field> fldref = new List<Field>();
                foreach (Field flds in doc.Range.Fields)
                {
                    if (flds.Type == FieldType.FieldRef)
                    {
                        fldref.Add(flds);
                    }
                    if (flds.Type == FieldType.FieldSequence)
                    {
                        fldseq.Add(flds);
                    }

                }
                foreach (FieldSeq fld in fldseq)
                {
                    if (fld.SequenceIdentifier == "Appendix" )
                    {
                        isFieldsexist = true;
                        NodeCollection nc = fld.End.ParentParagraph.GetChildNodes(NodeType.BookmarkEnd, true);
                        if(nc.Count() > 0)
                        {
                            bool referenceexist = false;
                            foreach (BookmarkEnd be in nc)
                            {
                                string refname = be.Name;
                                if (fldref.Count > 0)
                                {                                   
                                    foreach (FieldRef fldr in fldref)
                                    {
                                        if (fldr.BookmarkName == refname)
                                        {
                                            referenceexist = true;
                                            break;
                                        }
                                    }
                                    if (referenceexist)
                                        break;
                                }
                                else
                                {
                                    isFailed = true;
                                    if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                        lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                                }
                            }
                            if (!referenceexist)
                            {
                                isFailed = true;
                                if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                    lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                            }
                        }
                        else
                        {
                            isFailed = true;
                            if (layout.GetStartPageIndex(fld.End.ParentParagraph) != 0)
                                lst.Add(layout.GetStartPageIndex(fld.End.ParentParagraph));
                        }
                       
                    }
                }

                if (!isFieldsexist)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "There are no appedices sequences found in document";
                }
                else if (isFailed == false)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "Each appendices in document is referred in some place of document";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Appendices in " + Pagenumber + " are not referred in document";
                        rObj.CommentsWOPageNum = "Appendices are not referred in document";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        // Heading/Table title/Figure title should not end with a period check
        public void TitlesSholdNotEndWithPeriodCheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Paragraph para in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    if (para.ParagraphFormat.StyleName.ToString().ToUpper().StartsWith("HEADING "))
                    {
                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                        if (originaltext.EndsWith("."))
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                        }
                    }
                    else if (para.Range.Text.ToUpper().Contains("SEQ TABLE")|| para.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                    {
                        int i = 0;
                        string TextafterFieldEnd = "";
                        foreach (Node node in para.ChildNodes)
                        {
                            if (node.NodeType == NodeType.FieldEnd && i == 0)
                                i++;
                            if (node.NodeType == NodeType.Run && i > 0)
                                TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;
                        }
                        if (TextafterFieldEnd != "" && TextafterFieldEnd.Trim().EndsWith("."))
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                        }
                    }
                    else if (para.Range.Text.ToUpper().Contains("SEQ FIGURE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE"))
                    {
                        int i = 0;
                        string TextafterFieldEnd = "";
                        foreach (Node node in para.ChildNodes)
                        {
                            if (node.NodeType == NodeType.FieldEnd && i == 0)
                                i++;
                            if (node.NodeType == NodeType.Run && i > 0)
                                TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;
                        }
                        if (TextafterFieldEnd != "" && TextafterFieldEnd.Trim().EndsWith("."))
                        {
                            flag = true;
                            if (layout.GetStartPageIndex(para) != 0)
                                lst.Add(layout.GetStartPageIndex(para));
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Heading/Table title/Figure title not ends with a period";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Heading/Table title/Figure title ends with a period in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Heading/Table title/Figure title ends with a period";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///  Heading/Table title/Figure title should not ends with a period Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void TitlesSholdNotEndWithPeriodFix(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                List<int> lst = new List<int>();
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Paragraph para in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    if (para.ParagraphFormat.StyleName.ToString().ToUpper().StartsWith("HEADING "))
                    {
                        string originaltext = para.ToString(SaveFormat.Text).Trim();
                        if (originaltext.EndsWith("."))
                        {
                            if (para.Runs.Count() > 0)
                            {
                                Run run = para.Runs[para.Runs.Count() - 1];
                                if (run.Range.Text.EndsWith("."))
                                {
                                    run.Range.Replace(run.Range.Text, run.Range.Text.TrimEnd('.'));
                                    FixFlag = true;
                                }
                                

                            }
                            //para.Range.Replace(originaltext, originaltext.TrimEnd('.'));
                            //FixFlag = true;

                        }
                    }
                    else if (para.Range.Text.ToUpper().Contains("SEQ TABLE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_TABLE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_TABLE"))
                    {
                        int i = 0;
                        string TextafterFieldEnd = "";
                        foreach (Node node in para.ChildNodes)
                        {
                            if (node.NodeType == NodeType.FieldEnd && i == 0)
                                i++;
                            if (node.NodeType == NodeType.Run && i > 0)
                                TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;
                        }
                        if (TextafterFieldEnd != "" && TextafterFieldEnd.Trim().EndsWith("."))
                        {
                            FixFlag = true;
                            para.Range.Replace(TextafterFieldEnd, TextafterFieldEnd.Trim().TrimEnd('.'));
                        }
                    }
                    else if (para.Range.Text.ToUpper().Contains("SEQ FIGURE") || para.Range.Text.ToUpper().Contains("SEQ SUMMARY_FIGURE") || para.Range.Text.ToUpper().Contains("SEQ TEXT_FIGURE"))
                    {
                        int i = 0;
                        string TextafterFieldEnd = "";
                        foreach (Node node in para.ChildNodes)
                        {
                            if (node.NodeType == NodeType.FieldEnd && i == 0)
                                i++;
                            if (node.NodeType == NodeType.Run && i > 0)
                                TextafterFieldEnd = TextafterFieldEnd + ((Run)node).Range.Text;
                        }
                        if (TextafterFieldEnd != "" && TextafterFieldEnd.Trim().EndsWith("."))
                        {
                            FixFlag = true;
                            para.Range.Replace(TextafterFieldEnd, TextafterFieldEnd.Trim().TrimEnd('.'));
                        }
                    }
                }
                if (FixFlag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // single space after a colon
        public void SingleSpaceafterColon(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                List<int> lst = new List<int>();
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    Regex regstart = new Regex("([a-zA-Z]+\\:(\\s{2,}))");
                    Regex regstart1 = new Regex("([a-zA-Z]+\\:([a-zA-Z]))");
                    if (regstart1.IsMatch(pr.Range.Text))
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));
                    }
                    if (regstart.IsMatch(pr.Range.Text))
                    {
                        flag = true;
                        if (layout.GetStartPageIndex(pr) != 0)
                            lst.Add(layout.GetStartPageIndex(pr));
                    }

                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Contains only single space after colon.";
                }
                else
                {
                    List<int> lst2 = lst.Distinct().ToList();
                    if (lst2.Count > 0)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        lst2.Sort();
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "There is no single space after colon in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "There is no single space after colon";
                        rObj.PageNumbersLst = lst2;
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        ///  space after colon - fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void FixSingleSpaceafterColon(RegOpsQC rObj, Document doc)
        {
            //rObj.QC_Result = string.Empty;
            string Pagenumber = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool FixFlag = false;
            try
            {
                List<int> lst = new List<int>();
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                {
                    FindReplaceOptions options = new FindReplaceOptions();
                    options.UseSubstitutions = true;
                    Regex regstart = new Regex("([a-zA-Z]+\\:(\\s{2,}))");
                    //Regex regstart1 = new Regex("([a-zA-Z]+\\:([a-zA-Z]))" + "|([^0-9])+\\:([^0-9])");
                    Regex regstart1 = new Regex("([a-zA-Z]+\\:([a-zA-Z]))" + "|([0-9])+\\:([a-zA-Z])"+ "|([a-zA-Z])+\\:([0-9])");
                    //Regex regstart2 = new Regex("([a-zA-Z]+\\:(\t))" + "| [0-9]+\\:[0-9]");
                    //Regex regstart3 = new Regex("[0-9]+\\:[0-9]");

                    //if (regstart1.IsMatch(pr.Range.Text))
                    //{
                    //    FindReplaceOptions options = new FindReplaceOptions();
                    //    options.UseSubstitutions = true;
                    //    if (!regstart2.IsMatch(pr.Range.Text))
                    //    {
                    //        pr.Range.Replace(":",": ", options);
                    //        FixFlag = true;
                    //    }

                    //}
                    //if (regstart1.IsMatch(pr.Range.Text))
                    //{
                    //    FindReplaceOptions options = new FindReplaceOptions();
                    //    options.UseSubstitutions = true;                        
                    //        pr.Range.Replace(new Regex("([a-zA-Z]+\\:([a-zA-Z]))"), " $0", options);
                    //        FixFlag = true;                        
                    //}
                    //if (regstart1.IsMatch(pr.Range.Text))
                    //{
                    //    FindReplaceOptions options = new FindReplaceOptions();
                    //    options.UseSubstitutions = true;
                    //    if (!regstart2.IsMatch(pr.Range.Text))
                    //    {
                    //        pr.Range.Replace(new Regex("([a-zA-Z]+\\:([a-zA-Z]))"), ": ", options);
                    //        FixFlag = true;
                    //    }


                    //}

                    //if (regstart1.IsMatch(pr.Range.Text))
                    //{
                    //    FindReplaceOptions options = new FindReplaceOptions();
                    //    options.UseSubstitutions = true;                        
                    //        pr.Range.Replace(":", ": ", options);
                    //        FixFlag = true;                       

                    //}
                    MatchCollection mcs1 = (regstart1.Matches(pr.Range.Text));
                    foreach (Match mc in mcs1)
                    {
                        FixFlag = true;
                        string str = mc.Value.Replace(":", ": ");

                        pr.Range.Replace(mc.Value, str, options);
                    }
                    
                    if (regstart.IsMatch(pr.Range.Text))
                    {                        
                        pr.Range.Replace(new Regex("([a-zA-Z]+\\:)\\s{2,}"), "$1 ", options);
                        FixFlag = true;
                    }
                }
                if (FixFlag == true)
                {
                    // rObj.QC_Result = "Fixed";
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                doc.AcceptAllRevisions();
                //doc.Save(rObj.DestFilePath);
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // Track Changes TurnOff Check

        public void TrackChangesTurnOff(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                if (doc.TrackRevisions == true)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Track changes mode is not turned off";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Track changes mode is turned off";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // Track Changes TurnOff Fix
        public void FixTrackChangesTurnOff(RegOpsQC rObj, Document doc)
        {
            bool IsFixed = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                if (doc.TrackRevisions == true)
                {
                    doc.TrackRevisions = false;
                    IsFixed = true;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "Track changes mode is turned off";
                }
                if (IsFixed == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                }
                
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        //// style of body text
        ///only check
        public void Styleofbodytext(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                int pagecounts = layout.GetStartPageIndex(doc.LastSection.Body.LastParagraph);
                       
                string pgcomments = string.Empty;
          
                string fntname = string.Empty;
                List<int> lstp = new List<int>();
                //Code for Exclude toc/lot/lof
                List<Paragraph> prsLst = new List<Paragraph>();
                foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                {
                    if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                    {
                        Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                        if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF IN-TEXT TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES")))
                            prsLst.Add(pr1);
                    }
                    else if (start.ParentNode != null && (start.ParentNode.PreviousSibling != null && start.ParentNode.PreviousSibling.NodeType == NodeType.Paragraph))
                    {
                        Paragraph pr1 = (Paragraph)start.ParentNode.PreviousSibling;
                        if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF IN-TEXT TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES")))
                            prsLst.Add(pr1);
                    }
                }
                foreach (Section st in doc.Sections)
                {
                    NodeCollection Paragraphs = st.Body.GetChildNodes(NodeType.Paragraph, true);
                    foreach (Paragraph para in Paragraphs)
                    {
                        if (!para.Range.Text.ToUpper().StartsWith("FIGURE") && !para.Range.Text.ToUpper().Contains("SEQ FIGURE")&& !para.Range.Text.ToUpper().StartsWith("TABLE") && !para.Range.Text.ToUpper().Contains("SEQ TABLE")|| !para.GetText().ToUpper().TrimStart().StartsWith("TEXT") || !para.GetText().ToUpper().TrimStart().StartsWith("SUMMARY"))
                        {
                            Style sty = para.ParagraphFormat.Style;
                            if (para.IsInCell != true)
                            {
                                flag = true;
                                if (rObj.Check_Parameter != null)
                                {
                                    if (para.IsInCell != true && (para.ParentNode != null && para.ParentNode.NodeType != NodeType.Shape && para.GetChildNodes(NodeType.Shape, true).Count == 0) && (para.GetChildNodes(NodeType.OfficeMath, true).Count == 0 && para.NodeType != NodeType.HeaderFooter))
                                    {
                                        if (!para.ParagraphFormat.StyleName.ToUpper().Contains("CAPTION") && !prsLst.Contains(para))
                                        {                                           
                                                if (para.ParagraphFormat.Style.Name != rObj.Check_Parameter)
                                                {
                                                    flag = true;
                                                    if (layout.GetStartPageIndex(para) != 0)
                                                        lstp.Add(layout.GetStartPageIndex(para));


                                                }
                                            
                                        }
                                    }
                                  
                                }
                            }
                        }
                    }
                }
               
                    if (lstp.Count > 0)
                    {

                        List<int> lst2 = lstp.Distinct().ToList();
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        flag = true;
                        rObj.QC_Result = "Failed";
                        rObj.Comments = " Paragraphs style body text is not in \"" + rObj.Check_Parameter + "\"" + Pagenumber;
                        rObj.CommentsWOPageNum = " Paragraphs style body text is not in \"" + rObj.Check_Parameter + "\"";
                        rObj.PageNumbersLst = lst2;
                    }                  
                
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All  Paragraphs style body text is in " + rObj.Check_Parameter;
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        public void FIXStyleofbodytext(RegOpsQC rObj, Document doc)
        {        
            bool flag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {


                string pgcomments = string.Empty;
                string fntname = string.Empty;
                List<int> lstp = new List<int>();
                //Code for Exclude toc/lot/lof
                List<Paragraph> prsLst = new List<Paragraph>();
                foreach (FieldStart start in doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldTOC))
                {
                    if (start.ParentParagraph.PreviousSibling != null && start.ParentParagraph.PreviousSibling.NodeType == NodeType.Paragraph)
                    {
                        Paragraph pr1 = (Paragraph)start.ParentParagraph.PreviousSibling;
                        if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF IN-TEXT TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES")||pr1.GetText().ToUpper().TrimStart().StartsWith("TEXT") || pr1.GetText().ToUpper().TrimStart().StartsWith("SUMMARY")))
                            prsLst.Add(pr1);
                    }
                    else if (start.ParentNode != null && (start.ParentNode.PreviousSibling != null && start.ParentNode.PreviousSibling.NodeType == NodeType.Paragraph))
                    {
                        Paragraph pr1 = (Paragraph)start.ParentNode.PreviousSibling;
                        if (pr1 != null && (pr1.Range.Text.Trim().ToUpper().Contains("TABLE OF CONTENTS") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF FIGURES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF IN-TEXT TABLES") || pr1.Range.Text.Trim().ToUpper().Contains("LIST OF APPENDICES")||pr1.GetText().ToUpper().TrimStart().StartsWith("TEXT") || pr1.GetText().ToUpper().TrimStart().StartsWith("SUMMARY")))
                            prsLst.Add(pr1);
                    }
                }
                foreach (Section st in doc.Sections)
                {
                    NodeCollection Paragraphs = st.Body.GetChildNodes(NodeType.Paragraph, true);
                    foreach (Paragraph para in Paragraphs)
                    {
                        if (!para.Range.Text.ToUpper().StartsWith("FIGURE") && !para.Range.Text.ToUpper().Contains("SEQ FIGURE") && (!para.Range.Text.ToUpper().StartsWith("TABLE") && !para.Range.Text.ToUpper().Contains("SEQ TABLE") || !para.GetText().ToUpper().TrimStart().StartsWith("TEXT") || !para.GetText().ToUpper().TrimStart().StartsWith("SUMMARY")))
                        
                        {
                            Style sty = para.ParagraphFormat.Style;
                            if (para.IsInCell != true)
                            {
                                flag = true;
                                if (rObj.Check_Parameter != null)
                                {
                                    if (para.IsInCell != true && (para.ParentNode != null && para.ParentNode.NodeType != NodeType.Shape && para.GetChildNodes(NodeType.Shape, true).Count == 0) && (para.GetChildNodes(NodeType.OfficeMath, true).Count == 0 && para.NodeType != NodeType.HeaderFooter))
                                    {
                                        if (!para.ParagraphFormat.StyleName.ToUpper().Contains("CAPTION") && para.ParagraphBreakFont.Style.Font.Bold == false)
                                        {
                                            if (!prsLst.Contains(para))
                                            {
                                                if (para.ParagraphFormat.Style.Name != rObj.Check_Parameter)
                                                {
                                                    flag = true;
                                                    para.ParagraphFormat.Style.Name = rObj.Check_Parameter;

                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                   
                }
                if (flag == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.Comments += ". Fixed";
                    rObj.CommentsWOPageNum += ". Fixed";

                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "All  Paragraphs style body text is in " + rObj.Check_Parameter;
                }
                rObj.FIX_END_TIME = DateTime.Now;

            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        ///A blank paragraph after List with given style
        public void ListItememptyparagraph(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            bool flag = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lstp = new List<int>();
                List<Paragraph> prsLst = new List<Paragraph>();
                Style StyleName = null;
                StyleName = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == rObj.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem).ToList();
                if(StyleName == null)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Document does not contain \"" + rObj.Check_Parameter + "\" style";
                }
                else
                {
                    foreach (Paragraph pr in listItems)
                    {
                        if (pr.NextSibling != null)
                        {
                            Paragraph pr1 = pr.NextSibling as Paragraph;
                            if (pr1 != null)
                            {
                                if (!pr1.IsListItem && pr1.Range.Text != "\r")
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(pr1) != 0)
                                        lstp.Add(layout.GetStartPageIndex(pr1));
                                }
                                else if (pr1.ParagraphFormat.Style.Name != rObj.Check_Parameter && !pr1.IsListItem && pr1.Range.Text == "\r")
                                {
                                    flag = true;
                                    if (layout.GetStartPageIndex(pr1) != 0)
                                        lstp.Add(layout.GetStartPageIndex(pr1));
                                }
                            }

                        }
                    }
                }
                List<int> lst2 = lstp.Distinct().ToList();
                if (lst2.Count > 0)
                {
                    lst2.Sort();
                    string Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "No Blank rows exist after List with given style \"" +rObj.Check_Parameter+ "\" in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "No Blank rows exist after List with given style \"" + rObj.Check_Parameter + "\"";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                    //rObj.Comments = "blank rows exist after List with given style.";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        ///A blank paragraph after List with given style
        public void ListItememptyparagraphFix(RegOpsQC rObj, Document doc)
        {
            
            bool flag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lstp = new List<int>();
                List<Paragraph> prsLst = new List<Paragraph>();
                DocumentBuilder builder = new DocumentBuilder(doc);
                Style StyleName = null;
                StyleName = doc.Styles.Where(x => ((Style)x).Name.ToUpper() == rObj.Check_Parameter.ToString().ToUpper() || ((Style)x).StyleIdentifier.ToString().ToUpper() == rObj.Check_Parameter.ToString().ToUpper()).FirstOrDefault<Style>();// ToList<Style>();
                List<Paragraph> listItems = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.IsListItem).ToList();
                if (StyleName == null)
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Document does not contain \"" + rObj.Check_Parameter + "\" style";
                }
                else
                {
                    foreach (Paragraph pr in listItems)
                    {
                        if (pr.NextSibling != null)
                        {
                            Paragraph par = new Paragraph(doc);
                            Paragraph pr1 = pr.NextSibling as Paragraph;
                            if (pr1 != null)
                            {
                                if (!pr1.IsListItem && pr1.Range.Text != "\r")
                                {
                                    flag = true;
                                    pr.ParentNode.InsertAfter(par, pr);
                                    builder.MoveTo(par);
                                    par.ParagraphFormat.Style.Name = rObj.Check_Parameter;
                                }
                                else if (pr1.ParagraphFormat.Style.Name != rObj.Check_Parameter && !pr1.IsListItem && pr1.Range.Text == "\r")
                                {
                                    pr1.ParagraphFormat.Style.Name = rObj.Check_Parameter;
                                    flag = true;
                                }
                            }
                        }
                    }
                }
                if (flag == true)
                {

                    rObj.Is_Fixed = 1;
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "This may be fixed to \""+ rObj.Check_Parameter + "\" due to other checks";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }



        public void TOC1_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc1 = doc.Styles[StyleIdentifier.Toc1];
                    if (toc1 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 1 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Left Indent")
                            {

                                if (toc1.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 paragraph Left indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc1 paragraph Left indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {

                                if (toc1.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 paragraph Right indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc1 paragraph Right indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc1.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 paragraph Hanging is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc1 paragraph Hanging is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc1.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 paragraph Spacing before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                   
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc1.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 paragraph Spacing after is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc1 paragraph Spacing after is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {

                                List<int> lst = new List<int>();
                                string lefttabposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    TabStopCollection kk = toc1.ParagraphFormat.TabStops;
                                    if (kk.Count > 0)
                                    {
                                        for (int j = 0; j < kk.Count; j++)
                                        {
                                            if (kk[j].Alignment == TabAlignment.Left)
                                            {
                                                flag = true;
                                                if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                                {
                                                    lst.Add(j);
                                                    flag = true;

                                                }
                                            }

                                        }
                                    }
                                }

                                if (lst.Count > 0)
                                {
                                    List<int> lst1 = lst.Distinct().ToList();
                                    lefttabposition = string.Join(", ", lst1.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 paragraph Left Tab Postion is not in " + lefttabposition;

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc1 paragraph Left Tab Postion is in " + lefttabposition;
                                }
                            }


                            if (chLst[k].Check_Name == "Left Tab Leader")
                            {


                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc1].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {

                                    for (int i = 0; i < kk.Count; i++)
                                    {

                                        if (kk[i].Alignment == TabAlignment.Left)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC1 - Lefttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Right Tab Position(Portrait)")
                            {

                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == false)
                                        {
                                            TabStopCollection kk = toc1.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }


                                if (lst1.Count > 0)
                                {
                                    List<int> lst2 = lst1.Distinct().ToList();
                                    Rightposition = string.Join(", ", lst2.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 Right Tab Postion(potrait) is not in " + Rightposition + ".";

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc1 Right Tab Postion(potrait) is in" + Rightposition + ".";
                                }
                            }

                            if (chLst[k].Check_Name == "Right Tab Position(Landscape)")
                            {
                                if (flag == false)
                                {

                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Toc1 style is not existed in the document.";
                                }
                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == true)
                                        {
                                            TabStopCollection kk = toc1.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (lst1.Count > 0)
                                {
                                    List<int> lst2 = lst1.Distinct().ToList();
                                    Rightposition = string.Join(", ", lst2.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc1 Right Tab Postion(Landscape) is not in " + Rightposition + ".";

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc1 Right Tab Postion(landscape) is in" + Rightposition + ".";
                                }
                            }


                            if (chLst[k].Check_Name == "Right Tab Leader")
                            {
                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc1].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int i = 0; i < kk.Count; i++)
                                    {
                                        if (kk[i].Alignment == TabAlignment.Right)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {

                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC1 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC1 - Righttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }


                                            }

                                        }

                                    }
                                }
                            }
                            if (allsubchecks == true && rObj.Job_Type != "QC")
                            {
                                rObj.QC_Result = "Failed";
                            }
                        }

                    }
                }
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //TOC2 style starts from here
        public void TOC2_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc2 = doc.Styles[StyleIdentifier.Toc2];
                    if (toc2 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 2 style does not exist in document";
                        }
                    }
                    else
                    {

                        for (int k = 0; k < chLst.Count; k++)
                        {

                            if (chLst[k].Check_Name == "Left Indent")
                            {

                                if (toc2.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc2 paragraph Left indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc2 paragraph Left indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {
                                if (toc2.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc2 paragraph Right indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc2 paragraph Right indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc2.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc2 paragraph Hanging is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc2 paragraph Hanging is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc2.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc2 paragraph Spacing before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                  
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc2.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc2 paragraph Spacing after is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc2 paragraph Spacing after  is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {

                                List<int> lst = new List<int>();
                                string lefttabposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    TabStopCollection kk = toc2.ParagraphFormat.TabStops;
                                    if (kk.Count > 0)
                                    {
                                        for (int j = 0; j < kk.Count; j++)
                                        {
                                            if (kk[j].Alignment == TabAlignment.Left)
                                            {
                                                flag = true;
                                                if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                                {
                                                    lst.Add(j);
                                                    flag = true;

                                                }
                                            }

                                        }
                                    }
                                }
                                if (flag == false)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Toc2 style not existed in document";
                                }
                                else
                                {
                                    if (lst.Count > 0)
                                    {
                                        List<int> lst1 = lst.Distinct().ToList();
                                        lefttabposition = string.Join(", ", lst1.ToArray());
                                        flag = true;
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = " Toc2 paragraph Left Tab Postion is not in " + lefttabposition;

                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "passed";
                                        chLst[k].Comments = " Toc2 paragraph Left Tab Postion is in" + lefttabposition;
                                    }
                                }
                            }

                            if (chLst[k].Check_Name == "Left Tab Leader")
                            {
                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc2].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int i = 0; i < kk.Count; i++)
                                    {
                                        if (kk[i].Alignment == TabAlignment.Left)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC2 - Lefttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }


                                            }

                                        }

                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Right Tab Position(Portrait)")
                            {
                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == false)
                                        {
                                            TabStopCollection kk = toc2.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                                if (flag == false)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Toc2 style not existed in document.";
                                }
                                else
                                {
                                    if (lst1.Count > 0)
                                    {
                                        List<int> lst2 = lst1.Distinct().ToList();
                                        Rightposition = string.Join(", ", lst2.ToArray());
                                        flag = true;
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = " Toc2 Right Tab Postion(potrait) is not in " + Rightposition + ".";

                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "passed";
                                        chLst[k].Comments = " Toc2 Right Tab Postion(potrait) is in" + Rightposition + ".";
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Right Tab Position(Landscape)")
                            {
                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == true)
                                        {
                                            TabStopCollection kk = toc2.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }

                                if (lst1.Count > 0)
                                {
                                    List<int> lst2 = lst1.Distinct().ToList();
                                    Rightposition = string.Join(", ", lst2.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc2 Right Tab Postion(Landscape) is not in " + Rightposition + ".";

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc2 Right Tab Postion(landscape) is in" + Rightposition + ".";
                                }
                            }


                            if (chLst[k].Check_Name == "Right Tab Leader")
                            {
                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc2].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int i = 0; i < kk.Count; i++)
                                    {
                                        if (kk[i].Alignment == TabAlignment.Right)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC2 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC2 - Righttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }


                                            }

                                        }

                                    }
                                }
                            }
                            if (allsubchecks == true && rObj.Job_Type != "QC")
                            {
                                rObj.QC_Result = "Failed";
                            }
                        }

                    }
                }
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        //TOC3 style starts from here
        public void TOC3_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc3 = doc.Styles[StyleIdentifier.Toc3];
                    if (toc3 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 3 style does not exist in document";
                        }
                    }
                    else
                    {

                        for (int k = 0; k < chLst.Count; k++)
                        {

                            if (chLst[k].Check_Name == "Left Indent")
                            {

                                if (toc3.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc3 paragraph Left indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc3 paragraph Left indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {
                                if (toc3.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc3 paragraph Right indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc3 paragraph Right indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc3.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc3 paragraph Hanging is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc3 paragraph Hanging is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc3.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc3 paragraph Spacing before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                 
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc3.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc3 paragraph Spacing after  is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc3 paragraph Spacing after  is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {

                                List<int> lst = new List<int>();
                                string lefttabposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    TabStopCollection kk = toc3.ParagraphFormat.TabStops;
                                    if (kk.Count > 0)
                                    {
                                        for (int j = 0; j < kk.Count; j++)
                                        {
                                            if (kk[j].Alignment == TabAlignment.Left)
                                            {
                                                flag = true;
                                                if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                                {
                                                    lst.Add(j);
                                                    flag = true;

                                                }
                                            }

                                        }
                                    }
                                }


                                if (lst.Count > 0)
                                {
                                    List<int> lst1 = lst.Distinct().ToList();
                                    lefttabposition = string.Join(", ", lst1.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc3 paragraph Left Tab Postion is not in " + lefttabposition;

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc3 paragraph Left Tab Postion is in" + lefttabposition;
                                }
                            }


                            if (chLst[k].Check_Name == "Left Tab Leader")
                            {
                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc3].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int i = 0; i < kk.Count; i++)
                                    {
                                        if (kk[i].Alignment == TabAlignment.Left)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC3 - Lefttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }


                                            }

                                        }

                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Right Tab Position(Portrait)")
                            {
                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == false)
                                        {
                                            TabStopCollection kk = toc3.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (lst1.Count > 0)
                                {
                                    List<int> lst2 = lst1.Distinct().ToList();
                                    Rightposition = string.Join(", ", lst2.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc3 Right Tab Postion(potrait) is not in " + Rightposition + ".";

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc3 Right Tab Postion(potrait) is in" + Rightposition + ".";
                                }
                            }

                            if (chLst[k].Check_Name == "Right Tab Position(Landscape)")
                            {
                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == true)
                                        {
                                            TabStopCollection kk = toc3.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }  
                                }
                                if (flag == false)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Toc3 style is not existed in the document";
                                }

                                else
                                {
                                    if (lst1.Count > 0)
                                    {
                                        List<int> lst2 = lst1.Distinct().ToList();
                                        Rightposition = string.Join(", ", lst2.ToArray());
                                        flag = true;
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = " Toc3 Right Tab Postion(Landscape) is not in " + Rightposition + ".";

                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "passed";
                                        chLst[k].Comments = " Toc3 Right Tab Postion(landscape) is in" + Rightposition + ".";
                                    }
                                }
                            }

                            if (chLst[k].Check_Name == "Right Tab Leader")
                            {
                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc3].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int i = 0; i < kk.Count; i++)
                                    {
                                        if (kk[i].Alignment == TabAlignment.Right)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC3 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC3 - Righttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }


                                            }

                                        }

                                    }
                                }
                            }
                            if (allsubchecks == true && rObj.Job_Type != "QC")
                            {
                                rObj.QC_Result = "Failed";
                            }
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }


        //TOC4 style starts from here
        public void TOC4_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc4 = doc.Styles[StyleIdentifier.Toc4];
                    if (toc4 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 4 style does not exist in document";
                        }
                    }
                    else
                    {

                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Left Indent")
                            {
                                if (toc4.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 paragraph Left indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc4 paragraph Left indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {

                                if (toc4.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 paragraph Right indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc4 paragraph Right indent is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc4.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 paragraph Hanging is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc4 paragraph Hanging is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc4.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 paragraph Spacing before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                 
                                }
                            }

                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc4.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 paragraph Spacing after  is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc4 paragraph Spacing after  is in \"" + chLst[k].Check_Parameter + "\"";
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {

                                List<int> lst = new List<int>();
                                string lefttabposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    TabStopCollection kk = toc4.ParagraphFormat.TabStops;
                                    if (kk.Count > 0)
                                    {
                                        for (int j = 0; j < kk.Count; j++)
                                        {
                                            if (kk[j].Alignment == TabAlignment.Left)
                                            {
                                                flag = true;
                                                if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                                {
                                                    lst.Add(j);
                                                    flag = true;

                                                }
                                            }

                                        }
                                    }
                                }


                                if (lst.Count > 0)
                                {
                                    List<int> lst1 = lst.Distinct().ToList();
                                    lefttabposition = string.Join(", ", lst1.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 paragraph Left Tab Postion is not in " + lefttabposition ;

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc4 paragraph Left Tab Postion is in" + lefttabposition;
                                }

                            }

                            if (chLst[k].Check_Name == "Left Tab Leader")
                            {
                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc4].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int i = 0; i < kk.Count; i++)
                                    {
                                        if (kk[i].Alignment == TabAlignment.Left)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Lefttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC4 - Lefttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }


                                            }

                                        }

                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Right Tab Position(Portrait)")
                            {
                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == false)
                                        {
                                            TabStopCollection kk = toc4.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (lst1.Count > 0)
                                {
                                    List<int> lst2 = lst1.Distinct().ToList();
                                    Rightposition = string.Join(", ", lst2.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 Right Tab Postion(potrait) is not in " + Rightposition + ".";

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc4 Right Tab Postion(potrait) is in" + Rightposition + ".";
                                }
                            }

                            if (chLst[k].Check_Name == "Right Tab Position(Landscape)")
                            {
                                List<int> lst1 = new List<int>();
                                string Rightposition = string.Empty;
                                for (int i = 0; i < doc.PageCount; i++)
                                {
                                    Aspose.Words.Rendering.PageInfo pageInfo = doc.GetPageInfo(i);
                                    if (pageInfo != null)
                                    {
                                        if (pageInfo.Landscape == true)
                                        {
                                            TabStopCollection kk = toc4.ParagraphFormat.TabStops;
                                            if (kk.Count > 0)
                                            {
                                                for (int j = 0; j < kk.Count; j++)
                                                {
                                                    if (kk[j].Alignment == TabAlignment.Right)
                                                    {
                                                        flag = true;
                                                        if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                                        {
                                                            lst1.Add(j);
                                                            flag = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } 
                                }

                                if (lst1.Count > 0)
                                {
                                    List<int> lst2 = lst1.Distinct().ToList();
                                    Rightposition = string.Join(", ", lst2.ToArray());
                                    flag = true;
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Toc4 Right Tab Postion(Landscape) is not in " + Rightposition + ".";

                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    chLst[k].Comments = " Toc4 Right Tab Postion(landscape) is in" + Rightposition + ".";
                                }
                            }

                            if (chLst[k].Check_Name == "Right Tab Leader")
                            {
                                List<int> lst = new List<int>();
                                TabStopCollection kk = doc.Styles[StyleIdentifier.Toc4].ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int i = 0; i < kk.Count; i++)
                                    {
                                        if (kk[i].Alignment == TabAlignment.Right)
                                        {
                                            flag = true;
                                            for (int j = 0; j < kk.Count; j++)
                                            {
                                                if (chLst[k].Check_Parameter != "None")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != ".....")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";
                                                }
                                                else if (chLst[k].Check_Parameter != "-----")
                                                {
                                                    flag = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else if (chLst[k].Check_Parameter != "_____")
                                                {
                                                    flag = true;
                                                    allsubchecks = true;
                                                    chLst[k].QC_Result = "Failed";
                                                    chLst[k].Comments = "TOC4 - Righttab leader is not in \"" + chLst[k].Check_Parameter + "\"";

                                                }
                                                else
                                                {
                                                    chLst[k].QC_Result = "Passed";
                                                    chLst[k].Comments = "TOC4 - Righttab leader is in \"" + chLst[k].Check_Parameter + "\"";
                                                }


                                            }

                                        }

                                    }
                                }
                            }
                            if (allsubchecks == true && rObj.Job_Type != "QC")
                            {
                                rObj.QC_Result = "Failed";
                            }
                        }

                    }
                }
            }

            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        //toc1 to toc5 styles fix starts from here
        public void FixTOC1_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
           
            bool flag = false;
            bool allsubchecks = false;
            rObj.FIX_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);

            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc1 = doc.Styles[StyleIdentifier.Toc1];
                    if (toc1 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 1 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            
                            if (chLst[k].Check_Name == "Left Indent")
                            {

                                if (toc1.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc1.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {

                                if (toc1.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc1.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc1.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc1.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc1.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc1.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc1.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc1.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            //if (chLst[k].Check_Name == "Left Tab Leader")
                            //{

                            //    if (toc1.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                            //    {
                            //        flag = true;
                            //        toc1.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter) * 12;
                            //        chLst[k].Is_Fixed = 1;
                            //        chLst[k].Comments = chLst[k].Comments + " Fixed";


                            //    }
                            //}

                        }
                    }
                    rObj.FIX_END_TIME = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixTOC2_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
           
            bool flag = false;
            bool allsubchecks = true;
            rObj.FIX_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);

            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc2 = doc.Styles[StyleIdentifier.Toc2];
                    if (toc2 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 2 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Left Indent")
                            {

                                if (toc2.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc2.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {

                                if (toc2.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc2.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc2.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc2.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc2.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc2.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc2.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc2.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            //if (chLst[k].Check_Name == "Left Tab Leader")
                            //{

                            //    if (toc2.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                            //    {
                            //        flag = true;
                            //        toc2.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter) * 12;
                            //        chLst[k].Is_Fixed = 1;
                            //        chLst[k].Comments = chLst[k].Comments + " Fixed";


                            //    }
                            //}

                        }
                    }
                    rObj.FIX_END_TIME = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";

                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixTOC3_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool flag = false;
            bool allsubchecks = false;
            rObj.FIX_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);

            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc3 = doc.Styles[StyleIdentifier.Toc3];
                    if (toc3 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 3 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {

                            if (chLst[k].Check_Name == "Left Indent")
                            {

                                if (toc3.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc3.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {

                                if (toc3.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc3.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc3.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc3.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc3.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc3.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc3.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc3.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            //if (chLst[k].Check_Name == "Left Tab Leader")
                            //{

                            //    if (toc3.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                            //    {
                            //        flag = true;
                            //        toc3.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter) * 12;
                            //        chLst[k].Is_Fixed = 1;
                            //        chLst[k].Comments = chLst[k].Comments + " Fixed";


                            //    }
                            //}

                        }
                    }
                    rObj.FIX_END_TIME = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void FixTOC4_style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
           
            bool flag = false;
            bool allsubchecks = false;
            rObj.FIX_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);

            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style toc4 = doc.Styles[StyleIdentifier.Toc4];
                    if (toc4 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "TOC 4 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {

                            if (chLst[k].Check_Name == "Left Indent")
                            {

                                if (toc4.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc4.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {

                                if (toc4.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc4.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";

                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {

                                if (toc4.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    flag = true;
                                    toc4.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {

                                if (toc4.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc4.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {

                                if (toc4.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    flag = true;
                                    toc4.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + " Fixed";


                                }
                            }
                            //if (toc4.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                            //{
                            //    flag = true;
                            //    toc4.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter) * 12;
                            //    chLst[k].Is_Fixed = 1;
                            //    chLst[k].Comments = chLst[k].Comments + " Fixed";


                            //}
                        }

                    }
                }
                rObj.FIX_END_TIME = DateTime.Now;
            
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 1 Style - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Heading_1_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool Flag1 = false;
            bool Flag2 = false;
            bool Flag3 = false;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading1 = doc.Styles[StyleIdentifier.Heading1];
                    if (Heading1 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 1 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family")
                            {
                                if (Heading1.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 1 style Font Family is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Font Family is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style")
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading1.Font.Bold != true)
                                    {
                                        Flag1 = true;
                                    }

                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading1.Font.Italic != true)
                                    {
                                        Flag2 = true;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {

                                    Flag3 = true;

                                }
                                if (Flag1 || Flag2 || Flag3)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 1 Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 Font Style is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size")
                            {
                                if (Heading1.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 1 style Font Size is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent")
                            {
                                if (Heading1.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 1 style Left Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {
                                if (Heading1.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 1 style Right Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {
                                if (Heading1.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 1 style Hanging Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {
                                if (Heading1.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 1 style Spacing Before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {
                                if (Heading1.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 1 style Spacing After is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level")
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 1 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 1 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 1 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 1 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 1 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization")
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading1.Font.AllCaps != true)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 1 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    flag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext)
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                    if (flag == false)
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style paragraphs not exist in document";
                                    }
                                    if (lst.Count > 0)
                                    {
                                        allsubchecks = true;
                                        List<int> lst1 = lst.Distinct().ToList();
                                        Pagenumber = string.Join(", ", lst1.ToArray());
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 1 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {
                                flag = false;
                                string lefttabposition = string.Empty;
                                TabStopCollection kk = Heading1.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 1 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 1 style paragraph Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style")
                            {
                                if (Heading1.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 1 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                                
                            }
                        }
                    }
                    if (allsubchecks == true && rObj.Job_Type != "QC")
                    {
                        rObj.QC_Result = "Failed";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

       /// <summary>
       /// Heading 1 Style - Fix
       /// </summary>
       /// <param name="rObj"></param>
       /// <param name="doc"></param>
       /// <param name="chLst"></param>
        public void Fix_Heading_1_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading1 = doc.Styles[StyleIdentifier.Heading1];
                    if (Heading1 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 1 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family" && chLst[k].Check_Type == 1)
                            {
                                if (Heading1.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    Heading1.Font.Name = chLst[k].Check_Parameter;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Font Family is in" + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading1.Font.Bold != true)
                                    {
                                        Heading1.Font.Bold = true;
                                        Heading1.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading1.Font.Italic != true)
                                    {
                                        Heading1.Font.Italic = true;
                                        Heading1.Font.Bold = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        chLst[k].Comments = "Heading 1 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {
                                    if (Heading1.Font.Bold != true || Heading1.Font.Italic != true)
                                    {
                                        Heading1.Font.Bold = true;
                                        Heading1.Font.Italic = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Regular")
                                {
                                    if (Heading1.Font.Bold == true || Heading1.Font.Italic == true)
                                    {
                                        Heading1.Font.Bold = false;
                                        Heading1.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size" && chLst[k].Check_Type == 1)
                            {
                                if (Heading1.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading1.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading1.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading1.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading1.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading1.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading1.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading1.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before" && chLst[k].Check_Type == 1)
                            {
                                //if (Heading1.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter) * 6)
                                //{
                                //    Heading1.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter) * 6;
                                //    chLst[k].Is_Fixed = 1;
                                //    chLst[k].Comments = chLst[k].Comments + " These are fixed";
                                //}
                                // check_parameter * 6 removed as we have defined Points for this sub check - 19-Sep-2022
                                if (Heading1.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading1.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After" && chLst[k].Check_Type == 1)
                            {
                                if (Heading1.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading1.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 1 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        Heading1.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        Heading1.ParagraphFormat.OutlineLevel = OutlineLevel.Level2;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        Heading1.ParagraphFormat.OutlineLevel = OutlineLevel.Level3;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        Heading1.ParagraphFormat.OutlineLevel = OutlineLevel.Level4;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading1.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        Heading1.ParagraphFormat.OutlineLevel = OutlineLevel.Level5;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading1.Font.AllCaps != true)
                                    {
                                        Heading1.Font.AllCaps = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Font is in" + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    Heading1.Font.AllCaps = false;
                                    bool FIxflag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext && prtext != null && prtext != "")
                                        {
                                            prtext = prtext.ToLower();
                                            prtext = textInfo.ToTitleCase(prtext);
                                            pr.Range.Replace(pr.Range.Text.Trim(), prtext, new FindReplaceOptions());
                                            FIxflag = true;
                                        }
                                    }
                                    if (FIxflag)
                                    {
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 1 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            //Fix not yet completely implemented - for fixing there is no set property only get property we have
                            if (chLst[k].Check_Name == "Left Tab Position" && chLst[k].Check_Type == 1)
                            {
                                flag = false;
                                TabStopCollection kk = Heading1.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Heading 1 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 1 style Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style" && chLst[k].Check_Type == 1)
                            {
                                if (Heading1.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            //Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.Arabic;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberArabicDot);
                                            Heading1.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            //Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseLetterDot);
                                            Heading1.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            //Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseRomanDot);
                                            Heading1.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.Number;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.NumberInCircle;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        try
                                        {
                                            if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                            {
                                                //Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseLetter;
                                                List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseLetterDot);
                                                Heading1.ListFormat.List = numberedList;
                                                chLst[k].Is_Fixed = 1;
                                                chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                            }
                                            else
                                            {
                                                chLst[k].QC_Result = "Passed";
                                                //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                            }
                                        }
                                        catch
                                        {

                                        }

                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading1.ListFormat.ListLevel != null && Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            //Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseRomanDot);
                                            Heading1.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading1.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            Heading1.ListFormat.ListLevel.NumberStyle = NumberStyle.None;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 1 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 2 Style - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Heading_2_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool Flag1 = false;
            bool Flag2 = false;
            bool Flag3 = false;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading2 = doc.Styles[StyleIdentifier.Heading2];
                    if (Heading2 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 2 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family")
                            {
                                if (Heading2.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 2 style Font Family is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Font Family is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style")
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading2.Font.Bold != true)
                                    {
                                        Flag1 = true;
                                    }

                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading2.Font.Italic != true)
                                    {
                                        Flag2 = true;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {

                                    Flag3 = true;

                                }
                                if (Flag1 || Flag2 || Flag3)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 2 Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 Font Style is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size")
                            {
                                if (Heading2.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 2 style Font Size is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent")
                            {
                                if (Heading2.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 2 style Left Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {
                                if (Heading2.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 2 style Right Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {
                                if (Heading2.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 2 style Hanging Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {
                                if (Heading2.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 2 style Spacing Before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {
                                if (Heading2.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 2 style Spacing After is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level")
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 2 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 2 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 2 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 2 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 2 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization")
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading2.Font.AllCaps != true)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 2 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    flag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading2).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext)
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                    if (flag == false)
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        chLst[k].Comments = "Heading 2 style paragraphs not exist in document";
                                    }
                                    if (lst.Count > 0)
                                    {
                                        allsubchecks = true;
                                        List<int> lst1 = lst.Distinct().ToList();
                                        Pagenumber = string.Join(", ", lst1.ToArray());
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 2 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {
                                flag = false;
                                string lefttabposition = string.Empty;
                                TabStopCollection kk = Heading2.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 2 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 2 style paragraph Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style")
                            {
                                if (Heading2.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 2 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (allsubchecks == true && rObj.Job_Type != "QC")
                    {
                        rObj.QC_Result = "Failed";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 2 Style - Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>        
        public void Fix_Heading_2_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading2 = doc.Styles[StyleIdentifier.Heading2];
                    if (Heading2 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 2 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    Heading2.Font.Name = chLst[k].Check_Parameter;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Font Family is in" + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading2.Font.Bold != true)
                                    {
                                        Heading2.Font.Bold = true;
                                        Heading2.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading2.Font.Italic != true)
                                    {
                                        Heading2.Font.Italic = true;
                                        Heading2.Font.Bold = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {
                                    if (Heading2.Font.Bold != true || Heading2.Font.Italic != true)
                                    {
                                        Heading2.Font.Bold = true;
                                        Heading2.Font.Italic = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Regular")
                                {
                                    if (Heading2.Font.Bold == true || Heading2.Font.Italic == true)
                                    {
                                        Heading2.Font.Bold = false;
                                        Heading2.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading2.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading2.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading2.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading2.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading2.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading2.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 2 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        Heading2.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        Heading2.ParagraphFormat.OutlineLevel = OutlineLevel.Level2;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        Heading2.ParagraphFormat.OutlineLevel = OutlineLevel.Level3;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        Heading2.ParagraphFormat.OutlineLevel = OutlineLevel.Level4;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading2.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        Heading2.ParagraphFormat.OutlineLevel = OutlineLevel.Level5;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading2.Font.AllCaps != true)
                                    {
                                        Heading2.Font.AllCaps = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Font is in" + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    Heading2.Font.AllCaps = false;
                                    bool FIxflag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading2).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext && prtext != null && prtext != "")
                                        {
                                            prtext = prtext.ToLower();
                                            prtext = textInfo.ToTitleCase(prtext);
                                            pr.Range.Replace(pr.Range.Text.Trim(), prtext, new FindReplaceOptions());
                                            FIxflag = true;
                                        }
                                    }
                                    if (FIxflag)
                                    {
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 2 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            //Fix not yet completely implemented - for fixing there is no set property only get property we have
                            if (chLst[k].Check_Name == "Left Tab Position" && chLst[k].Check_Type == 1)
                            {
                                flag = false;
                                TabStopCollection kk = Heading2.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                //kk[j].Leader = a;
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Heading 2 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 2 style Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style" && chLst[k].Check_Type == 1)
                            {
                                if (Heading2.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            //Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.Arabic;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberArabicDot);
                                            Heading2.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            //Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseLetterDot);
                                            Heading2.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading2.ListFormat.ListLevel != null && Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            //Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseRomanDot);
                                            Heading2.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.Number;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.NumberInCircle;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            //Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseLetterDot);
                                            Heading2.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            //Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseRomanDot);
                                            Heading2.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading2.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            Heading2.ListFormat.ListLevel.NumberStyle = NumberStyle.None;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 2 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 3 Style - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Heading_3_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool Flag1 = false;
            bool Flag2 = false;
            bool Flag3 = false;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading3 = doc.Styles[StyleIdentifier.Heading3];
                    if (Heading3 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 3 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family")
                            {
                                if (Heading3.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 3 style Font Family is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Font Family is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style")
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading3.Font.Bold != true)
                                    {
                                        Flag1 = true;
                                    }

                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading3.Font.Italic != true)
                                    {
                                        Flag2 = true;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {

                                    Flag3 = true;

                                }
                                if (Flag1 || Flag2 || Flag3)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 3 Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 Font Style is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size")
                            {
                                if (Heading3.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 3 style Font Size is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent")
                            {
                                if (Heading3.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 3 style Left Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {
                                if (Heading3.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 3 style Right Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {
                                if (Heading3.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 3 style Hanging Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                   // chLst[k].Comments = "Heading 3 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {
                                if (Heading3.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 3 style Spacing Before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {
                                if (Heading3.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 3 style Spacing After is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level")
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 3 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 3 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 3 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 3 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 3 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization")
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading3.Font.AllCaps != true)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 3 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    flag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading3).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext)
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                    if (flag == false)
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style paragraphs not exist in document";
                                    }
                                    if (lst.Count > 0)
                                    {
                                        allsubchecks = true;
                                        List<int> lst1 = lst.Distinct().ToList();
                                        Pagenumber = string.Join(", ", lst1.ToArray());
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 3 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {
                                flag = false;
                                string lefttabposition = string.Empty;
                                TabStopCollection kk = Heading3.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 3 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 3 style paragraph Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style")
                            {
                                if (Heading3.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 3 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }                               
                            }
                        }
                    }
                    if (allsubchecks == true && rObj.Job_Type != "QC")
                    {
                        rObj.QC_Result = "Failed";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 3 Style - Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Fix_Heading_3_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading3 = doc.Styles[StyleIdentifier.Heading3];
                    if (Heading3 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 3 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    Heading3.Font.Name = chLst[k].Check_Parameter;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Font Family is in" + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading3.Font.Bold != true)
                                    {
                                        Heading3.Font.Bold = true;
                                        Heading3.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading3.Font.Italic != true)
                                    {
                                        Heading3.Font.Italic = true;
                                        Heading3.Font.Bold = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {
                                    if (Heading3.Font.Bold != true || Heading3.Font.Italic != true)
                                    {
                                        Heading3.Font.Bold = true;
                                        Heading3.Font.Italic = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Regular")
                                {
                                    if (Heading3.Font.Bold == true || Heading3.Font.Italic == true)
                                    {
                                        Heading3.Font.Bold = false;
                                        Heading3.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading3.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading3.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading3.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading3.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading3.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading3.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 3 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        Heading3.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        Heading3.ParagraphFormat.OutlineLevel = OutlineLevel.Level2;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        Heading3.ParagraphFormat.OutlineLevel = OutlineLevel.Level3;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        Heading3.ParagraphFormat.OutlineLevel = OutlineLevel.Level4;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading3.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        Heading3.ParagraphFormat.OutlineLevel = OutlineLevel.Level5;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading3.Font.AllCaps != true)
                                    {
                                        Heading3.Font.AllCaps = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Font is in" + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    Heading3.Font.AllCaps = false;
                                    bool FIxflag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading3).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext && prtext != null && prtext != "")
                                        {
                                            prtext = prtext.ToLower();
                                            prtext = textInfo.ToTitleCase(prtext);
                                            pr.Range.Replace(pr.Range.Text.Trim(), prtext, new FindReplaceOptions());
                                            FIxflag = true;
                                        }
                                    }
                                    if (FIxflag)
                                    {
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 3 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            //Fix not yet completely implemented - for fixing there is no set property only get property we have
                            if (chLst[k].Check_Name == "Left Tab Position" && chLst[k].Check_Type == 1)
                            {
                                flag = false;
                                TabStopCollection kk = Heading3.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                //kk[j].Position = Convert.ToDouble(chLst[k].Check_Parameter) * 12;
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Heading 3 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 3 style Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style" && chLst[k].Check_Type == 1)
                            {
                                if (Heading3.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            //Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.Arabic;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberArabicDot);
                                            Heading3.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            //Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseLetterDot);
                                            Heading3.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            //Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseRomanDot);
                                            Heading3.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.Number;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.NumberInCircle;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            //Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseLetterDot);
                                            Heading3.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            //Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseRomanDot);
                                            Heading3.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading3.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            Heading3.ListFormat.ListLevel.NumberStyle = NumberStyle.None;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 3 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 4 Style - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Heading_4_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool Flag1 = false;
            bool Flag2 = false;
            bool Flag3 = false;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading4 = doc.Styles[StyleIdentifier.Heading4];
                    if (Heading4 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 4 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family")
                            {
                                if (Heading4.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 4 style Font Family is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Font Family is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style")
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading4.Font.Bold != true)
                                    {
                                        Flag1 = true;
                                    }

                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading4.Font.Italic != true)
                                    {
                                        Flag2 = true;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {

                                    Flag3 = true;

                                }
                                if (Flag1 || Flag2 || Flag3)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 4 Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 Font Style is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size")
                            {
                                if (Heading4.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 4 style Font Size is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent")
                            {
                                if (Heading4.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 4 style Left Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {
                                if (Heading4.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 4 style Right Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {
                                if (Heading4.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 4 style Hanging Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {
                                if (Heading4.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 4 style Spacing Before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {
                                if (Heading4.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 4 style Spacing After is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level")
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 4 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 4 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 4 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 4 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 4 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization")
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading4.Font.AllCaps != true)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 4 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    flag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading4).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext)
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                    if (flag == false)
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        chLst[k].Comments = "Heading 4 style paragraphs not exist in document";
                                    }
                                    if (lst.Count > 0)
                                    {
                                        allsubchecks = true;
                                        List<int> lst1 = lst.Distinct().ToList();
                                        Pagenumber = string.Join(", ", lst1.ToArray());
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 4 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {
                                flag = false;
                                string lefttabposition = string.Empty;
                                TabStopCollection kk = Heading4.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 4 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 4 style paragraph Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style")
                            {
                                if (Heading4.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 4 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (allsubchecks == true && rObj.Job_Type != "QC")
                    {
                        rObj.QC_Result = "Failed";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 4 Style - Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Fix_Heading_4_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading4 = doc.Styles[StyleIdentifier.Heading4];
                    if (Heading4 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 4 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    Heading4.Font.Name = chLst[k].Check_Parameter;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Font Family is in" + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading4.Font.Bold != true)
                                    {
                                        Heading4.Font.Bold = true;
                                        Heading4.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading4.Font.Italic != true)
                                    {
                                        Heading4.Font.Italic = true;
                                        Heading4.Font.Bold = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {
                                    if (Heading4.Font.Bold != true || Heading4.Font.Italic != true)
                                    {
                                        Heading4.Font.Bold = true;
                                        Heading4.Font.Italic = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Regular")
                                {
                                    if (Heading4.Font.Bold == true || Heading4.Font.Italic == true)
                                    {
                                        Heading4.Font.Bold = false;
                                        Heading4.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading4.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading4.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading4.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading4.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading4.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading4.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 4 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        Heading4.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        Heading4.ParagraphFormat.OutlineLevel = OutlineLevel.Level2;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        Heading4.ParagraphFormat.OutlineLevel = OutlineLevel.Level3;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        Heading4.ParagraphFormat.OutlineLevel = OutlineLevel.Level4;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading4.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        Heading4.ParagraphFormat.OutlineLevel = OutlineLevel.Level5;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading4.Font.AllCaps != true)
                                    {
                                        Heading4.Font.AllCaps = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Font is in" + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    Heading4.Font.AllCaps = false;
                                    bool FIxflag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading4).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext && prtext!=null && prtext!="")
                                        {
                                            prtext = prtext.ToLower();
                                            prtext = textInfo.ToTitleCase(prtext);
                                            pr.Range.Replace(pr.Range.Text.Trim(), prtext, new FindReplaceOptions());
                                            FIxflag = true;
                                        }
                                    }
                                    if (FIxflag)
                                    {
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 4 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            //Fix not yet completely implemented - for fixing there is no set property only get property we have
                            if (chLst[k].Check_Name == "Left Tab Position" && chLst[k].Check_Type == 1)
                            {
                                flag = false;
                                TabStopCollection kk = Heading4.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Heading 4 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 4 style Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style" && chLst[k].Check_Type == 1)
                            {
                                if (Heading4.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            //Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.Arabic;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberArabicDot);
                                            Heading4.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            //Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseLetterDot);
                                            Heading4.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            //Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseRomanDot);
                                            Heading4.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.Number;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.NumberInCircle;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            //Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseLetterDot);
                                            Heading4.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            //Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseRomanDot);
                                            Heading4.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading4.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            Heading4.ListFormat.ListLevel.NumberStyle = NumberStyle.None;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 4 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 5 Style - check
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Heading_5_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool Flag1 = false;
            bool Flag2 = false;
            bool Flag3 = false;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading5 = doc.Styles[StyleIdentifier.Heading5];
                    if (Heading5 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 5 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family")
                            {
                                if (Heading5.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 5 style Font Family is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Font Family is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style")
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading5.Font.Bold != true)
                                    {
                                        Flag1 = true;
                                    }

                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading5.Font.Italic != true)
                                    {
                                        Flag2 = true;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {

                                    Flag3 = true;

                                }
                                if (Flag1 || Flag2 || Flag3)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 5 Font Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 Font Style is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size")
                            {
                                if (Heading5.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 5 style Font Size is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent")
                            {
                                if (Heading5.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 5 style Left Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent")
                            {
                                if (Heading5.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    chLst[k].QC_Result = "Failed";
                                    allsubchecks = true;
                                    chLst[k].Comments = "Heading 5 style Right Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent")
                            {
                                if (Heading5.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 5 style Hanging Indent is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before")
                            {
                                if (Heading5.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 5 style Spacing Before is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After")
                            {
                                if (Heading5.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 5 style Spacing After is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level")
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 5 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 5 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 5 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        chLst[k].QC_Result = "Failed";
                                        allsubchecks = true;
                                        chLst[k].Comments = "Heading 5 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 5 style Outline Level is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization")
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading5.Font.AllCaps != true)
                                    {
                                        allsubchecks = true;
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 5 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    flag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading5).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext)
                                        {
                                            if (layout.GetStartPageIndex(pr) != 0)
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                    if (flag == false)
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        chLst[k].Comments = "Heading 5 style paragraphs not exist in document";
                                    }
                                    if (lst.Count > 0)
                                    {
                                        allsubchecks = true;
                                        List<int> lst1 = lst.Distinct().ToList();
                                        Pagenumber = string.Join(", ", lst1.ToArray());
                                        chLst[k].QC_Result = "Failed";
                                        chLst[k].Comments = "Heading 5 style Font is not in \"" + chLst[k].Check_Parameter + "\"";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Left Tab Position")
                            {
                                flag = false;
                                string lefttabposition = string.Empty;
                                TabStopCollection kk = Heading5.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Heading 5 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 5 style paragraph Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style")
                            {
                                if (Heading5.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            allsubchecks = true;
                                            chLst[k].QC_Result = "Failed";
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            chLst[k].QC_Result = "Failed";
                                            allsubchecks = true;
                                            chLst[k].Comments = "Heading 5 Numbered Item Style is not in \"" + chLst[k].Check_Parameter + "\"";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (allsubchecks == true && rObj.Job_Type != "QC")
                    {
                        rObj.QC_Result = "Failed";
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        /// <summary>
        /// Heading 5 Style - Fix
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        /// <param name="chLst"></param>
        public void Fix_Heading_5_Style(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            string Pagenumber = string.Empty;
            bool flag = false;
            bool allsubchecks = false;
            rObj.CHECK_START_TIME = DateTime.Now;
            LayoutCollector layout = new LayoutCollector(doc);
            TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
            List<int> lst = new List<int>();
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    Style Heading5 = doc.Styles[StyleIdentifier.Heading5];
                    if (Heading5 == null)
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            allsubchecks = true;
                            chLst[k].QC_Result = "Failed";
                            chLst[k].Comments = "Heading 5 style does not exist in document";
                        }
                    }
                    else
                    {
                        for (int k = 0; k < chLst.Count; k++)
                        {
                            if (chLst[k].Check_Name == "Font Family" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.Font.Name != chLst[k].Check_Parameter.ToString())
                                {
                                    Heading5.Font.Name = chLst[k].Check_Parameter;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Font Family is in" + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Font Style" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Bold")
                                {
                                    if (Heading5.Font.Bold != true)
                                    {
                                        Heading5.Font.Bold = true;
                                        Heading5.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Italic")
                                {
                                    if (Heading5.Font.Italic != true)
                                    {
                                        Heading5.Font.Italic = true;
                                        Heading5.Font.Bold = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Bold Italic")
                                {
                                    if (Heading5.Font.Bold != true || Heading5.Font.Italic != true)
                                    {
                                        Heading5.Font.Bold = true;
                                        Heading5.Font.Italic = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Regular")
                                {
                                    if (Heading5.Font.Bold == true || Heading5.Font.Italic == true)
                                    {
                                        Heading5.Font.Bold = false;
                                        Heading5.Font.Italic = false;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 Font Style is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Font Size" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.Font.Size != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading5.Font.Size = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Font Size is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Left Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.ParagraphFormat.LeftIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading5.ParagraphFormat.LeftIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Left Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Right Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.ParagraphFormat.RightIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading5.ParagraphFormat.RightIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Right Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Hanging Indent" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.ParagraphFormat.FirstLineIndent != Convert.ToDouble(chLst[k].Check_Parameter) * 72)
                                {
                                    Heading5.ParagraphFormat.FirstLineIndent = Convert.ToDouble(chLst[k].Check_Parameter) * 72;
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Hanging Indent is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing Before" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.ParagraphFormat.SpaceBefore != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading5.ParagraphFormat.SpaceBefore = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Spacing Before is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Spacing After" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.ParagraphFormat.SpaceAfter != Convert.ToDouble(chLst[k].Check_Parameter))
                                {
                                    Heading5.ParagraphFormat.SpaceAfter = Convert.ToDouble(chLst[k].Check_Parameter);
                                    chLst[k].Is_Fixed = 1;
                                    chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                    //chLst[k].Comments = "Heading 5 style Spacing After is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Outline Level" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "Level 1")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level1)
                                    {
                                        Heading5.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 2")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level2)
                                    {
                                        Heading5.ParagraphFormat.OutlineLevel = OutlineLevel.Level2;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 3")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level3)
                                    {
                                        Heading5.ParagraphFormat.OutlineLevel = OutlineLevel.Level3;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 4")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level4)
                                    {
                                        Heading5.ParagraphFormat.OutlineLevel = OutlineLevel.Level4;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Level 5")
                                {
                                    if (Heading5.ParagraphFormat.OutlineLevel != OutlineLevel.Level5)
                                    {
                                        Heading5.ParagraphFormat.OutlineLevel = OutlineLevel.Level5;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Outline Level is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            if (chLst[k].Check_Name == "Captilization" && chLst[k].Check_Type == 1)
                            {
                                if (chLst[k].Check_Parameter == "All Caps")
                                {
                                    if (Heading5.Font.AllCaps != true)
                                    {
                                        Heading5.Font.AllCaps = true;
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Font is in" + chLst[k].Check_Parameter;
                                    }
                                }
                                else if (chLst[k].Check_Parameter == "Title Case")
                                {
                                    Heading5.Font.AllCaps = false;
                                    bool FIxflag = false;
                                    List<Paragraph> heading1Paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Cast<Paragraph>().Where(p => p.ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading5).ToList();
                                    foreach (Paragraph pr in heading1Paragraphs)
                                    {
                                        flag = true;
                                        string prtext = pr.Range.Text.Trim();
                                        prtext = prtext.ToLower();
                                        prtext = textInfo.ToTitleCase(prtext);
                                        if (pr.ToString() != prtext && prtext != null && prtext != "")
                                        {
                                            prtext = prtext.ToLower();
                                            prtext = textInfo.ToTitleCase(prtext);
                                            pr.Range.Replace(pr.Range.Text.Trim(), prtext, new FindReplaceOptions());
                                            FIxflag = true;
                                        }
                                    }
                                    if (FIxflag)
                                    {
                                        chLst[k].Is_Fixed = 1;
                                        chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                    }
                                    else
                                    {
                                        chLst[k].QC_Result = "Passed";
                                        //chLst[k].Comments = "Heading 5 style Font is in " + chLst[k].Check_Parameter;
                                    }
                                }
                            }
                            //Fix not yet completely implemented - for fixing there is no set property only get property we have
                            if (chLst[k].Check_Name == "Left Tab Position" && chLst[k].Check_Type == 1)
                            {
                                flag = false;
                                TabStopCollection kk = Heading5.ParagraphFormat.TabStops;
                                if (kk.Count > 0)
                                {
                                    for (int j = 0; j < kk.Count; j++)
                                    {
                                        if (kk[j].Alignment == TabAlignment.Left)
                                        {
                                            if (kk[j].Position != Convert.ToDouble(chLst[k].Check_Parameter) * 12)
                                            {
                                                flag = true;
                                            }
                                        }
                                    }
                                }
                                if (flag == true)
                                {
                                    allsubchecks = true;
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = " Heading 5 style Left Tab Postion is not in \"" + chLst[k].Check_Parameter + "\"";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "passed";
                                    //chLst[k].Comments = " Heading 5 style Left Tab Postion is in " + chLst[k].Check_Parameter;
                                }
                            }
                            if (chLst[k].Check_Name == "Numbered Item Style" && chLst[k].Check_Type == 1)
                            {
                                if (Heading5.ListFormat.ListLevel != null)
                                {
                                    if (chLst[k].Check_Parameter == "Arabic")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.Arabic)
                                        {
                                            //Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.Arabic;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberArabicDot);
                                            Heading5.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseLetter")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseLetter)
                                        {
                                            //Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseLetterDot);
                                            Heading5.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "LowercaseRoman")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.LowercaseRoman)
                                        {
                                            //Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.LowercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberLowercaseRomanDot);
                                            Heading5.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "Number")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.Number)
                                        {
                                            Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.Number;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "NumberInCircle")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.NumberInCircle)
                                        {
                                            Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.NumberInCircle;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseLetter")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseLetter)
                                        {
                                            //Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseLetter;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseLetterDot);
                                            Heading5.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "UppercaseRoman")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.UppercaseRoman)
                                        {
                                            //Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.UppercaseRoman;
                                            List numberedList = doc.Lists.Add(ListTemplate.NumberUppercaseRomanDot);
                                            Heading5.ListFormat.List = numberedList;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                    else if (chLst[k].Check_Parameter == "None")
                                    {
                                        if (Heading5.ListFormat.ListLevel.NumberStyle != NumberStyle.None)
                                        {
                                            Heading5.ListFormat.ListLevel.NumberStyle = NumberStyle.None;
                                            chLst[k].Is_Fixed = 1;
                                            chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                        }
                                        else
                                        {
                                            chLst[k].QC_Result = "Passed";
                                            //chLst[k].Comments = "Heading 5 Numbered Item Style is in " + chLst[k].Check_Parameter;
                                        }
                                    }
                                } 
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

       
        // code for Is all template highlighting removed? check        
        public void CheckIsAllTemplateHighlitRemove(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            try
            {
                rObj.QC_Result = string.Empty;
                rObj.Comments = string.Empty;
                string New_ColorCheck_Parameter = string.Empty;
                bool allSubChkFlag = false;
                string fontcolorcn = string.Empty;
                string fontcolorcp = string.Empty;
                Int64 fontcolorchktype = 0;
                Int64 fontstyleboldchktype = 0;
                List<int> lst2 = new List<int>();
                List<int> lst = new List<int>();
                List<int> lstfx = new List<int>();
                List<int> lstf = new List<int>();

                rObj.CHECK_START_TIME = DateTime.Now;
                //doc = new Document(rObj.DestFilePath);
                LayoutCollector layout = new LayoutCollector(doc);
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        if (chLst[k].Check_Name == "Remove highlight")
                        {
                            NodeCollection Paragraph = doc.GetChildNodes(NodeType.Paragraph, true);
                            fontcolorcp = chLst[k].Check_Parameter.ToLower();
                            if (fontcolorcp != "")
                            {
                                if (fontcolorcp == "#000000")
                                    New_ColorCheck_Parameter = "Black";
                                else
                                    New_ColorCheck_Parameter = "ff" + fontcolorcp.Substring(1);

                            }
                            foreach (Paragraph pr in Paragraph)
                            {
                                foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                {
                                    if (run.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        fontcolorchktype = chLst[k].Check_Type;
                                        if (layout.GetStartPageIndex(run) != 0)
                                            lst.Add(layout.GetStartPageIndex(run));
                                        allSubChkFlag = true;                                       
                                    }                                
                                }
                            }
                            foreach (Paragraph pr1 in Paragraph.OfType<Paragraph>().Where(p => p.ListFormat.IsListItem))
                            {
                                if (pr1.ListLabel != null && pr1.ListLabel.LabelString != "")
                                {
                                    if (pr1.ListLabel.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        fontcolorchktype = chLst[k].Check_Type;
                                        if (layout.GetStartPageIndex(pr1) != 0)
                                            lst.Add(layout.GetStartPageIndex(pr1));
                                        allSubChkFlag = true;
                                    }

                                }

                            }
                            if (lst.Count>0)
                            {   
                                lstfx = lst.Distinct().ToList();
                                lstfx.Sort();
                                rObj.CommentsWOPageNum = "";
                                string Pagenumber = string.Join(", ", lstfx.ToArray());
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Comments = "Template highlighting exists with color \"" + chLst[k].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[k].CommentsWOPageNum = "Template highlighting is existing with color \"" + chLst[k].Check_Parameter + "\"";                              
                                chLst[k].PageNumbersLst = lstfx;
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                                //chLst[k].Comments = "There is no template highlighting with color '" + chLst[k].Check_Parameter + "'";
                            }

                        }
                        if (chLst[k].Check_Name == "Remove highlight text")
                        {
                            NodeCollection Paragraph = doc.GetChildNodes(NodeType.Paragraph, true);
                            fontcolorcp = chLst[k].Check_Parameter.ToLower();
                            if (fontcolorcp != "")
                            {
                                if (fontcolorcp == "#000000")
                                    New_ColorCheck_Parameter = "Black";
                                else
                                    New_ColorCheck_Parameter = "ff" + fontcolorcp.Substring(1);

                            }
                            foreach (Paragraph pr in Paragraph)
                            {
                                foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                {
                                    if (run.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        fontcolorchktype = chLst[k].Check_Type;
                                        if (layout.GetStartPageIndex(run) != 0)
                                            lst2.Add(layout.GetStartPageIndex(run));
                                        allSubChkFlag = true;                                        
                                    }                                   

                                }
                            }
                            foreach (Paragraph pr1 in Paragraph.OfType<Paragraph>().Where(p => p.ListFormat.IsListItem))
                            {
                                if (pr1.ListLabel != null && pr1.ListLabel.LabelString != "")
                                {
                                    if (pr1.ListLabel.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        fontcolorchktype = chLst[k].Check_Type;
                                        if (layout.GetStartPageIndex(pr1) != 0)
                                            lst2.Add(layout.GetStartPageIndex(pr1));
                                        allSubChkFlag = true;
                                    }

                                }

                            }
                            if (lst2.Count > 0)
                            {
                                lstfx = lst2.Distinct().ToList();
                                lstfx.Sort();
                                rObj.CommentsWOPageNum = "";
                                string Pagenumber = string.Join(", ", lstfx.ToArray());
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Comments = "Template highlighting exists with color \"" + chLst[k].Check_Parameter + "\" in: " + Pagenumber;
                                chLst[k].CommentsWOPageNum = "Template highlighting exists with color \"" + chLst[k].Check_Parameter + "\"";
                                chLst[k].PageNumbersLst = lstfx;
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                                //chLst[k].Comments = "There is no template highlighting text with color '" + chLst[k].Check_Parameter + "'";
                            }
                        }
                    }
                  // lst2 = lst.Distinct().ToList();
                    if (allSubChkFlag == true && rObj.Job_Type != "QC") // if asked about && lst.Count > 0 
                    {
                                                  
                       rObj.QC_Result = "Failed";
                    }                    
                    if (fontcolorchktype == 1 || fontstyleboldchktype == 1)
                    {
                        rObj.Check_Type = 1;
                    }
                    else
                    {
                        rObj.Check_Type = 0;
                    }
                    rObj.CHECK_END_TIME = DateTime.Now;
                }
                    
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        // code for Is all template highlighting removed? fix
        public void FixIsAllTemplateHighlitRemove (RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            try
            {
                
                string New_ColorCheck_Parameter = string.Empty;                
                string fontcolorcn = string.Empty;
                string fontcolorcp = string.Empty;                
                List<int> lst2 = new List<int>();
                List<int> lst = new List<int>();
                List<int> lstfx = new List<int>();
                List<int> lstf = new List<int>();
                bool IsFixed = false;                
                rObj.QC_Result = string.Empty;
                rObj.FIX_START_TIME = DateTime.Now;                
                LayoutCollector layout = new LayoutCollector(doc);
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }                
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        if (chLst[k].Check_Name == "Remove highlight")
                        {
                            NodeCollection Paragraph = doc.GetChildNodes(NodeType.Paragraph, true);                           
                            fontcolorcp = chLst[k].Check_Parameter.ToLower();
                            if (fontcolorcp != "")
                            {
                                    New_ColorCheck_Parameter = "ff" + fontcolorcp.Substring(1);
                            }
                            
                            foreach (Paragraph pr in Paragraph)
                            {
                                foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                {
                                    if (run.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        if (run.Range.Text != "")
                                        {
                                            run.Font.ClearFormatting();
                                            IsFixed = true;
                                        }
                                    }

                                }
                            }
                            foreach (Paragraph pr1 in Paragraph.OfType<Paragraph>().Where(p => p.ListFormat.IsListItem))
                            {
                                if (pr1.ListLabel != null && pr1.ListLabel.LabelString != "")
                                {
                                    if (pr1.ListLabel.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        if (pr1.ListLabel.LabelString != "")
                                        {
                                            pr1.ParagraphBreakFont.ClearFormatting();
                                            IsFixed = true;                                           

                                        }
                                    }

                                }

                            }
                            if (IsFixed == true)
                            {
                                chLst[k].Is_Fixed = 1;
                                chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                                
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                                //chLst[k].Comments = "There is no template highlighting text with color '" + chLst[k].Check_Parameter + "'";
                            }
                        }
                        if (chLst[k].Check_Name == "Remove highlight text")
                        {
                            IsFixed = false;
                            NodeCollection Paragraph = doc.GetChildNodes(NodeType.Paragraph, true);
                            fontcolorcp = chLst[k].Check_Parameter.ToLower();
                            if (fontcolorcp != "")
                            {                                
                                    New_ColorCheck_Parameter = "ff" + fontcolorcp.Substring(1);
                            }
                            foreach (Paragraph pr in Paragraph)
                            {
                                foreach (Run run in pr.GetChildNodes(NodeType.Run, true))
                                {
                                    if (run.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        if (run.Range.Text != "")
                                        {
                                            run.Remove();                                            
                                            IsFixed = true;
                                        }
                                    }                                    

                                }
                            }
                            foreach (Paragraph pr1 in Paragraph.OfType<Paragraph>().Where(p => p.ListFormat.IsListItem))
                            {
                                if (pr1.ListLabel != null && pr1.ListLabel.LabelString != "")
                                {
                                    if (pr1.ListLabel.Font.HighlightColor.Name.ToLower() == New_ColorCheck_Parameter)
                                    {
                                        if (pr1.ListLabel.LabelString != "")
                                        {
                                            pr1.ListFormat.RemoveNumbers();
                                            IsFixed = true;                                            

                                        }
                                    }

                                }

                            }
                            if (IsFixed == true)
                            {
                                chLst[k].Is_Fixed = 1;
                                chLst[k].Comments = chLst[k].Comments + ". Fixed";
                                chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                                //chLst[k].Comments = "There is no template highlighting text with color '" + chLst[k].Check_Parameter + "'";
                            }
                        }
                    }
             
                    rObj.FIX_END_TIME = DateTime.Now;
                }
                    
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public List<string> GetHardSpaceKeyWordsListData(Int64 Created_ID)
        {
            List<string> HardSpaceKeyWordsList = null;
            try
            {
                Connection conn = new Connection();
                string[] m_ConnDetails = getConnectionInfo(Created_ID).Split('|');
                m_DummyConn = m_DummyConn.Replace("USERNAME", m_ConnDetails[0].ToString());
                m_DummyConn = m_DummyConn.Replace("PASSWORD", m_ConnDetails[1].ToString());
                conn.connectionstring = m_DummyConn;
                DataSet ds = new DataSet();
                ds = conn.GetDataSet("Select LIBRARY_VALUE from LIBRARY where LIBRARY_NAME = 'QC_NoSpace_Keywords'", CommandType.Text, ConnectionState.Open);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    HardSpaceKeyWordsList = new List<string>();
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        HardSpaceKeyWordsList.Add(ds.Tables[0].Rows[i]["LIBRARY_VALUE"].ToString());
                    }
                }
                return HardSpaceKeyWordsList;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error(ex);
                return HardSpaceKeyWordsList;
            }
        }
        /// <summary>
        /// Remove Temporary LOT and LOF 
        /// </summary>
        /// <param name="rObj"></param>
        /// <param name="doc"></param>
        public void RemoveTemporaryLOTandLOFcheck(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            bool flag = false;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            List<Node> FieldseqTable = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
            List<Node> FieldseqFigure = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE")).ToList();
            rObj.CHECK_START_TIME = DateTime.Now;
            try
            {
                foreach (Section sct in doc.Sections)
                {
                    doc.UpdateFields();
                    if (FieldseqFigure.Count == 0)
                    {
                        foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                        {
                            if (para.Range.Text.Contains("No table of figures entries found."))
                            {
                                if (para.PreviousSibling != null && para.NodeType == NodeType.Paragraph)
                                {
                                    Paragraph para5 = (Paragraph)para.PreviousSibling;
                                    if (para5.Range.Text.ToUpper().Contains("LIST OF FIGURES"))
                                    {
                                        flag = true;
                                        lst.Add(layout.GetStartPageIndex(para));
                                    }
                                }
                            }
                        }
                    }
                    if (FieldseqTable.Count == 0)
                    {
                        foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                        {
                            if (para.Range.Text.Contains("No table of figures entries found."))
                            {
                                if (para.PreviousSibling != null && para.NodeType == NodeType.Paragraph)
                                {
                                    Paragraph para6 = (Paragraph)para.PreviousSibling;
                                    if (para6.Range.Text.ToUpper().Contains("LIST OF TABLES"))
                                    {
                                        flag = true;
                                        lst.Add(layout.GetStartPageIndex(para));
                                    }
                                }
                            }
                        }
                    }
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))).ToList();
                    if (paragraphs.Count == 0)
                    {
                        if (paragraphs.Count == 0)
                        {
                            foreach (Paragraph para in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                            {
                                if (para.Range.Text.Contains("No table of figures entries found."))
                                {
                                    if (para.PreviousSibling != null && para.NodeType == NodeType.Paragraph)
                                    {
                                        Paragraph para3 = (Paragraph)para.PreviousSibling;
                                        if (para3.Range.Text.Contains("list of APPENDICES"))
                                        {
                                            flag = true;
                                            lst.Add(layout.GetStartPageIndex(para));
                                        }
                                    } 
                                }
                            }
                        }
                    }
                    NodeCollection paragraphs1 = sct.Body.GetChildNodes(NodeType.Paragraph, true);
                    List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading2 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading3 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading4 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading5 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading6 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading7 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading8 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading9).ToList();
                    if (HeadingPara.Count() == 0)
                    {
                        foreach (Paragraph para in paragraphs1)
                        {
                            if (para.Range.Text.ToUpper().Contains("TABLE OF CONTENTS"))
                            {
                                foreach (Run ru in para.GetChildNodes(NodeType.Run, true))
                                {
                                    if (ru.Font.Bold == true)
                                    {
                                        flag = true;
                                        lst.Add(layout.GetStartPageIndex(para));
                                    }
                                }

                            }
                        }
                    }
                    doc.UpdateFields();
                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (pr.Range.Text.Contains("No table of contents entries found."))
                        {
                            flag = true;
                            lst.Add(layout.GetStartPageIndex(pr));
                        }
                    }
                }
                if (flag == false)
                {
                    rObj.QC_Result = "Passed";
                }
                else
                {
                    if (lst.Count > 0)
                    {
                        List<int> lst1 = lst.Distinct().ToList();
                        lst1.Sort();
                        rObj.Is_Fixed = 1;
                        string Pagenumber = string.Join(", ", lst1.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Temporary LOF,TOC,LOa and LOT in: " + Pagenumber;
                        rObj.CommentsWOPageNum = "Temporary LOF and LOT exist";
                        rObj.PageNumbersLst = lst1;
                    }
                    else
                    {
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Figures Exceed page margins";
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void RemoveTemporaryLOTandLOFFix(RegOpsQC rObj, Document doc)
        {
            bool flag = false;
            List<Node> FieldseqTable = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ TABLE")).ToList();
            List<Node> FieldseqFigure = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && ((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ FIGURE")).ToList();
            try
            {
                foreach (Section sct in doc.Sections)
                {
                    doc.UpdateFields();
                    if (FieldseqFigure.Count == 0)
                    {
                        foreach (Paragraph para in sct.GetChildNodes(NodeType.Paragraph, true))
                        {
                            if (para.Range.Text.Contains("No table of figures entries found."))
                            {
                                if (para.PreviousSibling != null && para.NodeType ==  NodeType.Paragraph)
                                {
                                    Paragraph para5 = (Paragraph)para.PreviousSibling;
                                    if (para5.Range.Text.ToUpper().Contains("LIST OF FIGURES"))
                                    {
                                        flag = true;
                                        para.Remove();
                                        para5.Remove();
                                    }
                                }
                            }
                        }
                    }
                    if (FieldseqTable.Count == 0)
                    {
                        foreach (Paragraph para in sct.GetChildNodes(NodeType.Paragraph, true))
                        {
                            if (para.Range.Text.Contains("No table of figures entries found."))
                            {
                                if (para.PreviousSibling != null && para.NodeType == NodeType.Paragraph)
                                {
                                    Paragraph para6 = (Paragraph)para.PreviousSibling;
                                    if (para6.Range.Text.ToUpper().Contains("LIST OF TABLES"))
                                    {
                                        flag = true;
                                        para.Remove();
                                        para6.Remove();
                                    }
                                } 
                            }
                        }
                    }
                    List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))).ToList();
                    if (paragraphs.Count == 0)
                    {
                        foreach (Paragraph para4 in sct.Body.GetChildNodes(NodeType.Paragraph, true))
                        {
                            if (para4.Range.Text.Contains("No table of figures entries found."))
                            {
                                if (para4.PreviousSibling != null && para4.NodeType == NodeType.Paragraph)
                                {
                                    Paragraph para3 = (Paragraph)para4.PreviousSibling;
                                    if (para3.Range.Text.Contains("list of APPENDICES"))
                                    {
                                        flag = true;
                                        para3.Remove();
                                        para4.Remove();
                                    }
                                }
                            }
                        }
                    }
                    NodeCollection paragraphs1 = sct.Body.GetChildNodes(NodeType.Paragraph, true);
                    List<Node> HeadingPara = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading1 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading2 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading3 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading4 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading5 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading6 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading7 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading8 || ((Paragraph)x).ParagraphFormat.StyleIdentifier == StyleIdentifier.Heading9).ToList();
                    if (HeadingPara.Count() == 0)
                    {
                        foreach (Paragraph pr in paragraphs1)
                        {
                            if (pr.Range.Text.ToUpper().Contains("TABLE OF CONTENTS"))
                            {
                                foreach (Run ru in pr.GetChildNodes(NodeType.Run,true))
                                {
                                    if (ru.Font.Bold == true)
                                    {
                                        flag = true;
                                        ru.Remove();
                                    }
                                }
                            }
                        }
                    }
                    doc.UpdateFields();
                    foreach (Paragraph pr in doc.GetChildNodes(NodeType.Paragraph, true))
                    {
                        if (pr.Range.Text.Contains("No table of contents entries found."))
                        {
                            flag = true;
                            pr.Remove();
                        }
                    }
                }
                if (flag == true)
                {
                    rObj.Comments += ". Fixed";
                    rObj.CommentsWOPageNum += ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
        public void CheckArthamatixOperation(RegOpsQC rObj, Document doc)
        {
            bool flag = false;
            string Pagenumber = string.Empty;
            bool MatchCase = false;
            List<int> lst = new List<int>();
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                //Regex Arthamatics = new Regex(@"[+-/*](?=\s)\s|\s{1}[+-/*]((?=[0-9a-zA-z])|\s)");
                Regex Arthamatics = new Regex(@"\s[+-/*]\s");
                foreach (Section section in doc.Sections)
                {
                    foreach (Paragraph para in section.GetChildNodes(NodeType.Paragraph, true))
                    {
                        MatchCollection matchs = Arthamatics.Matches(para.Range.Text);
                        foreach (Match match in matchs)
                        {
                            flag = true;
                            if (match.Value.StartsWith(ControlChar.SpaceChar + "+" + ControlChar.SpaceChar) || match.Value.StartsWith(ControlChar.SpaceChar + "-" + ControlChar.SpaceChar) || match.Value.StartsWith(ControlChar.SpaceChar + "/" + ControlChar.SpaceChar) || match.Value.StartsWith(ControlChar.SpaceChar + "*" + ControlChar.SpaceChar))
                            {
                                    lst.Add(layout.GetStartPageIndex(para));

                                MatchCase = true;
                            }
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (MatchCase)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Arthamatix Operation are in the document and character space in : " + Pagenumber;
                    rObj.CommentsWOPageNum = "Arthamatix Operation are in the document and character space";
                    rObj.PageNumbersLst = lst2;

                }
                else if (flag)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No arthamatic equation in the document";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixArthamatixOperation(RegOpsQC rObj, Document doc)
        {
            bool MatchCase = false;
            List<int> lst = new List<int>();
            try
            {
                //Regex Arthamatics = new Regex(@"[+-/*](?=\s)\s|\s{1}[+-/*]((?=[0-9a-zA-z])|\s)");
                Regex Arthamatics = new Regex(@"\s[+-/*]\s");
                foreach (Section section in doc.Sections)
                {
                    foreach (Paragraph para in section.GetChildNodes(NodeType.Paragraph, true))
                    {
                        MatchCollection matchs = Arthamatics.Matches(para.Range.Text);
                        foreach (Match match in matchs)
                        {
                            if (match.Value.StartsWith(ControlChar.SpaceChar + "+" + ControlChar.SpaceChar) || match.Value.StartsWith(ControlChar.SpaceChar + "-" + ControlChar.SpaceChar) || match.Value.StartsWith(ControlChar.SpaceChar + "/" + ControlChar.SpaceChar) || match.Value.StartsWith(ControlChar.SpaceChar + "*" + ControlChar.SpaceChar))
                            {
                                para.Range.Replace(ControlChar.SpaceChar + "+" + ControlChar.SpaceChar, ControlChar.NonBreakingSpaceChar + "+" + ControlChar.NonBreakingSpaceChar);
                                para.Range.Replace(ControlChar.SpaceChar + "-" + ControlChar.SpaceChar, ControlChar.NonBreakingSpaceChar + "-" + ControlChar.NonBreakingSpaceChar);
                                para.Range.Replace(ControlChar.SpaceChar + "/" + ControlChar.SpaceChar, ControlChar.NonBreakingSpaceChar + "/" + ControlChar.NonBreakingSpaceChar);
                                para.Range.Replace(ControlChar.SpaceChar + "*" + ControlChar.SpaceChar, ControlChar.NonBreakingSpaceChar + "*" + ControlChar.NonBreakingSpaceChar);
                                MatchCase = true;
                            }

                        }
                    }
                }
                if (MatchCase == true)
                {
                    rObj.Is_Fixed = 1;
                    rObj.QC_Result = "Failed";
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void CheckDateFields(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            List<int> lst = new List<int>();
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool Datefield = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                foreach (Section sec in doc.GetChildNodes(NodeType.Section, true))
                {
                    foreach (Paragraph para in sec.GetChildNodes(NodeType.Paragraph, true))
                    {
                        NodeCollection fieldStarts = para.GetChildNodes(NodeType.FieldStart, true);
                        foreach (FieldStart fieldStart in fieldStarts)
                        {
                            if (fieldStart.FieldType == FieldType.FieldDate)
                            {
                                if (layout.GetStartPageIndex(para) != 0)
                                    lst.Add(layout.GetStartPageIndex(para));

                                Datefield = true;
                            }
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (Datefield)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Date field are in the document in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "Date field are in the document";
                    rObj.PageNumbersLst = lst2;

                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void CheckAppendixStyleAndFields(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            Style Captionstyles = null;
            bool Fixcaption = false;
            bool Fixfields = false;
            bool Flag = false;
            bool Flag1 = false;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            List<RegOpsQC> chLst1 = new List<RegOpsQC>();
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                for (int k = 0; k < chLst.Count; k++)
                {
                    if (chLst[k].Check_Name == "Missing Appendix caption style")
                    {
                        try
                        {
                            string Pagenumber = string.Empty;
                            StyleCollection stylist = doc.Styles;
                            Captionstyles = stylist.Where(x => x.Name == chLst[k].Check_Parameter).FirstOrDefault();
                            if (Captionstyles == null || Captionstyles.ParagraphFormat == null)
                            {
                                rObj.QC_Result = "Passed";
                                rObj.Comments = "Given style is not in the document";
                                Flag = true;
                            }
                            else
                            {
                                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))).ToList();
                                if (paragraphs.Count > 0)
                                {
                                    Flag = true;
                                    foreach (Paragraph paragraph in paragraphs)
                                    {
                                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ APPENDIX"))).ToList();
                                        if (Fieldseq.Count == 0 && ((paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar))))
                                        {
                                            if (layout.GetStartPageIndex(paragraph) != 0)
                                            {
                                                if (paragraph.NextSibling.NodeType == NodeType.Paragraph && paragraph.ParagraphFormat.StyleIdentifier.ToString() != chLst[k].Check_Parameter)
                                                {
                                                    Fixcaption = true;
                                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                                }
                                            }
                                        }
                                    }
                                    List<Node> SeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    foreach (FieldStart SeqFieldStart in SeqFieldStarts)
                                    {
                                        if (SeqFieldStart.ParentParagraph.NodeType == NodeType.Paragraph)
                                        {
                                            Paragraph pr = (Paragraph)SeqFieldStart.ParentParagraph;
                                            List<Node> Fieldseq = pr.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ APPENDIX"))).ToList();
                                            if (Fieldseq.Count > 0 && pr.ParagraphFormat.StyleIdentifier.ToString() != chLst[k].Check_Parameter && ((pr.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar))))
                                            {
                                                Fixcaption = true;
                                                    lst.Add(layout.GetStartPageIndex(pr));
                                            }
                                        }
                                    }
                                }
                            }
                            List<int> lst2 = lst.Distinct().ToList();
                            if (Fixcaption)
                            {
                                lst2.Sort();
                                Pagenumber = string.Join(", ", lst2.ToArray());
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Comments = "Appendix style is not \"" + chLst[k].Check_Parameter + "\" in :" + Pagenumber;
                                chLst[k].CommentsWOPageNum = "Appendix style is not \"" + chLst[k].Check_Parameter + "\"";
                                chLst[k].PageNumbersLst = lst2;
                            }
                            else if (!Flag)
                            {
                                chLst[k].QC_Result = "Passed";
                                chLst[k].Comments = "No Appendix paragraph in the document";
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                            }
                        }
                        catch (Exception ex)
                        {
                            chLst[k].QC_Result = "Error";
                            chLst[k].Comments = "Technical error: " + ex.Message;
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                        }

                    }
                    if (chLst[k].Check_Name == "Missing Appendix sequence number")
                    {
                        try
                        {
                            string Pagenumber = string.Empty;
                            FindReplaceOptions options = new FindReplaceOptions();
                            options.MatchCase = true;
                            options.FindWholeWordsOnly = false;
                            options.Direction = FindReplaceDirection.Forward;
                            List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar))).ToList();
                            if (paragraphs.Count > 0)
                            {
                                Flag1 = true;
                                foreach (Paragraph paragraph in paragraphs)
                                {
                                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ APPENDIX"))).ToList();
                                    Paragraph pr = (Paragraph)paragraph;
                                    if (Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))
                                    {
                                        if (paragraph.ParagraphFormat.Style.Font.Bold == true && (paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))
                                        {
                                            Fixfields = true;
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                }
                            }
                            List<int> lst2 = lst.Distinct().ToList();
                            if (Fixfields)
                            {
                                lst2.Sort();
                                Pagenumber = string.Join(", ", lst2.ToArray());
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Comments = "Appendix seq number are missing in :" + Pagenumber;
                                chLst[k].CommentsWOPageNum = "Appendix seq number are missing ";
                                chLst[k].PageNumbersLst = lst2;
                            }
                            else if (!Flag1)
                            {
                                chLst[k].QC_Result = "Passed";
                                chLst[k].Comments = "No Appendix paragraph in the document";
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                            }
                        }
                        catch (Exception ex)
                        {
                            chLst[k].QC_Result = "Error";
                            chLst[k].Comments = "Technical error: " + ex.Message;
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                        }
                    }
                }
                if (Fixcaption || Fixfields)
                {
                    rObj.QC_Result = "Failed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixAppendixStyleAndFields(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool Fixfields = false;
            string pagenumber = string.Empty;
            Style Captionstyles = null;
            bool Fixcaption = false;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            List<RegOpsQC> chLst1 = new List<RegOpsQC>();
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                for (int k = 0; k < chLst.Count; k++)
                {
                    if (chLst[k].Check_Name == "Missing Appendix caption style")
                    {
                        try
                        {
                            StyleCollection stylist = doc.Styles;
                            Captionstyles = stylist.Where(x => x.Name == chLst[k].Check_Parameter).FirstOrDefault();
                            if (Captionstyles == null || Captionstyles.ParagraphFormat == null)
                            {
                                chLst[k].QC_Result = "Passed";
                                chLst[k].Comments = "Given style is not in the document";
                            }
                            else
                            {
                                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))).ToList();
                                if (paragraphs.Count > 0)
                                {
                                    foreach (Paragraph paragraph in paragraphs)
                                    {
                                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ APPENDIX"))).ToList();
                                        if (Fieldseq.Count == 0 && ((paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar))))
                                        {
                                            if (layout.GetStartPageIndex(paragraph) != 0)
                                            {
                                                if (paragraph.NextSibling.NodeType == NodeType.Paragraph && paragraph.ParagraphFormat.StyleIdentifier.ToString() != chLst[k].Check_Parameter)
                                                {
                                                    Paragraph pr = paragraph;
                                                    pr.ParagraphFormat.Style = Captionstyles;
                                                    Fixcaption = true;
                                                }
                                            }
                                        }
                                    }
                                    List<Node> SeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    foreach (FieldStart SeqFieldStart in SeqFieldStarts)
                                    {
                                        if (SeqFieldStart.ParentParagraph.NodeType == NodeType.Paragraph)
                                        {
                                            Paragraph pr = (Paragraph)SeqFieldStart.ParentParagraph;
                                            List<Node> Fieldseq = pr.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ APPENDIX"))).ToList();
                                            if (Fieldseq.Count > 0 && pr.ParagraphFormat.StyleIdentifier.ToString() != rObj.Check_Parameter && ((pr.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar))))
                                            {
                                                pr.ParagraphFormat.Style = Captionstyles;
                                                Fixcaption = true;
                                            }
                                        }
                                    }
                                }
                            }
                            if (Fixcaption)
                            {
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Is_Fixed = 1;
                                chLst[k].Comments = chLst[k].Comments + ". Fixed ";
                                chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                            }
                            else
                            {
                                rObj.QC_Result = "Passed";
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            rObj.Job_Status = "Error";
                            rObj.QC_Result = "Error";
                            rObj.Comments = "Technical error: " + ex.Message;
                        }

                    }
                    if (chLst[k].Check_Name == "Missing Appendix sequence number")
                    {
                        try
                        {
                            FindReplaceOptions options = new FindReplaceOptions();
                            options.MatchCase = true;
                            options.FindWholeWordsOnly = false;
                            options.Direction = FindReplaceDirection.Forward;
                            List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar))).ToList();
                            if (paragraphs.Count > 0)
                            {
                                foreach (Paragraph paragraph in paragraphs)
                                {
                                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ APPENDIX"))).ToList();
                                    Paragraph pr = (Paragraph)paragraph;
                                    if (Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))
                                    {
                                        if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar)))
                                        {
                                            string my_StringNm = string.Empty;
                                            string ReplceStr = paragraph.GetText().TrimStart();
                                            string a = paragraph.GetText().TrimStart();
                                            my_StringNm = a.Substring(0, 9);
                                            if (my_StringNm.ToUpper().StartsWith("APPENDIX" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("APPENDIX" + ControlChar.NonBreakingSpaceChar))
                                            {
                                                Fixfields = AddAppendixFieldcode(a, pr, my_StringNm, options, chLst1, doc);
                                            }
                                        }
                                    }
                                }
                            }
                            if (Fixfields)
                            {
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Is_Fixed = 1;
                                chLst[k].Comments = chLst[k].Comments + ". Fixed ";
                                chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            rObj.Job_Status = "Error";
                            rObj.QC_Result = "Error";
                            rObj.Comments = "Technical error: " + ex.Message;
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public static bool AddAppendixFieldcode(string a, Paragraph pr, string my_StringNm, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixfields = false;
            my_StringNm = a.Substring(0, 9);

            if (my_StringNm.Contains("Appendix" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Appendix" + ControlChar.SpaceChar, "Appendix" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    pr.Range.Replace(my_StringNm, "Appendix" + ControlChar.NonBreakingSpaceChar, options);
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Appendix")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, ".");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Appendix"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Appendix \\* ARABIC", rn, true);
                            Fixfields = true;
                        }
                    }
                    break;
                }
            }
            return Fixfields;
        }

        public void CheckEquationStyleAndFields(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {

            string pagenumber = string.Empty;
            Style Captionstyles = null;
            bool Fixcaption = false;
            bool Fixfields = false;
            bool Flag = false;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            List<RegOpsQC> chLst1 = new List<RegOpsQC>();
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {

                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                for (int k = 0; k < chLst.Count; k++)
                {
                    if (chLst[k].Check_Name == "Missing Equation caption style")
                    {
                        try
                        {
                            string Pagenumber = string.Empty;
                            StyleCollection stylist = doc.Styles;
                            Captionstyles = stylist.Where(x => x.Name == chLst[k].Check_Parameter).FirstOrDefault();
                            if (Captionstyles == null)
                            {
                                rObj.QC_Result = "Passed";
                                rObj.Comments = "Given style is not in the document";
                            }
                            else
                            {
                                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))).ToList();
                                if (paragraphs.Count > 0)
                                {
                                    Flag = true;
                                    foreach (Paragraph paragraph in paragraphs)
                                    {
                                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ EQUATION"))).ToList();
                                        if (Fieldseq.Count == 0 && ((paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar))))
                                        {
                                            if (layout.GetStartPageIndex(paragraph) != 0)
                                            {
                                                if (paragraph.NextSibling.NodeType == NodeType.Paragraph && paragraph.ParagraphFormat.StyleIdentifier.ToString() != chLst[k].Check_Parameter)
                                                {
                                                    Fixcaption = true;
                                                        lst.Add(layout.GetStartPageIndex(paragraph));
                                                }
                                            }
                                        }
                                    }
                                    List<Node> SeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    foreach (FieldStart SeqFieldStart in SeqFieldStarts)
                                    {
                                        if (SeqFieldStart.ParentParagraph.NodeType == NodeType.Paragraph)
                                        {
                                            Paragraph pr = (Paragraph)SeqFieldStart.ParentParagraph;
                                            List<Node> Fieldseq = pr.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ EQUATION"))).ToList();
                                            if (Fieldseq.Count > 0 && pr.ParagraphFormat.StyleIdentifier.ToString() != chLst[k].Check_Parameter && ((pr.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar))))
                                            {
                                                Fixcaption = true;
                                                    lst.Add(layout.GetStartPageIndex(pr));
                                            }
                                        }
                                    }
                                }
                                List<int> lst2 = lst.Distinct().ToList();
                                if (Fixcaption)
                                {
                                    lst2.Sort();
                                    Pagenumber = string.Join(", ", lst2.ToArray());
                                    chLst[k].QC_Result = "Failed";
                                    chLst[k].Comments = "Equation style is not \"" + chLst[k].Check_Parameter + "\" in :" + Pagenumber;
                                    chLst[k].CommentsWOPageNum = "Equation style is not \"" + chLst[k].Check_Parameter + "\"";
                                    chLst[k].PageNumbersLst = lst2;
                                }
                                else if (!Flag)
                                {
                                    chLst[k].QC_Result = "Passed";
                                    chLst[k].Comments = "No equation paragraph in the document";
                                }
                                else
                                {
                                    chLst[k].QC_Result = "Passed";
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            rObj.Job_Status = "Error";
                            rObj.QC_Result = "Error";
                            rObj.Comments = "Technical error: " + ex.Message;
                        }

                    }
                    if (chLst[k].Check_Name == "Missing Equation sequence number")
                    {
                        try
                        {
                            string Pagenumber = string.Empty;
                            FindReplaceOptions options = new FindReplaceOptions();
                            options.MatchCase = true;
                            options.FindWholeWordsOnly = false;
                            options.Direction = FindReplaceDirection.Forward;
                            List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar))).ToList();
                            if (paragraphs.Count > 0)
                            {
                                Flag = true;
                                foreach (Paragraph paragraph in paragraphs)
                                {
                                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ EQUATION"))).ToList();
                                    Paragraph pr = (Paragraph)paragraph;
                                    if (Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))
                                    {
                                        if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))
                                        {
                                            Fixfields = true;
                                                lst.Add(layout.GetStartPageIndex(pr));
                                        }
                                    }
                                }
                            }
                            List<int> lst2 = lst.Distinct().ToList();
                            if (Fixfields)
                            {
                                lst2.Sort();
                                Pagenumber = string.Join(", ", lst2.ToArray());
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Comments = "Equation seq number are missing in :" + Pagenumber;
                                chLst[k].CommentsWOPageNum = "Equation seq number missing ";
                                chLst[k].PageNumbersLst = lst2;
                            }
                            else if (!Flag)
                            {
                                chLst[k].QC_Result = "Passed";
                                chLst[k].Comments = "No equation paragraph in the document";
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            rObj.Job_Status = "Error";
                            rObj.QC_Result = "Error";
                            rObj.Comments = "Technical error: " + ex.Message;
                        }

                    }
                }
                if (Fixcaption || Fixfields)
                {
                    rObj.QC_Result = "Failed";
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixEquationStyleAndFields(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            string pagenumber = string.Empty;
            Style Captionstyles = null;
            bool Fixcaption = false;
            bool Fixfields = false;
            List<int> lst = new List<int>();
            LayoutCollector layout = new LayoutCollector(doc);
            List<RegOpsQC> chLst1 = new List<RegOpsQC>();
            rObj.FIX_START_TIME = DateTime.Now;
            try
            {
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                for (int k = 0; k < chLst.Count; k++)
                {
                    chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                    chLst[k].JID = rObj.JID;
                    chLst[k].Job_ID = rObj.Job_ID;
                    chLst[k].Folder_Name = rObj.Folder_Name;
                    chLst[k].File_Name = rObj.File_Name;
                    chLst[k].Created_ID = rObj.Created_ID;
                }
                for (int k = 0; k < chLst.Count; k++)
                {
                    if (chLst[k].Check_Name == "Missing Equation caption style")
                    {
                        try
                        {
                            StyleCollection stylist = doc.Styles;
                            Captionstyles = stylist.Where(x => x.Name == chLst[k].Check_Parameter).FirstOrDefault();
                            if (Captionstyles == null)
                            {
                                rObj.QC_Result = "Passed";
                                rObj.Comments = "Given style is not in the document";
                            }
                            else
                            {
                                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))).ToList();
                                if (paragraphs.Count > 0)
                                {
                                    foreach (Paragraph paragraph in paragraphs)
                                    {
                                        List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ EQUATION"))).ToList();
                                        if (Fieldseq.Count == 0 && ((paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar))))
                                        {
                                            if (layout.GetStartPageIndex(paragraph) != 0)
                                            {
                                                if (paragraph.NextSibling.NodeType == NodeType.Paragraph && paragraph.ParagraphFormat.StyleIdentifier.ToString() != chLst[k].Check_Parameter)
                                                {
                                                    Paragraph pr = paragraph;
                                                    pr.ParagraphFormat.Style = Captionstyles;
                                                    Fixcaption = true;
                                                }
                                            }
                                        }
                                    }
                                    List<Node> SeqFieldStarts = doc.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence).ToList();
                                    foreach (FieldStart SeqFieldStart in SeqFieldStarts)
                                    {
                                        if (SeqFieldStart.ParentParagraph.NodeType == NodeType.Paragraph)
                                        {
                                            Paragraph pr = (Paragraph)SeqFieldStart.ParentParagraph;
                                            List<Node> Fieldseq = pr.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ EQUATION"))).ToList();
                                            if (Fieldseq.Count > 0 && pr.ParagraphFormat.StyleIdentifier.ToString() != chLst[k].Check_Parameter && ((pr.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || pr.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar))))
                                            {
                                                pr.ParagraphFormat.Style = Captionstyles;
                                                Fixcaption = true;
                                            }
                                        }
                                    }
                                }
                            }
                            if (Fixcaption)
                            {
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Is_Fixed = 1;
                                chLst[k].Comments = chLst[k].Comments + ". Fixed ";
                                chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            rObj.Job_Status = "Error";
                            rObj.QC_Result = "Error";
                            rObj.Comments = "Technical error: " + ex.Message;
                        }
                    }
                    if (chLst[k].Check_Name == "Missing Equation sequence number")
                    {
                        try
                        {
                            FindReplaceOptions options = new FindReplaceOptions();
                            options.MatchCase = true;
                            options.FindWholeWordsOnly = false;
                            options.Direction = FindReplaceDirection.Forward;
                            List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar))).ToList();
                            if (paragraphs.Count > 0)
                            {
                                foreach (Paragraph paragraph in paragraphs)
                                {
                                    List<Node> Fieldseq = paragraph.GetChildNodes(NodeType.FieldStart, true).Where(x => ((FieldStart)x).FieldType == FieldType.FieldSequence && (((FieldStart)x).ParentParagraph.Range.Text.ToUpper().Contains("SEQ EQUATION"))).ToList();
                                    Paragraph pr = (Paragraph)paragraph;
                                    if (Fieldseq.Count == 0 && (paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))
                                    {
                                        if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))
                                        {
                                            string my_StringNm = string.Empty;
                                            string ReplceStr = paragraph.GetText().TrimStart();
                                            string a = paragraph.GetText().TrimStart();
                                            my_StringNm = a.Substring(0, 9);
                                            if (my_StringNm.ToUpper().StartsWith("EQUATION" + ControlChar.SpaceChar) || my_StringNm.ToUpper().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar))
                                            {
                                                Fixfields = AddEuquationFieldcode(a, pr, my_StringNm, options, chLst1, doc);
                                            }
                                        }
                                    }
                                }
                            }
                            if (Fixfields)
                            {
                                chLst[k].QC_Result = "Failed";
                                chLst[k].Is_Fixed = 1;
                                chLst[k].Comments = chLst[k].Comments + ". Fixed ";
                                chLst[k].CommentsWOPageNum = chLst[k].CommentsWOPageNum + ". Fixed";
                            }
                            else
                            {
                                chLst[k].QC_Result = "Passed";
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                            rObj.Job_Status = "Error";
                            rObj.QC_Result = "Error";
                            rObj.Comments = "Technical error: " + ex.Message;
                        }
                    }
                }
                rObj.CHECK_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public static bool AddEuquationFieldcode(string a, Paragraph pr, string my_StringNm, FindReplaceOptions options, List<RegOpsQC> chLst1, Document doc)
        {
            bool Fixfields = false;
            my_StringNm = a.Substring(0, 9);

            if (my_StringNm.Contains("Equation" + ControlChar.SpaceChar))
            {
                pr.Range.Replace("Equation" + ControlChar.SpaceChar, "Equation" + ControlChar.NonBreakingSpaceChar, options);
                a = pr.GetText().TrimStart();
            }
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == ControlChar.SpaceChar || a[i].ToString() == "\t" || a[i].ToString() == "\r")
                {
                    my_StringNm = a.Substring(0, i);
                    pr.Range.Replace(my_StringNm, "Equation" + ControlChar.NonBreakingSpaceChar, options);
                    List<Node> rnslist = pr.GetChildNodes(NodeType.Run, true).Where(x => ((Run)x).Range.Text.Contains("Equation")).ToList();
                    if (rnslist.Count > 0)
                    {
                        Run rn = (Run)rnslist[0];
                        Run newRun = new Run(doc, "");
                        //Remove dot before Table Pfizer Issue 2694
                        if (pr.GetText().StartsWith("\f"))
                            pr.Range.Replace("\f", "");
                        if (pr.Runs.Count > 1)
                            pr.InsertBefore(newRun, pr.Runs[1]);
                        else
                            pr.InsertAfter(newRun, rn);
                        if (rn.Range.Text.Contains("Equation"))
                        {
                            //code to add sequence field code.
                            pr.InsertField("SEQ Equation \\* ARABIC", rn, true);
                            Fixfields = true;
                        }
                    }
                    break;
                }
            }
            return Fixfields;
        }

        public void CheckEquationLeftIndent(RegOpsQC rObj, Document doc)
        {
            bool flag = false;
            bool flag1 = false;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))).ToList();
                if (paragraphs.Count > 0)
                {
                    flag1 = true;
                    foreach (Paragraph paragraph in paragraphs)
                    {
                        if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))
                        {
                            if(paragraph.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph pr = (Paragraph)paragraph.NextSibling;
                                if (pr.ParagraphFormat.LeftIndent != Convert.ToDouble(rObj.Check_Parameter) * 72)
                                {
                                        lst.Add(layout.GetStartPageIndex(pr));
                                    flag = true;
                                }
                            }
                        }
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (flag)
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "left indent position is not in given \"" + rObj.Check_Parameter + "\" in: " + Pagenumber;
                    rObj.CommentsWOPageNum = "left indent position is not in given \"" + rObj.Check_Parameter + "\"";
                    rObj.PageNumbersLst = lst2;
                }
                else if (!flag1)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "No Equation paragraphs in the document";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixEquationLeftIndent(RegOpsQC rObj, Document doc)
        {
            bool flag = false;
            rObj.FIX_START_TIME = DateTime.Now;
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => ((((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))).ToList();
                if (paragraphs.Count > 0)
                {
                    foreach (Paragraph paragraph in paragraphs)
                    {
                        if ((paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.SpaceChar) || paragraph.GetText().ToUpper().TrimStart().StartsWith("EQUATION" + ControlChar.NonBreakingSpaceChar)))
                        {
                            if (paragraph.NextSibling.NodeType == NodeType.Paragraph)
                            {
                                Paragraph pr = (Paragraph)paragraph.NextSibling;
                                if (pr.ParagraphFormat.LeftIndent != Convert.ToDouble(rObj.Check_Parameter) * 72)
                                {
                                    pr.ParagraphFormat.LeftIndent = Convert.ToDouble(rObj.Check_Parameter) * 72;
                                    flag = true;
                                }
                            }
                        }
                    }
                }
                if (flag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.QC_Result = "Failed";
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
                rObj.FIX_END_TIME = DateTime.Now;
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void CrossReferenceCheck(RegOpsQC rObj, Document doc)
        {
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> lst = new List<int>();

                foreach (Section sec in doc.GetChildNodes(NodeType.Section, true))
                {
                    foreach (Field field in sec.Body.Range.Fields)
                    {
                        if (field.Type.Equals(FieldType.FieldRef))
                        {
                            FieldRef fieldRef = (FieldRef)field;
                            //Regex rr = new Regex(@"(Section|Table|Appendix|Figure)(\s|\S)(\d[a-zA-Z0-9_\–.-]+(?!.)|\d+(?!.))", RegexOptions.IgnoreCase);
                            Regex rr = new Regex(@"(Section|Table|Appendix|Figure)(\s|\S)(?(?=[:])[:](?(?=\s)\s))(?(?=[ ])[ ])(\d[a-zA-Z0-9_\–.-]+(?!.)|\d+(?!.))", RegexOptions.IgnoreCase);


                            if (!rr.IsMatch(fieldRef.Result.Trim()))
                            {
                                if (layout.GetStartPageIndex(field.Start) != 0)
                                {
                                    lst.Add(layout.GetStartPageIndex(field.Start));
                                }

                            }

                        }
                    }
                }
                List<int> pages = lst.Distinct<int>().ToList();
                if (pages.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                }
                else
                {
                    string pageNumbers = string.Join(", ", pages.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Cross Reference Failed in:" + pageNumbers;
                    rObj.CommentsWOPageNum = "Required Cross Reference not present";
                    rObj.PageNumbersLst = pages;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        public void AmpersandDetectionCheck(RegOpsQC rObj, Document doc)
        {
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> count = new List<int>();
                foreach (Section sec in doc.GetChildNodes(NodeType.Section, true))
                {
                    foreach (Paragraph para in sec.GetChildNodes(NodeType.Paragraph, true))
                    {
                        Regex rex = new Regex(@"&");
                        MatchCollection m = (rex.Matches(para.Range.Text));
                        if (m.Count > 0)
                        {
                            count.Add(layout.GetStartPageIndex(para));
                        }
                    }
                }
                List<int> pages = count.Distinct<int>().ToList();
                if (pages.Count == 0)
                {
                    rObj.QC_Result = "Passed";
                }
                else
                {
                    string pageNumbers = string.Join(", ", pages.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Ampersand present in:" + pageNumbers;
                    rObj.CommentsWOPageNum = "Ampersand located";
                    rObj.PageNumbersLst = pages;

                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }

        }

        public void CheckCrossReferenceDestinationOnce(RegOpsQC rObj, Document doc)
        {
            string Pagenumber = string.Empty;
            bool Flag = false;
            try
            {
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                List<int> lst = new List<int>();
                List<string> cross = new List<string>();
                //List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "TABLE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.SpaceChar + "FIGURE") || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("SUMMARY" + ControlChar.NonBreakingSpaceChar + "FIGURE"))).ToList();
                List<Node> paragraphs = doc.GetChildNodes(NodeType.Paragraph, true).Where(x => (((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("TABLE" + ControlChar.NonBreakingSpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.SpaceChar) || ((Paragraph)x).GetText().ToUpper().TrimStart().StartsWith("FIGURE" + ControlChar.NonBreakingSpaceChar))).ToList();
                foreach (Paragraph para in paragraphs)
                {
                    bool Flag1 = false;
                    NodeCollection bookmarkends = para.GetChildNodes(NodeType.BookmarkEnd, true);
                    foreach (Node bookmarkend in bookmarkends)
                    {
                        if (bookmarkend.GetType().FullName == "Aspose.Words.BookmarkEnd")
                        {
                            BookmarkEnd ddd = (BookmarkEnd)bookmarkend;
                            cross.Add(ddd.Name);
                            if (Flag1 == true)
                            {
                                break;
                            }
                        }
                        foreach (Field f in doc.Range.Fields)
                        {
                            if (f.Type.Equals(FieldType.FieldRef))
                            {
                                FieldRef fieldRef = (FieldRef)f;
                                if (cross.Contains(fieldRef.BookmarkName))
                                {
                                    Flag1 = true;
                                    cross.Clear();
                                    break;
                                }
                            }
                        }
                    }
                    if (Flag1 == false)
                    {
                        if (layout.GetStartPageIndex(para) != 0)
                            lst.Add(layout.GetStartPageIndex(para));
                        cross.Clear();
                        Flag = true;
                    }
                }
                List<int> lst2 = lst.Distinct().ToList();
                if (!Flag)
                {
                    rObj.QC_Result = "Passed";
                }
                else
                {
                    lst2.Sort();
                    Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "Cross references are not present in : " + Pagenumber;
                    rObj.CommentsWOPageNum = "Cross references are not present ";
                    rObj.PageNumbersLst = lst2;
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void CheckWordRedact(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            List<int> lst = new List<int>();
            string Pagenumber = string.Empty;
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            rObj.FIX_START_TIME = DateTime.Now;
            bool Flag = false;
            bool Flag1 = false;
            bool Flag2 = false;
            try
            {
                int pageNum = 0;
                string GivenData = string.Empty;
                string ReplaceData = string.Empty;
                string[] value = { };
                string[] value1 = { };
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                if (chLst.Count > 0)
                {
                    for (int k = 0; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;
                        for (int z = 0; z < chLst.Count; z++)
                        {
                            if (chLst[z].Check_Name == "Page Number" && chLst[z].Check_Type == 1)
                            {
                                pageNum = Convert.ToInt32(chLst[z].Check_Parameter);
                            }
                            else if (chLst[z].Check_Name == "Reference Text" && chLst[z].Check_Type == 1)
                            {
                                GivenData = chLst[z].Check_Parameter;
                                value = GivenData.Split(',');
                            }
                            else if (chLst[z].Check_Name == "Anonymization Text" && chLst[z].Check_Type == 1)
                            {
                                ReplaceData = chLst[z].Check_Parameter;
                                value1 = ReplaceData.Split(',');
                            }
                        }
                    }
                }
                if (GivenData != "" && ReplaceData != "")
                {
                    Flag2 = true;
                    for (int i = 1; i <= doc.PageCount; i++)
                    {
                        if (i == pageNum && doc.PageCount >= pageNum)
                        {
                            Flag1 = true;
                            FindReplaceOptions options = new FindReplaceOptions();
                            options.Direction = FindReplaceDirection.Forward;
                            for (int n = 0; n < value.Length; n++)
                            {
                                string ii = value[n];
                                Regex regex = new Regex(ii, RegexOptions.IgnoreCase);
                                Regex regex1 = new Regex(regex + "\\s\\w.*?\\s", RegexOptions.IgnoreCase);
                                foreach (Paragraph para in doc.GetChildNodes(NodeType.Paragraph, true))
                                {
                                    if (layout.GetStartPageIndex(para) == pageNum)
                                    {
                                        MatchCollection matchs = regex1.Matches(para.Range.Text);
                                        foreach (Match match in matchs)
                                        {
                                            string name = match.Value;
                                            name = name.Trim();
                                            string[] aa = name.Split(' ');
                                            string final = aa[1];
                                            for (int m = 0; m < value1.Length; m++)
                                            {
                                                string ii1 = value1[m];
                                                if (n == m)
                                                {
                                                    if (layout.GetStartPageIndex(para) != 0)
                                                        lst.Add(layout.GetStartPageIndex(para));
                                                    Flag = true;
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (pageNum == 0)
                    {
                        Flag1 = true;
                        FindReplaceOptions options = new FindReplaceOptions();
                        options.Direction = FindReplaceDirection.Forward;
                        for (int n = 0; n < value.Length; n++)
                        {
                            string ii = value[n];
                            Regex regex = new Regex(ii, RegexOptions.IgnoreCase);
                            Regex regex1 = new Regex(regex + "\\s\\w.*?\\s", RegexOptions.IgnoreCase);
                            foreach (Paragraph para in doc.GetChildNodes(NodeType.Paragraph, true))
                            {
                                MatchCollection matchs = regex1.Matches(para.Range.Text);
                                foreach (Match match in matchs)
                                {
                                    string name = match.Value;
                                    name = name.Trim();
                                    string[] aa = name.Split(' ');
                                    string final = aa[1];
                                    for (int m = 0; m < value1.Length; m++)
                                    {
                                        string ii1 = value1[m];
                                        if (n == m)
                                        {
                                            if (layout.GetStartPageIndex(para) != 0)
                                                lst.Add(layout.GetStartPageIndex(para));
                                            Flag = true;
                                        }

                                    }

                                }
                            }
                        }
                    }
                    List<int> lst2 = lst.Distinct().ToList();
                    if (Flag)
                    {
                        lst2.Sort();
                        Pagenumber = string.Join(", ", lst2.ToArray());
                        rObj.QC_Result = "Failed";
                        rObj.Comments = "Redact present in : " + Pagenumber;
                        rObj.CommentsWOPageNum = "Redact present in the Document";
                        rObj.PageNumbersLst = lst2;
                    }
                    else
                    {
                        rObj.QC_Result = "Passed";
                    }
                    if (!Flag1)
                    {
                        rObj.QC_Result = "Passed";
                        rObj.Comments = "Given page number is more then Dodument pages count";
                    }
                }
                if (!Flag2)
                {
                    rObj.QC_Result = "Passed";
                    rObj.Comments = "missing values in Check_names";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void FixWordRedact(RegOpsQC rObj, Document doc, List<RegOpsQC> chLst)
        {
            bool Flag = false;
            try
            {
                int pageNum = 0;
                string GivenData = string.Empty;
                string ReplaceData = string.Empty;
                string[] value = { };
                string[] value1 = { };
                chLst = chLst.Where(x => x.Parent_Check_ID == rObj.CheckList_ID).ToList();
                LayoutCollector layout = new LayoutCollector(doc);
                TextInfo textInfo = new CultureInfo("en-us", false).TextInfo;
                if (chLst.Count > 0)
                {
                    for (int k = 1; k < chLst.Count; k++)
                    {
                        chLst[k].Parent_Checklist_ID = rObj.CheckList_ID;
                        chLst[k].JID = rObj.JID;
                        chLst[k].Job_ID = rObj.Job_ID;
                        chLst[k].Folder_Name = rObj.Folder_Name;
                        chLst[k].File_Name = rObj.File_Name;
                        chLst[k].Created_ID = rObj.Created_ID;
                        for (int z = 0; z < chLst.Count; z++)
                        {
                            if (chLst[z].Check_Name == "Page Number" && chLst[z].Check_Type == 1)
                            {
                                pageNum = Convert.ToInt32(chLst[z].Check_Parameter);
                            }
                            else if (chLst[z].Check_Name == "Reference Text" && chLst[z].Check_Type == 1)
                            {
                                GivenData = chLst[z].Check_Parameter;
                                value = GivenData.Split(',');
                            }
                            else if (chLst[z].Check_Name == "Anonymization Text" && chLst[z].Check_Type == 1)
                            {
                                ReplaceData = chLst[z].Check_Parameter;
                                value1 = ReplaceData.Split(',');
                            }
                        }
                    }
                }
                if (GivenData != "" && ReplaceData != "")
                {
                    for (int i = 1; i <= doc.PageCount; i++)
                    {
                        if (i == pageNum && doc.PageCount >= pageNum)
                        {
                            FindReplaceOptions options = new FindReplaceOptions();
                            options.Direction = FindReplaceDirection.Forward;
                            for (int n = 0; n < value.Length; n++)
                            {
                                string ii = value[n];
                                Regex regex = new Regex(ii, RegexOptions.IgnoreCase);
                                Regex regex1 = new Regex(regex + "\\s\\w.*?\\s", RegexOptions.IgnoreCase);
                                foreach (Paragraph para in doc.GetChildNodes(NodeType.Paragraph, true))
                                {
                                    if (layout.GetStartPageIndex(para) == pageNum)
                                    {
                                        MatchCollection matchs = regex1.Matches(para.Range.Text);
                                        foreach (Match match in matchs)
                                        {
                                            string name = match.Value;
                                            name = name.Trim();
                                            string[] aa = name.Split(' ');
                                            string final = aa[1];
                                            for (int m = 0; m < value1.Length; m++)
                                            {
                                                string ii1 = value1[m];
                                                if (n == m)
                                                {
                                                    para.Range.Replace(final, ii1, options);
                                                    Flag = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (pageNum == 0)
                    {
                        FindReplaceOptions options = new FindReplaceOptions();
                        options.Direction = FindReplaceDirection.Forward;
                        for (int n = 0; n < value.Length; n++)
                        {
                            string ii = value[n];
                            Regex regex = new Regex(ii, RegexOptions.IgnoreCase);
                            Regex regex1 = new Regex(regex + "\\s\\w.*?\\s", RegexOptions.IgnoreCase);
                            foreach (Paragraph para in doc.GetChildNodes(NodeType.Paragraph, true))
                            {
                                MatchCollection matchs = regex1.Matches(para.Range.Text);
                                foreach (Match match in matchs)
                                {
                                    string name = match.Value;
                                    name = name.Trim();
                                    string[] aa = name.Split(' ');
                                    string final = aa[1];
                                    for (int m = 0; m < value1.Length; m++)
                                    {
                                        string ii1 = value1[m];
                                        if (n == m)
                                        {
                                            para.Range.Replace(final, ii1, options);
                                            Flag = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (Flag)
                {
                    rObj.Is_Fixed = 1;
                    rObj.QC_Result = "Failed";
                    rObj.Comments = rObj.Comments + ". Fixed";
                    rObj.CommentsWOPageNum = rObj.CommentsWOPageNum + ". Fixed";
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }

        public void ReportOnePageMultipleFigures(RegOpsQC rObj, Document doc)
        {
            rObj.QC_Result = string.Empty;
            rObj.Comments = string.Empty;
            try
            {
                bool flag = false;
                List<int> lstp = new List<int>();
                NodeCollection Shapes = doc.GetChildNodes(NodeType.Shape, true);
                LayoutCollector layout = new LayoutCollector(doc);
                List<int> Figureslist = new List<int>();
                List<int> Figurelist = new List<int>();
                List<int> pagelist = new List<int>();
                foreach (Shape sh in Shapes)
                {
                    Figureslist.Add(layout.GetStartPageIndex(sh));
                }
                for (int i = 1; i <= doc.PageCount; i++)
                {
                    foreach (int pages in Figureslist)
                    {
                        if (i == pages)
                        {
                            Figurelist.Add(pages);
                        }
                    }
                    if (Figurelist.Count > 1)
                    {
                        flag = true;
                        pagelist.Add(i);
                        Figurelist.Clear();
                    }
                    Figurelist.Clear();
                }
                List<int> lst2 = pagelist.Distinct().ToList();
                if (flag == true)
                {
                    lst2.Sort();
                    string Pagenumber = string.Join(", ", lst2.ToArray());
                    rObj.QC_Result = "Failed";
                    rObj.Comments = "single page multiple figures in : " + Pagenumber;
                    rObj.CommentsWOPageNum = "single page multiple figures";
                    rObj.PageNumbersLst = lst2;
                }
                else
                {
                    rObj.QC_Result = "Passed";
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.Error("JOB_ID:" + rObj.Job_ID + ", CHECK NAME: " + rObj.Check_Name + "\n" + ex);
                rObj.Job_Status = "Error";
                rObj.QC_Result = "Error";
                rObj.Comments = "Technical error: " + ex.Message;
            }
        }
    }
}


    







    
